{"id":"../node_modules/mathjs/src/expression/function/parser.js","dependencies":[{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/package.json","includedInParent":true,"mtime":1560273194535},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/src/.babelrc","includedInParent":true,"mtime":1559848325497},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/package.json","includedInParent":true,"mtime":1560201061975},{"name":"../../utils/factory","loc":{"line":1,"column":24},"parent":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/expression/function/parser.js","resolved":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/utils/factory.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParser = void 0;\n\nvar _factory = require(\"../../utils/factory\");\n\nconst name = 'parser';\nconst dependencies = ['typed', 'Parser'];\nconst createParser =\n/* #__PURE__ */\n(0, _factory.factory)(name, dependencies, ({\n  typed,\n  Parser\n}) => {\n  /**\n   * Create a parser. The function creates a new `math.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     const parser = new math.parser()\n   *\n   *     // evaluate expressions\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.evaluate('x = 7 / 2')                 // 3.5\n   *     parser.evaluate('x + 3')                     // 6.5\n   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)\n   *     parser.evaluate('f(2, 3)')                   // 8\n   *\n   *     // get and set variables and functions\n   *     const x = parser.get('x')                // 7\n   *     const f = parser.get('f')                // function\n   *     const g = f(3, 2)                        // 9\n   *     parser.set('h', 500)\n   *     const i = parser.evaluate('h / 2')       // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!'\n   *     })\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear()\n   *\n   * See also:\n   *\n   *    evaluate, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed(name, {\n    '': function () {\n      return new Parser();\n    }\n  });\n});\nexports.createParser = createParser;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":3,"column":0}},{"name":"name","generated":{"line":10,"column":6},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":3,"column":6}},{"generated":{"line":10,"column":10},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":3,"column":10}},{"generated":{"line":10,"column":13},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":3,"column":13}},{"generated":{"line":10,"column":21},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":0}},{"name":"dependencies","generated":{"line":11,"column":6},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":6}},{"generated":{"line":11,"column":18},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":18}},{"generated":{"line":11,"column":21},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":21}},{"generated":{"line":11,"column":22},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":22}},{"generated":{"line":11,"column":29},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":21}},{"generated":{"line":11,"column":31},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":31}},{"generated":{"line":11,"column":39},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":21}},{"generated":{"line":11,"column":40},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":7}},{"name":"createParser","generated":{"line":12,"column":6},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":13}},{"generated":{"line":12,"column":18},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":25}},{"generated":{"line":13,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":28}},{"generated":{"line":14,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":44}},{"name":"name","generated":{"line":14,"column":22},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":52}},{"generated":{"line":14,"column":26},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":44}},{"name":"dependencies","generated":{"line":14,"column":28},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":58}},{"generated":{"line":14,"column":40},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":44}},{"generated":{"line":14,"column":42},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":72}},{"generated":{"line":14,"column":43},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":73}},{"name":"typed","generated":{"line":15,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":75}},{"name":"typed","generated":{"line":15,"column":2},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":75}},{"generated":{"line":15,"column":7},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":73}},{"name":"Parser","generated":{"line":16,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":82}},{"name":"Parser","generated":{"line":16,"column":2},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":82}},{"generated":{"line":17,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":73}},{"generated":{"line":17,"column":1},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":72}},{"generated":{"line":17,"column":6},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":95}},{"generated":{"line":18,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":7,"column":2}},{"generated":{"line":61,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":2}},{"name":"typed","generated":{"line":61,"column":9},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":9}},{"generated":{"line":61,"column":14},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":14}},{"name":"name","generated":{"line":61,"column":15},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":15}},{"generated":{"line":61,"column":19},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":14}},{"generated":{"line":61,"column":21},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":21}},{"generated":{"line":62,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":51,"column":4}},{"generated":{"line":62,"column":8},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":51,"column":8}},{"generated":{"line":62,"column":20},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":51,"column":20}},{"generated":{"line":63,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":52,"column":6}},{"generated":{"line":63,"column":13},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":52,"column":13}},{"name":"Parser","generated":{"line":63,"column":17},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":52,"column":17}},{"generated":{"line":63,"column":23},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":52,"column":13}},{"generated":{"line":63,"column":25},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":52,"column":6}},{"generated":{"line":64,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":53,"column":5}},{"generated":{"line":65,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":21}},{"generated":{"line":65,"column":3},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":14}},{"generated":{"line":65,"column":4},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":50,"column":2}},{"generated":{"line":66,"column":0},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":55,"column":1}},{"generated":{"line":66,"column":1},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":44}},{"generated":{"line":66,"column":2},"source":"../node_modules/mathjs/src/expression/function/parser.js","original":{"line":6,"column":7}}],"sources":{"../node_modules/mathjs/src/expression/function/parser.js":"import { factory } from '../../utils/factory'\n\nconst name = 'parser'\nconst dependencies = ['typed', 'Parser']\n\nexport const createParser = /* #__PURE__ */ factory(name, dependencies, ({ typed, Parser }) => {\n  /**\n   * Create a parser. The function creates a new `math.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     const parser = new math.parser()\n   *\n   *     // evaluate expressions\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.evaluate('x = 7 / 2')                 // 3.5\n   *     parser.evaluate('x + 3')                     // 6.5\n   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)\n   *     parser.evaluate('f(2, 3)')                   // 8\n   *\n   *     // get and set variables and functions\n   *     const x = parser.get('x')                // 7\n   *     const f = parser.get('f')                // function\n   *     const g = f(3, 2)                        // 9\n   *     parser.set('h', 500)\n   *     const i = parser.evaluate('h / 2')       // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!'\n   *     })\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear()\n   *\n   * See also:\n   *\n   *    evaluate, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed(name, {\n    '': function () {\n      return new Parser()\n    }\n  })\n})\n"},"lineCount":null}},"error":null,"hash":"07e248f75b886386c6cbff01104d8160","cacheData":{"env":{}}}