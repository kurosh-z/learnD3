{"id":"../node_modules/mathjs/src/type/chain/function/chain.js","dependencies":[{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/package.json","includedInParent":true,"mtime":1560273194535},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/src/.babelrc","includedInParent":true,"mtime":1559848325497},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/package.json","includedInParent":true,"mtime":1560201061975},{"name":"../../../utils/factory","loc":{"line":1,"column":24},"parent":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/type/chain/function/chain.js","resolved":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/utils/factory.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createChain = void 0;\n\nvar _factory = require(\"../../../utils/factory\");\n\nconst name = 'chain';\nconst dependencies = ['typed', 'Chain'];\nconst createChain =\n/* #__PURE__ */\n(0, _factory.factory)(name, dependencies, ({\n  typed,\n  Chain\n}) => {\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done()     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done()     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.Chain} The created chain\n   */\n  return typed(name, {\n    '': function () {\n      return new Chain();\n    },\n    'any': function (value) {\n      return new Chain(value);\n    }\n  });\n});\nexports.createChain = createChain;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":3,"column":0}},{"name":"name","generated":{"line":10,"column":6},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":3,"column":6}},{"generated":{"line":10,"column":10},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":3,"column":10}},{"generated":{"line":10,"column":13},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":3,"column":13}},{"generated":{"line":10,"column":20},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":0}},{"name":"dependencies","generated":{"line":11,"column":6},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":6}},{"generated":{"line":11,"column":18},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":18}},{"generated":{"line":11,"column":21},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":21}},{"generated":{"line":11,"column":22},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":22}},{"generated":{"line":11,"column":29},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":21}},{"generated":{"line":11,"column":31},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":31}},{"generated":{"line":11,"column":38},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":21}},{"generated":{"line":11,"column":39},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":7}},{"name":"createChain","generated":{"line":12,"column":6},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":13}},{"generated":{"line":12,"column":17},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":24}},{"generated":{"line":13,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":27}},{"generated":{"line":14,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":43}},{"name":"name","generated":{"line":14,"column":22},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":51}},{"generated":{"line":14,"column":26},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":43}},{"name":"dependencies","generated":{"line":14,"column":28},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":57}},{"generated":{"line":14,"column":40},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":43}},{"generated":{"line":14,"column":42},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":71}},{"generated":{"line":14,"column":43},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":72}},{"name":"typed","generated":{"line":15,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":74}},{"name":"typed","generated":{"line":15,"column":2},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":74}},{"generated":{"line":15,"column":7},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":72}},{"name":"Chain","generated":{"line":16,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":81}},{"name":"Chain","generated":{"line":16,"column":2},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":81}},{"generated":{"line":17,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":72}},{"generated":{"line":17,"column":1},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":71}},{"generated":{"line":17,"column":6},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":93}},{"generated":{"line":18,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":7,"column":2}},{"generated":{"line":53,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":2}},{"name":"typed","generated":{"line":53,"column":9},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":9}},{"generated":{"line":53,"column":14},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":14}},{"name":"name","generated":{"line":53,"column":15},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":15}},{"generated":{"line":53,"column":19},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":14}},{"generated":{"line":53,"column":21},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":21}},{"generated":{"line":54,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":43,"column":4}},{"generated":{"line":54,"column":8},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":43,"column":8}},{"generated":{"line":54,"column":20},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":43,"column":20}},{"generated":{"line":55,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":44,"column":6}},{"generated":{"line":55,"column":13},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":44,"column":13}},{"name":"Chain","generated":{"line":55,"column":17},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":44,"column":17}},{"generated":{"line":55,"column":22},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":44,"column":13}},{"generated":{"line":55,"column":24},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":44,"column":6}},{"generated":{"line":56,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":45,"column":5}},{"generated":{"line":56,"column":5},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":21}},{"generated":{"line":57,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":47,"column":4}},{"generated":{"line":57,"column":11},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":47,"column":11}},{"name":"value","generated":{"line":57,"column":21},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":47,"column":21}},{"generated":{"line":57,"column":26},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":47,"column":11}},{"generated":{"line":57,"column":28},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":47,"column":28}},{"generated":{"line":58,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":6}},{"generated":{"line":58,"column":13},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":13}},{"name":"Chain","generated":{"line":58,"column":17},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":17}},{"generated":{"line":58,"column":22},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":13}},{"name":"value","generated":{"line":58,"column":23},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":23}},{"generated":{"line":58,"column":28},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":13}},{"generated":{"line":58,"column":29},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":48,"column":6}},{"generated":{"line":59,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":49,"column":5}},{"generated":{"line":60,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":21}},{"generated":{"line":60,"column":3},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":14}},{"generated":{"line":60,"column":4},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":42,"column":2}},{"generated":{"line":61,"column":0},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":51,"column":1}},{"generated":{"line":61,"column":1},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":43}},{"generated":{"line":61,"column":2},"source":"../node_modules/mathjs/src/type/chain/function/chain.js","original":{"line":6,"column":7}}],"sources":{"../node_modules/mathjs/src/type/chain/function/chain.js":"import { factory } from '../../../utils/factory'\n\nconst name = 'chain'\nconst dependencies = ['typed', 'Chain']\n\nexport const createChain = /* #__PURE__ */ factory(name, dependencies, ({ typed, Chain }) => {\n  /**\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing `chain.done()`, which returns\n   * the final value.\n   *\n   * The chain has a number of special functions:\n   *\n   * - `done()`     Finalize the chain and return the chain's value.\n   * - `valueOf()`  The same as `done()`\n   * - `toString()` Executes `math.format()` onto the chain's value, returning\n   *                a string representation of the value.\n   *\n   * Syntax:\n   *\n   *    math.chain(value)\n   *\n   * Examples:\n   *\n   *     math.chain(3)\n   *         .add(4)\n   *         .subtract(2)\n   *         .done()     // 5\n   *\n   *     math.chain( [[1, 2], [3, 4]] )\n   *         .subset(math.index(0, 0), 8)\n   *         .multiply(3)\n   *         .done()     // [[24, 6], [9, 12]]\n   *\n   * @param {*} [value]   A value of any type on which to start a chained operation.\n   * @return {math.Chain} The created chain\n   */\n  return typed(name, {\n    '': function () {\n      return new Chain()\n    },\n\n    'any': function (value) {\n      return new Chain(value)\n    }\n  })\n})\n"},"lineCount":null}},"error":null,"hash":"a2510cc0a19765658f9884d33fa8a712","cacheData":{"env":{}}}