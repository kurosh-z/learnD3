{"id":"../node_modules/mathjs/src/expression/function/compile.js","dependencies":[{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/package.json","includedInParent":true,"mtime":1560273194535},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/src/.babelrc","includedInParent":true,"mtime":1559848325497},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/package.json","includedInParent":true,"mtime":1560201061975},{"name":"../../utils/collection","loc":{"line":1,"column":24},"parent":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/expression/function/compile.js","resolved":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/utils/collection.js"},{"name":"../../utils/factory","loc":{"line":2,"column":24},"parent":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/expression/function/compile.js","resolved":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/src/utils/factory.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCompile = void 0;\n\nvar _collection = require(\"../../utils/collection\");\n\nvar _factory = require(\"../../utils/factory\");\n\nconst name = 'compile';\nconst dependencies = ['typed', 'parse'];\nconst createCompile =\n/* #__PURE__ */\n(0, _factory.factory)(name, dependencies, ({\n  typed,\n  parse\n}) => {\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\n   *     code1.evaluate() // 5\n   *\n   *     let scope = {a: 3, b: 4}\n   *     const code2 = math.compile('a * b') // 12\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].evaluate() // 12\n   *\n   * See also:\n   *\n   *    parse, evaluate\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    'string': function (expr) {\n      return parse(expr).compile();\n    },\n    'Array | Matrix': function (expr) {\n      return (0, _collection.deepMap)(expr, function (entry) {\n        return parse(entry).compile();\n      });\n    }\n  });\n});\nexports.createCompile = createCompile;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":4,"column":0}},{"name":"name","generated":{"line":12,"column":6},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":4,"column":6}},{"generated":{"line":12,"column":10},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":4,"column":10}},{"generated":{"line":12,"column":13},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":4,"column":13}},{"generated":{"line":12,"column":22},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":4,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":0}},{"name":"dependencies","generated":{"line":13,"column":6},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":6}},{"generated":{"line":13,"column":18},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":18}},{"generated":{"line":13,"column":21},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":21}},{"generated":{"line":13,"column":22},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":22}},{"generated":{"line":13,"column":29},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":21}},{"generated":{"line":13,"column":31},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":31}},{"generated":{"line":13,"column":38},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":21}},{"generated":{"line":13,"column":39},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":7}},{"name":"createCompile","generated":{"line":14,"column":6},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":13}},{"generated":{"line":14,"column":19},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":26}},{"generated":{"line":15,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":29}},{"generated":{"line":16,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":45}},{"name":"name","generated":{"line":16,"column":22},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":53}},{"generated":{"line":16,"column":26},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":45}},{"name":"dependencies","generated":{"line":16,"column":28},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":59}},{"generated":{"line":16,"column":40},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":45}},{"generated":{"line":16,"column":42},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":73}},{"generated":{"line":16,"column":43},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":74}},{"name":"typed","generated":{"line":17,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":76}},{"name":"typed","generated":{"line":17,"column":2},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":76}},{"generated":{"line":17,"column":7},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":74}},{"name":"parse","generated":{"line":18,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":83}},{"name":"parse","generated":{"line":18,"column":2},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":83}},{"generated":{"line":19,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":74}},{"generated":{"line":19,"column":1},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":73}},{"generated":{"line":19,"column":6},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":95}},{"generated":{"line":20,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":8,"column":2}},{"generated":{"line":54,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":2}},{"name":"typed","generated":{"line":54,"column":9},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":9}},{"generated":{"line":54,"column":14},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":14}},{"name":"name","generated":{"line":54,"column":15},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":15}},{"generated":{"line":54,"column":19},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":14}},{"generated":{"line":54,"column":21},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":21}},{"generated":{"line":55,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":43,"column":4}},{"generated":{"line":55,"column":14},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":43,"column":14}},{"name":"expr","generated":{"line":55,"column":24},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":43,"column":24}},{"generated":{"line":55,"column":28},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":43,"column":14}},{"generated":{"line":55,"column":30},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":43,"column":30}},{"generated":{"line":56,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":6}},{"name":"parse","generated":{"line":56,"column":13},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":13}},{"generated":{"line":56,"column":18},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":18}},{"name":"expr","generated":{"line":56,"column":19},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":19}},{"generated":{"line":56,"column":23},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":18}},{"generated":{"line":56,"column":24},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":13}},{"name":"compile","generated":{"line":56,"column":25},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":25}},{"generated":{"line":56,"column":32},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":13}},{"generated":{"line":56,"column":34},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":44,"column":6}},{"generated":{"line":57,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":45,"column":5}},{"generated":{"line":57,"column":5},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":21}},{"generated":{"line":58,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":47,"column":4}},{"generated":{"line":58,"column":22},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":47,"column":22}},{"name":"expr","generated":{"line":58,"column":32},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":47,"column":32}},{"generated":{"line":58,"column":36},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":47,"column":22}},{"generated":{"line":58,"column":38},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":47,"column":38}},{"generated":{"line":59,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":6}},{"generated":{"line":59,"column":13},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":13}},{"name":"expr","generated":{"line":59,"column":38},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":21}},{"generated":{"line":59,"column":42},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":13}},{"generated":{"line":59,"column":44},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":27}},{"name":"entry","generated":{"line":59,"column":54},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":37}},{"generated":{"line":59,"column":59},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":27}},{"generated":{"line":59,"column":61},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":44}},{"generated":{"line":60,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":8}},{"name":"parse","generated":{"line":60,"column":15},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":15}},{"generated":{"line":60,"column":20},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":20}},{"name":"entry","generated":{"line":60,"column":21},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":21}},{"generated":{"line":60,"column":26},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":20}},{"generated":{"line":60,"column":27},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":15}},{"name":"compile","generated":{"line":60,"column":28},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":28}},{"generated":{"line":60,"column":35},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":15}},{"generated":{"line":60,"column":37},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":49,"column":8}},{"generated":{"line":61,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":50,"column":7}},{"generated":{"line":61,"column":7},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":13}},{"generated":{"line":61,"column":8},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":48,"column":6}},{"generated":{"line":62,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":51,"column":5}},{"generated":{"line":63,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":21}},{"generated":{"line":63,"column":3},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":14}},{"generated":{"line":63,"column":4},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":42,"column":2}},{"generated":{"line":64,"column":0},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":53,"column":1}},{"generated":{"line":64,"column":1},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":45}},{"generated":{"line":64,"column":2},"source":"../node_modules/mathjs/src/expression/function/compile.js","original":{"line":7,"column":7}}],"sources":{"../node_modules/mathjs/src/expression/function/compile.js":"import { deepMap } from '../../utils/collection'\nimport { factory } from '../../utils/factory'\n\nconst name = 'compile'\nconst dependencies = ['typed', 'parse']\n\nexport const createCompile = /* #__PURE__ */ factory(name, dependencies, ({ typed, parse }) => {\n  /**\n   * Parse and compile an expression.\n   * Returns a an object with a function `evaluate([scope])` to evaluate the\n   * compiled expression.\n   *\n   * Syntax:\n   *\n   *     math.compile(expr)                       // returns one node\n   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes\n   *\n   * Examples:\n   *\n   *     const code1 = math.compile('sqrt(3^2 + 4^2)')\n   *     code1.evaluate() // 5\n   *\n   *     let scope = {a: 3, b: 4}\n   *     const code2 = math.compile('a * b') // 12\n   *     code2.evaluate(scope) // 12\n   *     scope.a = 5\n   *     code2.evaluate(scope) // 20\n   *\n   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])\n   *     nodes[2].evaluate() // 12\n   *\n   * See also:\n   *\n   *    parse, evaluate\n   *\n   * @param {string | string[] | Array | Matrix} expr\n   *            The expression to be compiled\n   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code\n   *            An object with the compiled expression\n   * @throws {Error}\n   */\n  return typed(name, {\n    'string': function (expr) {\n      return parse(expr).compile()\n    },\n\n    'Array | Matrix': function (expr) {\n      return deepMap(expr, function (entry) {\n        return parse(entry).compile()\n      })\n    }\n  })\n})\n"},"lineCount":null}},"error":null,"hash":"34cd73d0b06e0bba211ab1c4b1b50fe7","cacheData":{"env":{}}}