{"id":"../node_modules/mathjs/src/core/config.js","dependencies":[{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/package.json","includedInParent":true,"mtime":1560273194535},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/src/.babelrc","includedInParent":true,"mtime":1559848325497},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/package.json","includedInParent":true,"mtime":1560201061975}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_CONFIG = void 0;\nconst DEFAULT_CONFIG = {\n  // minimum relative difference between two compared values,\n  // used by all comparison functions\n  epsilon: 1e-12,\n  // type of default matrix output. Choose 'matrix' (default) or 'array'\n  matrix: 'Matrix',\n  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n  number: 'number',\n  // number of significant digits in BigNumbers\n  precision: 64,\n  // predictable output type of functions. When true, output type depends only\n  // on the input types. When false (default), output type can vary depending\n  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n  // predictable is false, and returns `NaN` when true.\n  predictable: false,\n  // random seed for seeded pseudo random number generation\n  // null = randomly seed\n  randomSeed: null\n};\nexports.DEFAULT_CONFIG = DEFAULT_CONFIG;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":7}},{"name":"DEFAULT_CONFIG","generated":{"line":7,"column":6},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":13}},{"generated":{"line":7,"column":20},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":27}},{"generated":{"line":7,"column":23},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":8,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":2,"column":2}},{"generated":{"line":9,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":3,"column":2}},{"name":"epsilon","generated":{"line":10,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":4,"column":2}},{"name":"epsilon","generated":{"line":10,"column":2},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":4,"column":2}},{"generated":{"line":10,"column":9},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":4,"column":9}},{"generated":{"line":10,"column":11},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":4,"column":11}},{"generated":{"line":10,"column":16},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":11,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":6,"column":2}},{"name":"matrix","generated":{"line":12,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":7,"column":2}},{"name":"matrix","generated":{"line":12,"column":2},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":7,"column":2}},{"generated":{"line":12,"column":8},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":7,"column":8}},{"generated":{"line":12,"column":10},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":7,"column":10}},{"generated":{"line":12,"column":18},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":13,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":9,"column":2}},{"name":"number","generated":{"line":14,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":10,"column":2}},{"name":"number","generated":{"line":14,"column":2},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":10,"column":2}},{"generated":{"line":14,"column":8},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":10,"column":8}},{"generated":{"line":14,"column":10},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":10,"column":10}},{"generated":{"line":14,"column":18},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":15,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":12,"column":2}},{"name":"precision","generated":{"line":16,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":13,"column":2}},{"name":"precision","generated":{"line":16,"column":2},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":13,"column":2}},{"generated":{"line":16,"column":11},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":13,"column":11}},{"generated":{"line":16,"column":13},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":13,"column":13}},{"generated":{"line":16,"column":15},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":17,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":15,"column":2}},{"generated":{"line":18,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":16,"column":2}},{"generated":{"line":19,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":17,"column":2}},{"generated":{"line":20,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":18,"column":2}},{"name":"predictable","generated":{"line":21,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":19,"column":2}},{"name":"predictable","generated":{"line":21,"column":2},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":19,"column":2}},{"generated":{"line":21,"column":13},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":19,"column":13}},{"generated":{"line":21,"column":15},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":19,"column":15}},{"generated":{"line":21,"column":20},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":22,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":21,"column":2}},{"generated":{"line":23,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":22,"column":2}},{"name":"randomSeed","generated":{"line":24,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":23,"column":2}},{"name":"randomSeed","generated":{"line":24,"column":2},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":23,"column":2}},{"generated":{"line":24,"column":12},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":23,"column":12}},{"generated":{"line":24,"column":14},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":23,"column":14}},{"generated":{"line":25,"column":0},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":30}},{"generated":{"line":25,"column":1},"source":"../node_modules/mathjs/src/core/config.js","original":{"line":1,"column":7}}],"sources":{"../node_modules/mathjs/src/core/config.js":"export const DEFAULT_CONFIG = {\n  // minimum relative difference between two compared values,\n  // used by all comparison functions\n  epsilon: 1e-12,\n\n  // type of default matrix output. Choose 'matrix' (default) or 'array'\n  matrix: 'Matrix',\n\n  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction\n  number: 'number',\n\n  // number of significant digits in BigNumbers\n  precision: 64,\n\n  // predictable output type of functions. When true, output type depends only\n  // on the input types. When false (default), output type can vary depending\n  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when\n  // predictable is false, and returns `NaN` when true.\n  predictable: false,\n\n  // random seed for seeded pseudo random number generation\n  // null = randomly seed\n  randomSeed: null\n}\n"},"lineCount":null}},"error":null,"hash":"70c949462058a77e3c34d1861eb77f4d","cacheData":{"env":{}}}