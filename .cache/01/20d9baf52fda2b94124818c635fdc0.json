{"id":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","dependencies":[{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/package.json","includedInParent":true,"mtime":1560273194535},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/src/.babelrc","includedInParent":true,"mtime":1559848325497},{"name":"/Users/kurosh/Documents/MyGithub/LearnD3/node_modules/mathjs/package.json","includedInParent":true,"mtime":1560201061975}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapDocs = void 0;\nconst mapDocs = {\n  'name': 'map',\n  'category': 'Matrix',\n  'syntax': ['map(x, callback)'],\n  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n  'examples': ['map([1, 2, 3], square)'],\n  'seealso': ['filter', 'forEach']\n};\nexports.mapDocs = mapDocs;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7}},{"name":"mapDocs","generated":{"line":7,"column":6},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":13}},{"generated":{"line":7,"column":13},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":20}},{"generated":{"line":7,"column":16},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":8,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":2,"column":2}},{"generated":{"line":8,"column":10},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":2,"column":10}},{"generated":{"line":8,"column":15},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":9,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":3,"column":2}},{"generated":{"line":9,"column":14},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":3,"column":14}},{"generated":{"line":9,"column":22},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":10,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":4,"column":2}},{"generated":{"line":10,"column":12},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":4,"column":12}},{"generated":{"line":10,"column":13},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":5,"column":4}},{"generated":{"line":10,"column":31},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":4,"column":12}},{"generated":{"line":10,"column":32},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":11,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":7,"column":2}},{"generated":{"line":11,"column":17},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":7,"column":17}},{"generated":{"line":11,"column":133},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":12,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":8,"column":2}},{"generated":{"line":12,"column":14},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":8,"column":14}},{"generated":{"line":12,"column":15},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":9,"column":4}},{"generated":{"line":12,"column":39},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":8,"column":14}},{"generated":{"line":12,"column":40},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":13,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":11,"column":2}},{"generated":{"line":13,"column":13},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":11,"column":13}},{"generated":{"line":13,"column":14},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":11,"column":14}},{"generated":{"line":13,"column":22},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":11,"column":13}},{"generated":{"line":13,"column":24},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":11,"column":24}},{"generated":{"line":13,"column":33},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":11,"column":13}},{"generated":{"line":14,"column":0},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":23}},{"generated":{"line":14,"column":1},"source":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","original":{"line":1,"column":7}}],"sources":{"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js":"export const mapDocs = {\n  'name': 'map',\n  'category': 'Matrix',\n  'syntax': [\n    'map(x, callback)'\n  ],\n  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',\n  'examples': [\n    'map([1, 2, 3], square)'\n  ],\n  'seealso': ['filter', 'forEach']\n}\n"},"lineCount":null}},"error":null,"hash":"9e1d6d5e9c8fafdbed0aaab4491f3bd4","cacheData":{"env":{}}}