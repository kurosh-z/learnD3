// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/d3/build/d3.js":[function(require,module,exports) {
var define;
var global = arguments[3];
// https://d3js.org Version 4.2.8. Copyright 2016 Mike Bostock.
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var version = "4.2.8";

var ascending = function(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
};

var bisector = function(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
};

function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

var descending = function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

var number = function(x) {
  return x === null ? NaN : +x;
};

var variance = function(array, f) {
  var n = array.length,
      m = 0,
      a,
      d,
      s = 0,
      i = -1,
      j = 0;

  if (f == null) {
    while (++i < n) {
      if (!isNaN(a = number(array[i]))) {
        d = a - m;
        m += d / ++j;
        s += d * (a - m);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(a = number(f(array[i], i, array)))) {
        d = a - m;
        m += d / ++j;
        s += d * (a - m);
      }
    }
  }

  if (j > 1) return s / (j - 1);
};

var deviation = function(array, f) {
  var v = variance(array, f);
  return v ? Math.sqrt(v) : v;
};

var extent = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b,
      c;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }
    while (++i < n) if ((b = array[i]) != null) {
      if (a > b) a = b;
      if (c < b) c = b;
    }
  }

  else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }
    while (++i < n) if ((b = f(array[i], i, array)) != null) {
      if (a > b) a = b;
      if (c < b) c = b;
    }
  }

  return [a, c];
};

var array = Array.prototype;

var slice = array.slice;
var map = array.map;

var constant$1 = function(x) {
  return function() {
    return x;
  };
};

var identity = function(x) {
  return x;
};

var range = function(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
};

var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);

var ticks = function(start, stop, count) {
  var step = tickStep(start, stop, count);
  return range(
    Math.ceil(start / step) * step,
    Math.floor(stop / step) * step + step / 2, // inclusive
    step
  );
};

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

var sturges = function(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
};

var histogram = function() {
  var value = identity,
      domain = extent,
      threshold = sturges;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] >= x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[bisectRight(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant$1([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$1(slice.call(_)) : constant$1(_), histogram) : threshold;
  };

  return histogram;
};

var threshold = function(array, p, f) {
  if (f == null) f = number;
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
  if (p >= 1) return +f(array[n - 1], n - 1, array);
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = +f(array[i], i, array),
      b = +f(array[i + 1], i + 1, array);
  return a + (b - a) * (h - i);
};

var freedmanDiaconis = function(values, min, max) {
  values = map.call(values, number).sort(ascending);
  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
};

var scott = function(values, min, max) {
  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
};

var max = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = array[i]) != null && b > a) a = b;
  }

  else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;
  }

  return a;
};

var mean = function(array, f) {
  var s = 0,
      n = array.length,
      a,
      i = -1,
      j = n;

  if (f == null) {
    while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;
  }

  else {
    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;
  }

  if (j) return s / j;
};

var median = function(array, f) {
  var numbers = [],
      n = array.length,
      a,
      i = -1;

  if (f == null) {
    while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
  }

  else {
    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
  }

  return threshold(numbers.sort(ascending), 0.5);
};

var merge = function(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
};

var min = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b;

  if (f == null) {
    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = array[i]) != null && a > b) a = b;
  }

  else {
    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
    while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;
  }

  return a;
};

var pairs = function(array) {
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = [p, p = array[++i]];
  return pairs;
};

var permute = function(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
};

var scan = function(array, compare) {
  if (!(n = array.length)) return;
  var i = 0,
      n,
      j = 0,
      xi,
      xj = array[j];

  if (!compare) compare = ascending;

  while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;

  if (compare(xj, xj) === 0) return j;
};

var shuffle = function(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
};

var sum = function(array, f) {
  var s = 0,
      n = array.length,
      a,
      i = -1;

  if (f == null) {
    while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.
  }

  else {
    while (++i < n) if (a = +f(array[i], i, array)) s += a;
  }

  return s;
};

var transpose = function(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
};

function length(d) {
  return d.length;
}

var zip = function() {
  return transpose(arguments);
};

var prefix = "$";

function Map() {}

Map.prototype = map$1.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map$1(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

var nest = function() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) return rollup != null
        ? rollup(array) : (sortValues != null
        ? array.sort(sortValues)
        : array);

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = map$1(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();
    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
};

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return map$1();
}

function setMap(map, key, value) {
  map.set(key, value);
}

function Set() {}

var proto = map$1.prototype;

Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

var keys = function(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
};

var values = function(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
};

var entries = function(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
};

var uniform = function(min, max) {
  min = min == null ? 0 : +min;
  max = max == null ? 1 : +max;
  if (arguments.length === 1) max = min, min = 0;
  else max -= min;
  return function() {
    return Math.random() * max + min;
  };
};

var normal = function(mu, sigma) {
  var x, r;
  mu = mu == null ? 0 : +mu;
  sigma = sigma == null ? 1 : +sigma;
  return function() {
    var y;

    // If available, use the second previously-generated uniform random.
    if (x != null) y = x, x = null;

    // Otherwise, generate a new x and y.
    else do {
      x = Math.random() * 2 - 1;
      y = Math.random() * 2 - 1;
      r = x * x + y * y;
    } while (!r || r > 1);

    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
  };
};

var logNormal = function() {
  var randomNormal = normal.apply(this, arguments);
  return function() {
    return Math.exp(randomNormal());
  };
};

var irwinHall = function(n) {
  return function() {
    for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
    return sum;
  };
};

var bates = function(n) {
  var randomIrwinHall = irwinHall(n);
  return function() {
    return randomIrwinHall() / n;
  };
};

var exponential = function(lambda) {
  return function() {
    return -Math.log(1 - Math.random()) / lambda;
  };
};

function linear(t) {
  return +t;
}

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);

var pi = Math.PI;
var halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

var b1 = 4 / 11;
var b2 = 6 / 11;
var b3 = 8 / 11;
var b4 = 3 / 4;
var b5 = 9 / 11;
var b6 = 10 / 11;
var b7 = 15 / 16;
var b8 = 21 / 22;
var b9 = 63 / 64;
var b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);

var tau = 2 * Math.PI;
var amplitude = 1;
var period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);

var area = function(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
};

var centroid = function(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
};

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
var cross = function(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
};

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
}

// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

var hull = function(points) {
  if ((n = points.length) < 3) return null;

  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
  sortedPoints.sort(lexicographicOrder);
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints);

  // Construct the hull polygon, removing possible duplicate endpoints.
  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = [];

  // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
};

var contains = function(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0], y = point[1],
      x0 = p[0], y0 = p[1],
      x1, y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
};

var length$1 = function(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
};

var pi$1 = Math.PI;
var tau$1 = 2 * pi$1;
var epsilon = 1e-6;
var tauEpsilon = tau$1 - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = [];
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._.push("M", this._x0 = this._x1 = +x, ",", this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._.push("Z");
    }
  },
  lineTo: function(x, y) {
    this._.push("L", this._x1 = +x, ",", this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._.push("Q", +x1, ",", +y1, ",", this._x1 = +x, ",", this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._.push("C", +x1, ",", +y1, ",", +x2, ",", +y2, ",", this._x1 = +x, ",", this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._.push(
        "M", this._x1 = x1, ",", this._y1 = y1
      );
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) {}

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._.push(
        "L", this._x1 = x1, ",", this._y1 = y1
      );
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon) {
        this._.push(
          "L", x1 + t01 * x01, ",", y1 + t01 * y01
        );
      }

      this._.push(
        "A", r, ",", r, ",0,0,", +(y01 * x20 > x01 * y20), ",", this._x1 = x1 + t21 * x21, ",", this._y1 = y1 + t21 * y21
      );
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._.push(
        "M", x0, ",", y0
      );
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._.push(
        "L", x0, ",", y0
      );
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._.push(
        "A", r, ",", r, ",0,1,", cw, ",", x - dx, ",", y - dy,
        "A", r, ",", r, ",0,1,", cw, ",", this._x1 = x0, ",", this._y1 = y0
      );
    }

    // Otherwise, draw an arc!
    else {
      if (da < 0) da = da % tau$1 + tau$1;
      this._.push(
        "A", r, ",", r, ",0,", +(da >= pi$1), ",", cw, ",", this._x1 = x + r * Math.cos(a1), ",", this._y1 = y + r * Math.sin(a1)
      );
    }
  },
  rect: function(x, y, w, h) {
    this._.push("M", this._x0 = this._x1 = +x, ",", this._y0 = this._y1 = +y, "h", +w, "v", +h, "h", -w, "Z");
  },
  toString: function() {
    return this._.join("");
  }
};

var tree_add = function(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
};

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {data: d},
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return tree._root = leaf, tree;

  // Find the existing leaf for the new point, or add it.
  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  }

  // Is the new point is exactly coincident with the existing point?
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

  // Otherwise, split the leaf node until the old and new point are separated.
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d, i, n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  // Compute the points and their extent.
  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  // If there were no (valid) points, inherit the existing extent.
  if (x1 < x0) x0 = this._x0, x1 = this._x1;
  if (y1 < y0) y0 = this._y0, y1 = this._y1;

  // Expand the tree to cover the new points.
  this.cover(x0, y0).cover(x1, y1);

  // Add the new points.
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}

var tree_cover = function(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1;

  // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  }

  // Otherwise, double repeatedly to cover.
  else if (x0 > x || x > x1 || y0 > y || y > y1) {
    var z = x1 - x0,
        node = this._root,
        parent,
        i;

    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
      case 0: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
        break;
      }
      case 1: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
        break;
      }
      case 2: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
        break;
      }
      case 3: {
        do parent = new Array(4), parent[i] = node, node = parent;
        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
        break;
      }
    }

    if (this._root && this._root.length) this._root = node;
  }

  // If the quadtree covers the point already, just return.
  else return this;

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
};

var tree_data = function() {
  var data = [];
  this.visit(function(node) {
    if (!node.length) do data.push(node.data); while (node = node.next)
  });
  return data;
};

var tree_extent = function(_) {
  return arguments.length
      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
};

var Quad = function(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
};

var tree_find = function(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;

  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;
  else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {

    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node)
        || (x1 = q.x0) > x3
        || (y1 = q.y0) > y3
        || (x2 = q.x1) < x0
        || (y2 = q.y1) < y0) continue;

    // Bisect the current quadrant.
    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;

      quads.push(
        new Quad(node[3], xm, ym, x2, y2),
        new Quad(node[2], x1, ym, xm, y2),
        new Quad(node[1], xm, y1, x2, ym),
        new Quad(node[0], x1, y1, xm, ym)
      );

      // Visit the closest quadrant first.
      if (i = (y >= ym) << 1 | (x >= xm)) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    }

    // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
      var dx = x - +this._x.call(null, node.data),
          dy = y - +this._y.call(null, node.data),
          d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x - d, y0 = y - d;
        x3 = x + d, y3 = y + d;
        data = node.data;
      }
    }
  }

  return data;
};

var tree_remove = function(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return this;

  // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.
  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
  }

  // Find the point to remove.
  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
  if (next = node.next) delete node.next;

  // If there are multiple coincident points, remove just the point.
  if (previous) return (next ? previous.next = next : delete previous.next), this;

  // If this is the root point, remove it.
  if (!parent) return this._root = next, this;

  // Remove this leaf.
  next ? parent[i] = next : delete parent[i];

  // If the parent now contains exactly one leaf, collapse superfluous parents.
  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
      && node === (parent[3] || parent[2] || parent[1] || parent[0])
      && !node.length) {
    if (retainer) retainer[j] = node;
    else this._root = node;
  }

  return this;
};

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
  return this;
}

var tree_root = function() {
  return this._root;
};

var tree_size = function() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length) do ++size; while (node = node.next)
  });
  return size;
};

var tree_visit = function(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
    }
  }
  return this;
};

var tree_visitAfter = function(callback) {
  var quads = [], next = [], q;
  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
};

function defaultX(d) {
  return d[0];
}

var tree_x = function(_) {
  return arguments.length ? (this._x = _, this) : this._x;
};

function defaultY(d) {
  return d[1];
}

var tree_y = function(_) {
  return arguments.length ? (this._y = _, this) : this._y;
};

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {data: leaf.data}, next = copy;
  while (leaf = leaf.next) next = next.next = {data: leaf.data};
  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function() {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;

  if (!node) return copy;

  if (!node.length) return copy._root = leaf_copy(node), copy;

  nodes = [{source: node, target: copy._root = new Array(4)}];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
        else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = tree_add;
treeProto.addAll = addAll;
treeProto.cover = tree_cover;
treeProto.data = tree_data;
treeProto.extent = tree_extent;
treeProto.find = tree_find;
treeProto.remove = tree_remove;
treeProto.removeAll = removeAll;
treeProto.root = tree_root;
treeProto.size = tree_size;
treeProto.visit = tree_visit;
treeProto.visitAfter = tree_visitAfter;
treeProto.x = tree_x;
treeProto.y = tree_y;

var slice$1 = [].slice;

var noabort = {};

function Queue(size) {
  if (!(size >= 1)) throw new Error;
  this._size = size;
  this._call =
  this._error = null;
  this._tasks = [];
  this._data = [];
  this._waiting =
  this._active =
  this._ended =
  this._start = 0; // inside a synchronous task callback?
}

Queue.prototype = queue.prototype = {
  constructor: Queue,
  defer: function(callback) {
    if (typeof callback !== "function" || this._call) throw new Error;
    if (this._error != null) return this;
    var t = slice$1.call(arguments, 1);
    t.push(callback);
    ++this._waiting, this._tasks.push(t);
    poke(this);
    return this;
  },
  abort: function() {
    if (this._error == null) abort(this, new Error("abort"));
    return this;
  },
  await: function(callback) {
    if (typeof callback !== "function" || this._call) throw new Error;
    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
    maybeNotify(this);
    return this;
  },
  awaitAll: function(callback) {
    if (typeof callback !== "function" || this._call) throw new Error;
    this._call = callback;
    maybeNotify(this);
    return this;
  }
};

function poke(q) {
  if (!q._start) {
    try { start(q); } // let the current task complete
    catch (e) {
      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
      else if (!q._data) throw e; // await callback errored synchronously
    }
  }
}

function start(q) {
  while (q._start = q._waiting && q._active < q._size) {
    var i = q._ended + q._active,
        t = q._tasks[i],
        j = t.length - 1,
        c = t[j];
    t[j] = end(q, i);
    --q._waiting, ++q._active;
    t = c.apply(null, t);
    if (!q._tasks[i]) continue; // task finished synchronously
    q._tasks[i] = t || noabort;
  }
}

function end(q, i) {
  return function(e, r) {
    if (!q._tasks[i]) return; // ignore multiple callbacks
    --q._active, ++q._ended;
    q._tasks[i] = null;
    if (q._error != null) return; // ignore secondary errors
    if (e != null) {
      abort(q, e);
    } else {
      q._data[i] = r;
      if (q._waiting) poke(q);
      else maybeNotify(q);
    }
  };
}

function abort(q, e) {
  var i = q._tasks.length, t;
  q._error = e; // ignore active callbacks
  q._data = undefined; // allow gc
  q._waiting = NaN; // prevent starting

  while (--i >= 0) {
    if (t = q._tasks[i]) {
      q._tasks[i] = null;
      if (t.abort) {
        try { t.abort(); }
        catch (e) { /* ignore */ }
      }
    }
  }

  q._active = NaN; // allow notification
  maybeNotify(q);
}

function maybeNotify(q) {
  if (!q._active && q._call) {
    var d = q._data;
    q._data = undefined; // allow gc
    q._call(q._error, d);
  }
}

function queue(concurrency) {
  return new Queue(arguments.length ? +concurrency : Infinity);
}

var constant$2 = function(x) {
  return function constant() {
    return x;
  };
};

var epsilon$1 = 1e-12;
var pi$2 = Math.PI;
var halfPi$1 = pi$2 / 2;
var tau$2 = 2 * pi$2;

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function asin(x) {
  return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

var arc = function() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant$2(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi$1,
        a1 = endAngle.apply(this, arguments) - halfPi$1,
        da = Math.abs(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon$1)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau$2 - epsilon$1) {
      context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon$1) {
        context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),
          rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon$1) {
        var p0 = asin(rp / r0 * Math.sin(ap)),
            p1 = asin(rp / r1 * Math.sin(ap));
        if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * Math.cos(a01),
          y01 = r1 * Math.sin(a01),
          x10 = r0 * Math.cos(a10),
          y10 = r0 * Math.sin(a10);

      // Apply rounded corners?
      if (rc > epsilon$1) {
        var x11 = r1 * Math.cos(a11),
            y11 = r1 * Math.sin(a11),
            x00 = r0 * Math.cos(a00),
            y00 = r0 * Math.sin(a00);

        // Restrict the corner radius according to the sector angle.
        if (da < pi$2) {
          var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
              ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
              lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon$1)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon$1) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon$1) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;
    return [Math.cos(a) * r, Math.sin(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$2(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$2(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$2(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$2(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$2(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$2(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
};

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: this._context.lineTo(x, y); break;
    }
  }
};

var curveLinear = function(context) {
  return new Linear(context);
};

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

var line = function() {
  var x$$1 = x,
      y$$1 = y,
      defined = constant$2(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$2(+_), line) : x$$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$2(+_), line) : y$$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$2(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
};

var area$1 = function() {
  var x0 = x,
      x1 = null,
      y0 = constant$2(0),
      y1 = y,
      defined = constant$2(true),
      context = null,
      curve = curveLinear,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$2(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$2(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$2(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$2(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$2(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$2(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
};

var descending$1 = function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};

var identity$1 = function(d) {
  return d;
};

var pie = function() {
  var value = identity$1,
      sortValues = descending$1,
      sort = null,
      startAngle = constant$2(0),
      endAngle = constant$2(tau$2),
      padAngle = constant$2(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$2(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$2(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$2(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$2(+_), pie) : padAngle;
  };

  return pie;
};

var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

function radialLine(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

var radialLine$1 = function() {
  return radialLine(line().curve(curveRadialLinear));
};

var radialArea = function() {
  var a = area$1().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
};

var circle = {
  draw: function(context, size) {
    var r = Math.sqrt(size / pi$2);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau$2);
  }
};

var cross$1 = {
  draw: function(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

var diamond = {
  draw: function(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

var ka = 0.89081309152928522810;
var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);
var kx = Math.sin(tau$2 / 10) * kr;
var ky = -Math.cos(tau$2 / 10) * kr;

var star = {
  draw: function(context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (var i = 1; i < 5; ++i) {
      var a = tau$2 * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

var square = {
  draw: function(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};

var sqrt3 = Math.sqrt(3);

var triangle = {
  draw: function(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

var c = -0.5;
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

var wye = {
  draw: function(context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

var symbols = [
  circle,
  cross$1,
  diamond,
  square,
  star,
  triangle,
  wye
];

var symbol = function() {
  var type = constant$2(circle),
      size = constant$2(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant$2(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant$2(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
};

var noop = function() {};

function point(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point(this, this._x1, this._y1); // proceed
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

var basis = function(context) {
  return new Basis(context);
};

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

var basisClosed = function(context) {
  return new BasisClosed(context);
};

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

var basisOpen = function(context) {
  return new BasisOpen(context);
};

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

var bundle = (function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85);

function point$1(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point$1(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinal = (function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalClosed = (function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalOpen = (function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function point$2(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon$1) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon$1) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRom = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomClosed = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomOpen = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

var linearClosed = function(context) {
  return new LinearClosed(context);
};

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$3(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

var natural = function(context) {
  return new Natural(context);
};

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

var step = function(context) {
  return new Step(context, 0.5);
};

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

var slice$2 = Array.prototype.slice;

var none = function(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (var j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
};

var none$1 = function(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
};

function stackValue(d, key) {
  return d[key];
}

var stack = function() {
  var keys = constant$2([]),
      order = none$1,
      offset = none,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$2(slice$2.call(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$2(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant$2(slice$2.call(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
  };

  return stack;
};

var expand = function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none(series, order);
};

var silhouette = function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none(series, order);
};

var wiggle = function(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none(series, order);
};

var ascending$1 = function(series) {
  var sums = series.map(sum$1);
  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
};

function sum$1(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

var descending$2 = function(series) {
  return ascending$1(series).reverse();
};

var insideOut = function(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum$1),
      order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
};

var reverse = function(series) {
  return none$1(series).reverse();
};

var define = function(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
};

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reHex3 = /^#([0-9a-f]{3})$/;
var reHex6 = /^#([0-9a-f]{6})$/;
var reRgbInteger = /^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/;
var reRgbPercent = /^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
var reRgbaInteger = /^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
var reRgbaPercent = /^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
var reHslPercent = /^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
var reHslaPercent = /^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  displayable: function() {
    return this.rgb().displayable();
  },
  toString: function() {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format])
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (0 <= this.r && this.r <= 255)
        && (0 <= this.g && this.g <= 255)
        && (0 <= this.b && this.b <= 255)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  toString: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(")
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

var Kn = 18;
var Xn = 0.950470;
var Yn = 1;
var Zn = 1.088830;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    var h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var b = rgb2xyz(o.r),
      a = rgb2xyz(o.g),
      l = rgb2xyz(o.b),
      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color, {
  brighter: function(k) {
    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    y = Yn * lab2xyz(y);
    x = Xn * lab2xyz(x);
    z = Zn * lab2xyz(z);
    return new Rgb(
      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function xyz2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2xyz(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hcl, hcl, extend(Color, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return labConvert(this).rgb();
  }
}));

var A = -0.14861;
var B = +1.78277;
var C = -0.29227;
var D = -0.90649;
var E = +1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

function basis$1(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

var basis$2 = function(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis$1((t - i / n) * n, v0, v1, v2, v3);
  };
};

var basisClosed$1 = function(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis$1((t - i / n) * n, v0, v1, v2, v3);
  };
};

var constant$3 = function(x) {
  return function() {
    return x;
  };
};

function linear$1(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential$1(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential$1(a, b, y) : constant$3(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear$1(a, d) : constant$3(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color$$1 = gamma(y);

  function rgb$$1(start, end) {
    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
        g = color$$1(start.g, end.g),
        b = color$$1(start.b, end.b),
        opacity = color$$1(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$$1.gamma = rgbGamma;

  return rgb$$1;
})(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color$$1;
    for (i = 0; i < n; ++i) {
      color$$1 = rgb(colors[i]);
      r[i] = color$$1.r || 0;
      g[i] = color$$1.g || 0;
      b[i] = color$$1.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color$$1.opacity = 1;
    return function(t) {
      color$$1.r = r(t);
      color$$1.g = g(t);
      color$$1.b = b(t);
      return color$$1 + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$2);
var rgbBasisClosed = rgbSpline(basisClosed$1);

var array$1 = function(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(nb),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
};

var date = function(a, b) {
  var d = new Date;
  return a = +a, b -= a, function(t) {
    return d.setTime(a + b * t), d;
  };
};

var interpolateNumber = function(a, b) {
  return a = +a, b -= a, function(t) {
    return a + b * t;
  };
};

var object = function(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolate(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
};

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

var interpolateString = function(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: interpolateNumber(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
};

var interpolate = function(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant$3(b)
      : (t === "number" ? interpolateNumber
      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
      : b instanceof color ? interpolateRgb
      : b instanceof Date ? date
      : Array.isArray(b) ? array$1
      : isNaN(b) ? object
      : interpolateNumber)(a, b);
};

var interpolateRound = function(a, b) {
  return a = +a, b -= a, function(t) {
    return Math.round(a + b * t);
  };
};

var degrees = 180 / Math.PI;

var identity$2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

var decompose = function(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
};

var cssNode;
var cssRoot;
var cssView;
var svgNode;

function parseCss(value) {
  if (value === "none") return identity$2;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity$2;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2;
var rho2 = 2;
var rho4 = 4;
var epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
var interpolateZoom = function(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    };
  }

  i.duration = S * 1000;

  return i;
};

function hsl$1(hue$$1) {
  return function(start, end) {
    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hsl$2 = hsl$1(hue);
var hslLong = hsl$1(nogamma);

function lab$1(start, end) {
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}

function hcl$1(hue$$1) {
  return function(start, end) {
    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hcl$2 = hcl$1(hue);
var hclLong = hcl$1(nogamma);

function cubehelix$1(hue$$1) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix$$1(start, end) {
      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix$$1.gamma = cubehelixGamma;

    return cubehelix$$1;
  })(1);
}

var cubehelix$2 = cubehelix$1(hue);
var cubehelixLong = cubehelix$1(nogamma);

var quantize = function(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
};

var noop$1 = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set$2(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set$2(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set$2(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function(row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

var dsv = function(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n]"),
      delimiterCode = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns;
    return rows;
  }

  function parseRows(text, f) {
    var EOL = {}, // sentinel value for end-of-line
        EOF = {}, // sentinel value for end-of-file
        rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // the current line number
        t, // the current token
        eol; // is the current token followed by EOL?

    function token() {
      if (I >= N) return EOF; // special case: end of file
      if (eol) return eol = false, EOL; // special case: end of line

      // special case: quotes
      var j = I, c;
      if (text.charCodeAt(j) === 34) {
        var i = j;
        while (i++ < N) {
          if (text.charCodeAt(i) === 34) {
            if (text.charCodeAt(i + 1) !== 34) break;
            ++i;
          }
        }
        I = i + 2;
        c = text.charCodeAt(i + 1);
        if (c === 13) {
          eol = true;
          if (text.charCodeAt(i + 2) === 10) ++I;
        } else if (c === 10) {
          eol = true;
        }
        return text.slice(j + 1, i).replace(/""/g, "\"");
      }

      // common case: find next delimiter or newline
      while (I < N) {
        var k = 1;
        c = text.charCodeAt(I++);
        if (c === 10) eol = true; // \n
        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
        else if (c !== delimiterCode) continue;
        return text.slice(j, I - k);
      }

      // special case: last token before EOF
      return text.slice(j);
    }

    while ((t = token()) !== EOF) {
      var a = [];
      while (t !== EOL && t !== EOF) {
        a.push(t);
        t = token();
      }
      if (f && (a = f(a, n++)) == null) continue;
      rows.push(a);
    }

    return rows;
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    })).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(text) {
    return text == null ? ""
        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
        : text;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatRows: formatRows
  };
};

var csv = dsv(",");

var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatRows = csv.formatRows;

var tsv = dsv("\t");

var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatRows = tsv.formatRows;

var request = function(url, callback) {
  var request,
      event = dispatch("beforesend", "progress", "load", "error"),
      mimeType,
      headers = map$1(),
      xhr = new XMLHttpRequest,
      user = null,
      password = null,
      response,
      responseType,
      timeout = 0;

  // If IE does not support CORS, use XDomainRequest.
  if (typeof XDomainRequest !== "undefined"
      && !("withCredentials" in xhr)
      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;

  "onload" in xhr
      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };

  function respond(o) {
    var status = xhr.status, result;
    if (!status && hasResponse(xhr)
        || status >= 200 && status < 300
        || status === 304) {
      if (response) {
        try {
          result = response.call(request, xhr);
        } catch (e) {
          event.call("error", request, e);
          return;
        }
      } else {
        result = xhr;
      }
      event.call("load", request, result);
    } else {
      event.call("error", request, o);
    }
  }

  xhr.onprogress = function(e) {
    event.call("progress", request, e);
  };

  request = {
    header: function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers.get(name);
      if (value == null) headers.remove(name);
      else headers.set(name, value + "");
      return request;
    },

    // If mimeType is non-null and no Accept header is set, a default is used.
    mimeType: function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return request;
    },

    // Specifies what type the response value should take;
    // for instance, arraybuffer, blob, document, or text.
    responseType: function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return request;
    },

    timeout: function(value) {
      if (!arguments.length) return timeout;
      timeout = +value;
      return request;
    },

    user: function(value) {
      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
    },

    password: function(value) {
      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
    },

    // Specify how to convert the response content to a specific type;
    // changes the callback value on "load" events.
    response: function(value) {
      response = value;
      return request;
    },

    // Alias for send("GET", …).
    get: function(data, callback) {
      return request.send("GET", data, callback);
    },

    // Alias for send("POST", …).
    post: function(data, callback) {
      return request.send("POST", data, callback);
    },

    // If callback is non-null, it will be used for error and load events.
    send: function(method, data, callback) {
      xhr.open(method, url, true, user, password);
      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
      if (responseType != null) xhr.responseType = responseType;
      if (timeout > 0) xhr.timeout = timeout;
      if (callback == null && typeof data === "function") callback = data, data = null;
      if (callback != null && callback.length === 1) callback = fixCallback(callback);
      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
      event.call("beforesend", request, xhr);
      xhr.send(data == null ? null : data);
      return request;
    },

    abort: function() {
      xhr.abort();
      return request;
    },

    on: function() {
      var value = event.on.apply(event, arguments);
      return value === event ? request : value;
    }
  };

  if (callback != null) {
    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
    return request.get(callback);
  }

  return request;
};

function fixCallback(callback) {
  return function(error, xhr) {
    callback(error == null ? xhr : null);
  };
}

function hasResponse(xhr) {
  var type = xhr.responseType;
  return type && type !== "text"
      ? xhr.response // null on error
      : xhr.responseText; // "" on error
}

var type = function(defaultMimeType, response) {
  return function(url, callback) {
    var r = request(url).mimeType(defaultMimeType).response(response);
    if (callback != null) {
      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
      return r.get(callback);
    }
    return r;
  };
};

var html = type("text/html", function(xhr) {
  return document.createRange().createContextualFragment(xhr.responseText);
});

var json = type("application/json", function(xhr) {
  return JSON.parse(xhr.responseText);
});

var text = type("text/plain", function(xhr) {
  return xhr.responseText;
});

var xml = type("application/xml", function(xhr) {
  var xml = xhr.responseXML;
  if (!xml) throw new Error("parse error");
  return xml;
});

var dsv$1 = function(defaultMimeType, parse) {
  return function(url, row, callback) {
    if (arguments.length < 3) callback = row, row = null;
    var r = request(url).mimeType(defaultMimeType);
    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
    r.row(row);
    return callback ? r.get(callback) : r;
  };
};

function responseOf(parse, row) {
  return function(request$$1) {
    return parse(request$$1.responseText, row);
  };
}

var csv$1 = dsv$1("text/csv", csvParse);

var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);

var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1000;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof requestAnimationFrame === "function" ? requestAnimationFrame : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke$1() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, delay);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) interval = setInterval(poke$1, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

var timeout$1 = function(callback, delay, time) {
  var t = new Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
};

var interval$1 = function(callback, delay, time) {
  var t = new Timer, total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? now() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
};

var t0$1 = new Date;
var t1$1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0$1.setTime(+start), t1$1.setTime(+end);
      floori(t0$1), floori(t1$1);
      return Math.floor(count(t0$1, t1$1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var millisecond = newInterval(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};

var milliseconds = millisecond.range;

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function(date) {
  date.setTime(Math.floor(date / durationSecond) * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});

var seconds = second.range;

var minute = newInterval(function(date) {
  date.setTime(Math.floor(date / durationMinute) * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});

var minutes = minute.range;

var hour = newInterval(function(date) {
  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
  if (offset < 0) offset += durationHour;
  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});

var hours = hour.range;

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});

var days = day.range;

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});

var months = month.range;

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var years = year.range;

var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});

var utcMinutes = utcMinute.range;

var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});

var utcHours = utcHour.range;

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});

var utcDays = utcDay.range;

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});

var utcMonths = utcMonth.range;

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var utcYears = utcYear.range;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
var formatDecimal = function(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
};

var exponent$1 = function(x) {
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
};

var formatGroup = function(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
};

var formatDefault = function(x, p) {
  x = x.toPrecision(p);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      case "e": break out;
      default: if (i0 > 0) i0 = 0; break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
};

var prefixExponent;

var formatPrefixAuto = function(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
};

var formatRounded = function(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
};

var formatTypes = {
  "": formatDefault,
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

// [[fill]align][sign][symbol][0][width][,][.precision][type]
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

var formatSpecifier = function(specifier) {
  return new FormatSpecifier(specifier);
};

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

  var match,
      fill = match[1] || " ",
      align = match[2] || ">",
      sign = match[3] || "-",
      symbol = match[4] || "",
      zero = !!match[5],
      width = match[6] && +match[6],
      comma = !!match[7],
      precision = match[8] && +match[8].slice(1),
      type = match[9] || "";

  // The "n" type is an alias for ",g".
  if (type === "n") comma = true, type = "g";

  // Map invalid types to the default format.
  else if (!formatTypes[type]) type = "";

  // If zero fill is specified, padding goes after sign and before digits.
  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

  this.fill = fill;
  this.align = align;
  this.sign = sign;
  this.symbol = symbol;
  this.zero = zero;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width == null ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
      + this.type;
};

var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];

function identity$3(x) {
  return x;
}

var formatLocale = function(locale) {
  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
      currency = locale.currency,
      decimal = locale.decimal;

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        type = specifier.type;

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = !type || /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? (type ? 6 : 12)
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Convert negative to positive, and compute the prefix.
        // Note that -0 is not less than 0, but 1 / -0 is!
        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);

        // Perform the initial formatting.
        value = formatType(value, precision);

        // If the original value was negative, it may be rounded to zero during
        // formatting; treat this as (positive) zero.
        if (valueNegative) {
          i = -1, n = value.length;
          valueNegative = false;
          while (++i < n) {
            if (c = value.charCodeAt(i), (48 < c && c < 58)
                || (type === "x" && 96 < c && c < 103)
                || (type === "X" && 64 < c && c < 71)) {
              valueNegative = true;
              break;
            }
          }
        }

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": return valuePrefix + value + valueSuffix + padding;
        case "=": return valuePrefix + padding + value + valueSuffix;
        case "^": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
      }
      return padding + valuePrefix + value + valueSuffix;
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
};

var locale$1;



defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale$1 = formatLocale(definition);
  exports.format = locale$1.format;
  exports.formatPrefix = locale$1.formatPrefix;
  return locale$1;
}

var precisionFixed = function(step) {
  return Math.max(0, -exponent$1(Math.abs(step)));
};

var precisionPrefix = function(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
};

var precisionRound = function(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
};

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale$1(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "S": formatSeconds,
    "U": formatWeekNumberSunday,
    "w": formatWeekdayNumber,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "S": formatUTCSeconds,
    "U": formatUTCWeekNumberSunday,
    "w": formatUTCWeekdayNumber,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "S": parseSeconds,
    "U": parseWeekNumberSunday,
    "w": parseWeekdayNumber,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function(string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0);
      if (i != string.length) return null;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"};
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + day.count(year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year(d), d), p, 2);
}

function formatWeekdayNumber(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d), d), p, 2);
}

function formatUTCWeekdayNumber(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

var locale$2;





defaultLocale$1({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale$1(definition) {
  locale$2 = formatLocale$1(definition);
  exports.timeFormat = locale$2.format;
  exports.timeParse = locale$2.parse;
  exports.utcFormat = locale$2.utcFormat;
  exports.utcParse = locale$2.utcParse;
  return locale$2;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : exports.utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : exports.utcParse(isoSpecifier);

var array$2 = Array.prototype;

var map$3 = array$2.map;
var slice$3 = array$2.slice;

var implicit = {name: "implicit"};

function ordinal(range) {
  var index = map$1(),
      domain = [],
      unknown = implicit;

  range = range == null ? [] : slice$3.call(range);

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = map$1();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice$3.call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range$$1 = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range$$1[1] < range$$1[0],
        start = range$$1[reverse - 0],
        stop = range$$1[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
  };

  scale.rangeRound = function(_) {
    return range$$1 = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band()
        .domain(domain())
        .range(range$$1)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point$4() {
  return pointish(band().paddingInner(1));
}

var constant$4 = function(x) {
  return function() {
    return x;
  };
};

var number$1 = function(x) {
  return +x;
};

var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constant$4(b);
}

function deinterpolateClamp(deinterpolate) {
  return function(a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function(a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
  };
}

function bimap(domain, range$$1, deinterpolate, reinterpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range$$1, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range$$1.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range$$1 = range$$1.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
  }

  return function(x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp());
}

// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range$$1 = unit,
      interpolate$$1 = interpolate,
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
  }

  scale.invert = function(y) {
    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = slice$3.call(_), rescale()) : range$$1.slice();
  };

  scale.rangeRound = function(_) {
    return range$$1 = slice$3.call(_), interpolate$$1 = interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
  };

  return rescale();
}

var tickFormat = function(domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = tickStep(start, stop, count == null ? 10 : count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return exports.formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return exports.format(specifier);
};

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    return tickFormat(domain(), count, specifier);
  };

  scale.nice = function(count) {
    var d = domain(),
        i = d.length - 1,
        n = count == null ? 10 : count,
        start = d[0],
        stop = d[i],
        step = tickStep(start, stop, n);

    if (step) {
      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
      d[0] = Math.floor(start / step) * step;
      d[i] = Math.ceil(stop / step) * step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear$2() {
  var scale = continuous(deinterpolateLinear, interpolateNumber);

  scale.copy = function() {
    return copy(scale, linear$2());
  };

  return linearish(scale);
}

function identity$4() {
  var domain = [0, 1];

  function scale(x) {
    return +x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice();
  };

  scale.copy = function() {
    return identity$4().domain(domain);
  };

  return linearish(scale);
}

var nice = function(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
};

function deinterpolate(a, b) {
  return (b = Math.log(b / a))
      ? function(x) { return Math.log(x / a) / b; }
      : constant$4(b);
}

function reinterpolate(a, b) {
  return a < 0
      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function log() {
  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),
      domain = scale.domain,
      base = 10,
      logs = logp(10),
      pows = powp(10);

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = exports.format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(nice(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  scale.copy = function() {
    return copy(scale, log().base(base));
  };

  return scale;
}

function raise(x, exponent) {
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
}

function pow() {
  var exponent = 1,
      scale = continuous(deinterpolate, reinterpolate),
      domain = scale.domain;

  function deinterpolate(a, b) {
    return (b = raise(b, exponent) - (a = raise(a, exponent)))
        ? function(x) { return (raise(x, exponent) - a) / b; }
        : constant$4(b);
  }

  function reinterpolate(a, b) {
    b = raise(b, exponent) - (a = raise(a, exponent));
    return function(t) { return raise(a + b * t, 1 / exponent); };
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };

  scale.copy = function() {
    return copy(scale, pow().exponent(exponent));
  };

  return linearish(scale);
}

function sqrt() {
  return pow().exponent(0.5);
}

function quantile$$1() {
  var domain = [],
      range$$1 = [],
      thresholds = [];

  function rescale() {
    var i = 0, n = Math.max(1, range$$1.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
    return scale;
  }

  function scale(x) {
    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range$$1.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = slice$3.call(_), rescale()) : range$$1.slice();
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile$$1()
        .domain(domain)
        .range(range$$1);
  };

  return scale;
}

function quantize$1() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range$$1 = [0, 1];

  function scale(x) {
    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range$$1 = slice$3.call(_)).length - 1, rescale()) : range$$1.slice();
  };

  scale.invertExtent = function(y) {
    var i = range$$1.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return quantize$1()
        .domain([x0, x1])
        .range(range$$1);
  };

  return linearish(scale);
}

function threshold$1() {
  var domain = [0.5],
      range$$1 = [0, 1],
      n = 1;

  function scale(x) {
    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range$$1 = slice$3.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
  };

  scale.invertExtent = function(y) {
    var i = range$$1.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return threshold$1()
        .domain(domain)
        .range(range$$1);
  };

  return scale;
}

var durationSecond$1 = 1000;
var durationMinute$1 = durationSecond$1 * 60;
var durationHour$1 = durationMinute$1 * 60;
var durationDay$1 = durationHour$1 * 24;
var durationWeek$1 = durationDay$1 * 7;
var durationMonth = durationDay$1 * 30;
var durationYear = durationDay$1 * 365;

function date$1(t) {
  return new Date(t);
}

function number$2(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
  var scale = continuous(deinterpolateLinear, interpolateNumber),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second$$1,  1,      durationSecond$1],
    [second$$1,  5,  5 * durationSecond$1],
    [second$$1, 15, 15 * durationSecond$1],
    [second$$1, 30, 30 * durationSecond$1],
    [minute$$1,  1,      durationMinute$1],
    [minute$$1,  5,  5 * durationMinute$1],
    [minute$$1, 15, 15 * durationMinute$1],
    [minute$$1, 30, 30 * durationMinute$1],
    [  hour$$1,  1,      durationHour$1  ],
    [  hour$$1,  3,  3 * durationHour$1  ],
    [  hour$$1,  6,  6 * durationHour$1  ],
    [  hour$$1, 12, 12 * durationHour$1  ],
    [   day$$1,  1,      durationDay$1   ],
    [   day$$1,  2,  2 * durationDay$1   ],
    [  week,  1,      durationWeek$1  ],
    [ month$$1,  1,      durationMonth ],
    [ month$$1,  3,  3 * durationMonth ],
    [  year$$1,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second$$1(date) < date ? formatMillisecond
        : minute$$1(date) < date ? formatSecond
        : hour$$1(date) < date ? formatMinute
        : day$$1(date) < date ? formatHour
        : month$$1(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year$$1(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, interval);
        interval = year$$1;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = tickStep(start, stop, interval);
        interval = millisecond$$1;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(nice(d, interval))
        : scale;
  };

  scale.copy = function() {
    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
  };

  return scale;
}

var time = function() {
  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
};

var utcTime = function() {
  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
};

var colors = function(s) {
  return s.match(/.{6}/g).map(function(x) {
    return "#" + x;
  });
};

var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var rainbow = cubehelix();

var rainbow$1 = function(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  rainbow.h = 360 * t - 100;
  rainbow.s = 1.5 - 1.5 * ts;
  rainbow.l = 0.8 - 0.9 * ts;
  return rainbow + "";
};

function ramp(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

function sequential(interpolator) {
  var x0 = 0,
      x1 = 1,
      clamp = false;

  function scale(x) {
    var t = (x - x0) / (x1 - x0);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
  };

  return linearish(scale);
}

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

var namespace = function(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
};

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

var creator = function(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
};

var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

var matcher = function(selector) {
  return function() {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector
        || element.msMatchesSelector
        || element.mozMatchesSelector
        || element.oMatchesSelector;
    matcher = function(selector) {
      return function() {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

var matcher$1 = matcher;

var filterEvents = {};

exports.event = null;

if (typeof document !== "undefined") {
  var element$1 = document.documentElement;
  if (!("onmouseenter" in element$1)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = exports.event; // Events can be reentrant (e.g., focus).
    exports.event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event0;
    }
  };
}

function parseTypenames$1(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

var selection_on = function(typename, value, capture) {
  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
};

function customEvent(event1, listener, that, args) {
  var event0 = exports.event;
  event1.sourceEvent = exports.event;
  exports.event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event0;
  }
}

var sourceEvent = function() {
  var current = exports.event, source;
  while (source = current.sourceEvent) current = source;
  return current;
};

var point$5 = function(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
};

var mouse = function(node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point$5(node, event);
};

function none$2() {}

var selector = function(selector) {
  return selector == null ? none$2 : function() {
    return this.querySelector(selector);
  };
};

var selection_select = function(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
};

function empty() {
  return [];
}

var selectorAll = function(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
};

var selection_selectAll = function(select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
};

var selection_filter = function(match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
};

var sparse = function(update) {
  return new Array(update.length);
};

var selection_enter = function() {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
};

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

var constant$5 = function(x) {
  return function() {
    return x;
  };
};

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

var selection_data = function(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant$5(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
};

var selection_exit = function() {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
};

var selection_merge = function(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
};

var selection_order = function() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
};

var selection_sort = function(compare) {
  if (!compare) compare = ascending$2;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
};

function ascending$2(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

var selection_call = function() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
};

var selection_nodes = function() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
};

var selection_node = function() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
};

var selection_size = function() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
};

var selection_empty = function() {
  return !this.node();
};

var selection_each = function(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
};

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

var selection_attr = function(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
};

var window = function(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
};

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

var selection_style = function(name, value, priority) {
  var node;
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : window(node = this.node())
          .getComputedStyle(node, null)
          .getPropertyValue(name);
};

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

var selection_property = function(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
};

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

var selection_classed = function(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
};

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

var selection_text = function(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
};

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

var selection_html = function(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
};

function raise$1() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

var selection_raise = function() {
  return this.each(raise$1);
};

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

var selection_lower = function() {
  return this.each(lower);
};

var selection_append = function(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
};

function constantNull() {
  return null;
}

var selection_insert = function(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
};

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

var selection_remove = function() {
  return this.each(remove);
};

var selection_datum = function(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
};

function dispatchEvent(node, type, params) {
  var window$$1 = window(node),
      event = window$$1.CustomEvent;

  if (event) {
    event = new event(type, params);
  } else {
    event = window$$1.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

var selection_dispatch = function(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
};

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

var select = function(selector) {
  return typeof selector === "string"
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
      : new Selection([[selector]], root);
};

var selectAll = function(selector) {
  return typeof selector === "string"
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new Selection([selector == null ? [] : selector], root);
};

var touch = function(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point$5(node, touch);
    }
  }

  return null;
};

var touches = function(node, touches) {
  if (touches == null) touches = sourceEvent().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point$5(node, touches[i]);
  }

  return points;
};

var emptyOn = dispatch("start", "end", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

var schedule = function(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
};

function init(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
  return schedule;
}

function set$3(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
  return schedule;
}

function get$1(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return timeout$1(start);

      // Interrupt the active transition, if any.
      // Dispatch the interrupt event.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions. No interrupt event is dispatched
      // because the cancelled transitions never started. Note that this also
      // removes this transition from the pending list!
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    timeout$1(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(null, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

var interrupt = function(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
};

var selection_interrupt = function(name) {
  return this.each(function() {
    interrupt(this, name);
  });
};

function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = set$3(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = set$3(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

var transition_tween = function(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get$1(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
};

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = set$3(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return get$1(node, id).value[name];
  };
}

var interpolate$1 = function(a, b) {
  var c;
  return (typeof b === "number" ? interpolateNumber
      : b instanceof color ? interpolateRgb
      : (c = color(b)) ? (b = c, interpolateRgb)
      : interpolateString)(a, b);
};

function attrRemove$1(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, interpolate$$1, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = this.getAttribute(name);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function attrConstantNS$1(fullname, interpolate$$1, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function attrFunction$1(name, interpolate$$1, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0, value1 = value(this);
    if (value1 == null) return void this.removeAttribute(name);
    value0 = this.getAttribute(name);
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

function attrFunctionNS$1(fullname, interpolate$$1, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0, value1 = value(this);
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

var transition_attr = function(name, value) {
  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
};

function attrTweenNS(fullname, value) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.setAttributeNS(fullname.space, fullname.local, i(t));
    };
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.setAttribute(name, i(t));
    };
  }
  tween._value = value;
  return tween;
}

var transition_attrTween = function(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
};

function delayFunction(id, value) {
  return function() {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    init(this, id).delay = value;
  };
}

var transition_delay = function(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : get$1(this.node(), id).delay;
};

function durationFunction(id, value) {
  return function() {
    set$3(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    set$3(this, id).duration = value;
  };
}

var transition_duration = function(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : get$1(this.node(), id).duration;
};

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    set$3(this, id).ease = value;
  };
}

var transition_ease = function(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : get$1(this.node(), id).ease;
};

var transition_filter = function(match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
};

var transition_merge = function(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
};

function start$1(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start$1(name) ? init : set$3;
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

var transition_on = function(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? get$1(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
};

function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

var transition_remove = function() {
  return this.on("end.remove", removeFunction(this._id));
};

var transition_select = function(select$$1) {
  var name = this._name,
      id = this._id;

  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
};

var transition_selectAll = function(select$$1) {
  var name = this._name,
      id = this._id;

  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
};

var Selection$1 = selection.prototype.constructor;

var transition_selection = function() {
  return new Selection$1(this._groups, this._parents);
};

function styleRemove$1(name, interpolate$$1) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var style = window(this).getComputedStyle(this, null),
        value0 = style.getPropertyValue(name),
        value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

function styleRemoveEnd(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant$1(name, interpolate$$1, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function styleFunction$1(name, interpolate$$1, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var style = window(this).getComputedStyle(this, null),
        value0 = style.getPropertyValue(name),
        value1 = value(this);
    if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

var transition_style = function(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
  return value == null ? this
          .styleTween(name, styleRemove$1(name, i))
          .on("end.style." + name, styleRemoveEnd(name))
      : this.styleTween(name, typeof value === "function"
          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
          : styleConstant$1(name, i, value), priority);
};

function styleTween(name, value, priority) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.style.setProperty(name, i(t), priority);
    };
  }
  tween._value = value;
  return tween;
}

var transition_styleTween = function(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
};

function textConstant$1(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

var transition_text = function(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction$1(tweenValue(this, "text", value))
      : textConstant$1(value == null ? "" : value + ""));
};

var transition_transition = function() {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get$1(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
};

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return selection().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = selection.prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease
};

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = now(), defaultTiming;
    }
  }
  return timing;
}

var selection_transition = function(name) {
  var id,
      timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
};

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

var root$1 = [null];

var active = function(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
        return new Transition([[node]], root$1, name, +i);
      }
    }
  }

  return null;
};

var slice$4 = Array.prototype.slice;

var identity$5 = function(x) {
  return x;
};

var top = 1;
var right = 2;
var bottom = 3;
var left = 4;
var epsilon$2 = 1e-6;

function translateX(scale0, scale1, d) {
  var x = scale0(d);
  return "translate(" + (isFinite(x) ? x : scale1(d)) + ",0)";
}

function translateY(scale0, scale1, d) {
  var y = scale0(d);
  return "translate(0," + (isFinite(y) ? y : scale1(d)) + ")";
}

function center(scale) {
  var offset = scale.bandwidth() / 2;
  if (scale.round()) offset = Math.round(offset);
  return function(d) {
    return scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        transform = orient === top || orient === bottom ? translateX : translateY,
        range = scale.range(),
        range0 = range[0] + 0.5,
        range1 = range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : identity$5)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text"),
        k = orient === top || orient === left ? -1 : 1,
        x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "#000"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "#000")
        .attr(x + "2", k * tickSizeInner)
        .attr(y + "1", 0.5)
        .attr(y + "2", 0.5));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "#000")
        .attr(x, k * spacing)
        .attr(y, 0.5)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon$2)
          .attr("transform", function(d) { return transform(position, this.parentNode.__axis || position, d); });

      tickEnter
          .attr("opacity", epsilon$2)
          .attr("transform", function(d) { return transform(this.parentNode.__axis || position, position, d); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient == right
            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position, position, d); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = slice$4.call(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;
  while (children = node.children) node = children[0];
  return node;
}

function leafRight(node) {
  var children;
  while (children = node.children) node = children[children.length - 1];
  return node;
}

var cluster = function() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0;

    // First walk, computing the initial x & y values.
    root.eachAfter(function(node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });

    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;

    // Second walk, normalizing x & y to the desired size.
    return root.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function(x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
  };

  cluster.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
  };

  return cluster;
};

var node_each = function(callback) {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);
  return this;
};

var node_eachBefore = function(callback) {
  var node = this, nodes = [node], children, i;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }
  return this;
};

var node_eachAfter = function(callback) {
  var node = this, nodes = [node], next = [], children, i, n;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
};

var node_sum = function(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) sum += children[i].value;
    node.value = sum;
  });
};

var node_sort = function(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
};

var node_path = function(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
};

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

var node_ancestors = function() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
};

var node_descendants = function() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
};

var node_leaves = function() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
};

var node_links = function() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) { // Don’t include the root’s parent, if any.
      links.push({source: node.parent, target: node});
    }
  });
  return links;
};

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do node.height = height;
  while ((node = node.parent) && (node.height < ++height));
}

function Node(data) {
  this.data = data;
  this.depth =
  this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy
};

function Node$2(value) {
  this._ = value;
  this.next = null;
}

var shuffle$1 = function(array) {
  var i,
      n = (array = array.slice()).length,
      head = null,
      node = head;

  while (n) {
    var next = new Node$2(array[n - 1]);
    if (node) node = node.next = next;
    else node = head = next;
    array[i] = array[--n];
  }

  return {
    head: head,
    tail: node
  };
};

var enclose = function(circles) {
  return encloseN(shuffle$1(circles), []);
};

function encloses(a, b) {
  var dx = b.x - a.x,
      dy = b.y - a.y,
      dr = a.r - b.r;
  return dr * dr + 1e-6 > dx * dx + dy * dy;
}

// Returns the smallest circle that contains circles L and intersects circles B.
function encloseN(L, B) {
  var circle,
      l0 = null,
      l1 = L.head,
      l2,
      p1;

  switch (B.length) {
    case 1: circle = enclose1(B[0]); break;
    case 2: circle = enclose2(B[0], B[1]); break;
    case 3: circle = enclose3(B[0], B[1], B[2]); break;
  }

  while (l1) {
    p1 = l1._, l2 = l1.next;
    if (!circle || !encloses(circle, p1)) {

      // Temporarily truncate L before l1.
      if (l0) L.tail = l0, l0.next = null;
      else L.head = L.tail = null;

      B.push(p1);
      circle = encloseN(L, B); // Note: reorders L!
      B.pop();

      // Move l1 to the front of L and reconnect the truncated list L.
      if (L.head) l1.next = L.head, L.head = l1;
      else l1.next = null, L.head = L.tail = l1;
      l0 = L.tail, l0.next = l2;

    } else {
      l0 = l1;
    }
    l1 = l2;
  }

  L.tail = l0;
  return circle;
}

function enclose1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function enclose2(a, b) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function enclose3(a, b, c) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x3 = c.x, y3 = c.y, r3 = c.r,
      a2 = 2 * (x1 - x2),
      b2 = 2 * (y1 - y2),
      c2 = 2 * (r2 - r1),
      d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,
      a3 = 2 * (x1 - x3),
      b3 = 2 * (y1 - y3),
      c3 = 2 * (r3 - r1),
      d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / ab - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / ab - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (xa * xb + ya * yb + r1),
      C = xa * xa + ya * ya - r1 * r1,
      r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
  return {
    x: xa + xb * r + x1,
    y: ya + yb * r + y1,
    r: r
  };
}

function place(a, b, c) {
  var ax = a.x,
      ay = a.y,
      da = b.r + c.r,
      db = a.r + c.r,
      dx = b.x - ax,
      dy = b.y - ay,
      dc = dx * dx + dy * dy;
  if (dc) {
    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
    c.x = ax + x * dx + y * dy;
    c.y = ay + x * dy - y * dx;
  } else {
    c.x = ax + db;
    c.y = ay;
  }
}

function intersects(a, b) {
  var dx = b.x - a.x,
      dy = b.y - a.y,
      dr = a.r + b.r;
  return dr * dr > dx * dx + dy * dy;
}

function distance2(circle, x, y) {
  var dx = circle.x - x,
      dy = circle.y - y;
  return dx * dx + dy * dy;
}

function Node$1(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;

  var a, b, c, n;

  // Place the first circle.
  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r;

  // Place the second circle.
  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r;

  // Place the third circle.
  place(b, a, c = circles[2]);

  // Initialize the weighted centroid.
  var aa = a.r * a.r,
      ba = b.r * b.r,
      ca = c.r * c.r,
      oa = aa + ba + ca,
      ox = aa * a.x + ba * b.x + ca * c.x,
      oy = aa * a.y + ba * b.y + ca * c.y,
      cx, cy, i, j, k, sj, sk;

  // Initialize the front-chain using the first three circles a, b and c.
  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a;

  // Attempt to place each remaining circle…
  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node$1(c);

    // If there are only three elements in the front-chain…
    if ((k = a.previous) === (j = b.next)) {
      // If the new circle intersects the third circle,
      // rotate the front chain to try the next position.
      if (intersects(j._, c._)) {
        a = b, b = j, --i;
        continue pack;
      }
    }

    // Find the closest intersecting circle on the front-chain, if any.
    else {
      sj = j._.r, sk = k._.r;
      do {
        if (sj <= sk) {
          if (intersects(j._, c._)) {
            b = j, a.next = b, b.previous = a, --i;
            continue pack;
          }
          j = j.next, sj += j._.r;
        } else {
          if (intersects(k._, c._)) {
            a = k, a.next = b, b.previous = a, --i;
            continue pack;
          }
          k = k.previous, sk += k._.r;
        }
      } while (j !== k.next);
    }

    // Success! Insert the new circle c between a and b.
    c.previous = a, c.next = b, a.next = b.previous = b = c;

    // Update the weighted centroid.
    oa += ca = c._.r * c._.r;
    ox += ca * c._.x;
    oy += ca * c._.y;

    // Compute the new closest circle a to centroid.
    aa = distance2(a._, cx = ox / oa, cy = oy / oa);
    while ((c = c.next) !== b) {
      if ((ca = distance2(c._, cx, cy)) < aa) {
        a = c, aa = ca;
      }
    }
    b = a.next;
  }

  // Compute the enclosing circle of the front chain.
  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

  // Translate the circles to put the enclosing circle around the origin.
  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

var siblings = function(circles) {
  packEnclose(circles);
  return circles;
};

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error;
  return f;
}

function constantZero() {
  return 0;
}

var constant$6 = function(x) {
  return function() {
    return x;
  };
};

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

var index = function() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;
    if (radius) {
      root.eachBefore(radiusLeaf(radius))
          .eachAfter(packChildren(padding, 0.5))
          .eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius))
          .eachAfter(packChildren(constantZero, 1))
          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
  }

  pack.radius = function(x) {
    return arguments.length ? (radius = optional(x), pack) : radius;
  };

  pack.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function(x) {
    return arguments.length ? (padding = typeof x === "function" ? x : constant$6(+x), pack) : padding;
  };

  return pack;
};

function radiusLeaf(radius) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function(node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;

      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = packEnclose(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function(node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}

var roundNode = function(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
};

var treemapDice = function(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
};

var partition = function() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 =
    root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(dy, n) {
    return function(node) {
      if (node.children) {
        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }
      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function(x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function(x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
};

var keyPrefix$1 = "$";
var preroot = {depth: -1};
var ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

var stratify = function() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new Node(d);
      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix$1 + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);
      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix$1 + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);
        else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");

    return root;
  }

  stratify.id = function(x) {
    return arguments.length ? (id = required(x), stratify) : id;
  };

  stratify.parentId = function(x) {
    return arguments.length ? (parentId = required(x), stratify) : parentId;
  };

  return stratify;
};

function defaultSeparation$1(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
var tree = function() {
  var separation = defaultSeparation$1,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
      var left = root,
          right = root,
          bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x) left = node;
        if (node.x > right.x) right = node;
        if (node.depth > bottom.depth) bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function(x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
  };

  tree.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
  };

  return tree;
};

var treemapSlice = function(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
};

var phi = (1 + Math.sqrt(5)) / 2;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1,
      n = nodes.length,
      dx, dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;
    minValue = maxValue = sumValue = nodes[i0].value;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);

    // Keep adding nodes while the aspect ratio maintains or improves.
    for (i1 = i0 + 1; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
      minRatio = newRatio;
    }

    // Position and record the row orientation.
    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var squarify = (function custom(ratio) {

  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
})(phi);

var index$1 = function() {
  var tile = squarify,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = constantZero,
      paddingTop = constantZero,
      paddingRight = constantZero,
      paddingBottom = constantZero,
      paddingLeft = constantZero;

  function treemap(root) {
    root.x0 =
    root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function(x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function(x) {
    return arguments.length ? (tile = required(x), treemap) : tile;
  };

  treemap.padding = function(x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function(x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$6(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function(x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function(x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$6(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function(x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$6(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function(x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$6(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function(x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$6(+x), treemap) : paddingLeft;
  };

  return treemap;
};

var binary = function(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i, n = nodes.length,
      sum, sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = (value / 2) + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;
      else hi = mid;
    }

    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if ((y1 - y0) > (x1 - x0)) {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    } else {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    }
  }
};

var sliceDice = function(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
};

var resquarify = (function custom(ratio) {

  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
})(phi);

var center$1 = function(x, y) {
  var nodes;

  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function(_) {
    nodes = _;
  };

  force.x = function(_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function(_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
};

var constant$7 = function(x) {
  return function() {
    return x;
  };
};

var jiggle = function() {
  return (Math.random() - 0.5) * 1e-6;
};

function x$1(d) {
  return d.x + d.vx;
}

function y$1(d) {
  return d.y + d.vy;
}

var collide = function(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;

  if (typeof radius !== "function") radius = constant$7(radius == null ? 1 : +radius);

  function force() {
    var i, n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[i], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > i) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;
          if (l < r * r) {
            if (x === 0) x = jiggle(), l += x * x;
            if (y === 0) y = jiggle(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    radii = new Array(n);
    for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : radius;
  };

  return force;
};

function index$2(d, i) {
  return i;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

var link = function(links) {
  var id = index$2,
      strength = defaultStrength,
      strengths,
      distance = constant$7(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;

  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || jiggle();
        y = target.y + target.vy - source.y - source.vy || jiggle();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;

    var i,
        n = nodes.length,
        m = links.length,
        nodeById = map$1(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < n; ++i) {
      count[i] = 0;
    }

    for (i = 0; i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      ++count[link.source.index], ++count[link.target.index];
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.links = function(_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function(_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initializeStrength(), force) : strength;
  };

  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$7(+_), initializeDistance(), force) : distance;
  };

  return force;
};

function x$2(d) {
  return d.x;
}

function y$2(d) {
  return d.y;
}

var initialRadius = 10;
var initialAngle = Math.PI * (3 - Math.sqrt(5));

var simulation = function(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = map$1(),
      stepper = timer(step),
      event = dispatch("tick", "end");

  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick() {
    var i, n = nodes.length, node;

    alpha += (alphaTarget - alpha) * alphaDecay;

    forces.each(function(force) {
      force(alpha);
    });

    for (i = 0; i < n; ++i) {
      node = nodes[i];
      if (node.fx == null) node.x += node.vx *= velocityDecay;
      else node.x = node.fx, node.vx = 0;
      if (node.fy == null) node.y += node.vy *= velocityDecay;
      else node.y = node.fy, node.vy = 0;
    }
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();

  return simulation = {
    tick: tick,

    restart: function() {
      return stepper.restart(step), simulation;
    },

    stop: function() {
      return stepper.stop(), simulation;
    },

    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },

    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },

    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },

    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },

    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },

    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },

    force: function(name, _) {
      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
    },

    find: function(x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;

      if (radius == null) radius = Infinity;
      else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },

    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
};

var manyBody = function() {
  var nodes,
      node,
      alpha,
      strength = constant$7(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);
  }

  function accumulate(quad) {
    var strength = 0, q, c, x$$1, y$$1, i;

    // For internal nodes, accumulate forces from child quadrants.
    if (quad.length) {
      for (x$$1 = y$$1 = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = q.value)) {
          strength += c, x$$1 += c * q.x, y$$1 += c * q.y;
        }
      }
      quad.x = x$$1 / strength;
      quad.y = y$$1 / strength;
    }

    // For leaf nodes, accumulate forces from coincident quadrants.
    else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do strength += strengths[q.data.index];
      while (q = q.next);
    }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;

    var x$$1 = quad.x - node.x,
        y$$1 = quad.y - node.y,
        w = x2 - x1,
        l = x$$1 * x$$1 + y$$1 * y$$1;

    // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
        if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x$$1 * quad.value * alpha / l;
        node.vy += y$$1 * quad.value * alpha / l;
      }
      return true;
    }

    // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return;

    // Limit forces for very close nodes; randomize direction if coincident.
    if (quad.data !== node || quad.next) {
      if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
      if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x$$1 * w;
      node.vy += y$$1 * w;
    } while (quad = quad.next);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
  };

  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
};

var x$3 = function(x) {
  var strength = constant$7(0.1),
      nodes,
      strengths,
      xz;

  if (typeof x !== "function") x = constant$7(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
  };

  force.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : x;
  };

  return force;
};

var y$3 = function(y) {
  var strength = constant$7(0.1),
      nodes,
      strengths,
      yz;

  if (typeof y !== "function") y = constant$7(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
  };

  force.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : y;
  };

  return force;
};

function nopropagation() {
  exports.event.stopImmediatePropagation();
}

var noevent = function() {
  exports.event.preventDefault();
  exports.event.stopImmediatePropagation();
};

var dragDisable = function(view) {
  var root = view.document.documentElement,
      selection$$1 = select(view).on("dragstart.drag", noevent, true);
  if ("onselectstart" in root) {
    selection$$1.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
};

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection$$1 = select(view).on("dragstart.drag", null);
  if (noclick) {
    selection$$1.on("click.drag", noevent, true);
    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection$$1.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

var constant$8 = function(x) {
  return function() {
    return x;
  };
};

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !exports.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {x: exports.event.x, y: exports.event.y} : d;
}

var drag = function() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      gestures = {},
      listeners = dispatch("start", "drag", "end"),
      active = 0,
      mousemoving,
      touchending;

  function drag(selection$$1) {
    selection$$1
        .on("mousedown.drag", mousedowned)
        .on("touchstart.drag", touchstarted)
        .on("touchmove.drag", touchmoved)
        .on("touchend.drag touchcancel.drag", touchended)
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
    if (!gesture) return;
    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    dragDisable(exports.event.view);
    nopropagation();
    mousemoving = false;
    gesture("start");
  }

  function mousemoved() {
    noevent();
    mousemoving = true;
    gestures.mouse("drag");
  }

  function mouseupped() {
    select(exports.event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(exports.event.view, mousemoving);
    noevent();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches$$1 = exports.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches$$1.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
        nopropagation();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches$$1[i].identifier]) {
        noevent();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, gesture;

    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches$$1[i].identifier]) {
        nopropagation();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy,
        sublisteners = listeners.copy();

    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;

    return function gesture(type) {
      var p0 = p, n;
      switch (type) {
        case "start": gestures[id] = gesture, n = active++; break;
        case "end": delete gestures[id], --active; // nobreak
        case "drag": p = point(container, id), n = active; break;
      }
      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$8(!!_), drag) : filter;
  };

  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant$8(_), drag) : container;
  };

  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$8(_), drag) : subject;
  };

  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  return drag;
};

var constant$9 = function(x) {
  return function() {
    return x;
  };
};

function x$4(d) {
  return d[0];
}

function y$4(d) {
  return d[1];
}

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,

  insert: function(after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;
      if (after.R) {
        after = after.R;
        while (after.L) after = after.L;
        after.L = node;
      } else {
        after.R = node;
      }
      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }
    node.L = node.R = null;
    node.U = parent;
    node.C = true;

    after = node;
    while (parent && parent.C) {
      grandpa = parent.U;
      if (parent === grandpa.L) {
        uncle = grandpa.R;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }
      parent = after.U;
    }
    this._.C = false;
  },

  remove: function(node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;

    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;

    if (!left) next = right;
    else if (!right) next = left;
    else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;
      else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;
      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;
    if (node && node.C) { node.C = false; return; }

    do {
      if (node === this._) break;
      if (node === parent.L) {
        sibling = parent.R;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }
        if ((sibling.L && sibling.L.C)
            || (sibling.R && sibling.R.C)) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }
          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }
        if ((sibling.L && sibling.L.C)
          || (sibling.R && sibling.R.C)) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }
          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }
      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;
  return node;
}

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);
  cells[left.index].halfedges.push(index);
  cells[right.index].halfedges.push(index);
  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
}

// Liang–Barsky line clipping.
function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;

  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;
    if (lx > rx) {
      if (!v0) v0 = [fx, y0];
      else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];
      else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];
        else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];
        else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];
        else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];
        else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
        || !clipEdge(edge, x0, y0, x1, y1)
        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3
            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
      delete edges[i];
    }
  }
}

function createCell(site) {
  return cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];
  else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);
      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
      index.sort(function(i, j) { return array[j] - array[i]; });
      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length;

      // Remove any dangling clipped edges.
      while (iHalfedge--) {
        if (!edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      }

      // Insert any border edges as necessary.
      iHalfedge = 0, nHalfedges = halfedges.length;
      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
        if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
              Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]
              : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]
              : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]
              : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]
              : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  }

  // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!
  if (cover) {
    var dx, dy, d2, dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
      cover.halfedges.push(
        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
        edges.push(createBorderEdge(site, v01, v11)) - 1,
        edges.push(createBorderEdge(site, v11, v10)) - 1,
        edges.push(createBorderEdge(site, v10, v00)) - 1
      );
    }
  }

  // Lastly delete any cells with no edges; these were entirely clipped.
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      if (!cell.halfedges.length) {
        delete cells[iCell];
      }
    }
  }
}

var circlePool = [];

var firstCircle;

function Circle() {
  RedBlackNode(this);
  this.x =
  this.y =
  this.arc =
  this.site =
  this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;

  if (!lArc || !rArc) return;

  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;

  if (lSite === rSite) return;

  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;

  var d = 2 * (ax * cy - ay * cx);
  if (d >= -epsilon2$1) return;

  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;

  var circle = circlePool.pop() || new Circle;
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;

  var before = null,
      node = circles._;

  while (node) {
    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
      if (node.L) node = node.L;
      else { before = node.P; break; }
    } else {
      if (node.R) node = node.R;
      else { before = node; break; }
    }
  }

  circles.insert(before, circle);
  if (!before) firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;
  if (circle) {
    if (!circle.P) firstCircle = circle.N;
    circles.remove(circle);
    circlePool.push(circle);
    RedBlackNode(circle);
    arc.circle = null;
  }
}

var beachPool = [];

function Beach() {
  RedBlackNode(this);
  this.edge =
  this.site =
  this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach;
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  detachCircle(beach);
  beaches.remove(beach);
  beachPool.push(beach);
  RedBlackNode(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];

  detachBeach(beach);

  var lArc = previous;
  while (lArc.circle
      && Math.abs(x - lArc.circle.x) < epsilon$3
      && Math.abs(y - lArc.circle.cy) < epsilon$3) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  detachCircle(lArc);

  var rArc = next;
  while (rArc.circle
      && Math.abs(x - rArc.circle.x) < epsilon$3
      && Math.abs(y - rArc.circle.cy) < epsilon$3) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  detachCircle(rArc);

  var nArcs = disappearing.length,
      iArc;
  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

  attachCircle(lArc);
  attachCircle(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > epsilon$3) node = node.L; else {
      dxr = x - rightBreakPoint(node, directrix);
      if (dxr > epsilon$3) {
        if (!node.R) {
          lArc = node;
          break;
        }
        node = node.R;
      } else {
        if (dxl > -epsilon$3) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -epsilon$3) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }
        break;
      }
    }
  }

  createCell(site);
  var newArc = createBeach(site);
  beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    detachCircle(lArc);
    rArc = createBeach(lArc.site);
    beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
    attachCircle(lArc);
    attachCircle(rArc);
    return;
  }

  if (!rArc) { // && lArc
    newArc.edge = createEdge(lArc.site, newArc.site);
    return;
  }

  // else lArc !== rArc
  detachCircle(lArc);
  detachCircle(rArc);

  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
  newArc.edge = createEdge(lSite, site, null, vertex);
  rArc.edge = createEdge(site, rSite, null, vertex);
  attachCircle(lArc);
  attachCircle(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;

  if (!pby2) return rfocx;

  var lArc = arc.P;
  if (!lArc) return -Infinity;

  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;

  if (!plby2) return lfocx;

  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;

  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}

var epsilon$3 = 1e-6;
var epsilon2$1 = 1e-12;
var beaches;
var cells;
var circles;
var edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1]
      || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;

  edges = [];
  cells = new Array(sites.length);
  beaches = new RedBlackTree;
  circles = new RedBlackTree;

  while (true) {
    circle = firstCircle;
    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
      if (site[0] !== x || site[1] !== y) {
        addBeach(site);
        x = site[0], y = site[1];
      }
      site = sites.pop();
    } else if (circle) {
      removeBeach(circle.arc);
    } else {
      break;
    }
  }

  sortCellHalfedges();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    clipEdges(x0, y0, x1, y1);
    clipCells(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;

  beaches =
  circles =
  edges =
  cells = null;
}

Diagram.prototype = {
  constructor: Diagram,

  polygons: function() {
    var edges = this.edges;

    return this.cells.map(function(cell) {
      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
      polygon.data = cell.site.data;
      return polygon;
    });
  },

  triangles: function() {
    var triangles = [],
        edges = this.edges;

    this.cells.forEach(function(cell, i) {
      var site = cell.site,
          halfedges = cell.halfedges,
          j = -1,
          m = halfedges.length,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;
        if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });

    return triangles;
  },

  links: function() {
    return this.edges.filter(function(edge) {
      return edge.right;
    }).map(function(edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  }
};

var voronoi = function() {
  var x$$1 = x$4,
      y$$1 = y$4,
      extent = null;

  function voronoi(data) {
    return new Diagram(data.map(function(d, i) {
      var s = [Math.round(x$$1(d, i, data) / epsilon$3) * epsilon$3, Math.round(y$$1(d, i, data) / epsilon$3) * epsilon$3];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function(data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function(data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function(data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$9(+_), voronoi) : x$$1;
  };

  voronoi.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$9(+_), voronoi) : y$$1;
  };

  voronoi.extent = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
};

var constant$10 = function(x) {
  return function() {
    return x;
  };
};

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity$6 = new Transform(1, 0, 0);

transform.prototype = Transform.prototype;

function transform(node) {
  return node.__zoom || identity$6;
}

function nopropagation$1() {
  exports.event.stopImmediatePropagation();
}

var noevent$1 = function() {
  exports.event.preventDefault();
  exports.event.stopImmediatePropagation();
};

// Ignore right-click, since that should open the context menu.
function defaultFilter$1() {
  return !exports.event.button;
}

function defaultExtent() {
  var e = this, w, h;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
  } else {
    w = e.clientWidth;
    h = e.clientHeight;
  }
  return [[0, 0], [w, h]];
}

function defaultTransform() {
  return this.__zoom || identity$6;
}

var zoom = function() {
  var filter = defaultFilter$1,
      extent = defaultExtent,
      k0 = 0,
      k1 = Infinity,
      x0 = -k1,
      x1 = k1,
      y0 = x0,
      y1 = x1,
      duration = 250,
      gestures = [],
      listeners = dispatch("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150;

  function zoom(selection$$1) {
    selection$$1
        .on("wheel.zoom", wheeled)
        .on("mousedown.zoom", mousedowned)
        .on("dblclick.zoom", dblclicked)
        .on("touchstart.zoom", touchstarted)
        .on("touchmove.zoom", touchmoved)
        .on("touchend.zoom touchcancel.zoom", touchended)
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
        .property("__zoom", defaultTransform);
  }

  zoom.transform = function(collection, transform) {
    var selection$$1 = collection.selection ? collection.selection() : collection;
    selection$$1.property("__zoom", defaultTransform);
    if (collection !== selection$$1) {
      schedule(collection, transform);
    } else {
      selection$$1.interrupt().each(function() {
        gesture(this, arguments)
            .start()
            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
            .end();
      });
    }
  };

  zoom.scaleBy = function(selection$$1, k) {
    zoom.scaleTo(selection$$1, function() {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    });
  };

  zoom.scaleTo = function(selection$$1, k) {
    zoom.transform(selection$$1, function() {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = centroid(e),
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e);
    });
  };

  zoom.translateBy = function(selection$$1, x, y) {
    zoom.transform(selection$$1, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent.apply(this, arguments));
    });
  };

  function scale(transform, k) {
    k = Math.max(k0, Math.min(k1, k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function constrain(transform, extent) {
    var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),
        dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);
    return dx || dy ? transform.translate(dx, dy) : transform;
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition$$1, transform, center) {
    transition$$1
        .on("start.zoom", function() { gesture(this, arguments).start(); })
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
        .tween("zoom", function() {
          var that = this,
              args = arguments,
              g = gesture(that, args),
              e = extent.apply(that, args),
              p = center || centroid(e),
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
              a = that.__zoom,
              b = typeof transform === "function" ? transform.apply(that, args) : transform,
              i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
          return function(t) {
            if (t === 1) t = b; // Avoid rounding error on end.
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
            g.zoom(null, t);
          };
        });
  }

  function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
      if ((g = gestures[i]).that === that) {
        return g;
      }
    }
    return new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
  }

  Gesture.prototype = {
    start: function() {
      if (++this.active === 1) {
        this.index = gestures.push(this) - 1;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        gestures.splice(this.index, 1);
        this.index = -1;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
        p = mouse(this);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

    // Otherwise, capture the mouse point and location at the start.
    else {
      g.mouse = [p, t.invert(p)];
      interrupt(this);
      g.start();
    }

    noevent$1();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = mouse(this);

    dragDisable(exports.event.view);
    nopropagation$1();
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();

    function mousemoved() {
      noevent$1();
      g.moved = true;
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(exports.event.view, g.moved);
      noevent$1();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = mouse(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));

    noevent$1();
    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
    else select(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, t, p;

    nopropagation$1();
    for (i = 0; i < n; ++i) {
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p;
      else if (!g.touch1) g.touch1 = p;
    }
    if (touchstarting) {
      touchstarting = clearTimeout(touchstarting);
      if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);
    }
    if (exports.event.touches.length === n) {
      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
      interrupt(this);
      g.start();
    }
  }

  function touchmoved() {
    var g = gesture(this, arguments),
        touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, t, p, l;

    noevent$1();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    for (i = 0; i < n; ++i) {
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1],
          p1 = g.touch1[0], l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    }
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent));
  }

  function touchended() {
    var g = gesture(this, arguments),
        touches$$1 = exports.event.changedTouches,
        n = touches$$1.length, i, t;

    nopropagation$1();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches$$1[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (!g.touch0) g.end();
  }

  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$10(!!_), zoom) : filter;
  };

  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function(_) {
    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
  };

  zoom.translateExtent = function(_) {
    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
  };

  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  return zoom;
};

var constant$11 = function(x) {
  return function() {
    return x;
  };
};

var BrushEvent = function(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
};

function nopropagation$2() {
  exports.event.stopImmediatePropagation();
}

var noevent$2 = function() {
  exports.event.preventDefault();
  exports.event.stopImmediatePropagation();
};

var MODE_DRAG = {name: "drag"};
var MODE_SPACE = {name: "space"};
var MODE_HANDLE = {name: "handle"};
var MODE_CENTER = {name: "center"};

var X = {
  name: "x",
  handles: ["e", "w"].map(type$1),
  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
};

var Y = {
  name: "y",
  handles: ["n", "s"].map(type$1),
  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
};

var XY = {
  name: "xy",
  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type$1),
  input: function(xy) { return xy; },
  output: function(xy) { return xy; }
};

var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};

var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};

var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};

var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};

var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type$1(t) {
  return {type: t};
}

// Ignore right-click, since that should open the context menu.
function defaultFilter$2() {
  return !exports.event.button;
}

function defaultExtent$1() {
  var svg = this.ownerSVGElement || this;
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

// Like d3.local, but with the name “__brush” rather than auto-generated.
function local$1(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;
  return node.__brush;
}

function empty$1(extent) {
  return extent[0][0] === extent[1][0]
      || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush$1(X);
}

function brushY() {
  return brush$1(Y);
}

var brush = function() {
  return brush$1(XY);
};

function brush$1(dim) {
  var extent = defaultExtent$1,
      filter = defaultFilter$2,
      listeners = dispatch(brush, "start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group
        .property("__brush", initialize)
      .selectAll(".overlay")
      .data([type$1("overlay")]);

    overlay.enter().append("rect")
        .attr("class", "overlay")
        .attr("pointer-events", "all")
        .attr("cursor", cursors.overlay)
      .merge(overlay)
        .each(function() {
          var extent = local$1(this).extent;
          select(this)
              .attr("x", extent[0][0])
              .attr("y", extent[0][1])
              .attr("width", extent[1][0] - extent[0][0])
              .attr("height", extent[1][1] - extent[0][1]);
        });

    group.selectAll(".selection")
      .data([type$1("selection")])
      .enter().append("rect")
        .attr("class", "selection")
        .attr("cursor", cursors.selection)
        .attr("fill", "#777")
        .attr("fill-opacity", 0.3)
        .attr("stroke", "#fff")
        .attr("shape-rendering", "crispEdges");

    var handle = group.selectAll(".handle")
      .data(dim.handles, function(d) { return d.type; });

    handle.exit().remove();

    handle.enter().append("rect")
        .attr("class", function(d) { return "handle handle--" + d.type; })
        .attr("cursor", function(d) { return cursors[d.type]; });

    group
        .each(redraw)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
        .on("mousedown.brush touchstart.brush", started);
  }

  brush.move = function(group, selection$$1) {
    if (group.selection) {
      group
          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
          .tween("brush", function() {
            var that = this,
                state = that.__brush,
                emit = emitter(that, arguments),
                selection0 = state.selection,
                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(this, arguments) : selection$$1, state.extent),
                i = interpolate(selection0, selection1);

            function tween(t) {
              state.selection = t === 1 && empty$1(selection1) ? null : i(t);
              redraw.call(that);
              emit.brush();
            }

            return selection0 && selection1 ? tween : tween(1);
          });
    } else {
      group
          .each(function() {
            var that = this,
                args = arguments,
                state = that.__brush,
                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(that, args) : selection$$1, state.extent),
                emit = emitter(that, args).beforestart();

            interrupt(that);
            state.selection = selection1 == null || empty$1(selection1) ? null : selection1;
            redraw.call(that);
            emit.start().brush().end();
          });
    }
  };

  function redraw() {
    var group = select(this),
        selection$$1 = local$1(this).selection;

    if (selection$$1) {
      group.selectAll(".selection")
          .style("display", null)
          .attr("x", selection$$1[0][0])
          .attr("y", selection$$1[0][1])
          .attr("width", selection$$1[1][0] - selection$$1[0][0])
          .attr("height", selection$$1[1][1] - selection$$1[0][1]);

      group.selectAll(".handle")
          .style("display", null)
          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2; })
          .attr("y", function(d) { return d.type[0] === "s" ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2; })
          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize; })
          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize; });
    }

    else {
      group.selectAll(".selection,.handle")
          .style("display", "none")
          .attr("x", null)
          .attr("y", null)
          .attr("width", null)
          .attr("height", null);
    }
  }

  function emitter(that, args) {
    return that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function() {
      if (this.starting) this.starting = false, this.emit("start");
      return this;
    },
    brush: function() {
      this.emit("brush");
      return this;
    },
    end: function() {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function(type) {
      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }
    else if (touchending) return;
    if (!filter.apply(this, arguments)) return;

    var that = this,
        type = exports.event.target.__data__.type,
        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local$1(that),
        extent = state.extent,
        selection$$1 = state.selection,
        W = extent[0][0], w0, w1,
        N = extent[0][1], n0, n1,
        E = extent[1][0], e0, e1,
        S = extent[1][1], s0, s1,
        dx,
        dy,
        moving,
        shifting = signX && signY && exports.event.shiftKey,
        lockX,
        lockY,
        point0 = mouse(that),
        point = point0,
        emit = emitter(that, arguments).beforestart();

    if (type === "overlay") {
      state.selection = selection$$1 = [
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
      ];
    } else {
      w0 = selection$$1[0][0];
      n0 = selection$$1[0][1];
      e0 = selection$$1[1][0];
      s0 = selection$$1[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;

    var group = select(that)
        .attr("pointer-events", "none");

    var overlay = group.selectAll(".overlay")
        .attr("cursor", cursors[type]);

    if (exports.event.touches) {
      group
          .on("touchmove.brush", moved, true)
          .on("touchend.brush touchcancel.brush", ended, true);
    } else {
      var view = select(exports.event.view)
          .on("keydown.brush", keydowned, true)
          .on("keyup.brush", keyupped, true)
          .on("mousemove.brush", moved, true)
          .on("mouseup.brush", ended, true);

      dragDisable(exports.event.view);
    }

    nopropagation$2();
    interrupt(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = mouse(that);
      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
        else lockX = true;
      }
      point = point1;
      moving = true;
      noevent$2();
      move();
    }

    function move() {
      var t;

      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          break;
        }
        case MODE_CENTER: {
          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
          break;
        }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection$$1 = state.selection; // May be set by brush.move!
      if (lockX) w1 = selection$$1[0][0], e1 = selection$$1[1][0];
      if (lockY) n1 = selection$$1[0][1], s1 = selection$$1[1][1];

      if (selection$$1[0][0] !== w1
          || selection$$1[0][1] !== n1
          || selection$$1[1][0] !== e1
          || selection$$1[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      nopropagation$2();
      if (exports.event.touches) {
        if (exports.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
      } else {
        yesdrag(exports.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection$$1 = state.selection; // May be set by brush.move (on start)!
      if (empty$1(selection$$1)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (exports.event.keyCode) {
        case 16: { // SHIFT
          shifting = signX && signY;
          break;
        }
        case 18: { // ALT
          if (mode === MODE_HANDLE) {
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move();
          }
          break;
        }
        case 32: { // SPACE; takes priority over ALT
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move();
          }
          break;
        }
        default: return;
      }
      noevent$2();
    }

    function keyupped() {
      switch (exports.event.keyCode) {
        case 16: { // SHIFT
          if (shifting) {
            lockX = lockY = shifting = false;
            move();
          }
          break;
        }
        case 18: { // ALT
          if (mode === MODE_CENTER) {
            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
            mode = MODE_HANDLE;
            move();
          }
          break;
        }
        case 32: { // SPACE
          if (mode === MODE_SPACE) {
            if (exports.event.altKey) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type]);
            move();
          }
          break;
        }
        default: return;
      }
      noevent$2();
    }
  }

  function initialize() {
    var state = this.__brush || {selection: null};
    state.extent = extent.apply(this, arguments);
    state.dim = dim;
    return state;
  }

  brush.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$11([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
  };

  brush.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$11(!!_), brush) : filter;
  };

  brush.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}

var cos = Math.cos;
var sin = Math.sin;
var pi$3 = Math.PI;
var halfPi$2 = pi$3 / 2;
var tau$3 = pi$3 * 2;
var max$1 = Math.max;

function compareValue(compare) {
  return function(a, b) {
    return compare(
      a.source.value + a.target.value,
      b.source.value + b.target.value
    );
  };
}

var chord = function() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = range(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j;

    // Compute the sum.
    k = 0, i = -1; while (++i < n) {
      x = 0, j = -1; while (++j < n) {
        x += matrix[i][j];
      }
      groupSums.push(x);
      subgroupIndex.push(range(n));
      k += x;
    }

    // Sort groups…
    if (sortGroups) groupIndex.sort(function(a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    });

    // Sort subgroups…
    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
      d.sort(function(a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    });

    // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?
    k = max$1(0, tau$3 - padAngle * n) / k;
    dx = k ? padAngle : tau$3 / n;

    // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!
    x = 0, i = -1; while (++i < n) {
      x0 = x, j = -1; while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }
      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    }

    // Generate chords for each (non-empty) subgroup-subgroup link.
    i = -1; while (++i < n) {
      j = i - 1; while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];
        if (source.value || target.value) {
          chords.push(source.value < target.value
              ? {source: target, target: source}
              : {source: source, target: target});
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function(_) {
    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
  };

  chord.sortGroups = function(_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function(_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function(_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
};

var slice$5 = Array.prototype.slice;

var constant$12 = function(x) {
  return function() {
    return x;
  };
};

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius$1(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

var ribbon = function() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius$1,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = slice$5.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - halfPi$2,
        sa1 = endAngle.apply(this, argv) - halfPi$2,
        sx0 = sr * cos(sa0),
        sy0 = sr * sin(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - halfPi$2,
        ta1 = endAngle.apply(this, argv) - halfPi$2;

    if (!context) context = buffer = path();

    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$12(+_), ribbon) : radius;
  };

  ribbon.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$12(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$12(+_), ribbon) : endAngle;
  };

  ribbon.source = function(_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function(_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
  };

  return ribbon;
};

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

var adder = function() {
  return new Adder;
};

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function(y) {
    add$1(temp, y, this.t);
    add$1(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};

var temp = new Adder;

function add$1(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = (a - av) + (b - bv);
}

var epsilon$4 = 1e-6;
var epsilon2$2 = 1e-12;
var pi$4 = Math.PI;
var halfPi$3 = pi$4 / 2;
var quarterPi = pi$4 / 4;
var tau$4 = pi$4 * 2;

var degrees$1 = 180 / pi$4;
var radians = pi$4 / 180;

var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos$1 = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;

var log$1 = Math.log;
var pow$1 = Math.pow;
var sin$1 = Math.sin;
var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
var sqrt$1 = Math.sqrt;
var tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
}

function asin$1(x) {
  return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);
}

function haversin(x) {
  return (x = sin$1(x / 2)) * x;
}

function noop$2() {}

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(feature, stream) {
    streamGeometry(feature.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

var geoStream = function(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
};

var areaRingSum = adder();

var areaSum = adder();
var lambda00;
var phi00;
var lambda0;
var cosPhi0;
var sinPhi0;

var areaStream = {
  point: noop$2,
  lineStart: noop$2,
  lineEnd: noop$2,
  polygonStart: function() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop$2;
  },
  sphere: function() {
    areaSum.add(tau$4);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians, phi *= radians;
  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
}

function areaPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  phi = phi / 2 + quarterPi; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = cos$1(phi),
      sinPhi = sin$1(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
      v = k * sdLambda * sin$1(adLambda);
  areaRingSum.add(atan2(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

var area$2 = function(object) {
  areaSum.reset();
  geoStream(object, areaStream);
  return areaSum * 2;
};

function spherical(cartesian) {
  return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

var lambda0$1;
var phi0;
var lambda1;
var phi1;
var lambda2;
var lambda00$1;
var phi00$1;
var p0;
var deltaSum = adder();
var ranges;
var range$1;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon$4) phi1 = 90;
    else if (deltaSum < -epsilon$4) phi0 = -90;
    range$1[0] = lambda0$1, range$1[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = cartesian([lambda * radians, phi * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2,
        sign$$1 = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * degrees$1 * sign$$1,
        phii,
        antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = inflection[1] * degrees$1;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = -inflection[1] * degrees$1;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
      }
    } else {
      if (lambda1 >= lambda0$1) {
        if (lambda < lambda0$1) lambda0$1 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      }
    }
  } else {
    boundsPoint(lambda, phi);
  }
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range$1[0] = lambda0$1, range$1[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00$1 = lambda, phi00$1 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00$1, phi00$1);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);
  range$1[0] = lambda0$1, range$1[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

var bounds = function(feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
  ranges = [];
  geoStream(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
    }
  }

  ranges = range$1 = null;

  return lambda0$1 === Infinity || phi0 === Infinity
      ? [[NaN, NaN], [NaN, NaN]]
      : [[lambda0$1, phi0], [lambda1, phi1]];
};

var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X2;
var Y2;
var Z2;
var lambda00$2;
var phi00$2;
var x0;
var y0;
var z0; // previous point

var centroidStream = {
  sphere: noop$2,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi);
  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi);
  x0 = cosPhi * cos$1(lambda);
  y0 = cosPhi * sin$1(lambda);
  z0 = sin$1(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi),
      x = cosPhi * cos$1(lambda),
      y = cosPhi * sin$1(lambda),
      z = sin$1(phi),
      w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00$2, phi00$2);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00$2 = lambda, phi00$2 = phi;
  lambda *= radians, phi *= radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos$1(phi);
  x0 = cosPhi * cos$1(lambda);
  y0 = cosPhi * sin$1(lambda);
  z0 = sin$1(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos$1(phi),
      x = cosPhi * cos$1(lambda),
      y = cosPhi * sin$1(lambda),
      z = sin$1(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = sqrt$1(cx * cx + cy * cy + cz * cz),
      u = x0 * x + y0 * y + z0 * z,
      v = m && -acos(u) / m, // area weight
      w = atan2(m, u); // line weight
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

var centroid$1 = function(object) {
  W0 = W1 =
  X0 = Y0 = Z0 =
  X1 = Y1 = Z1 =
  X2 = Y2 = Z2 = 0;
  geoStream(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < epsilon2$2) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < epsilon2$2) return [NaN, NaN];
  }

  return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];
};

var constant$13 = function(x) {
  return function() {
    return x;
  };
};

var compose = function(a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
};

function rotationIdentity(lambda, phi) {
  return [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
    : rotationIdentity);
}

function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos$1(deltaPhi),
      sinDeltaPhi = sin$1(deltaPhi),
      cosDeltaGamma = cos$1(deltaGamma),
      sinDeltaGamma = sin$1(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }

  rotation.invert = function(lambda, phi) {
    var cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };

  return rotation;
}

var rotation = function(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
  }

  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
  };

  return forward;
};

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = cos$1(radius),
      sinRadius = sin$1(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * tau$4;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;
}

var circle$1 = function() {
  var center = constant$13([0, 0]),
      radius = constant$13(90),
      precision = constant$13(6),
      ring,
      rotate,
      stream = {point: point};

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= degrees$1, x[1] *= degrees$1;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * radians,
        p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {type: "Polygon", coordinates: [ring]};
    ring = rotate = null;
    return c;
  }

  circle.center = function(_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : constant$13([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$13(+_), circle) : radius;
  };

  circle.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$13(+_), circle) : precision;
  };

  return circle;
};

var clipBuffer = function() {
  var lines = [],
      line;
  return {
    point: function(x, y) {
      line.push([x, y]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop$2,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
};

var clipLine = function(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
};

var pointEqual = function(a, b) {
  return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;
};

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if (pointEqual(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link$1(subject);
  link$1(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
};

function link$1(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

var clipMax = 1e9;
var clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipExtent(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3
        : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1
        : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = clipBuffer(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = merge(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (clipLine(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

var extent$1 = function() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
};

var lengthSum = adder();
var lambda0$2;
var sinPhi0$1;
var cosPhi0$1;

var lengthStream = {
  sphere: noop$2,
  point: noop$2,
  lineStart: lengthLineStart,
  lineEnd: noop$2,
  polygonStart: noop$2,
  polygonEnd: noop$2
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop$2;
}

function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin$1(phi),
      cosPhi = cos$1(phi),
      delta = abs(lambda - lambda0$2),
      cosDelta = cos$1(delta),
      sinDelta = sin$1(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt$1(x * x + y * y), z));
  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
}

var length$2 = function(object) {
  lengthSum.reset();
  geoStream(object, lengthStream);
  return +lengthSum;
};

var coordinates = [null, null];
var object$1 = {type: "LineString", coordinates: coordinates};

var distance = function(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length$2(object$1);
};

function graticuleX(y0, y1, dy) {
  var y = range(y0, y1 - epsilon$4, dy).concat(y1);
  return function(x) { return y.map(function(y) { return [x, y]; }); };
}

function graticuleY(x0, x1, dx) {
  var x = range(x0, x1 - epsilon$4, dx).concat(x1);
  return function(y) { return x.map(function(x) { return [x, y]; }); };
}

var graticule = function() {
  var x1, x0, X1, X0,
      y1, y0, Y1, Y0,
      dx = 10, dy = dx, DX = 90, DY = 360,
      x, y, X, Y,
      precision = 2.5;

  function graticule() {
    return {type: "MultiLineString", coordinates: lines()};
  }

  function lines() {
    return range(ceil(X0 / DX) * DX, X1, DX).map(X)
        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))
        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));
  }

  graticule.lines = function() {
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
  };

  graticule.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X0).concat(
        Y(Y1).slice(1),
        X(X1).reverse().slice(1),
        Y(Y0).reverse().slice(1))
      ]
    };
  };

  graticule.extent = function(_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function(_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function(_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function(_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule
      .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])
      .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);
};

var interpolate$2 = function(a, b) {
  var x0 = a[0] * radians,
      y0 = a[1] * radians,
      x1 = b[0] * radians,
      y1 = b[1] * radians,
      cy0 = cos$1(y0),
      sy0 = sin$1(y0),
      cy1 = cos$1(y1),
      sy1 = sin$1(y1),
      kx0 = cy0 * cos$1(x0),
      ky0 = cy0 * sin$1(x0),
      kx1 = cy1 * cos$1(x1),
      ky1 = cy1 * sin$1(x1),
      d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
      k = sin$1(d);

  var interpolate = d ? function(t) {
    var B = sin$1(t *= d) / k,
        A = sin$1(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [
      atan2(y, x) * degrees$1,
      atan2(z, sqrt$1(x * x + y * y)) * degrees$1
    ];
  } : function() {
    return [x0 * degrees$1, y0 * degrees$1];
  };

  interpolate.distance = d;

  return interpolate;
};

var identity$7 = function(x) {
  return x;
};

var areaSum$1 = adder();
var areaRingSum$1 = adder();
var x00;
var y00;
var x0$1;
var y0$1;

var areaStream$1 = {
  point: noop$2,
  lineStart: noop$2,
  lineEnd: noop$2,
  polygonStart: function() {
    areaStream$1.lineStart = areaRingStart$1;
    areaStream$1.lineEnd = areaRingEnd$1;
  },
  polygonEnd: function() {
    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;
    areaSum$1.add(abs(areaRingSum$1));
    areaRingSum$1.reset();
  },
  result: function() {
    var area = areaSum$1 / 2;
    areaSum$1.reset();
    return area;
  }
};

function areaRingStart$1() {
  areaStream$1.point = areaPointFirst$1;
}

function areaPointFirst$1(x, y) {
  areaStream$1.point = areaPoint$1;
  x00 = x0$1 = x, y00 = y0$1 = y;
}

function areaPoint$1(x, y) {
  areaRingSum$1.add(y0$1 * x - x0$1 * y);
  x0$1 = x, y0$1 = y;
}

function areaRingEnd$1() {
  areaPoint$1(x00, y00);
}

var x0$2 = Infinity;
var y0$2 = x0$2;
var x1 = -x0$2;
var y1 = x1;

var boundsStream$1 = {
  point: boundsPoint$1,
  lineStart: noop$2,
  lineEnd: noop$2,
  polygonStart: noop$2,
  polygonEnd: noop$2,
  result: function() {
    var bounds = [[x0$2, y0$2], [x1, y1]];
    x1 = y1 = -(y0$2 = x0$2 = Infinity);
    return bounds;
  }
};

function boundsPoint$1(x, y) {
  if (x < x0$2) x0$2 = x;
  if (x > x1) x1 = x;
  if (y < y0$2) y0$2 = y;
  if (y > y1) y1 = y;
}

// TODO Enforce positive area for exterior, negative area for interior?

var X0$1 = 0;
var Y0$1 = 0;
var Z0$1 = 0;
var X1$1 = 0;
var Y1$1 = 0;
var Z1$1 = 0;
var X2$1 = 0;
var Y2$1 = 0;
var Z2$1 = 0;
var x00$1;
var y00$1;
var x0$3;
var y0$3;

var centroidStream$1 = {
  point: centroidPoint$1,
  lineStart: centroidLineStart$1,
  lineEnd: centroidLineEnd$1,
  polygonStart: function() {
    centroidStream$1.lineStart = centroidRingStart$1;
    centroidStream$1.lineEnd = centroidRingEnd$1;
  },
  polygonEnd: function() {
    centroidStream$1.point = centroidPoint$1;
    centroidStream$1.lineStart = centroidLineStart$1;
    centroidStream$1.lineEnd = centroidLineEnd$1;
  },
  result: function() {
    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
        : [NaN, NaN];
    X0$1 = Y0$1 = Z0$1 =
    X1$1 = Y1$1 = Z1$1 =
    X2$1 = Y2$1 = Z2$1 = 0;
    return centroid;
  }
};

function centroidPoint$1(x, y) {
  X0$1 += x;
  Y0$1 += y;
  ++Z0$1;
}

function centroidLineStart$1() {
  centroidStream$1.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream$1.point = centroidPointLine;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);
  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidLineEnd$1() {
  centroidStream$1.point = centroidPoint$1;
}

function centroidRingStart$1() {
  centroidStream$1.point = centroidPointFirstRing;
}

function centroidRingEnd$1() {
  centroidPointRing(x00$1, y00$1);
}

function centroidPointFirstRing(x, y) {
  centroidStream$1.point = centroidPointRing;
  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0$3,
      dy = y - y0$3,
      z = sqrt$1(dx * dx + dy * dy);

  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;

  z = y0$3 * x - x0$3 * y;
  X2$1 += z * (x0$3 + x);
  Y2$1 += z * (y0$3 + y);
  Z2$1 += z * 3;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau$4);
        break;
      }
    }
  },
  result: noop$2
};

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _circle: circle$2(4.5),
  pointRadius: function(_) {
    return this._circle = circle$2(_), this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    }
  }
};

function circle$2(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}

var index$3 = function() {
  var pointRadius = 4.5,
      projection,
      projectionStream,
      context,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    geoStream(object, projectionStream(areaStream$1));
    return areaStream$1.result();
  };

  path.bounds = function(object) {
    geoStream(object, projectionStream(boundsStream$1));
    return boundsStream$1.result();
  };

  path.centroid = function(object) {
    geoStream(object, projectionStream(centroidStream$1));
    return centroidStream$1.result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = (context = _) == null ? new PathString : new PathContext(_);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(null).context(null);
};

var sum$2 = adder();

var polygonContains = function(polygon, point) {
  var lambda = point[0],
      phi = point[1],
      normal = [sin$1(lambda), -cos$1(lambda), 0],
      angle = 0,
      winding = 0;

  sum$2.reset();

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = sin$1(phi0),
        cosPhi0 = cos$1(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = sin$1(phi1),
          cosPhi1 = cos$1(phi1),
          delta = lambda1 - lambda0,
          sign$$1 = delta >= 0 ? 1 : -1,
          absDelta = sign$$1 * delta,
          antimeridian = absDelta > pi$4,
          k = sinPhi0 * sinPhi1;

      sum$2.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
      angle += antimeridian ? delta + sign$$1 * tau$4 : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);
};

var clip = function(pointVisible, clipLine, interpolate, start) {
  return function(rotate, sink) {
    var line = clipLine(sink),
        rotatedStart = rotate.invert(start[0], start[1]),
        ringBuffer = clipBuffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains(polygon, rotatedStart);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      var point = rotate(lambda, phi);
      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      var point = rotate(lambda, phi);
      line.point(point[0], point[1]);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      var point = rotate(lambda, phi);
      ringSink.point(point[0], point[1]);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i, n = ringSegments.length, m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
          sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
};

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1])
       - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);
}

var clipAntimeridian = clip(
  function() { return true; },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi$4, -halfPi$3]
);

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi$4 : -pi$4,
          delta = abs(lambda1 - lambda0);
      if (abs(delta - pi$4) < epsilon$4) { // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi$4) { // line crosses antimeridian
        if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies
        if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
  return abs(sinLambda0Lambda1) > epsilon$4
      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
      : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi$3;
    stream.point(-pi$4, phi);
    stream.point(0, phi);
    stream.point(pi$4, phi);
    stream.point(pi$4, 0);
    stream.point(pi$4, -phi);
    stream.point(0, -phi);
    stream.point(-pi$4, -phi);
    stream.point(-pi$4, 0);
    stream.point(-pi$4, phi);
  } else if (abs(from[0] - to[0]) > epsilon$4) {
    var lambda = from[0] < to[0] ? pi$4 : -pi$4;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

var clipCircle = function(radius, delta) {
  var cr = cos$1(radius),
      smallRadius = cr > 0,
      notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return cos$1(lambda) * cos$1(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
        c0, // code for previous point
        v0, // visibility of previous point
        v00, // visibility of first point
        clean; // no intersections
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius
              ? v ? 0 : code(lambda, phi)
              : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
            point1[0] += epsilon$4;
            point1[1] += epsilon$4;
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !pointEqual(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | ((v00 && v0) << 1);
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = cartesian(a),
        pb = cartesian(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0], // normal
        n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 =  cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1);

    if (t2 < 0) return;

    var t = sqrt$1(t2),
        q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = abs(delta - pi$4) < epsilon$4,
        meridian = polar || delta < epsilon$4;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian
        ? polar
          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)
          : phi0 <= q[1] && q[1] <= phi1
        : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A);
      return [q, spherical(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : pi$4 - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$4, radius - pi$4]);
};

var transform$1 = function(prototype) {
  return {
    stream: transform$2(prototype)
  };
};

function transform$2(prototype) {
  function T() {}
  var p = T.prototype = Object.create(Transform$1.prototype);
  for (var k in prototype) p[k] = prototype[k];
  return function(stream) {
    var t = new T;
    t.stream = stream;
    return t;
  };
}

function Transform$1() {}

Transform$1.prototype = {
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};

function fit(project, extent, object) {
  var w = extent[1][0] - extent[0][0],
      h = extent[1][1] - extent[0][1],
      clip = project.clipExtent && project.clipExtent();

  project
      .scale(150)
      .translate([0, 0]);

  if (clip != null) project.clipExtent(null);

  geoStream(object, project.stream(boundsStream$1));

  var b = boundsStream$1.result(),
      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

  if (clip != null) project.clipExtent(clip);

  return project
      .scale(k * 150)
      .translate([x, y]);
}

function fitSize(project) {
  return function(size, object) {
    return fit(project, [[0, 0], size], object);
  };
}

function fitExtent(project) {
  return function(extent, object) {
    return fit(project, extent, object);
  };
}

var maxDepth = 16;
var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

var resample = function(project, delta2) {
  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
};

function resampleNone(project) {
  return transform$2({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample$1(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = sqrt$1(a * a + b * b + c * c),
          phi2 = asin$1(c /= m),
          lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
        lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

var transformRadians = transform$2({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});

function projection(project) {
  return projectionMutator(function() { return project; })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150, // scale
      x = 480, y = 250, // translate
      dx, dy, lambda = 0, phi = 0, // center
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
      theta = null, preclip = clipAntimeridian, // clip angle
      x0 = null, y0, x1, y1, postclip = identity$7, // clip extent
      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
      cache,
      cacheStream;

  function projection(point) {
    point = projectRotate(point[0] * radians, point[1] * radians);
    return [point[0] * k + dx, dy - point[1] * k];
  }

  function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [point[0] * degrees$1, point[1] * degrees$1];
  }

  function projectTransform(x, y) {
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
  }

  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
  };

  projection.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
  };

  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
  };

  projection.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
  };

  projection.precision = function(_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
  };

  projection.fitExtent = fitExtent(projection);

  projection.fitSize = fitSize(projection);

  function recenter() {
    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function() {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = pi$4 / 3,
      m = projectionMutator(projectAt),
      p = m(phi0, phi1);

  p.parallels = function(_) {
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
  };

  return p;
}

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = cos$1(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
  }

  forward.invert = function(x, y) {
    return [x / cosPhi0, asin$1(y * cosPhi0)];
  };

  return forward;
}

function conicEqualAreaRaw(y0, y1) {
  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if (abs(n) < epsilon$4) return cylindricalEqualAreaRaw(y0);

  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$1(c) / n;

  function project(x, y) {
    var r = sqrt$1(c - 2 * n * sin$1(y)) / n;
    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
  }

  project.invert = function(x, y) {
    var r0y = r0 - y;
    return [atan2(x, abs(r0y)) / n * sign$1(r0y), asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

var conicEqualArea = function() {
  return conicProjection(conicEqualAreaRaw)
      .scale(155.424)
      .center([0, 33.6442]);
};

var albers = function() {
  return conicEqualArea()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7]);
};

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
var albersUsa = function() {
  var cache,
      cacheStream,
      lower48 = albers(), lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
      point, pointStream = {point: function(x, y) { point = [x, y]; }};

  function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null,
        (lower48Point.point(x, y), point)
        || (alaskaPoint.point(x, y), point)
        || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function(coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
        : lower48).invert(coordinates);
  };

  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];

    lower48Point = lower48
        .translate(_)
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
        .stream(pointStream);

    alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])
        .stream(pointStream);

    hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])
        .stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = fitExtent(albersUsa);

  albersUsa.fitSize = fitSize(albersUsa);

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
};

function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = cos$1(x),
        cy = cos$1(y),
        k = scale(cx * cy);
    return [
      k * cy * sin$1(x),
      k * sin$1(y)
    ];
  }
}

function azimuthalInvert(angle) {
  return function(x, y) {
    var z = sqrt$1(x * x + y * y),
        c = angle(z),
        sc = sin$1(c),
        cc = cos$1(c);
    return [
      atan2(x * sc, z * cc),
      asin$1(z && y * sc / z)
    ];
  }
}

var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt$1(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin$1(z / 2);
});

var azimuthalEqualArea = function() {
  return projection(azimuthalEqualAreaRaw)
      .scale(124.75)
      .clipAngle(180 - 1e-3);
};

var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
  return (c = acos(c)) && c / sin$1(c);
});

azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});

var azimuthalEquidistant = function() {
  return projection(azimuthalEquidistantRaw)
      .scale(79.4188)
      .clipAngle(180 - 1e-3);
};

function mercatorRaw(lambda, phi) {
  return [lambda, log$1(tan((halfPi$3 + phi) / 2))];
}

mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi$3];
};

var mercator = function() {
  return mercatorProjection(mercatorRaw)
      .scale(961 / tau$4);
};

function mercatorProjection(project) {
  var m = projection(project),
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      clipAuto;

  m.scale = function(_) {
    return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
  };

  m.translate = function(_) {
    return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
  };

  m.clipExtent = function(_) {
    if (!arguments.length) return clipAuto ? null : clipExtent();
    if (clipAuto = _ == null) {
      var k = pi$4 * scale(),
          t = translate();
      _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];
    }
    clipExtent(_);
    return m;
  };

  return m.clipExtent(null);
}

function tany(y) {
  return tan((halfPi$3 + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),
      f = cy0 * pow$1(tany(y0), n) / n;

  if (!n) return mercatorRaw;

  function project(x, y) {
    if (f > 0) { if (y < -halfPi$3 + epsilon$4) y = -halfPi$3 + epsilon$4; }
    else { if (y > halfPi$3 - epsilon$4) y = halfPi$3 - epsilon$4; }
    var r = f / pow$1(tany(y), n);
    return [r * sin$1(n * x), f - r * cos$1(n * x)];
  }

  project.invert = function(x, y) {
    var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);
    return [atan2(x, abs(fy)) / n * sign$1(fy), 2 * atan(pow$1(f / r, 1 / n)) - halfPi$3];
  };

  return project;
}

var conicConformal = function() {
  return conicProjection(conicConformalRaw)
      .scale(109.5)
      .parallels([30, 30]);
};

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

var equirectangular = function() {
  return projection(equirectangularRaw)
      .scale(152.63);
};

function conicEquidistantRaw(y0, y1) {
  var cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if (abs(n) < epsilon$4) return equirectangularRaw;

  function project(x, y) {
    var gy = g - y, nx = n * x;
    return [gy * sin$1(nx), g - gy * cos$1(nx)];
  }

  project.invert = function(x, y) {
    var gy = g - y;
    return [atan2(x, abs(gy)) / n * sign$1(gy), g - sign$1(n) * sqrt$1(x * x + gy * gy)];
  };

  return project;
}

var conicEquidistant = function() {
  return conicProjection(conicEquidistantRaw)
      .scale(131.154)
      .center([0, 13.9389]);
};

function gnomonicRaw(x, y) {
  var cy = cos$1(y), k = cos$1(x) * cy;
  return [cy * sin$1(x) / k, sin$1(y) / k];
}

gnomonicRaw.invert = azimuthalInvert(atan);

var gnomonic = function() {
  return projection(gnomonicRaw)
      .scale(144.049)
      .clipAngle(60);
};

function orthographicRaw(x, y) {
  return [cos$1(y) * sin$1(x), sin$1(y)];
}

orthographicRaw.invert = azimuthalInvert(asin$1);

var orthographic = function() {
  return projection(orthographicRaw)
      .scale(249.5)
      .clipAngle(90 + epsilon$4);
};

function stereographicRaw(x, y) {
  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
  return [cy * sin$1(x) / k, sin$1(y) / k];
}

stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});

var stereographic = function() {
  return projection(stereographicRaw)
      .scale(250)
      .clipAngle(142);
};

function transverseMercatorRaw(lambda, phi) {
  return [log$1(tan((halfPi$3 + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi$3];
};

var transverseMercator = function() {
  var m = mercatorProjection(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90])
      .scale(159.155);
};

exports.version = version;
exports.bisect = bisectRight;
exports.bisectRight = bisectRight;
exports.bisectLeft = bisectLeft;
exports.ascending = ascending;
exports.bisector = bisector;
exports.descending = descending;
exports.deviation = deviation;
exports.extent = extent;
exports.histogram = histogram;
exports.thresholdFreedmanDiaconis = freedmanDiaconis;
exports.thresholdScott = scott;
exports.thresholdSturges = sturges;
exports.max = max;
exports.mean = mean;
exports.median = median;
exports.merge = merge;
exports.min = min;
exports.pairs = pairs;
exports.permute = permute;
exports.quantile = threshold;
exports.range = range;
exports.scan = scan;
exports.shuffle = shuffle;
exports.sum = sum;
exports.ticks = ticks;
exports.tickStep = tickStep;
exports.transpose = transpose;
exports.variance = variance;
exports.zip = zip;
exports.entries = entries;
exports.keys = keys;
exports.values = values;
exports.map = map$1;
exports.set = set;
exports.nest = nest;
exports.randomUniform = uniform;
exports.randomNormal = normal;
exports.randomLogNormal = logNormal;
exports.randomBates = bates;
exports.randomIrwinHall = irwinHall;
exports.randomExponential = exponential;
exports.easeLinear = linear;
exports.easeQuad = quadInOut;
exports.easeQuadIn = quadIn;
exports.easeQuadOut = quadOut;
exports.easeQuadInOut = quadInOut;
exports.easeCubic = cubicInOut;
exports.easeCubicIn = cubicIn;
exports.easeCubicOut = cubicOut;
exports.easeCubicInOut = cubicInOut;
exports.easePoly = polyInOut;
exports.easePolyIn = polyIn;
exports.easePolyOut = polyOut;
exports.easePolyInOut = polyInOut;
exports.easeSin = sinInOut;
exports.easeSinIn = sinIn;
exports.easeSinOut = sinOut;
exports.easeSinInOut = sinInOut;
exports.easeExp = expInOut;
exports.easeExpIn = expIn;
exports.easeExpOut = expOut;
exports.easeExpInOut = expInOut;
exports.easeCircle = circleInOut;
exports.easeCircleIn = circleIn;
exports.easeCircleOut = circleOut;
exports.easeCircleInOut = circleInOut;
exports.easeBounce = bounceOut;
exports.easeBounceIn = bounceIn;
exports.easeBounceOut = bounceOut;
exports.easeBounceInOut = bounceInOut;
exports.easeBack = backInOut;
exports.easeBackIn = backIn;
exports.easeBackOut = backOut;
exports.easeBackInOut = backInOut;
exports.easeElastic = elasticOut;
exports.easeElasticIn = elasticIn;
exports.easeElasticOut = elasticOut;
exports.easeElasticInOut = elasticInOut;
exports.polygonArea = area;
exports.polygonCentroid = centroid;
exports.polygonHull = hull;
exports.polygonContains = contains;
exports.polygonLength = length$1;
exports.path = path;
exports.quadtree = quadtree;
exports.queue = queue;
exports.arc = arc;
exports.area = area$1;
exports.line = line;
exports.pie = pie;
exports.radialArea = radialArea;
exports.radialLine = radialLine$1;
exports.symbol = symbol;
exports.symbols = symbols;
exports.symbolCircle = circle;
exports.symbolCross = cross$1;
exports.symbolDiamond = diamond;
exports.symbolSquare = square;
exports.symbolStar = star;
exports.symbolTriangle = triangle;
exports.symbolWye = wye;
exports.curveBasisClosed = basisClosed;
exports.curveBasisOpen = basisOpen;
exports.curveBasis = basis;
exports.curveBundle = bundle;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCardinal = cardinal;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveCatmullRom = catmullRom;
exports.curveLinearClosed = linearClosed;
exports.curveLinear = curveLinear;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.stack = stack;
exports.stackOffsetExpand = expand;
exports.stackOffsetNone = none;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAscending = ascending$1;
exports.stackOrderDescending = descending$2;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none$1;
exports.stackOrderReverse = reverse;
exports.color = color;
exports.rgb = rgb;
exports.hsl = hsl;
exports.lab = lab;
exports.hcl = hcl;
exports.cubehelix = cubehelix;
exports.interpolate = interpolate;
exports.interpolateArray = array$1;
exports.interpolateDate = date;
exports.interpolateNumber = interpolateNumber;
exports.interpolateObject = object;
exports.interpolateRound = interpolateRound;
exports.interpolateString = interpolateString;
exports.interpolateTransformCss = interpolateTransformCss;
exports.interpolateTransformSvg = interpolateTransformSvg;
exports.interpolateZoom = interpolateZoom;
exports.interpolateRgb = interpolateRgb;
exports.interpolateRgbBasis = rgbBasis;
exports.interpolateRgbBasisClosed = rgbBasisClosed;
exports.interpolateHsl = hsl$2;
exports.interpolateHslLong = hslLong;
exports.interpolateLab = lab$1;
exports.interpolateHcl = hcl$2;
exports.interpolateHclLong = hclLong;
exports.interpolateCubehelix = cubehelix$2;
exports.interpolateCubehelixLong = cubehelixLong;
exports.interpolateBasis = basis$2;
exports.interpolateBasisClosed = basisClosed$1;
exports.quantize = quantize;
exports.dispatch = dispatch;
exports.dsvFormat = dsv;
exports.csvParse = csvParse;
exports.csvParseRows = csvParseRows;
exports.csvFormat = csvFormat;
exports.csvFormatRows = csvFormatRows;
exports.tsvParse = tsvParse;
exports.tsvParseRows = tsvParseRows;
exports.tsvFormat = tsvFormat;
exports.tsvFormatRows = tsvFormatRows;
exports.request = request;
exports.html = html;
exports.json = json;
exports.text = text;
exports.xml = xml;
exports.csv = csv$1;
exports.tsv = tsv$1;
exports.now = now;
exports.timer = timer;
exports.timerFlush = timerFlush;
exports.timeout = timeout$1;
exports.interval = interval$1;
exports.timeInterval = newInterval;
exports.timeMillisecond = millisecond;
exports.timeMilliseconds = milliseconds;
exports.timeSecond = second;
exports.timeSeconds = seconds;
exports.timeMinute = minute;
exports.timeMinutes = minutes;
exports.timeHour = hour;
exports.timeHours = hours;
exports.timeDay = day;
exports.timeDays = days;
exports.timeWeek = sunday;
exports.timeWeeks = sundays;
exports.timeSunday = sunday;
exports.timeSundays = sundays;
exports.timeMonday = monday;
exports.timeMondays = mondays;
exports.timeTuesday = tuesday;
exports.timeTuesdays = tuesdays;
exports.timeWednesday = wednesday;
exports.timeWednesdays = wednesdays;
exports.timeThursday = thursday;
exports.timeThursdays = thursdays;
exports.timeFriday = friday;
exports.timeFridays = fridays;
exports.timeSaturday = saturday;
exports.timeSaturdays = saturdays;
exports.timeMonth = month;
exports.timeMonths = months;
exports.timeYear = year;
exports.timeYears = years;
exports.utcMillisecond = millisecond;
exports.utcMilliseconds = milliseconds;
exports.utcSecond = second;
exports.utcSeconds = seconds;
exports.utcMinute = utcMinute;
exports.utcMinutes = utcMinutes;
exports.utcHour = utcHour;
exports.utcHours = utcHours;
exports.utcDay = utcDay;
exports.utcDays = utcDays;
exports.utcWeek = utcSunday;
exports.utcWeeks = utcSundays;
exports.utcSunday = utcSunday;
exports.utcSundays = utcSundays;
exports.utcMonday = utcMonday;
exports.utcMondays = utcMondays;
exports.utcTuesday = utcTuesday;
exports.utcTuesdays = utcTuesdays;
exports.utcWednesday = utcWednesday;
exports.utcWednesdays = utcWednesdays;
exports.utcThursday = utcThursday;
exports.utcThursdays = utcThursdays;
exports.utcFriday = utcFriday;
exports.utcFridays = utcFridays;
exports.utcSaturday = utcSaturday;
exports.utcSaturdays = utcSaturdays;
exports.utcMonth = utcMonth;
exports.utcMonths = utcMonths;
exports.utcYear = utcYear;
exports.utcYears = utcYears;
exports.formatLocale = formatLocale;
exports.formatDefaultLocale = defaultLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;
exports.isoFormat = formatIso;
exports.isoParse = parseIso;
exports.timeFormatLocale = formatLocale$1;
exports.timeFormatDefaultLocale = defaultLocale$1;
exports.scaleBand = band;
exports.scalePoint = point$4;
exports.scaleIdentity = identity$4;
exports.scaleLinear = linear$2;
exports.scaleLog = log;
exports.scaleOrdinal = ordinal;
exports.scaleImplicit = implicit;
exports.scalePow = pow;
exports.scaleSqrt = sqrt;
exports.scaleQuantile = quantile$$1;
exports.scaleQuantize = quantize$1;
exports.scaleThreshold = threshold$1;
exports.scaleTime = time;
exports.scaleUtc = utcTime;
exports.schemeCategory10 = category10;
exports.schemeCategory20b = category20b;
exports.schemeCategory20c = category20c;
exports.schemeCategory20 = category20;
exports.scaleSequential = sequential;
exports.interpolateCubehelixDefault = cubehelix$3;
exports.interpolateRainbow = rainbow$1;
exports.interpolateWarm = warm;
exports.interpolateCool = cool;
exports.interpolateViridis = viridis;
exports.interpolateMagma = magma;
exports.interpolateInferno = inferno;
exports.interpolatePlasma = plasma;
exports.creator = creator;
exports.customEvent = customEvent;
exports.local = local;
exports.matcher = matcher$1;
exports.mouse = mouse;
exports.namespace = namespace;
exports.namespaces = namespaces;
exports.select = select;
exports.selectAll = selectAll;
exports.selection = selection;
exports.selector = selector;
exports.selectorAll = selectorAll;
exports.touch = touch;
exports.touches = touches;
exports.window = window;
exports.active = active;
exports.interrupt = interrupt;
exports.transition = transition;
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;
exports.cluster = cluster;
exports.hierarchy = hierarchy;
exports.pack = index;
exports.packSiblings = siblings;
exports.packEnclose = enclose;
exports.partition = partition;
exports.stratify = stratify;
exports.tree = tree;
exports.treemap = index$1;
exports.treemapBinary = binary;
exports.treemapDice = treemapDice;
exports.treemapSlice = treemapSlice;
exports.treemapSliceDice = sliceDice;
exports.treemapSquarify = squarify;
exports.treemapResquarify = resquarify;
exports.forceCenter = center$1;
exports.forceCollide = collide;
exports.forceLink = link;
exports.forceManyBody = manyBody;
exports.forceSimulation = simulation;
exports.forceX = x$3;
exports.forceY = y$3;
exports.drag = drag;
exports.dragDisable = dragDisable;
exports.dragEnable = yesdrag;
exports.voronoi = voronoi;
exports.zoom = zoom;
exports.zoomIdentity = identity$6;
exports.zoomTransform = transform;
exports.brush = brush;
exports.brushX = brushX;
exports.brushY = brushY;
exports.brushSelection = brushSelection;
exports.chord = chord;
exports.ribbon = ribbon;
exports.geoAlbers = albers;
exports.geoAlbersUsa = albersUsa;
exports.geoArea = area$2;
exports.geoAzimuthalEqualArea = azimuthalEqualArea;
exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
exports.geoAzimuthalEquidistant = azimuthalEquidistant;
exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
exports.geoBounds = bounds;
exports.geoCentroid = centroid$1;
exports.geoCircle = circle$1;
exports.geoClipExtent = extent$1;
exports.geoConicConformal = conicConformal;
exports.geoConicConformalRaw = conicConformalRaw;
exports.geoConicEqualArea = conicEqualArea;
exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
exports.geoConicEquidistant = conicEquidistant;
exports.geoConicEquidistantRaw = conicEquidistantRaw;
exports.geoDistance = distance;
exports.geoEquirectangular = equirectangular;
exports.geoEquirectangularRaw = equirectangularRaw;
exports.geoGnomonic = gnomonic;
exports.geoGnomonicRaw = gnomonicRaw;
exports.geoGraticule = graticule;
exports.geoInterpolate = interpolate$2;
exports.geoLength = length$2;
exports.geoMercator = mercator;
exports.geoMercatorRaw = mercatorRaw;
exports.geoOrthographic = orthographic;
exports.geoOrthographicRaw = orthographicRaw;
exports.geoPath = index$3;
exports.geoProjection = projection;
exports.geoProjectionMutator = projectionMutator;
exports.geoRotation = rotation;
exports.geoStereographic = stereographic;
exports.geoStereographicRaw = stereographicRaw;
exports.geoStream = geoStream;
exports.geoTransform = transform$1;
exports.geoTransverseMercator = transverseMercator;
exports.geoTransverseMercatorRaw = transverseMercatorRaw;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],"defaults.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// default svg config
const dflt_svg_conf = {
  svgContainerId: 'svgVecContainer',
  width: window.innerWidth,
  height: window.innerHeight,
  svg_margin: {
    x: 50,
    y: 50
  }
};
const dflt_h_grids_conf = {
  opacity: 0.5,
  stroke_color: '#bbbbbb',
  stroke_width: '1.5',
  duration: 1000,
  pre_delay: 100,
  post_delay: 100,
  groupId: 'originalxGrids',
  domain: [-10, 10]
};
const dflt_v_grids_conf = {
  opacity: 0.5,
  stroke_color: '#808080',
  stroke_width: '1.5',
  duration: 1000,
  pre_delay: 100,
  post_delay: 100,
  groupId: 'originalyGrids',
  domain: [-10, 10]
};
const dflt_vec_conf = {
  opacity: 1,
  stroke_color: '#1DA1F2',
  stroke_width: '1.8',
  duration: 500,
  pre_delay: 100,
  post_delay: 300 // export defaults object

};
const defaults = {
  dflt_svg_conf: dflt_svg_conf,
  dflt_h_grids_conf: dflt_h_grids_conf,
  dflt_v_grids_conf: dflt_v_grids_conf,
  dflt_vec_conf: dflt_vec_conf,
  className: 'dflt_vector'
};
var _default = defaults;
exports.default = _default;
},{}],"util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var d3 = _interopRequireWildcard(require("d3"));

var _defaults = _interopRequireDefault(require("./defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/* 
* utility functions used in plot
*
*/
// imports:
var dflt_vector_colorId = _defaults.default.dflt_vec_conf.stroke_color.split('#')[1]; // deep copy of an object


function _deepObjectCopy(obj) {
  var clone = {};

  for (var i in obj) {
    if (typeof obj[i] == "object" && obj[i] != null) clone[i] = _deepObjectCopy(obj[i]);else clone[i] = obj[i];
  }

  return clone;
} // digest new  configs: 


var _digest_configs = function (dflt_config, new_config) {
  // make a deep copy of dflt_config so that it dosent affect the default 
  var config = _deepObjectCopy(dflt_config);

  for (let key in new_config) {
    if (!dflt_config.hasOwnProperty(key)) {
      throw new Error(`Invalid key: ${key} `);
    } else {
      Object.defineProperty(config, key, {
        value: new_config[key]
      });
    }
  }

  return config;
};

var _digest_config_list = function (dflt_config, config_list) {
  var new_config_list = [];

  if (!config_list) {
    return [dflt_config];
  }

  config_list.forEach(config => {
    new_config_list.push(_digest_configs(dflt_config, config));
  });
  return new_config_list;
}; // configuration method for svg_containers


var _configure_svg_container = function (svg_conf) {
  let svgContainerId = svg_conf.svgContainerId;
  let selected = d3.select(`#${svgContainerId}`);
  var svgContainer; // see if there is any container with the same id already exist
  // if not create one

  if (selected._groups[0][0] == null) {
    svgContainer = d3.select('body').append('svg').attr('width', svg_conf.width).attr('height', svg_conf.height).attr('id', `${svgContainerId}`);
  } else {
    svgContainer = selected;
  } // create a blue print for axis so that it can be configured later using select!


  svgContainer.append("g").attr("class", "xAxis");
  svgContainer.append('g').attr('class', 'yAxis');
  svgContainer.append('g').attr('class', 'xGrids');
  svgContainer.append('g').attr('class', 'yGrids'); // create default def for arrow 

  _configure_defs(svgContainer, dflt_vector_colorId);

  return svgContainer;
};
/* 
*  configuring defs :
*  @param{d3.selection} svgContainer
*  @param{string}  arrowId: currently we use hex color without # for this!
*                           they can be produced automatically in digest_data
*

*/


var _configure_defs = function (svgContainer, arrowId) {
  if (d3.select(`#arrowhead${arrowId}`)._groups[0][0] == null) {
    var defs = svgContainer.append('svg:defs');
    defs.append('svg:marker').attr('id', `arrowhead${arrowId}`).attr('viewBox', '0 0 12 12').attr('refX', 11.5).attr('refY', 6).attr('markerWidth', 10).attr('markerHeight', 10).attr('orient', 'auto').append('path').attr('d', 'M 0 0 12 6 0 12 3 6').style('fill', `#${arrowId}`);
  }

  return defs;
};

var _digest_vec_config_list = function (dflt_vec_conf, vec_config_list, svgContainer) {
  vec_config_list = _digest_config_list(dflt_vec_conf, vec_config_list);
  vec_config_list.forEach(config => {
    let colorId = config.stroke_color.split('#')[1];

    _configure_defs(svgContainer, colorId);
  });
  return vec_config_list;
};

var util = {
  _digest_configs: _digest_configs,
  _configure_svg_container: _configure_svg_container,
  _configure_defs: _configure_defs,
  _digest_vec_config_list: _digest_vec_config_list,
  _deepObjectCopy: _deepObjectCopy
};
var _default = util;
exports.default = _default;
},{"d3":"../node_modules/d3/build/d3.js","./defaults":"defaults.js"}],"axis.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var d3 = _interopRequireWildcard(require("d3"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// imports:
// configure axis: 

/* //TODO: add presets here for different types of transition 
*  // TODO: add axisId for multiple axis support?
  
*/
var _configure_axis_scales = function (svg_config, vecs = null, grid_domain = null) {
  let svg_width = svg_config.width;
  let svg_height = svg_config.height;
  let margin = svg_config.svg_margin;
  var domain = {};

  if (vecs) {
    let maxInterval = _calculate_domain(vecs); // TODO: you should probably change _calculate_domain function 


    domain = {
      x: [-maxInterval.x, maxInterval.x],
      y: [-maxInterval.y, maxInterval.y]
    };
  } else if (grid_domain) {
    domain = grid_domain;
  } else {
    throw new Error("you should path vectors or grid_domain ");
  }

  let xScale = d3.scaleLinear().domain(domain.x).range([0 + margin.x, svg_width - margin.x]);
  let yScale = d3.scaleLinear().domain(domain.y).range([0 + margin.y, svg_height - margin.y]);
  let axis_scale = {
    x: xScale,
    y: yScale
  };
  return axis_scale;
};

var _axisTransitions = function (svgContainer, xScale, yScale) {
  // add x and y Axis
  const xAxis = svgContainer.select('.xAxis'),
        yAxis = svgContainer.select('.yAxis'); // axis transitions      

  const xAxisTransition = () => {
    return new Promise((resolve, reject) => {
      xAxis.attr("transform", "translate(" + 0 + "," + yScale(0) + ")").transition().duration(1000).delay(200).ease(d3.easeLinear).call(d3.axisBottom(xScale)).on('end', resolve);
    });
  }; // Add the y Axis


  const yAxisTransition = () => {
    return new Promise((resolve, reject) => {
      yAxis.attr("transform", "translate(" + xScale(0) + "," + 0 + ")").transition().duration(1000).delay(200).ease(d3.easeLinear).call(d3.axisLeft(yScale)).on('end', resolve);
    });
  }; // make async functions for transitions to return
  // var x_axis_creation_func= async function (){
  //      xAxisTransition();
  // }
  // var y_axis_createion_func = async function (){
  //   yAxisTransition();
  // }


  let axis_trans_funcs = {
    x: xAxisTransition,
    y: yAxisTransition
  };
  return axis_trans_funcs;
}; // calculate domain:


var _calculate_domain = function (vecs) {
  /*
   * calculates domain to be used by d3.scale 
   * //TODO: see if you can do better paddings
   *       add a method to update axis if the user 
   *       give manually ticks and domain etc
   */
  var xComponents = [];
  var yComponents = [];
  vecs.forEach(element => {
    xComponents.push(element.x);
    yComponents.push(element.y);
  });
  let maxX = d3.max(xComponents);
  let minX = d3.min(xComponents);
  let domainX = d3.max([maxX, Math.abs(minX)]);
  domainX += domainX * .2;
  let maxY = d3.max(yComponents);
  let minY = d3.min(yComponents);
  let domainY = d3.max([maxY, Math.abs(minY)]);
  domainY += domainY * .2; // let domain = d3.max([d3.max(xComponents), d3.max(xComponents)]);

  let domain = {
    x: domainX,
    y: domainY
  };
  return domain;
};

var axis = {
  _configure_axis_scales: _configure_axis_scales,
  _axisTransitions: _axisTransitions,
  _calculate_domain: _calculate_domain
};
var _default = axis;
exports.default = _default;
},{"d3":"../node_modules/d3/build/d3.js"}],"../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../node_modules/path-browserify/index.js":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

},{"process":"../node_modules/process/browser.js"}],"path.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var d3 = _interopRequireWildcard(require("d3"));

var _defaults = _interopRequireDefault(require("./defaults"));

var _path = require("path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var dflt_vec_conf = _defaults.default.dflt_vec_conf;

var _animate_grid_creation = function (svgContainer, xScale, yScale, svg_config, h_grids_conf, v_grids_conf) {
  // remove existing grids
  // TODO: do you need animation for removing?
  // remove old grids
  var old_grids_remove_func = _remove_path_grid(); // creatte new ones :


  var width = svg_config.width,
      height = svg_config.height,
      margin = svg_config.svg_margin,
      hGroupId = h_grids_conf.groupId,
      vGroupId = v_grids_conf.groupId,
      xData = yScale.ticks(10),
      yData = xScale.ticks(10); // create horizontal grids    

  var xGrid_promise_list = [];
  let xGridGroup = svgContainer.select('.xGrids').append('g').attr('id', hGroupId);

  for (let i = 0; i < xData.length; i++) {
    // set new data
    let xdata = [[margin.x, yScale(xData[i])], [width - margin.x, yScale(xData[i])]]; // animate line

    xGrid_promise_list.push(_line_path_creation_animation(xGridGroup, xdata, h_grids_conf));
  } //vertical grids


  var yGrid_promise_list = [];
  var yGridGroup = svgContainer.select('.yGrids').append('g').attr('id', vGroupId);

  for (let i = 0; i < yData.length; i++) {
    // set new data:
    let ydata = [[xScale(yData[i]), margin.y], [xScale(yData[i]), height - margin.y]];
    yGrid_promise_list.push(_line_path_creation_animation(yGridGroup, ydata, v_grids_conf));
  } // async run functions


  var all_Xpromises = [],
      all_Ypromises = [];

  async function run_xGrids() {
    xGrid_promise_list.forEach(item => {
      all_Xpromises.push(item());
    });
    await Promise.all(all_Xpromises);
  }

  async function run_yGrids() {
    yGrid_promise_list.forEach(item => {
      all_Ypromises.push(item());
    });
    await Promise.all(all_Ypromises);
  }

  let animate_grids_funcs = {
    old_grids_remove_func: old_grids_remove_func,
    xGrid_func: run_xGrids,
    yGrid_func: run_yGrids
  };
  return animate_grids_funcs;
}; //_animate_grid_creation
// a method to remove the grids


var _remove_path_grid = function (xGidsCl, yGridsCl) {
  xGidsCl = xGidsCl || '.originalxGrids';
  yGridsCl = yGridsCl || '.originalyGrids';
  var xGrids = d3.select('.xGrids').selectAll(xGidsCl);
  var yGrids = d3.select('.yGrids').selectAll(yGridsCl);

  var remove_grids_promise = () => {
    return new Promise((resolve, reject) => {
      xGrids.transition().duration(100).remove();
      yGrids.transition().duration(100).remove().on('end', resolve);
    });
  }; // async run function 


  var run_remove_grids = async function () {
    await remove_grids_promise();
  };

  return run_remove_grids;
}; // a method to change properties of the existing grids:
// TODO: changing multiple properties with selectAll couse noticable delay! maybe do it in for loop!


var _change_grid_properties = function (svgContainer, h_grids_conf, v_grids_conf) {
  var xGridsId = h_grids_conf.groupId,
      yGridsId = v_grids_conf.groupId;
  var xGrids = svgContainer.select('.xGrids').select('g#' + xGridsId).selectAll('path');
  var yGrids = svgContainer.select('.yGrids').select('g#' + yGridsId).selectAll('path');

  var change_hGrids = () => {
    return new Promise((resolve, reject) => {
      let opacity = h_grids_conf.opacity,
          stroke_color = h_grids_conf.stroke_color,
          stroke_width = h_grids_conf.stroke_width,
          duration = h_grids_conf.duration,
          pre_delay = h_grids_conf.pre_delay,
          post_delay = h_grids_conf.post_delay;
      xGrids.transition().duration(duration).delay(pre_delay).ease(d3.easeLinear).attr('stroke', stroke_color).attr('stroke-width', stroke_width).style('opacity', opacity).transition().duration(100).delay(post_delay).on('end', resolve);
    });
  };

  var change_vGrids = () => {
    return new Promise((resolve, reject) => {
      let opacity = v_grids_conf.opacity,
          stroke_color = v_grids_conf.stroke_color,
          stroke_width = v_grids_conf.stroke_width,
          duration = v_grids_conf.duration,
          pre_delay = v_grids_conf.pre_delay,
          post_delay = v_grids_conf.post_delay;
      yGrids.transition().duration(duration).delay(pre_delay).ease(d3.easeLinear).attr('stroke', stroke_color).attr('stroke-width', stroke_width).style('opacity', opacity).transition().duration(100).delay(post_delay).on('end', resolve);
    });
  };

  let change_grids = {
    h: change_hGrids,
    v: change_vGrids
  };
  return change_grids;
};
/*
 * @param{obj}: {lineGroup,
 *               data  ,
 *               opacity ,
 *               stroke_color,
 *               stroke_width,
 *               duration,
 *               delay,
 *               className }
 * className--> is important for the time if you want to change attributes of this grids or 
 *              remove them without changing other girids!
 * // TODO: merge all these line making promises togheter in just one promise!
 */


var _line_path_creation_animation = function (lineGroup, data, grids_conf) {
  var opacity = grids_conf.opacity,
      stroke_color = grids_conf.stroke_color,
      stroke_width = grids_conf.stroke_width,
      duration = grids_conf.duration,
      pre_delay = grids_conf.pre_delay,
      post_delay = grids_conf.post_delay; // create line generator 

  var lineGenerator = d3.line().x(function (d) {
    return d[0];
  }).y(function (d) {
    return d[1];
  });
  var linePath = lineGroup.append('path').attr('stroke', stroke_color).attr('stroke-width', stroke_width).style('fill', 'none').style('opacity', opacity);

  var line_path_creation_promis = () => {
    return new Promise((resolve, reject) => {
      linePath.attr('d', lineGenerator(data)).style('shape-rendering', 'crispEdges').attr('stroke-dasharray', function () {
        let pathLength = this.getTotalLength();
        return pathLength;
      }).attr('stroke-dashoffset', function () {
        let pathLength = this.getTotalLength();
        return pathLength;
      }).transition().delay(pre_delay).duration(duration).attrTween('stroke-dashoffset', line_tweenfunc).ease(d3.easeLinear).transition().delay(post_delay).on('end', resolve);

      function line_tweenfunc() {
        let pathLength = this.getTotalLength();
        return d3.interpolateNumber(pathLength, 0);
      }
    });
  };

  return line_path_creation_promis;
}; // draw vectors:


var _draw_vectors = function (vec, xScale, yScale, svgContainer, colorId) {
  // animate drawing 
  // draw without animating 
  svgContainer.append('line').attr('x1', xScale(0)).attr('y1', yScale(0)).attr('x2', xScale(vec.x)).attr('y2', yScale(vec.y)).attr('stroke-width', 1.5).attr('class', 'vector').attr("stroke", `#${colorId}`).attr('marker-end', `url(#arrowhead${colorId})`);
};

var _vecs_creation_animation = function (svgContainer, vecs, xScale, yScale, vecGroupName, vec_conf_list) {
  svgContainer.append('g').attr('class', vecGroupName);
  var vecGroup = svgContainer.select('.' + vecGroupName);
  var vec_draw_promises = [];
  var vec_conf;
  var i = 0; // create a async function for all vectors to be drawn simultaneously

  async function vec_draw_promises_func() {
    vecs.forEach(item => {
      vec_conf = vec_conf_list[i] || dflt_vec_conf;
      i += 1;
      vec_draw_promises.push(_single_vec_creation_animation(item, xScale, yScale, vecGroup, vec_conf)());
    });
    await Promise.all(vec_draw_promises);
  }

  return vec_draw_promises_func;
};

var _single_vec_creation_animation = function (vec, xScale, yScale, vecGroup, vec_conf) {
  var stroke_color = vec_conf.stroke_color,
      colorId = stroke_color.split('#')[1],
      stroke_width = vec_conf.stroke_width,
      opacity = vec_conf.opacity,
      duration = vec_conf.duration,
      post_delay = vec_conf.post_delay,
      pre_delay = vec_conf.pre_delay,
      className = vec_conf.className;
  var data = [[xScale(0), yScale(0)], [xScale(vec.x), yScale(vec.y)]]; // create line generator 

  var lineGenerator = d3.line().x(function (d) {
    return d[0];
  }).y(function (d) {
    return d[1];
  }).curve(d3.curveLinear);
  var vecPath = vecGroup.append('path').attr('class', className).attr('stroke', stroke_color).attr('stroke-width', stroke_width).style('fill', 'none').style('opacity', opacity);

  var vec_creation_promis = () => {
    return new Promise((resolve, reject) => {
      vecPath.attr('d', lineGenerator(data)).style('shape-rendering', 'crispEdges').attr('stroke-dasharray', function () {
        let pathLength = this.getTotalLength();
        return pathLength;
      }).attr('stroke-dashoffset', function () {
        let pathLength = this.getTotalLength();
        return pathLength;
      }).transition().duration(duration).delay(pre_delay).ease(d3.easeLinear).attrTween('stroke-dashoffset', line_tweenfunc).transition().duration(duration).attrTween('marker-end', arrow_tweenfunc).transition().delay(post_delay).on('end', resolve);
    });
  }; // tween functions for animation:


  function line_tweenfunc() {
    let pathLength = this.getTotalLength();
    return d3.interpolateNumber(pathLength, 0);
  }

  function arrow_tweenfunc() {
    let a = d3.interpolateNumber(0, 12);
    return function (t) {
      let b = a(t);
      let triangleData = `M 0 0 ${b} 6 0 ${b} 3 6`;
      d3.select(`#arrowhead${colorId}`).attr('d', triangleData);
      return `url(#arrowhead${colorId})`;
    };
  }

  return vec_creation_promis;
};

var path = {
  _animate_grid_creation: _animate_grid_creation,
  _line_path_creation_animation: _line_path_creation_animation,
  _draw_vectors: _draw_vectors,
  _vecs_creation_animation: _vecs_creation_animation,
  _single_vec_creation_animation: _single_vec_creation_animation,
  _change_grid_properties: _change_grid_properties
};
var _default = path;
exports.default = _default;
},{"d3":"../node_modules/d3/build/d3.js","./defaults":"defaults.js","path":"../node_modules/path-browserify/index.js"}],"../node_modules/q/q.js":[function(require,module,exports) {
var define;
var global = arguments[3];
var process = require("process");
// vim:ts=4:sts=4:sw=4:

/*!
 *
 * Copyright 2009-2017 Kris Kowal under the terms of the MIT
 * license found at https://github.com/kriskowal/q/blob/v1/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
(function (definition) {
  "use strict"; // This file will function properly as a <script> tag, or a module
  // using CommonJS and NodeJS or RequireJS module formats.  In
  // Common/Node/RequireJS, the module exports the Q API and when
  // executed as a simple <script>, it creates a Q global instead.
  // Montage Require

  if (typeof bootstrap === "function") {
    bootstrap("promise", definition); // CommonJS
  } else if (typeof exports === "object" && typeof module === "object") {
    module.exports = definition(); // RequireJS
  } else if (typeof define === "function" && define.amd) {
    define(definition); // SES (Secure EcmaScript)
  } else if (typeof ses !== "undefined") {
    if (!ses.ok()) {
      return;
    } else {
      ses.makeQ = definition;
    } // <script>

  } else if (typeof window !== "undefined" || typeof self !== "undefined") {
    // Prefer window over self for add-on scripts. Use self for
    // non-windowed contexts.
    var global = typeof window !== "undefined" ? window : self; // Get the `window` object, save the previous Q global
    // and initialize Q as a global.

    var previousQ = global.Q;
    global.Q = definition(); // Add a noConflict function so Q can be removed from the
    // global namespace.

    global.Q.noConflict = function () {
      global.Q = previousQ;
      return this;
    };
  } else {
    throw new Error("This environment was not anticipated by Q. Please file a bug.");
  }
})(function () {
  "use strict";

  var hasStacks = false;

  try {
    throw new Error();
  } catch (e) {
    hasStacks = !!e.stack;
  } // All code after this point will be filtered from stack traces reported
  // by Q.


  var qStartingLine = captureLine();
  var qFileName; // shims
  // used for fallback in "allResolved"

  var noop = function () {}; // Use the fastest possible means to execute a task in a future turn
  // of the event loop.


  var nextTick = function () {
    // linked list of tasks (single, with head node)
    var head = {
      task: void 0,
      next: null
    };
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false; // queue for late tasks, used by unhandled rejection tracking

    var laterQueue = [];

    function flush() {
      /* jshint loopfunc: true */
      var task, domain;

      while (head.next) {
        head = head.next;
        task = head.task;
        head.task = void 0;
        domain = head.domain;

        if (domain) {
          head.domain = void 0;
          domain.enter();
        }

        runSingle(task, domain);
      }

      while (laterQueue.length) {
        task = laterQueue.pop();
        runSingle(task);
      }

      flushing = false;
    } // runs a single function in the async queue


    function runSingle(task, domain) {
      try {
        task();
      } catch (e) {
        if (isNodeJS) {
          // In node, uncaught exceptions are considered fatal errors.
          // Re-throw them synchronously to interrupt flushing!
          // Ensure continuation if the uncaught exception is suppressed
          // listening "uncaughtException" events (as domains does).
          // Continue in next event to avoid tick recursion.
          if (domain) {
            domain.exit();
          }

          setTimeout(flush, 0);

          if (domain) {
            domain.enter();
          }

          throw e;
        } else {
          // In browsers, uncaught exceptions are not fatal.
          // Re-throw them asynchronously to avoid slow-downs.
          setTimeout(function () {
            throw e;
          }, 0);
        }
      }

      if (domain) {
        domain.exit();
      }
    }

    nextTick = function (task) {
      tail = tail.next = {
        task: task,
        domain: isNodeJS && process.domain,
        next: null
      };

      if (!flushing) {
        flushing = true;
        requestTick();
      }
    };

    if (typeof process === "object" && process.toString() === "[object process]" && process.nextTick) {
      // Ensure Q is in a real Node environment, with a `process.nextTick`.
      // To see through fake Node environments:
      // * Mocha test runner - exposes a `process` global without a `nextTick`
      // * Browserify - exposes a `process.nexTick` function that uses
      //   `setTimeout`. In this case `setImmediate` is preferred because
      //    it is faster. Browserify's `process.toString()` yields
      //   "[object Object]", while in a real Node environment
      //   `process.toString()` yields "[object process]".
      isNodeJS = true;

      requestTick = function () {
        process.nextTick(flush);
      };
    } else if (typeof setImmediate === "function") {
      // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
      if (typeof window !== "undefined") {
        requestTick = setImmediate.bind(window, flush);
      } else {
        requestTick = function () {
          setImmediate(flush);
        };
      }
    } else if (typeof MessageChannel !== "undefined") {
      // modern browsers
      // http://www.nonblocking.io/2011/06/windownexttick.html
      var channel = new MessageChannel(); // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
      // working message ports the first time a page loads.

      channel.port1.onmessage = function () {
        requestTick = requestPortTick;
        channel.port1.onmessage = flush;
        flush();
      };

      var requestPortTick = function () {
        // Opera requires us to provide a message payload, regardless of
        // whether we use it.
        channel.port2.postMessage(0);
      };

      requestTick = function () {
        setTimeout(flush, 0);
        requestPortTick();
      };
    } else {
      // old browsers
      requestTick = function () {
        setTimeout(flush, 0);
      };
    } // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.


    nextTick.runAfter = function (task) {
      laterQueue.push(task);

      if (!flushing) {
        flushing = true;
        requestTick();
      }
    };

    return nextTick;
  }(); // Attempt to make generics safe in the face of downstream
  // modifications.
  // There is no situation where this is necessary.
  // If you need a security guarantee, these primordials need to be
  // deeply frozen anyway, and if you don’t need a security guarantee,
  // this is just plain paranoid.
  // However, this **might** have the nice side-effect of reducing the size of
  // the minified code by reducing x.call() to merely x()
  // See Mark Miller’s explanation of what this does.
  // http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming


  var call = Function.call;

  function uncurryThis(f) {
    return function () {
      return call.apply(f, arguments);
    };
  } // This is equivalent, but slower:
  // uncurryThis = Function_bind.bind(Function_bind.call);
  // http://jsperf.com/uncurrythis


  var array_slice = uncurryThis(Array.prototype.slice);
  var array_reduce = uncurryThis(Array.prototype.reduce || function (callback, basis) {
    var index = 0,
        length = this.length; // concerning the initial value, if one is not provided

    if (arguments.length === 1) {
      // seek to the first value in the array, accounting
      // for the possibility that is is a sparse array
      do {
        if (index in this) {
          basis = this[index++];
          break;
        }

        if (++index >= length) {
          throw new TypeError();
        }
      } while (1);
    } // reduce


    for (; index < length; index++) {
      // account for the possibility that the array is sparse
      if (index in this) {
        basis = callback(basis, this[index], index);
      }
    }

    return basis;
  });
  var array_indexOf = uncurryThis(Array.prototype.indexOf || function (value) {
    // not a very good shim, but good enough for our one use of it
    for (var i = 0; i < this.length; i++) {
      if (this[i] === value) {
        return i;
      }
    }

    return -1;
  });
  var array_map = uncurryThis(Array.prototype.map || function (callback, thisp) {
    var self = this;
    var collect = [];
    array_reduce(self, function (undefined, value, index) {
      collect.push(callback.call(thisp, value, index, self));
    }, void 0);
    return collect;
  });

  var object_create = Object.create || function (prototype) {
    function Type() {}

    Type.prototype = prototype;
    return new Type();
  };

  var object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {
    obj[prop] = descriptor.value;
    return obj;
  };

  var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

  var object_keys = Object.keys || function (object) {
    var keys = [];

    for (var key in object) {
      if (object_hasOwnProperty(object, key)) {
        keys.push(key);
      }
    }

    return keys;
  };

  var object_toString = uncurryThis(Object.prototype.toString);

  function isObject(value) {
    return value === Object(value);
  } // generator related shims
  // FIXME: Remove this function once ES6 generators are in SpiderMonkey.


  function isStopIteration(exception) {
    return object_toString(exception) === "[object StopIteration]" || exception instanceof QReturnValue;
  } // FIXME: Remove this helper and Q.return once ES6 generators are in
  // SpiderMonkey.


  var QReturnValue;

  if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
  } else {
    QReturnValue = function (value) {
      this.value = value;
    };
  } // long stack traces


  var STACK_JUMP_SEPARATOR = "From previous event:";

  function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks && promise.stack && typeof error === "object" && error !== null && error.stack) {
      var stacks = [];

      for (var p = promise; !!p; p = p.source) {
        if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
          object_defineProperty(error, "__minimumStackCounter__", {
            value: p.stackCounter,
            configurable: true
          });
          stacks.unshift(p.stack);
        }
      }

      stacks.unshift(error.stack);
      var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
      var stack = filterStackString(concatedStacks);
      object_defineProperty(error, "stack", {
        value: stack,
        configurable: true
      });
    }
  }

  function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];

    for (var i = 0; i < lines.length; ++i) {
      var line = lines[i];

      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
        desiredLines.push(line);
      }
    }

    return desiredLines.join("\n");
  }

  function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1;
  }

  function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);

    if (attempt1) {
      return [attempt1[1], Number(attempt1[2])];
    } // Anonymous functions: "at filename:lineNumber:columnNumber"


    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);

    if (attempt2) {
      return [attempt2[1], Number(attempt2[2])];
    } // Firefox style: "function@filename:lineNumber or @filename:lineNumber"


    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);

    if (attempt3) {
      return [attempt3[1], Number(attempt3[2])];
    }
  }

  function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
      return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];
    return fileName === qFileName && lineNumber >= qStartingLine && lineNumber <= qEndingLine;
  } // discover own file name and line number range for filtering stack
  // traces


  function captureLine() {
    if (!hasStacks) {
      return;
    }

    try {
      throw new Error();
    } catch (e) {
      var lines = e.stack.split("\n");
      var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);

      if (!fileNameAndLineNumber) {
        return;
      }

      qFileName = fileNameAndLineNumber[0];
      return fileNameAndLineNumber[1];
    }
  }

  function deprecate(callback, name, alternative) {
    return function () {
      if (typeof console !== "undefined" && typeof console.warn === "function") {
        console.warn(name + " is deprecated, use " + alternative + " instead.", new Error("").stack);
      }

      return callback.apply(callback, arguments);
    };
  } // end of shims
  // beginning of real work

  /**
   * Constructs a promise for an immediate reference, passes promises through, or
   * coerces promises from different systems.
   * @param value immediate reference or promise
   */


  function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
      return value;
    } // assimilate thenables


    if (isPromiseAlike(value)) {
      return coerce(value);
    } else {
      return fulfill(value);
    }
  }

  Q.resolve = Q;
  /**
   * Performs a task in a future turn of the event loop.
   * @param {Function} task
   */

  Q.nextTick = nextTick;
  /**
   * Controls whether or not long stack traces will be on
   */

  Q.longStackSupport = false;
  /**
   * The counter is used to determine the stopping point for building
   * long stack traces. In makeStackTraceLong we walk backwards through
   * the linked list of promises, only stacks which were created before
   * the rejection are concatenated.
   */

  var longStackCounter = 1; // enable long stacks if Q_DEBUG is set

  if (typeof process === "object" && process && process.env && undefined) {
    Q.longStackSupport = true;
  }
  /**
   * Constructs a {promise, resolve, reject} object.
   *
   * `resolve` is a callback to invoke with a more resolved value for the
   * promise. To fulfill the promise, invoke `resolve` with any value that is
   * not a thenable. To reject the promise, invoke `resolve` with a rejected
   * thenable, or invoke `reject` with the reason directly. To resolve the
   * promise to another thenable, thus putting it in the same state, invoke
   * `resolve` with that other thenable.
   */


  Q.defer = defer;

  function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [],
        progressListeners = [],
        resolvedPromise;
    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
      var args = array_slice(arguments);

      if (messages) {
        messages.push(args);

        if (op === "when" && operands[1]) {
          // progress operand
          progressListeners.push(operands[1]);
        }
      } else {
        Q.nextTick(function () {
          resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
        });
      }
    }; // XXX deprecated


    promise.valueOf = function () {
      if (messages) {
        return promise;
      }

      var nearerValue = nearer(resolvedPromise);

      if (isPromise(nearerValue)) {
        resolvedPromise = nearerValue; // shorten chain
      }

      return nearerValue;
    };

    promise.inspect = function () {
      if (!resolvedPromise) {
        return {
          state: "pending"
        };
      }

      return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
      try {
        throw new Error();
      } catch (e) {
        // NOTE: don't try to use `Error.captureStackTrace` or transfer the
        // accessor around; that causes memory leaks as per GH-111. Just
        // reify the stack trace as a string ASAP.
        //
        // At the same time, cut off the first line; it's always just
        // "[object Promise]\n", as per the `toString`.
        promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        promise.stackCounter = longStackCounter++;
      }
    } // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.


    function become(newPromise) {
      resolvedPromise = newPromise;

      if (Q.longStackSupport && hasStacks) {
        // Only hold a reference to the new promise if long stacks
        // are enabled to reduce memory usage
        promise.source = newPromise;
      }

      array_reduce(messages, function (undefined, message) {
        Q.nextTick(function () {
          newPromise.promiseDispatch.apply(newPromise, message);
        });
      }, void 0);
      messages = void 0;
      progressListeners = void 0;
    }

    deferred.promise = promise;

    deferred.resolve = function (value) {
      if (resolvedPromise) {
        return;
      }

      become(Q(value));
    };

    deferred.fulfill = function (value) {
      if (resolvedPromise) {
        return;
      }

      become(fulfill(value));
    };

    deferred.reject = function (reason) {
      if (resolvedPromise) {
        return;
      }

      become(reject(reason));
    };

    deferred.notify = function (progress) {
      if (resolvedPromise) {
        return;
      }

      array_reduce(progressListeners, function (undefined, progressListener) {
        Q.nextTick(function () {
          progressListener(progress);
        });
      }, void 0);
    };

    return deferred;
  }
  /**
   * Creates a Node-style callback that will resolve or reject the deferred
   * promise.
   * @returns a nodeback
   */


  defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
      if (error) {
        self.reject(error);
      } else if (arguments.length > 2) {
        self.resolve(array_slice(arguments, 1));
      } else {
        self.resolve(value);
      }
    };
  };
  /**
   * @param resolver {Function} a function that returns nothing and accepts
   * the resolve, reject, and notify functions for a deferred.
   * @returns a promise that may be resolved with the given resolve and reject
   * functions, or rejected by a thrown exception in resolver
   */


  Q.Promise = promise; // ES6

  Q.promise = promise;

  function promise(resolver) {
    if (typeof resolver !== "function") {
      throw new TypeError("resolver must be a function.");
    }

    var deferred = defer();

    try {
      resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
      deferred.reject(reason);
    }

    return deferred.promise;
  }

  promise.race = race; // ES6

  promise.all = all; // ES6

  promise.reject = reject; // ES6

  promise.resolve = Q; // ES6
  // XXX experimental.  This method is a way to denote that a local value is
  // serializable and should be immediately dispatched to a remote upon request,
  // instead of passing a reference.

  Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
  };

  Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
  };
  /**
   * If two promises eventually fulfill to the same value, promises that value,
   * but otherwise rejects.
   * @param x {Any*}
   * @param y {Any*}
   * @returns {Any*} a promise for x and y if they are the same, but a rejection
   * otherwise.
   *
   */


  Q.join = function (x, y) {
    return Q(x).join(y);
  };

  Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
      if (x === y) {
        // TODO: "===" should be Object.is or equiv
        return x;
      } else {
        throw new Error("Q can't join: not the same: " + x + " " + y);
      }
    });
  };
  /**
   * Returns a promise for the first of an array of promises to become settled.
   * @param answers {Array[Any*]} promises to race
   * @returns {Any*} the first promise to be settled
   */


  Q.race = race;

  function race(answerPs) {
    return promise(function (resolve, reject) {
      // Switch to this once we can assume at least ES5
      // answerPs.forEach(function (answerP) {
      //     Q(answerP).then(resolve, reject);
      // });
      // Use this in the meantime
      for (var i = 0, len = answerPs.length; i < len; i++) {
        Q(answerPs[i]).then(resolve, reject);
      }
    });
  }

  Promise.prototype.race = function () {
    return this.then(Q.race);
  };
  /**
   * Constructs a Promise with a promise descriptor object and optional fallback
   * function.  The descriptor contains methods like when(rejected), get(name),
   * set(name, value), post(name, args), and delete(name), which all
   * return either a value, a promise for a value, or a rejection.  The fallback
   * accepts the operation name, a resolver, and any further arguments that would
   * have been forwarded to the appropriate method above had a method been
   * provided with the proper name.  The API makes no guarantees about the nature
   * of the returned object, apart from that it is usable whereever promises are
   * bought and sold.
   */


  Q.makePromise = Promise;

  function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
      fallback = function (op) {
        return reject(new Error("Promise does not support operation: " + op));
      };
    }

    if (inspect === void 0) {
      inspect = function () {
        return {
          state: "unknown"
        };
      };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
      var result;

      try {
        if (descriptor[op]) {
          result = descriptor[op].apply(promise, args);
        } else {
          result = fallback.call(promise, op, args);
        }
      } catch (exception) {
        result = reject(exception);
      }

      if (resolve) {
        resolve(result);
      }
    };

    promise.inspect = inspect; // XXX deprecated `valueOf` and `exception` support

    if (inspect) {
      var inspected = inspect();

      if (inspected.state === "rejected") {
        promise.exception = inspected.reason;
      }

      promise.valueOf = function () {
        var inspected = inspect();

        if (inspected.state === "pending" || inspected.state === "rejected") {
          return promise;
        }

        return inspected.value;
      };
    }

    return promise;
  }

  Promise.prototype.toString = function () {
    return "[object Promise]";
  };

  Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false; // ensure the untrusted promise makes at most a
    // single call to one of the callbacks

    function _fulfilled(value) {
      try {
        return typeof fulfilled === "function" ? fulfilled(value) : value;
      } catch (exception) {
        return reject(exception);
      }
    }

    function _rejected(exception) {
      if (typeof rejected === "function") {
        makeStackTraceLong(exception, self);

        try {
          return rejected(exception);
        } catch (newException) {
          return reject(newException);
        }
      }

      return reject(exception);
    }

    function _progressed(value) {
      return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
      self.promiseDispatch(function (value) {
        if (done) {
          return;
        }

        done = true;
        deferred.resolve(_fulfilled(value));
      }, "when", [function (exception) {
        if (done) {
          return;
        }

        done = true;
        deferred.resolve(_rejected(exception));
      }]);
    }); // Progress propagator need to be attached in the current tick.

    self.promiseDispatch(void 0, "when", [void 0, function (value) {
      var newValue;
      var threw = false;

      try {
        newValue = _progressed(value);
      } catch (e) {
        threw = true;

        if (Q.onerror) {
          Q.onerror(e);
        } else {
          throw e;
        }
      }

      if (!threw) {
        deferred.notify(newValue);
      }
    }]);
    return deferred.promise;
  };

  Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
  };
  /**
   * Works almost like "finally", but not called for rejections.
   * Original resolution value is passed through callback unaffected.
   * Callback may return a promise that will be awaited for.
   * @param {Function} callback
   * @returns {Q.Promise}
   * @example
   * doSomething()
   *   .then(...)
   *   .tap(console.log)
   *   .then(...);
   */


  Promise.prototype.tap = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
      return callback.fcall(value).thenResolve(value);
    });
  };
  /**
   * Registers an observer on a promise.
   *
   * Guarantees:
   *
   * 1. that fulfilled and rejected will be called only once.
   * 2. that either the fulfilled callback or the rejected callback will be
   *    called, but not both.
   * 3. that fulfilled and rejected will not be called in this turn.
   *
   * @param value      promise or immediate reference to observe
   * @param fulfilled  function to be called with the fulfilled value
   * @param rejected   function to be called with the rejection exception
   * @param progressed function to be called on any progress notifications
   * @return promise for the return value from the invoked callback
   */


  Q.when = when;

  function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
  }

  Promise.prototype.thenResolve = function (value) {
    return this.then(function () {
      return value;
    });
  };

  Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
  };

  Promise.prototype.thenReject = function (reason) {
    return this.then(function () {
      throw reason;
    });
  };

  Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
  };
  /**
   * If an object is not a promise, it is as "near" as possible.
   * If a promise is rejected, it is as "near" as possible too.
   * If it’s a fulfilled promise, the fulfillment value is nearer.
   * If it’s a deferred promise and the deferred has been resolved, the
   * resolution is "nearer".
   * @param object
   * @returns most resolved (nearest) form of the object
   */
  // XXX should we re-do this?


  Q.nearer = nearer;

  function nearer(value) {
    if (isPromise(value)) {
      var inspected = value.inspect();

      if (inspected.state === "fulfilled") {
        return inspected.value;
      }
    }

    return value;
  }
  /**
   * @returns whether the given object is a promise.
   * Otherwise it is a fulfilled value.
   */


  Q.isPromise = isPromise;

  function isPromise(object) {
    return object instanceof Promise;
  }

  Q.isPromiseAlike = isPromiseAlike;

  function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
  }
  /**
   * @returns whether the given object is a pending promise, meaning not
   * fulfilled or rejected.
   */


  Q.isPending = isPending;

  function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
  }

  Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
  };
  /**
   * @returns whether the given object is a value or fulfilled
   * promise.
   */


  Q.isFulfilled = isFulfilled;

  function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
  }

  Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
  };
  /**
   * @returns whether the given object is a rejected promise.
   */


  Q.isRejected = isRejected;

  function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
  }

  Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
  }; //// BEGIN UNHANDLED REJECTION TRACKING
  // This promise library consumes exceptions thrown in handlers so they can be
  // handled by a subsequent promise.  The exceptions get added to this array when
  // they are created, and removed when they are handled.  Note that in ES6 or
  // shimmed environments, this would naturally be a `Set`.


  var unhandledReasons = [];
  var unhandledRejections = [];
  var reportedUnhandledRejections = [];
  var trackUnhandledRejections = true;

  function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
      trackUnhandledRejections = true;
    }
  }

  function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
      return;
    }

    if (typeof process === "object" && typeof process.emit === "function") {
      Q.nextTick.runAfter(function () {
        if (array_indexOf(unhandledRejections, promise) !== -1) {
          process.emit("unhandledRejection", reason, promise);
          reportedUnhandledRejections.push(promise);
        }
      });
    }

    unhandledRejections.push(promise);

    if (reason && typeof reason.stack !== "undefined") {
      unhandledReasons.push(reason.stack);
    } else {
      unhandledReasons.push("(no stack) " + reason);
    }
  }

  function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
      return;
    }

    var at = array_indexOf(unhandledRejections, promise);

    if (at !== -1) {
      if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
          var atReport = array_indexOf(reportedUnhandledRejections, promise);

          if (atReport !== -1) {
            process.emit("rejectionHandled", unhandledReasons[at], promise);
            reportedUnhandledRejections.splice(atReport, 1);
          }
        });
      }

      unhandledRejections.splice(at, 1);
      unhandledReasons.splice(at, 1);
    }
  }

  Q.resetUnhandledRejections = resetUnhandledRejections;

  Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
  };

  Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
  };

  resetUnhandledRejections(); //// END UNHANDLED REJECTION TRACKING

  /**
   * Constructs a rejected promise.
   * @param reason value describing the failure
   */

  Q.reject = reject;

  function reject(reason) {
    var rejection = Promise({
      "when": function (rejected) {
        // note that the error has been handled
        if (rejected) {
          untrackRejection(this);
        }

        return rejected ? rejected(reason) : this;
      }
    }, function fallback() {
      return this;
    }, function inspect() {
      return {
        state: "rejected",
        reason: reason
      };
    }); // Note that the reason has not been handled.

    trackRejection(rejection, reason);
    return rejection;
  }
  /**
   * Constructs a fulfilled promise for an immediate reference.
   * @param value immediate reference
   */


  Q.fulfill = fulfill;

  function fulfill(value) {
    return Promise({
      "when": function () {
        return value;
      },
      "get": function (name) {
        return value[name];
      },
      "set": function (name, rhs) {
        value[name] = rhs;
      },
      "delete": function (name) {
        delete value[name];
      },
      "post": function (name, args) {
        // Mark Miller proposes that post with no name should apply a
        // promised function.
        if (name === null || name === void 0) {
          return value.apply(void 0, args);
        } else {
          return value[name].apply(value, args);
        }
      },
      "apply": function (thisp, args) {
        return value.apply(thisp, args);
      },
      "keys": function () {
        return object_keys(value);
      }
    }, void 0, function inspect() {
      return {
        state: "fulfilled",
        value: value
      };
    });
  }
  /**
   * Converts thenables to Q promises.
   * @param promise thenable promise
   * @returns a Q promise
   */


  function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
      try {
        promise.then(deferred.resolve, deferred.reject, deferred.notify);
      } catch (exception) {
        deferred.reject(exception);
      }
    });
    return deferred.promise;
  }
  /**
   * Annotates an object such that it will never be
   * transferred away from this process over any promise
   * communication channel.
   * @param object
   * @returns promise a wrapping of that object that
   * additionally responds to the "isDef" message
   * without a rejection.
   */


  Q.master = master;

  function master(object) {
    return Promise({
      "isDef": function () {}
    }, function fallback(op, args) {
      return dispatch(object, op, args);
    }, function () {
      return Q(object).inspect();
    });
  }
  /**
   * Spreads the values of a promised array of arguments into the
   * fulfillment callback.
   * @param fulfilled callback that receives variadic arguments from the
   * promised array
   * @param rejected callback that receives the exception if the promise
   * is rejected.
   * @returns a promise for the return value or thrown exception of
   * either callback.
   */


  Q.spread = spread;

  function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
  }

  Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
      return fulfilled.apply(void 0, array);
    }, rejected);
  };
  /**
   * The async function is a decorator for generator functions, turning
   * them into asynchronous generators.  Although generators are only part
   * of the newest ECMAScript 6 drafts, this code does not cause syntax
   * errors in older engines.  This code should continue to work and will
   * in fact improve over time as the language improves.
   *
   * ES6 generators are currently part of V8 version 3.19 with the
   * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
   * for longer, but under an older Python-inspired form.  This function
   * works on both kinds of generators.
   *
   * Decorates a generator function such that:
   *  - it may yield promises
   *  - execution will continue when that promise is fulfilled
   *  - the value of the yield expression will be the fulfilled value
   *  - it returns a promise for the return value (when the generator
   *    stops iterating)
   *  - the decorated function returns a promise for the return value
   *    of the generator or the first rejected promise among those
   *    yielded.
   *  - if an error is thrown in the generator, it propagates through
   *    every following yield until it is caught, or until it escapes
   *    the generator function altogether, and is translated into a
   *    rejection for the promise returned by the decorated generator.
   */


  Q.async = async;

  function async(makeGenerator) {
    return function () {
      // when verb is "send", arg is a value
      // when verb is "throw", arg is an exception
      function continuer(verb, arg) {
        var result; // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
        // engine that has a deployed base of browsers that support generators.
        // However, SM's generators use the Python-inspired semantics of
        // outdated ES6 drafts.  We would like to support ES6, but we'd also
        // like to make it possible to use generators in deployed browsers, so
        // we also support Python-style generators.  At some point we can remove
        // this block.

        if (typeof StopIteration === "undefined") {
          // ES6 Generators
          try {
            result = generator[verb](arg);
          } catch (exception) {
            return reject(exception);
          }

          if (result.done) {
            return Q(result.value);
          } else {
            return when(result.value, callback, errback);
          }
        } else {
          // SpiderMonkey Generators
          // FIXME: Remove this case when SM does ES6 generators.
          try {
            result = generator[verb](arg);
          } catch (exception) {
            if (isStopIteration(exception)) {
              return Q(exception.value);
            } else {
              return reject(exception);
            }
          }

          return when(result, callback, errback);
        }
      }

      var generator = makeGenerator.apply(this, arguments);
      var callback = continuer.bind(continuer, "next");
      var errback = continuer.bind(continuer, "throw");
      return callback();
    };
  }
  /**
   * The spawn function is a small wrapper around async that immediately
   * calls the generator and also ends the promise chain, so that any
   * unhandled errors are thrown instead of forwarded to the error
   * handler. This is useful because it's extremely common to run
   * generators at the top-level to work with libraries.
   */


  Q.spawn = spawn;

  function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
  } // FIXME: Remove this interface once ES6 generators are in SpiderMonkey.

  /**
   * Throws a ReturnValue exception to stop an asynchronous generator.
   *
   * This interface is a stop-gap measure to support generator return
   * values in older Firefox/SpiderMonkey.  In browsers that support ES6
   * generators like Chromium 29, just use "return" in your generator
   * functions.
   *
   * @param value the return value for the surrounding generator
   * @throws ReturnValue exception with the value.
   * @example
   * // ES6 style
   * Q.async(function* () {
   *      var foo = yield getFooPromise();
   *      var bar = yield getBarPromise();
   *      return foo + bar;
   * })
   * // Older SpiderMonkey style
   * Q.async(function () {
   *      var foo = yield getFooPromise();
   *      var bar = yield getBarPromise();
   *      Q.return(foo + bar);
   * })
   */


  Q["return"] = _return;

  function _return(value) {
    throw new QReturnValue(value);
  }
  /**
   * The promised function decorator ensures that any promise arguments
   * are settled and passed as values (`this` is also settled and passed
   * as a value).  It will also ensure that the result of a function is
   * always a promise.
   *
   * @example
   * var add = Q.promised(function (a, b) {
   *     return a + b;
   * });
   * add(Q(a), Q(B));
   *
   * @param {function} callback The function to decorate
   * @returns {function} a function that has been decorated.
   */


  Q.promised = promised;

  function promised(callback) {
    return function () {
      return spread([this, all(arguments)], function (self, args) {
        return callback.apply(self, args);
      });
    };
  }
  /**
   * sends a message to a value in a future turn
   * @param object* the recipient
   * @param op the name of the message operation, e.g., "when",
   * @param args further arguments to be forwarded to the operation
   * @returns result {Promise} a promise for the result of the operation
   */


  Q.dispatch = dispatch;

  function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
  }

  Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
      self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
  };
  /**
   * Gets the value of a property in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of property to get
   * @return promise for the property value
   */


  Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
  };

  Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
  };
  /**
   * Sets the value of a property in a future turn.
   * @param object    promise or immediate reference for object object
   * @param name      name of property to set
   * @param value     new value of property
   * @return promise for the return value
   */


  Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
  };

  Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
  };
  /**
   * Deletes a property in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of property to delete
   * @return promise for the return value
   */


  Q.del = // XXX legacy
  Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
  };

  Promise.prototype.del = // XXX legacy
  Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
  };
  /**
   * Invokes a method in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of method to invoke
   * @param value     a value to post, typically an array of
   *                  invocation arguments for promises that
   *                  are ultimately backed with `resolve` values,
   *                  as opposed to those backed with URLs
   *                  wherein the posted value can be any
   *                  JSON serializable object.
   * @return promise for the return value
   */
  // bound locally because it is used by other methods


  Q.mapply = // XXX As proposed by "Redsandro"
  Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
  };

  Promise.prototype.mapply = // XXX As proposed by "Redsandro"
  Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
  };
  /**
   * Invokes a method in a future turn.
   * @param object    promise or immediate reference for target object
   * @param name      name of method to invoke
   * @param ...args   array of invocation arguments
   * @return promise for the return value
   */


  Q.send = // XXX Mark Miller's proposed parlance
  Q.mcall = // XXX As proposed by "Redsandro"
  Q.invoke = function (object, name
  /*...args*/
  ) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
  };

  Promise.prototype.send = // XXX Mark Miller's proposed parlance
  Promise.prototype.mcall = // XXX As proposed by "Redsandro"
  Promise.prototype.invoke = function (name
  /*...args*/
  ) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
  };
  /**
   * Applies the promised function in a future turn.
   * @param object    promise or immediate reference for target function
   * @param args      array of application arguments
   */


  Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
  };

  Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
  };
  /**
   * Calls the promised function in a future turn.
   * @param object    promise or immediate reference for target function
   * @param ...args   array of application arguments
   */


  Q["try"] = Q.fcall = function (object
  /* ...args*/
  ) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
  };

  Promise.prototype.fcall = function ()
  /*...args*/
  {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
  };
  /**
   * Binds the promised function, transforming return values into a fulfilled
   * promise and thrown errors into a rejected one.
   * @param object    promise or immediate reference for target function
   * @param ...args   array of application arguments
   */


  Q.fbind = function (object
  /*...args*/
  ) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
      return promise.dispatch("apply", [this, args.concat(array_slice(arguments))]);
    };
  };

  Promise.prototype.fbind = function ()
  /*...args*/
  {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
      return promise.dispatch("apply", [this, args.concat(array_slice(arguments))]);
    };
  };
  /**
   * Requests the names of the owned properties of a promised
   * object in a future turn.
   * @param object    promise or immediate reference for target object
   * @return promise for the keys of the eventually settled object
   */


  Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
  };

  Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
  };
  /**
   * Turns an array of promises into a promise for an array.  If any of
   * the promises gets rejected, the whole array is rejected immediately.
   * @param {Array*} an array (or promise for an array) of values (or
   * promises for values)
   * @returns a promise for an array of the corresponding values
   */
  // By Mark Miller
  // http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled


  Q.all = all;

  function all(promises) {
    return when(promises, function (promises) {
      var pendingCount = 0;
      var deferred = defer();
      array_reduce(promises, function (undefined, promise, index) {
        var snapshot;

        if (isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled") {
          promises[index] = snapshot.value;
        } else {
          ++pendingCount;
          when(promise, function (value) {
            promises[index] = value;

            if (--pendingCount === 0) {
              deferred.resolve(promises);
            }
          }, deferred.reject, function (progress) {
            deferred.notify({
              index: index,
              value: progress
            });
          });
        }
      }, void 0);

      if (pendingCount === 0) {
        deferred.resolve(promises);
      }

      return deferred.promise;
    });
  }

  Promise.prototype.all = function () {
    return all(this);
  };
  /**
   * Returns the first resolved promise of an array. Prior rejected promises are
   * ignored.  Rejects only if all promises are rejected.
   * @param {Array*} an array containing values or promises for values
   * @returns a promise fulfilled with the value of the first resolved promise,
   * or a rejected promise if all promises are rejected.
   */


  Q.any = any;

  function any(promises) {
    if (promises.length === 0) {
      return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
      var promise = promises[index];
      pendingCount++;
      when(promise, onFulfilled, onRejected, onProgress);

      function onFulfilled(result) {
        deferred.resolve(result);
      }

      function onRejected(err) {
        pendingCount--;

        if (pendingCount === 0) {
          var rejection = err || new Error("" + err);
          rejection.message = "Q can't get fulfillment value from any promise, all " + "promises were rejected. Last error message: " + rejection.message;
          deferred.reject(rejection);
        }
      }

      function onProgress(progress) {
        deferred.notify({
          index: index,
          value: progress
        });
      }
    }, undefined);
    return deferred.promise;
  }

  Promise.prototype.any = function () {
    return any(this);
  };
  /**
   * Waits for all promises to be settled, either fulfilled or
   * rejected.  This is distinct from `all` since that would stop
   * waiting at the first rejection.  The promise returned by
   * `allResolved` will never be rejected.
   * @param promises a promise for an array (or an array) of promises
   * (or values)
   * @return a promise for an array of promises
   */


  Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");

  function allResolved(promises) {
    return when(promises, function (promises) {
      promises = array_map(promises, Q);
      return when(all(array_map(promises, function (promise) {
        return when(promise, noop, noop);
      })), function () {
        return promises;
      });
    });
  }

  Promise.prototype.allResolved = function () {
    return allResolved(this);
  };
  /**
   * @see Promise#allSettled
   */


  Q.allSettled = allSettled;

  function allSettled(promises) {
    return Q(promises).allSettled();
  }
  /**
   * Turns an array of promises into a promise for an array of their states (as
   * returned by `inspect`) when they have all settled.
   * @param {Array[Any*]} values an array (or promise for an array) of values (or
   * promises for values)
   * @returns {Array[State]} an array of states for the respective values.
   */


  Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
      return all(array_map(promises, function (promise) {
        promise = Q(promise);

        function regardless() {
          return promise.inspect();
        }

        return promise.then(regardless, regardless);
      }));
    });
  };
  /**
   * Captures the failure of a promise, giving an oportunity to recover
   * with a callback.  If the given promise is fulfilled, the returned
   * promise is fulfilled.
   * @param {Any*} promise for something
   * @param {Function} callback to fulfill the returned promise if the
   * given promise is rejected
   * @returns a promise for the return value of the callback
   */


  Q.fail = // XXX legacy
  Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
  };

  Promise.prototype.fail = // XXX legacy
  Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
  };
  /**
   * Attaches a listener that can respond to progress notifications from a
   * promise's originating deferred. This listener receives the exact arguments
   * passed to ``deferred.notify``.
   * @param {Any*} promise for something
   * @param {Function} callback to receive any progress notifications
   * @returns the given promise, unchanged
   */


  Q.progress = progress;

  function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
  }

  Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
  };
  /**
   * Provides an opportunity to observe the settling of a promise,
   * regardless of whether the promise is fulfilled or rejected.  Forwards
   * the resolution to the returned promise when the callback is done.
   * The callback can return a promise to defer completion.
   * @param {Any*} promise
   * @param {Function} callback to observe the resolution of the given
   * promise, takes no arguments.
   * @returns a promise for the resolution of the given promise when
   * ``fin`` is done.
   */


  Q.fin = // XXX legacy
  Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
  };

  Promise.prototype.fin = // XXX legacy
  Promise.prototype["finally"] = function (callback) {
    if (!callback || typeof callback.apply !== "function") {
      throw new Error("Q can't apply finally callback");
    }

    callback = Q(callback);
    return this.then(function (value) {
      return callback.fcall().then(function () {
        return value;
      });
    }, function (reason) {
      // TODO attempt to recycle the rejection with "this".
      return callback.fcall().then(function () {
        throw reason;
      });
    });
  };
  /**
   * Terminates a chain of promises, forcing rejections to be
   * thrown as exceptions.
   * @param {Any*} promise at the end of a chain of promises
   * @returns nothing
   */


  Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
  };

  Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
      // forward to a future turn so that ``when``
      // does not catch it and turn it into a rejection.
      Q.nextTick(function () {
        makeStackTraceLong(error, promise);

        if (Q.onerror) {
          Q.onerror(error);
        } else {
          throw error;
        }
      });
    }; // Avoid unnecessary `nextTick`ing via an unnecessary `when`.


    var promise = fulfilled || rejected || progress ? this.then(fulfilled, rejected, progress) : this;

    if (typeof process === "object" && process && process.domain) {
      onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
  };
  /**
   * Causes a promise to be rejected if it does not get fulfilled before
   * some milliseconds time out.
   * @param {Any*} promise
   * @param {Number} milliseconds timeout
   * @param {Any*} custom error message or Error object (optional)
   * @returns a promise for the resolution of the given promise if it is
   * fulfilled before the timeout, otherwise rejected.
   */


  Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
  };

  Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
      if (!error || "string" === typeof error) {
        error = new Error(error || "Timed out after " + ms + " ms");
        error.code = "ETIMEDOUT";
      }

      deferred.reject(error);
    }, ms);
    this.then(function (value) {
      clearTimeout(timeoutId);
      deferred.resolve(value);
    }, function (exception) {
      clearTimeout(timeoutId);
      deferred.reject(exception);
    }, deferred.notify);
    return deferred.promise;
  };
  /**
   * Returns a promise for the given value (or promised value), some
   * milliseconds after it resolved. Passes rejections immediately.
   * @param {Any*} promise
   * @param {Number} milliseconds
   * @returns a promise for the resolution of the given promise after milliseconds
   * time has elapsed since the resolution of the given promise.
   * If the given promise rejects, that is passed immediately.
   */


  Q.delay = function (object, timeout) {
    if (timeout === void 0) {
      timeout = object;
      object = void 0;
    }

    return Q(object).delay(timeout);
  };

  Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
      var deferred = defer();
      setTimeout(function () {
        deferred.resolve(value);
      }, timeout);
      return deferred.promise;
    });
  };
  /**
   * Passes a continuation to a Node function, which is called with the given
   * arguments provided as an array, and returns a promise.
   *
   *      Q.nfapply(FS.readFile, [__filename])
   *      .then(function (content) {
   *      })
   *
   */


  Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
  };

  Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
  };
  /**
   * Passes a continuation to a Node function, which is called with the given
   * arguments provided individually, and returns a promise.
   * @example
   * Q.nfcall(FS.readFile, __filename)
   * .then(function (content) {
   * })
   *
   */


  Q.nfcall = function (callback
  /*...args*/
  ) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
  };

  Promise.prototype.nfcall = function ()
  /*...args*/
  {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
  };
  /**
   * Wraps a NodeJS continuation passing function and returns an equivalent
   * version that returns a promise.
   * @example
   * Q.nfbind(FS.readFile, __filename)("utf-8")
   * .then(console.log)
   * .done()
   */


  Q.nfbind = Q.denodeify = function (callback
  /*...args*/
  ) {
    if (callback === undefined) {
      throw new Error("Q can't wrap an undefined function");
    }

    var baseArgs = array_slice(arguments, 1);
    return function () {
      var nodeArgs = baseArgs.concat(array_slice(arguments));
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());
      Q(callback).fapply(nodeArgs).fail(deferred.reject);
      return deferred.promise;
    };
  };

  Promise.prototype.nfbind = Promise.prototype.denodeify = function ()
  /*...args*/
  {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
  };

  Q.nbind = function (callback, thisp
  /*...args*/
  ) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
      var nodeArgs = baseArgs.concat(array_slice(arguments));
      var deferred = defer();
      nodeArgs.push(deferred.makeNodeResolver());

      function bound() {
        return callback.apply(thisp, arguments);
      }

      Q(bound).fapply(nodeArgs).fail(deferred.reject);
      return deferred.promise;
    };
  };

  Promise.prototype.nbind = function ()
  /*thisp, ...args*/
  {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
  };
  /**
   * Calls a method of a Node-style object that accepts a Node-style
   * callback with a given array of arguments, plus a provided callback.
   * @param object an object that has the named method
   * @param {String} name name of the method of object
   * @param {Array} args arguments to pass to the method; the callback
   * will be provided by Q and appended to these arguments.
   * @returns a promise for the value or error
   */


  Q.nmapply = // XXX As proposed by "Redsandro"
  Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
  };

  Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
  Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
  };
  /**
   * Calls a method of a Node-style object that accepts a Node-style
   * callback, forwarding the given variadic arguments, plus a provided
   * callback argument.
   * @param object an object that has the named method
   * @param {String} name name of the method of object
   * @param ...args arguments to pass to the method; the callback will
   * be provided by Q and appended to these arguments.
   * @returns a promise for the value or error
   */


  Q.nsend = // XXX Based on Mark Miller's proposed "send"
  Q.nmcall = // XXX Based on "Redsandro's" proposal
  Q.ninvoke = function (object, name
  /*...args*/
  ) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
  };

  Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
  Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
  Promise.prototype.ninvoke = function (name
  /*...args*/
  ) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
  };
  /**
   * If a function would like to support both Node continuation-passing-style and
   * promise-returning-style, it can end its internal promise chain with
   * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
   * elects to use a nodeback, the result will be sent there.  If they do not
   * pass a nodeback, they will receive the result promise.
   * @param object a result (or a promise for a result)
   * @param {Function} nodeback a Node.js-style callback
   * @returns either the promise or nothing
   */


  Q.nodeify = nodeify;

  function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
  }

  Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
      this.then(function (value) {
        Q.nextTick(function () {
          nodeback(null, value);
        });
      }, function (error) {
        Q.nextTick(function () {
          nodeback(error);
        });
      });
    } else {
      return this;
    }
  };

  Q.noConflict = function () {
    throw new Error("Q.noConflict only works when Q is used as a global");
  }; // All code before this point will be filtered from stack traces.


  var qEndingLine = captureLine();
  return Q;
});
},{"process":"../node_modules/process/browser.js"}],"plot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var d3 = _interopRequireWildcard(require("d3"));

var _defaults = _interopRequireDefault(require("./defaults"));

var _util = _interopRequireDefault(require("./util"));

var _axis = _interopRequireDefault(require("./axis.js"));

var _path = _interopRequireDefault(require("./path.js"));

var _q = require("q");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/* 
 * animates vectors and vectorfields 
 *
 */
// imports:
var dflt_svg_conf = _defaults.default.dflt_svg_conf,
    dflt_h_grids_conf = _defaults.default.dflt_h_grids_conf,
    dflt_v_grids_conf = _defaults.default.dflt_v_grids_conf,
    dflt_vec_conf = _defaults.default.dflt_vec_conf;
var _digest_configs = _util.default._digest_configs,
    _configure_svg_container = _util.default._configure_svg_container,
    _digest_vec_config_list = _util.default._digest_vec_config_list,
    _deepObjectCopy = _util.default._deepObjectCopy;
var _configure_axis_scales = _axis.default._configure_axis_scales,
    _axisTransitions = _axis.default._axisTransitions; //var _calculate_domain=axis._calculate_domain;

var _animate_grid_creation = _path.default._animate_grid_creation,
    _vecs_creation_animation = _path.default._vecs_creation_animation,
    _change_grid_properties = _path.default._change_grid_properties; // initializing config with default configs, if no config is given  :  

var self = {};
self.data = {};
self.vec_config_list = [];
self.methodQueue = {};
self.axis_scale;
self.svgContainer;
/*
 * Default function to be exportet :
 * can be used with method chaining 
 */

const plot = () => {
  //configure svg configs 
  var set_svg_configs = function (svg_conf = null) {
    self.svg_conf = _digest_configs(dflt_svg_conf, svg_conf);
    self.svgContainer = _configure_svg_container(self.svg_conf);
    return this;
  }; // set data and colors


  var add_data = function (vec_data) {
    for (let key in vec_data) {
      Object.defineProperty(self.data, key, {
        value: vec_data[key]
      });
    }

    return this;
  }; // draw / redraw vectors axis or grids


  var draw = function (vecId = null, axisRescale = false, axis = true, grids = true, vec_config_list = null, h_grids_conf = null, v_grids_conf = null) {
    var svgContainer = self.svgContainer,
        svg_conf = self.svg_conf,
        xScale,
        yScale;
    self.h_grids_conf = _digest_configs(dflt_h_grids_conf, h_grids_conf);
    self.v_grids_conf = _digest_configs(dflt_v_grids_conf, v_grids_conf);

    if (vecId) {
      // configure axis, makes things ready for draw 
      var vecs = self.data[vecId];
      vec_config_list = _digest_vec_config_list(dflt_vec_conf, vec_config_list, svgContainer);
      self.vec_config_list = vec_config_list;

      if (axisRescale || !self.axis_scale) {
        self.axis_scale = _configure_axis_scales(svg_conf, vecs);
      }

      xScale = self.axis_scale.x;
      yScale = self.axis_scale.y;

      var vecs_creation_func = _vecs_creation_animation(svgContainer, vecs, xScale, yScale, vecId, vec_config_list);

      Object.defineProperty(self.methodQueue, 'vecs_creation', {
        value: vecs_creation_func
      });
    } else if (!vecId) {
      if (!vecId && grids) {
        let grids_domain = {
          x: [self.h_grids_conf.domain[0], self.h_grids_conf.domain[1]],
          y: [self.v_grids_conf.domain[0], self.h_grids_conf.domain[1]]
        };
        self.axis_scale = _configure_axis_scales(svgContainer, svg_conf, null, grids_domain);
        xScale = self.axis_scale.x;
        yScale = self.axis_scale.y;
      }
    }

    if (axis) {
      // axixTrans is just a Promise we use all this promises to manage the sequence of drawing components at the end of the function
      let axis_async_funcs = _axisTransitions(svgContainer, xScale, yScale),
          xAxis_creation_func = axis_async_funcs.x,
          yAxis_creation_func = axis_async_funcs.y; // add this promises to methodQueue to be used by user


      Object.defineProperty(self.methodQueue, 'xAxis', {
        value: xAxis_creation_func
      });
      Object.defineProperty(self.methodQueue, 'yAxis', {
        value: yAxis_creation_func
      });
    }

    if (grids) {
      let grids_async_funcs = _animate_grid_creation(svgContainer, xScale, yScale, self.svg_conf, self.h_grids_conf, self.v_grids_conf); // var old_grids_remove_func = grids_async_funcs.old_grids_remove_func,


      let xGrid_creation_func = grids_async_funcs.xGrid_func,
          yGrid_creation_func = grids_async_funcs.yGrid_func;
      Object.defineProperty(self.methodQueue, 'xGrids', {
        value: xGrid_creation_func
      });
      Object.defineProperty(self.methodQueue, 'yGrids', {
        value: yGrid_creation_func
      });
    }

    return this;
  };

  var grid_porperties_transition = function (h_grids_conf, v_grids_conf) {
    h_grids_conf = _digest_configs(dflt_h_grids_conf, h_grids_conf);
    v_grids_conf = _digest_configs(dflt_v_grids_conf, v_grids_conf);

    var grids_transition_promises = _change_grid_properties(self.svgContainer, h_grids_conf, v_grids_conf);

    Object.defineProperty(self.methodQueue, 'hGrids_transition', {
      value: grids_transition_promises.h
    });
    Object.defineProperty(self.methodQueue, 'vGrids_transition', {
      value: grids_transition_promises.v
    });
    return this;
  }; // return methods for method chaining 


  return {
    svg_config: self.svg_conf,
    methodQueue: self.methodQueue,
    set_svg_configs: set_svg_configs,
    add_data: add_data,
    draw: draw,
    grid_porperties_transition: grid_porperties_transition
  };
};

exports.default = plot;
},{"d3":"../node_modules/d3/build/d3.js","./defaults":"defaults.js","./util":"util.js","./axis.js":"axis.js","./path.js":"path.js","q":"../node_modules/q/q.js"}],"../node_modules/mathjs/src/core/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_CONFIG = void 0;
const DEFAULT_CONFIG = {
  // minimum relative difference between two compared values,
  // used by all comparison functions
  epsilon: 1e-12,
  // type of default matrix output. Choose 'matrix' (default) or 'array'
  matrix: 'Matrix',
  // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
  number: 'number',
  // number of significant digits in BigNumbers
  precision: 64,
  // predictable output type of functions. When true, output type depends only
  // on the input types. When false (default), output type can vary depending
  // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
  // predictable is false, and returns `NaN` when true.
  predictable: false,
  // random seed for seeded pseudo random number generation
  // null = randomly seed
  randomSeed: null
};
exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
},{}],"../node_modules/mathjs/src/utils/is.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumber = isNumber;
exports.isBigNumber = isBigNumber;
exports.isComplex = isComplex;
exports.isFraction = isFraction;
exports.isUnit = isUnit;
exports.isString = isString;
exports.isMatrix = isMatrix;
exports.isCollection = isCollection;
exports.isDenseMatrix = isDenseMatrix;
exports.isSparseMatrix = isSparseMatrix;
exports.isRange = isRange;
exports.isIndex = isIndex;
exports.isBoolean = isBoolean;
exports.isResultSet = isResultSet;
exports.isHelp = isHelp;
exports.isFunction = isFunction;
exports.isDate = isDate;
exports.isRegExp = isRegExp;
exports.isObject = isObject;
exports.isNull = isNull;
exports.isUndefined = isUndefined;
exports.isAccessorNode = isAccessorNode;
exports.isArrayNode = isArrayNode;
exports.isAssignmentNode = isAssignmentNode;
exports.isBlockNode = isBlockNode;
exports.isConditionalNode = isConditionalNode;
exports.isConstantNode = isConstantNode;
exports.isFunctionAssignmentNode = isFunctionAssignmentNode;
exports.isFunctionNode = isFunctionNode;
exports.isIndexNode = isIndexNode;
exports.isNode = isNode;
exports.isObjectNode = isObjectNode;
exports.isOperatorNode = isOperatorNode;
exports.isParenthesisNode = isParenthesisNode;
exports.isRangeNode = isRangeNode;
exports.isSymbolNode = isSymbolNode;
exports.isChain = isChain;
exports.typeOf = typeOf;
exports.isArray = void 0;

// type checks for all known types
//
// note that:
//
// - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
//   instanceof cannot be used because that would not allow to pass data from
//   one instance of math.js to another since each has it's own instance of Unit.
// - check the `isUnit` property via the constructor, so there will be no
//   matches for "fake" instances like plain objects with a property `isUnit`.
//   That is important for security reasons.
// - It must not be possible to override the type checks used internally,
//   for security reasons, so these functions are not exposed in the expression
//   parser.
function isNumber(x) {
  return typeof x === 'number';
}

function isBigNumber(x) {
  return x && x.constructor.prototype.isBigNumber === true || false;
}

function isComplex(x) {
  return x && typeof x === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
}

function isFraction(x) {
  return x && typeof x === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
}

function isUnit(x) {
  return x && x.constructor.prototype.isUnit === true || false;
}

function isString(x) {
  return typeof x === 'string';
}

const isArray = Array.isArray;
exports.isArray = isArray;

function isMatrix(x) {
  return x && x.constructor.prototype.isMatrix === true || false;
}
/**
 * Test whether a value is a collection: an Array or Matrix
 * @param {*} x
 * @returns {boolean} isCollection
 */


function isCollection(x) {
  return Array.isArray(x) || isMatrix(x);
}

function isDenseMatrix(x) {
  return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
}

function isSparseMatrix(x) {
  return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
}

function isRange(x) {
  return x && x.constructor.prototype.isRange === true || false;
}

function isIndex(x) {
  return x && x.constructor.prototype.isIndex === true || false;
}

function isBoolean(x) {
  return typeof x === 'boolean';
}

function isResultSet(x) {
  return x && x.constructor.prototype.isResultSet === true || false;
}

function isHelp(x) {
  return x && x.constructor.prototype.isHelp === true || false;
}

function isFunction(x) {
  return typeof x === 'function';
}

function isDate(x) {
  return x instanceof Date;
}

function isRegExp(x) {
  return x instanceof RegExp;
}

function isObject(x) {
  return !!(x && typeof x === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
}

function isNull(x) {
  return x === null;
}

function isUndefined(x) {
  return x === undefined;
}

function isAccessorNode(x) {
  return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
}

function isArrayNode(x) {
  return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
}

function isAssignmentNode(x) {
  return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}

function isBlockNode(x) {
  return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
}

function isConditionalNode(x) {
  return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
}

function isConstantNode(x) {
  return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
}

function isFunctionAssignmentNode(x) {
  return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
}

function isFunctionNode(x) {
  return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
}

function isIndexNode(x) {
  return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
}

function isNode(x) {
  return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
}

function isObjectNode(x) {
  return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
}

function isOperatorNode(x) {
  return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
}

function isParenthesisNode(x) {
  return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
}

function isRangeNode(x) {
  return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
}

function isSymbolNode(x) {
  return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
}

function isChain(x) {
  return x && x.constructor.prototype.isChain === true || false;
}

function typeOf(x) {
  const t = typeof x;

  if (t === 'object') {
    // JavaScript types
    if (x === null) return 'null';
    if (Array.isArray(x)) return 'Array';
    if (x instanceof Date) return 'Date';
    if (x instanceof RegExp) return 'RegExp'; // math.js types

    if (isBigNumber(x)) return 'BigNumber';
    if (isComplex(x)) return 'Complex';
    if (isFraction(x)) return 'Fraction';
    if (isMatrix(x)) return 'Matrix';
    if (isUnit(x)) return 'Unit';
    if (isIndex(x)) return 'Index';
    if (isRange(x)) return 'Range';
    if (isResultSet(x)) return 'ResultSet';
    if (isNode(x)) return x.type;
    if (isChain(x)) return 'Chain';
    if (isHelp(x)) return 'Help';
    return 'Object';
  }

  if (t === 'function') return 'Function';
  return t; // can be 'string', 'number', 'boolean', ...
}
},{}],"../node_modules/mathjs/src/utils/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clone = clone;
exports.mapObject = mapObject;
exports.extend = extend;
exports.deepExtend = deepExtend;
exports.deepStrictEqual = deepStrictEqual;
exports.deepFlatten = deepFlatten;
exports.canDefineProperty = canDefineProperty;
exports.lazy = lazy;
exports.traverse = traverse;
exports.hasOwnProperty = hasOwnProperty;
exports.isLegacyFactory = isLegacyFactory;
exports.get = get;
exports.set = set;
exports.pick = pick;
exports.pickShallow = pickShallow;
exports.values = values;

var _is = require("./is");

/**
 * Clone an object
 *
 *     clone(x)
 *
 * Can clone any primitive type, array, and object.
 * If x has a function clone, this function will be invoked to clone the object.
 *
 * @param {*} x
 * @return {*} clone
 */
function clone(x) {
  const type = typeof x; // immutable primitive types

  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
    return x;
  } // use clone function of the object when available


  if (typeof x.clone === 'function') {
    return x.clone();
  } // array


  if (Array.isArray(x)) {
    return x.map(function (value) {
      return clone(value);
    });
  }

  if (x instanceof Date) return new Date(x.valueOf());
  if ((0, _is.isBigNumber)(x)) return x; // bignumbers are immutable

  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
  // object

  return mapObject(x, clone);
}
/**
 * Apply map to all properties of an object
 * @param {Object} object
 * @param {function} callback
 * @return {Object} Returns a copy of the object with mapped properties
 */


function mapObject(object, callback) {
  const clone = {};

  for (const key in object) {
    if (hasOwnProperty(object, key)) {
      clone[key] = callback(object[key]);
    }
  }

  return clone;
}
/**
 * Extend object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 */


function extend(a, b) {
  for (const prop in b) {
    if (hasOwnProperty(b, prop)) {
      a[prop] = b[prop];
    }
  }

  return a;
}
/**
 * Deep extend an object a with the properties of object b
 * @param {Object} a
 * @param {Object} b
 * @returns {Object}
 */


function deepExtend(a, b) {
  // TODO: add support for Arrays to deepExtend
  if (Array.isArray(b)) {
    throw new TypeError('Arrays are not supported by deepExtend');
  }

  for (const prop in b) {
    if (hasOwnProperty(b, prop)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === undefined) {
          a[prop] = {};
        }

        if (a[prop] && a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop]);
        } else {
          a[prop] = b[prop];
        }
      } else if (Array.isArray(b[prop])) {
        throw new TypeError('Arrays are not supported by deepExtend');
      } else {
        a[prop] = b[prop];
      }
    }
  }

  return a;
}
/**
 * Deep test equality of all fields in two pairs of arrays or objects.
 * Compares values and functions strictly (ie. 2 is not the same as '2').
 * @param {Array | Object} a
 * @param {Array | Object} b
 * @returns {boolean}
 */


function deepStrictEqual(a, b) {
  let prop, i, len;

  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }

    if (a.length !== b.length) {
      return false;
    }

    for (i = 0, len = a.length; i < len; i++) {
      if (!deepStrictEqual(a[i], b[i])) {
        return false;
      }
    }

    return true;
  } else if (typeof a === 'function') {
    return a === b;
  } else if (a instanceof Object) {
    if (Array.isArray(b) || !(b instanceof Object)) {
      return false;
    }

    for (prop in a) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in b) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    for (prop in b) {
      // noinspection JSUnfilteredForInLoop
      if (!(prop in a) || !deepStrictEqual(a[prop], b[prop])) {
        return false;
      }
    }

    return true;
  } else {
    return a === b;
  }
}
/**
 * Recursively flatten a nested object.
 * @param {Object} nestedObject
 * @return {Object} Returns the flattened object
 */


function deepFlatten(nestedObject) {
  const flattenedObject = {};

  _deepFlatten(nestedObject, flattenedObject);

  return flattenedObject;
} // helper function used by deepFlatten


function _deepFlatten(nestedObject, flattenedObject) {
  for (const prop in nestedObject) {
    if (nestedObject.hasOwnProperty(prop)) {
      const value = nestedObject[prop];

      if (typeof value === 'object' && value !== null) {
        _deepFlatten(value, flattenedObject);
      } else {
        flattenedObject[prop] = value;
      }
    }
  }
}
/**
 * Test whether the current JavaScript engine supports Object.defineProperty
 * @returns {boolean} returns true if supported
 */


function canDefineProperty() {
  // test needed for broken IE8 implementation
  try {
    if (Object.defineProperty) {
      Object.defineProperty({}, 'x', {
        get: function () {}
      });
      return true;
    }
  } catch (e) {}

  return false;
}
/**
 * Attach a lazy loading property to a constant.
 * The given function `fn` is called once when the property is first requested.
 *
 * @param {Object} object         Object where to add the property
 * @param {string} prop           Property name
 * @param {Function} valueResolver Function returning the property value. Called
 *                                without arguments.
 */


function lazy(object, prop, valueResolver) {
  let _uninitialized = true;

  let _value;

  Object.defineProperty(object, prop, {
    get: function () {
      if (_uninitialized) {
        _value = valueResolver();
        _uninitialized = false;
      }

      return _value;
    },
    set: function (value) {
      _value = value;
      _uninitialized = false;
    },
    configurable: true,
    enumerable: true
  });
}
/**
 * Traverse a path into an object.
 * When a namespace is missing, it will be created
 * @param {Object} object
 * @param {string | string[]} path   A dot separated string like 'name.space'
 * @return {Object} Returns the object at the end of the path
 */


function traverse(object, path) {
  if (path && typeof path === 'string') {
    return traverse(object, path.split('.'));
  }

  let obj = object;

  if (path) {
    for (let i = 0; i < path.length; i++) {
      const key = path[i];

      if (!(key in obj)) {
        obj[key] = {};
      }

      obj = obj[key];
    }
  }

  return obj;
}
/**
 * A safe hasOwnProperty
 * @param {Object} object
 * @param {string} property
 */


function hasOwnProperty(object, property) {
  return object && Object.hasOwnProperty.call(object, property);
}
/**
 * Test whether an object is a factory. a factory has fields:
 *
 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
 * - name: string (optional)
 * - path: string    A dot separated path (optional)
 * - math: boolean   If true (false by default), the math namespace is passed
 *                   as fifth argument of the factory function
 *
 * @param {*} object
 * @returns {boolean}
 */


function isLegacyFactory(object) {
  return object && typeof object.factory === 'function';
}
/**
 * Get a nested property from an object
 * @param {Object} object
 * @param {string | string[]} path
 * @returns {Object}
 */


function get(object, path) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return get(object, path.split('.'));
    } else {
      return object[path];
    }
  }

  let child = object;

  for (let i = 0; i < path.length; i++) {
    const key = path[i];
    child = child ? child[key] : undefined;
  }

  return child;
}
/**
 * Set a nested property in an object
 * Mutates the object itself
 * If the path doesn't exist, it will be created
 * @param {Object} object
 * @param {string | string[]} path
 * @param {*} value
 * @returns {Object}
 */


function set(object, path, value) {
  if (typeof path === 'string') {
    if (isPath(path)) {
      return set(object, path.split('.'), value);
    } else {
      object[path] = value;
      return object;
    }
  }

  let child = object;

  for (let i = 0; i < path.length - 1; i++) {
    const key = path[i];

    if (child[key] === undefined) {
      child[key] = {};
    }

    child = child[key];
  }

  if (path.length > 0) {
    const lastKey = path[path.length - 1];
    child[lastKey] = value;
  }

  return object;
}
/**
 * Create an object composed of the picked object properties
 * @param {Object} object
 * @param {string[]} properties
 * @param {function} [transform] Optional value to transform a value when picking it
 * @return {Object}
 */


function pick(object, properties, transform) {
  const copy = {};

  for (let i = 0; i < properties.length; i++) {
    const key = properties[i];
    const value = get(object, key);

    if (value !== undefined) {
      set(copy, key, transform ? transform(value, key) : value);
    }
  }

  return copy;
}
/**
 * Shallow version of pick, creating an object composed of the picked object properties
 * but not for nested properties
 * @param {Object} object
 * @param {string[]} properties
 * @return {Object}
 */


function pickShallow(object, properties) {
  const copy = {};

  for (let i = 0; i < properties.length; i++) {
    const key = properties[i];
    const value = object[key];

    if (value !== undefined) {
      copy[key] = value;
    }
  }

  return copy;
}

function values(object) {
  return Object.keys(object).map(key => object[key]);
} // helper function to test whether a string contains a path like 'user.name'


function isPath(str) {
  return str.indexOf('.') !== -1;
}
},{"./is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/core/function/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configFactory = configFactory;
exports.NUMBER_OPTIONS = exports.MATRIX_OPTIONS = void 0;

var _object = require("../../utils/object");

var _config2 = require("../config");

const MATRIX_OPTIONS = ['Matrix', 'Array']; // valid values for option matrix

exports.MATRIX_OPTIONS = MATRIX_OPTIONS;
const NUMBER_OPTIONS = ['number', 'BigNumber', 'Fraction']; // valid values for option number

exports.NUMBER_OPTIONS = NUMBER_OPTIONS;

function configFactory(config, emit) {
  /**
   * Set configuration options for math.js, and get current options.
   * Will emit a 'config' event, with arguments (curr, prev, changes).
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *     math.config(config: Object): Object
   *
   * Examples:
   *
   *
   *     import { create, all } from 'mathjs'
   *
   *     // create a mathjs instance
   *     const math = create(all)
   *
   *     math.config().number                // outputs 'number'
   *     math.evaluate('0.4')                // outputs number 0.4
   *     math.config({number: 'Fraction'})
   *     math.evaluate('0.4')                // outputs Fraction 2/5
   *
   * @param {Object} [options] Available options:
   *                            {number} epsilon
   *                              Minimum relative difference between two
   *                              compared values, used by all comparison functions.
   *                            {string} matrix
   *                              A string 'Matrix' (default) or 'Array'.
   *                            {string} number
   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
   *                            {number} precision
   *                              The number of significant digits for BigNumbers.
   *                              Not applicable for Numbers.
   *                            {string} parenthesis
   *                              How to display parentheses in LaTeX and string
   *                              output.
   *                            {string} randomSeed
   *                              Random seed for seeded pseudo random number generator.
   *                              Set to null to randomly seed.
   * @return {Object} Returns the current configuration
   */
  function _config(options) {
    if (options) {
      const prev = (0, _object.mapObject)(config, _object.clone); // validate some of the options

      validateOption(options, 'matrix', MATRIX_OPTIONS);
      validateOption(options, 'number', NUMBER_OPTIONS); // merge options

      (0, _object.deepExtend)(config, options);
      const curr = (0, _object.mapObject)(config, _object.clone);
      const changes = (0, _object.mapObject)(options, _object.clone); // emit 'config' event

      emit('config', curr, prev, changes);
      return curr;
    } else {
      return (0, _object.mapObject)(config, _object.clone);
    }
  } // attach the valid options to the function so they can be extended


  _config.MATRIX_OPTIONS = MATRIX_OPTIONS;
  _config.NUMBER_OPTIONS = NUMBER_OPTIONS; // attach the config properties as readonly properties to the config function

  Object.keys(_config2.DEFAULT_CONFIG).forEach(key => {
    Object.defineProperty(_config, key, {
      get: () => config[key],
      enumerable: true,
      configurable: true
    });
  });
  return _config;
}
/**
 * Test whether an Array contains a specific item.
 * @param {Array.<string>} array
 * @param {string} item
 * @return {boolean}
 */


function contains(array, item) {
  return array.indexOf(item) !== -1;
}
/**
 * Find a string in an array. Case insensitive search
 * @param {Array.<string>} array
 * @param {string} item
 * @return {number} Returns the index when found. Returns -1 when not found
 */


function findIndex(array, item) {
  return array.map(function (i) {
    return i.toLowerCase();
  }).indexOf(item.toLowerCase());
}
/**
 * Validate an option
 * @param {Object} options         Object with options
 * @param {string} name            Name of the option to validate
 * @param {Array.<string>} values  Array with valid values for this option
 */


function validateOption(options, name, values) {
  if (options[name] !== undefined && !contains(values, options[name])) {
    const index = findIndex(values, options[name]);

    if (index !== -1) {
      // right value, wrong casing
      // TODO: lower case values are deprecated since v3, remove this warning some day.
      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
      options[name] = values[index]; // change the option to the right casing
    } else {
      // unknown value
      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
    }
  }
}
},{"../../utils/object":"../node_modules/mathjs/src/utils/object.js","../config":"../node_modules/mathjs/src/core/config.js"}],"../node_modules/mathjs/src/entry/configReadonly.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;

var _config = require("../core/config");

var _config2 = require("../core/function/config");

// create a read-only version of config
const config =
/* #__PURE__ */
function (options) {
  if (options) {
    throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
  }

  return Object.freeze(_config.DEFAULT_CONFIG);
};

exports.config = config;
Object.assign(config, _config.DEFAULT_CONFIG, {
  MATRIX_OPTIONS: _config2.MATRIX_OPTIONS,
  NUMBER_OPTIONS: _config2.NUMBER_OPTIONS
});
},{"../core/config":"../node_modules/mathjs/src/core/config.js","../core/function/config":"../node_modules/mathjs/src/core/function/config.js"}],"../node_modules/typed-function/typed-function.js":[function(require,module,exports) {
var define;
/**
 * typed-function
 *
 * Type checking for JavaScript functions
 *
 * https://github.com/josdejong/typed-function
 */
'use strict';

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof exports === 'object') {
    // OldNode. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like OldNode.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.typed = factory();
  }
})(this, function () {
  function ok() {
    return true;
  }

  function notOk() {
    return false;
  }

  function undef() {
    return undefined;
  }
  /**
   * @typedef {{
   *   params: Param[],
   *   fn: function
   * }} Signature
   *
   * @typedef {{
   *   types: Type[],
   *   restParam: boolean
   * }} Param
   *
   * @typedef {{
   *   name: string,
   *   typeIndex: number,
   *   test: function,
   *   conversion?: ConversionDef,
   *   conversionIndex: number,
   * }} Type
   *
   * @typedef {{
   *   from: string,
   *   to: string,
   *   convert: function (*) : *
   * }} ConversionDef
   *
   * @typedef {{
   *   name: string,
   *   test: function(*) : boolean
   * }} TypeDef
   */
  // create a new instance of typed-function


  function create() {
    // data type tests
    var _types = [{
      name: 'number',
      test: function (x) {
        return typeof x === 'number';
      }
    }, {
      name: 'string',
      test: function (x) {
        return typeof x === 'string';
      }
    }, {
      name: 'boolean',
      test: function (x) {
        return typeof x === 'boolean';
      }
    }, {
      name: 'Function',
      test: function (x) {
        return typeof x === 'function';
      }
    }, {
      name: 'Array',
      test: Array.isArray
    }, {
      name: 'Date',
      test: function (x) {
        return x instanceof Date;
      }
    }, {
      name: 'RegExp',
      test: function (x) {
        return x instanceof RegExp;
      }
    }, {
      name: 'Object',
      test: function (x) {
        return typeof x === 'object' && x.constructor === Object;
      }
    }, {
      name: 'null',
      test: function (x) {
        return x === null;
      }
    }, {
      name: 'undefined',
      test: function (x) {
        return x === undefined;
      }
    }];
    var anyType = {
      name: 'any',
      test: ok // types which need to be ignored

    };
    var _ignore = []; // type conversions

    var _conversions = []; // This is a temporary object, will be replaced with a typed function at the end

    var typed = {
      types: _types,
      conversions: _conversions,
      ignore: _ignore
    };
    /**
     * Find the test function for a type
     * @param {String} typeName
     * @return {TypeDef} Returns the type definition when found,
     *                    Throws a TypeError otherwise
     */

    function findTypeByName(typeName) {
      var entry = findInArray(typed.types, function (entry) {
        return entry.name === typeName;
      });

      if (entry) {
        return entry;
      }

      if (typeName === 'any') {
        // special baked-in case 'any'
        return anyType;
      }

      var hint = findInArray(typed.types, function (entry) {
        return entry.name.toLowerCase() === typeName.toLowerCase();
      });
      throw new TypeError('Unknown type "' + typeName + '"' + (hint ? '. Did you mean "' + hint.name + '"?' : ''));
    }
    /**
     * Find the index of a type definition. Handles special case 'any'
     * @param {TypeDef} type
     * @return {number}
     */


    function findTypeIndex(type) {
      if (type === anyType) {
        return 999;
      }

      return typed.types.indexOf(type);
    }
    /**
     * Find a type that matches a value.
     * @param {*} value
     * @return {string} Returns the name of the first type for which
     *                  the type test matches the value.
     */


    function findTypeName(value) {
      var entry = findInArray(typed.types, function (entry) {
        return entry.test(value);
      });

      if (entry) {
        return entry.name;
      }

      throw new TypeError('Value has unknown type. Value: ' + value);
    }
    /**
     * Find a specific signature from a (composed) typed function, for example:
     *
     *   typed.find(fn, ['number', 'string'])
     *   typed.find(fn, 'number, string')
     *
     * Function find only only works for exact matches.
     *
     * @param {Function} fn                   A typed-function
     * @param {string | string[]} signature   Signature to be found, can be
     *                                        an array or a comma separated string.
     * @return {Function}                     Returns the matching signature, or
     *                                        throws an error when no signature
     *                                        is found.
     */


    function find(fn, signature) {
      if (!fn.signatures) {
        throw new TypeError('Function is no typed-function');
      } // normalize input


      var arr;

      if (typeof signature === 'string') {
        arr = signature.split(',');

        for (var i = 0; i < arr.length; i++) {
          arr[i] = arr[i].trim();
        }
      } else if (Array.isArray(signature)) {
        arr = signature;
      } else {
        throw new TypeError('String array or a comma separated string expected');
      }

      var str = arr.join(','); // find an exact match

      var match = fn.signatures[str];

      if (match) {
        return match;
      } // TODO: extend find to match non-exact signatures


      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
    }
    /**
     * Convert a given value to another data type.
     * @param {*} value
     * @param {string} type
     */


    function convert(value, type) {
      var from = findTypeName(value); // check conversion is needed

      if (type === from) {
        return value;
      }

      for (var i = 0; i < typed.conversions.length; i++) {
        var conversion = typed.conversions[i];

        if (conversion.from === from && conversion.to === type) {
          return conversion.convert(value);
        }
      }

      throw new Error('Cannot convert from ' + from + ' to ' + type);
    }
    /**
     * Stringify parameters in a normalized way
     * @param {Param[]} params
     * @return {string}
     */


    function stringifyParams(params) {
      return params.map(function (param) {
        var typeNames = param.types.map(getTypeName);
        return (param.restParam ? '...' : '') + typeNames.join('|');
      }).join(',');
    }
    /**
     * Parse a parameter, like "...number | boolean"
     * @param {string} param
     * @param {ConversionDef[]} conversions
     * @return {Param} param
     */


    function parseParam(param, conversions) {
      var restParam = param.indexOf('...') === 0;
      var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';
      var typeNames = types.split('|').map(trim).filter(notEmpty).filter(notIgnore);
      var matchingConversions = filterConversions(conversions, typeNames);
      var exactTypes = typeNames.map(function (typeName) {
        var type = findTypeByName(typeName);
        return {
          name: typeName,
          typeIndex: findTypeIndex(type),
          test: type.test,
          conversion: null,
          conversionIndex: -1
        };
      });
      var convertibleTypes = matchingConversions.map(function (conversion) {
        var type = findTypeByName(conversion.from);
        return {
          name: conversion.from,
          typeIndex: findTypeIndex(type),
          test: type.test,
          conversion: conversion,
          conversionIndex: conversions.indexOf(conversion)
        };
      });
      return {
        types: exactTypes.concat(convertibleTypes),
        restParam: restParam
      };
    }
    /**
     * Parse a signature with comma separated parameters,
     * like "number | boolean, ...string"
     * @param {string} signature
     * @param {function} fn
     * @param {ConversionDef[]} conversions
     * @return {Signature | null} signature
     */


    function parseSignature(signature, fn, conversions) {
      var params = [];

      if (signature.trim() !== '') {
        params = signature.split(',').map(trim).map(function (param, index, array) {
          var parsedParam = parseParam(param, conversions);

          if (parsedParam.restParam && index !== array.length - 1) {
            throw new SyntaxError('Unexpected rest parameter "' + param + '": ' + 'only allowed for the last parameter');
          }

          return parsedParam;
        });
      }

      if (params.some(isInvalidParam)) {
        // invalid signature: at least one parameter has no types
        // (they may have been filtered)
        return null;
      }

      return {
        params: params,
        fn: fn
      };
    }
    /**
     * Test whether a set of params contains a restParam
     * @param {Param[]} params
     * @return {boolean} Returns true when the last parameter is a restParam
     */


    function hasRestParam(params) {
      var param = last(params);
      return param ? param.restParam : false;
    }
    /**
     * Test whether a parameter contains conversions
     * @param {Param} param
     * @return {boolean} Returns true when at least one of the parameters
     *                   contains a conversion.
     */


    function hasConversions(param) {
      return param.types.some(function (type) {
        return type.conversion != null;
      });
    }
    /**
     * Create a type test for a single parameter, which can have one or multiple
     * types.
     * @param {Param} param
     * @return {function(x: *) : boolean} Returns a test function
     */


    function compileTest(param) {
      if (!param || param.types.length === 0) {
        // nothing to do
        return ok;
      } else if (param.types.length === 1) {
        return findTypeByName(param.types[0].name).test;
      } else if (param.types.length === 2) {
        var test0 = findTypeByName(param.types[0].name).test;
        var test1 = findTypeByName(param.types[1].name).test;
        return function or(x) {
          return test0(x) || test1(x);
        };
      } else {
        // param.types.length > 2
        var tests = param.types.map(function (type) {
          return findTypeByName(type.name).test;
        });
        return function or(x) {
          for (var i = 0; i < tests.length; i++) {
            if (tests[i](x)) {
              return true;
            }
          }

          return false;
        };
      }
    }
    /**
     * Create a test for all parameters of a signature
     * @param {Param[]} params
     * @return {function(args: Array<*>) : boolean}
     */


    function compileTests(params) {
      var tests, test0, test1;

      if (hasRestParam(params)) {
        // variable arguments like '...number'
        tests = initial(params).map(compileTest);
        var varIndex = tests.length;
        var lastTest = compileTest(last(params));

        var testRestParam = function (args) {
          for (var i = varIndex; i < args.length; i++) {
            if (!lastTest(args[i])) {
              return false;
            }
          }

          return true;
        };

        return function testArgs(args) {
          for (var i = 0; i < tests.length; i++) {
            if (!tests[i](args[i])) {
              return false;
            }
          }

          return testRestParam(args) && args.length >= varIndex + 1;
        };
      } else {
        // no variable arguments
        if (params.length === 0) {
          return function testArgs(args) {
            return args.length === 0;
          };
        } else if (params.length === 1) {
          test0 = compileTest(params[0]);
          return function testArgs(args) {
            return test0(args[0]) && args.length === 1;
          };
        } else if (params.length === 2) {
          test0 = compileTest(params[0]);
          test1 = compileTest(params[1]);
          return function testArgs(args) {
            return test0(args[0]) && test1(args[1]) && args.length === 2;
          };
        } else {
          // arguments.length > 2
          tests = params.map(compileTest);
          return function testArgs(args) {
            for (var i = 0; i < tests.length; i++) {
              if (!tests[i](args[i])) {
                return false;
              }
            }

            return args.length === tests.length;
          };
        }
      }
    }
    /**
     * Find the parameter at a specific index of a signature.
     * Handles rest parameters.
     * @param {Signature} signature
     * @param {number} index
     * @return {Param | null} Returns the matching parameter when found,
     *                        null otherwise.
     */


    function getParamAtIndex(signature, index) {
      return index < signature.params.length ? signature.params[index] : hasRestParam(signature.params) ? last(signature.params) : null;
    }
    /**
     * Get all type names of a parameter
     * @param {Signature} signature
     * @param {number} index
     * @param {boolean} excludeConversions
     * @return {string[]} Returns an array with type names
     */


    function getExpectedTypeNames(signature, index, excludeConversions) {
      var param = getParamAtIndex(signature, index);
      var types = param ? excludeConversions ? param.types.filter(isExactType) : param.types : [];
      return types.map(getTypeName);
    }
    /**
     * Returns the name of a type
     * @param {Type} type
     * @return {string} Returns the type name
     */


    function getTypeName(type) {
      return type.name;
    }
    /**
     * Test whether a type is an exact type or conversion
     * @param {Type} type
     * @return {boolean} Returns true when
     */


    function isExactType(type) {
      return type.conversion === null || type.conversion === undefined;
    }
    /**
     * Helper function for creating error messages: create an array with
     * all available types on a specific argument index.
     * @param {Signature[]} signatures
     * @param {number} index
     * @return {string[]} Returns an array with available types
     */


    function mergeExpectedParams(signatures, index) {
      var typeNames = uniq(flatMap(signatures, function (signature) {
        return getExpectedTypeNames(signature, index, false);
      }));
      return typeNames.indexOf('any') !== -1 ? ['any'] : typeNames;
    }
    /**
     * Create
     * @param {string} name             The name of the function
     * @param {array.<*>} args          The actual arguments passed to the function
     * @param {Signature[]} signatures  A list with available signatures
     * @return {TypeError} Returns a type error with additional data
     *                     attached to it in the property `data`
     */


    function createError(name, args, signatures) {
      var err, expected;

      var _name = name || 'unnamed'; // test for wrong type at some index


      var matchingSignatures = signatures;
      var index;

      for (index = 0; index < args.length; index++) {
        var nextMatchingDefs = matchingSignatures.filter(function (signature) {
          var test = compileTest(getParamAtIndex(signature, index));
          return (index < signature.params.length || hasRestParam(signature.params)) && test(args[index]);
        });

        if (nextMatchingDefs.length === 0) {
          // no matching signatures anymore, throw error "wrong type"
          expected = mergeExpectedParams(matchingSignatures, index);

          if (expected.length > 0) {
            var actualType = findTypeName(args[index]);
            err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')');
            err.data = {
              category: 'wrongType',
              fn: _name,
              index: index,
              actual: actualType,
              expected: expected
            };
            return err;
          }
        } else {
          matchingSignatures = nextMatchingDefs;
        }
      } // test for too few arguments


      var lengths = matchingSignatures.map(function (signature) {
        return hasRestParam(signature.params) ? Infinity : signature.params.length;
      });

      if (args.length < Math.min.apply(null, lengths)) {
        expected = mergeExpectedParams(matchingSignatures, index);
        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');
        err.data = {
          category: 'tooFewArgs',
          fn: _name,
          index: args.length,
          expected: expected
        };
        return err;
      } // test for too many arguments


      var maxLength = Math.max.apply(null, lengths);

      if (args.length > maxLength) {
        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
        err.data = {
          category: 'tooManyArgs',
          fn: _name,
          index: args.length,
          expectedLength: maxLength
        };
        return err;
      }

      err = new TypeError('Arguments of type "' + args.join(', ') + '" do not match any of the defined signatures of function ' + _name + '.');
      err.data = {
        category: 'mismatch',
        actual: args.map(findTypeName)
      };
      return err;
    }
    /**
     * Find the lowest index of all exact types of a parameter (no conversions)
     * @param {Param} param
     * @return {number} Returns the index of the lowest type in typed.types
     */


    function getLowestTypeIndex(param) {
      var min = 999;

      for (var i = 0; i < param.types.length; i++) {
        if (isExactType(param.types[i])) {
          min = Math.min(min, param.types[i].typeIndex);
        }
      }

      return min;
    }
    /**
     * Find the lowest index of the conversion of all types of the parameter
     * having a conversion
     * @param {Param} param
     * @return {number} Returns the lowest index of the conversions of this type
     */


    function getLowestConversionIndex(param) {
      var min = 999;

      for (var i = 0; i < param.types.length; i++) {
        if (!isExactType(param.types[i])) {
          min = Math.min(min, param.types[i].conversionIndex);
        }
      }

      return min;
    }
    /**
     * Compare two params
     * @param {Param} param1
     * @param {Param} param2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */


    function compareParams(param1, param2) {
      var c; // compare having a rest parameter or not

      c = param1.restParam - param2.restParam;

      if (c !== 0) {
        return c;
      } // compare having conversions or not


      c = hasConversions(param1) - hasConversions(param2);

      if (c !== 0) {
        return c;
      } // compare the index of the types


      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);

      if (c !== 0) {
        return c;
      } // compare the index of any conversion


      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
    }
    /**
     * Compare two signatures
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {number} returns a negative number when param1 must get a lower
     *                  index than param2, a positive number when the opposite,
     *                  or zero when both are equal
     */


    function compareSignatures(signature1, signature2) {
      var len = Math.min(signature1.params.length, signature2.params.length);
      var i;
      var c; // compare whether the params have conversions at all or not

      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);

      if (c !== 0) {
        return c;
      } // next compare whether the params have conversions one by one


      for (i = 0; i < len; i++) {
        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);

        if (c !== 0) {
          return c;
        }
      } // compare the types of the params one by one


      for (i = 0; i < len; i++) {
        c = compareParams(signature1.params[i], signature2.params[i]);

        if (c !== 0) {
          return c;
        }
      } // compare the number of params


      return signature1.params.length - signature2.params.length;
    }
    /**
     * Get params containing all types that can be converted to the defined types.
     *
     * @param {ConversionDef[]} conversions
     * @param {string[]} typeNames
     * @return {ConversionDef[]} Returns the conversions that are available
     *                        for every type (if any)
     */


    function filterConversions(conversions, typeNames) {
      var matches = {};
      conversions.forEach(function (conversion) {
        if (typeNames.indexOf(conversion.from) === -1 && typeNames.indexOf(conversion.to) !== -1 && !matches[conversion.from]) {
          matches[conversion.from] = conversion;
        }
      });
      return Object.keys(matches).map(function (from) {
        return matches[from];
      });
    }
    /**
     * Preprocess arguments before calling the original function:
     * - if needed convert the parameters
     * - in case of rest parameters, move the rest parameters into an Array
     * @param {Param[]} params
     * @param {function} fn
     * @return {function} Returns a wrapped function
     */


    function compileArgsPreprocessing(params, fn) {
      var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?

      if (params.some(hasConversions)) {
        var restParam = hasRestParam(params);
        var compiledConversions = params.map(compileArgConversion);

        fnConvert = function convertArgs() {
          var args = [];
          var last = restParam ? arguments.length - 1 : arguments.length;

          for (var i = 0; i < last; i++) {
            args[i] = compiledConversions[i](arguments[i]);
          }

          if (restParam) {
            args[last] = arguments[last].map(compiledConversions[last]);
          }

          return fn.apply(null, args);
        };
      }

      var fnPreprocess = fnConvert;

      if (hasRestParam(params)) {
        var offset = params.length - 1;

        fnPreprocess = function preprocessRestParams() {
          return fnConvert.apply(null, slice(arguments, 0, offset).concat([slice(arguments, offset)]));
        };
      }

      return fnPreprocess;
    }
    /**
     * Compile conversion for a parameter to the right type
     * @param {Param} param
     * @return {function} Returns the wrapped function that will convert arguments
     *
     */


    function compileArgConversion(param) {
      var test0, test1, conversion0, conversion1;
      var tests = [];
      var conversions = [];
      param.types.forEach(function (type) {
        if (type.conversion) {
          tests.push(findTypeByName(type.conversion.from).test);
          conversions.push(type.conversion.convert);
        }
      }); // create optimized conversion functions depending on the number of conversions

      switch (conversions.length) {
        case 0:
          return function convertArg(arg) {
            return arg;
          };

        case 1:
          test0 = tests[0];
          conversion0 = conversions[0];
          return function convertArg(arg) {
            if (test0(arg)) {
              return conversion0(arg);
            }

            return arg;
          };

        case 2:
          test0 = tests[0];
          test1 = tests[1];
          conversion0 = conversions[0];
          conversion1 = conversions[1];
          return function convertArg(arg) {
            if (test0(arg)) {
              return conversion0(arg);
            }

            if (test1(arg)) {
              return conversion1(arg);
            }

            return arg;
          };

        default:
          return function convertArg(arg) {
            for (var i = 0; i < conversions.length; i++) {
              if (tests[i](arg)) {
                return conversions[i](arg);
              }
            }

            return arg;
          };
      }
    }
    /**
     * Convert an array with signatures into a map with signatures,
     * where signatures with union types are split into separate signatures
     *
     * Throws an error when there are conflicting types
     *
     * @param {Signature[]} signatures
     * @return {Object.<string, function>}  Returns a map with signatures
     *                                      as key and the original function
     *                                      of this signature as value.
     */


    function createSignaturesMap(signatures) {
      var signaturesMap = {};
      signatures.forEach(function (signature) {
        if (!signature.params.some(hasConversions)) {
          splitParams(signature.params, true).forEach(function (params) {
            signaturesMap[stringifyParams(params)] = signature.fn;
          });
        }
      });
      return signaturesMap;
    }
    /**
     * Split params with union types in to separate params.
     *
     * For example:
     *
     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
     *     // returns:
     *     // [
     *     //   ['Array', 'string'],
     *     //   ['Array', 'RegExp'],
     *     //   ['Object', 'string'],
     *     //   ['Object', 'RegExp']
     *     // ]
     *
     * @param {Param[]} params
     * @param {boolean} ignoreConversionTypes
     * @return {Param[]}
     */


    function splitParams(params, ignoreConversionTypes) {
      function _splitParams(params, index, types) {
        if (index < params.length) {
          var param = params[index];
          var filteredTypes = ignoreConversionTypes ? param.types.filter(isExactType) : param.types;
          var typeGroups;

          if (param.restParam) {
            // split the types of a rest parameter in two:
            // one with only exact types, and one with exact types and conversions
            var exactTypes = filteredTypes.filter(isExactType);
            typeGroups = exactTypes.length < filteredTypes.length ? [exactTypes, filteredTypes] : [filteredTypes];
          } else {
            // split all the types of a regular parameter into one type per group
            typeGroups = filteredTypes.map(function (type) {
              return [type];
            });
          } // recurse over the groups with types


          return flatMap(typeGroups, function (typeGroup) {
            return _splitParams(params, index + 1, types.concat([typeGroup]));
          });
        } else {
          // we've reached the end of the parameters. Now build a new Param
          var splittedParams = types.map(function (type, typeIndex) {
            return {
              types: type,
              restParam: typeIndex === params.length - 1 && hasRestParam(params)
            };
          });
          return [splittedParams];
        }
      }

      return _splitParams(params, 0, []);
    }
    /**
     * Test whether two signatures have a conflicting signature
     * @param {Signature} signature1
     * @param {Signature} signature2
     * @return {boolean} Returns true when the signatures conflict, false otherwise.
     */


    function hasConflictingParams(signature1, signature2) {
      var ii = Math.max(signature1.params.length, signature2.params.length);

      for (var i = 0; i < ii; i++) {
        var typesNames1 = getExpectedTypeNames(signature1, i, true);
        var typesNames2 = getExpectedTypeNames(signature2, i, true);

        if (!hasOverlap(typesNames1, typesNames2)) {
          return false;
        }
      }

      var len1 = signature1.params.length;
      var len2 = signature2.params.length;
      var restParam1 = hasRestParam(signature1.params);
      var restParam2 = hasRestParam(signature2.params);
      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;
    }
    /**
     * Create a typed function
     * @param {String} name               The name for the typed function
     * @param {Object.<string, function>} signaturesMap
     *                                    An object with one or
     *                                    multiple signatures as key, and the
     *                                    function corresponding to the
     *                                    signature as value.
     * @return {function}  Returns the created typed function.
     */


    function createTypedFunction(name, signaturesMap) {
      if (Object.keys(signaturesMap).length === 0) {
        throw new SyntaxError('No signatures provided');
      } // parse the signatures, and check for conflicts


      var parsedSignatures = [];
      Object.keys(signaturesMap).map(function (signature) {
        return parseSignature(signature, signaturesMap[signature], typed.conversions);
      }).filter(notNull).forEach(function (parsedSignature) {
        // check whether this parameter conflicts with already parsed signatures
        var conflictingSignature = findInArray(parsedSignatures, function (s) {
          return hasConflictingParams(s, parsedSignature);
        });

        if (conflictingSignature) {
          throw new TypeError('Conflicting signatures "' + stringifyParams(conflictingSignature.params) + '" and "' + stringifyParams(parsedSignature.params) + '".');
        }

        parsedSignatures.push(parsedSignature);
      }); // split and filter the types of the signatures, and then order them

      var signatures = flatMap(parsedSignatures, function (parsedSignature) {
        var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];
        return params.map(function (params) {
          return {
            params: params,
            fn: parsedSignature.fn
          };
        });
      }).filter(notNull);
      signatures.sort(compareSignatures); // we create a highly optimized checks for the first couple of signatures with max 2 arguments

      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests

      var tests = signatures.map(function (signature) {
        return compileTests(signature.params);
      });
      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;
      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions

      var fns = signatures.map(function (signature) {
        return compileArgsPreprocessing(signature.params, signature.fn);
      });
      var fn0 = ok0 ? fns[0] : undef;
      var fn1 = ok1 ? fns[1] : undef;
      var fn2 = ok2 ? fns[2] : undef;
      var fn3 = ok3 ? fns[3] : undef;
      var fn4 = ok4 ? fns[4] : undef;
      var fn5 = ok5 ? fns[5] : undef;
      var len0 = ok0 ? signatures[0].params.length : -1;
      var len1 = ok1 ? signatures[1].params.length : -1;
      var len2 = ok2 ? signatures[2].params.length : -1;
      var len3 = ok3 ? signatures[3].params.length : -1;
      var len4 = ok4 ? signatures[4].params.length : -1;
      var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow

      var iStart = allOk ? 6 : 0;
      var iEnd = signatures.length;

      var generic = function generic() {
        'use strict';

        for (var i = iStart; i < iEnd; i++) {
          if (tests[i](arguments)) {
            return fns[i].apply(null, arguments);
          }
        }

        throw createError(name, arguments, signatures);
      }; // create the typed function
      // fast, specialized version. Falls back to the slower, generic one if needed


      var fn = function fn(arg0, arg1) {
        'use strict';

        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {
          return fn0.apply(null, arguments);
        }

        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {
          return fn1.apply(null, arguments);
        }

        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {
          return fn2.apply(null, arguments);
        }

        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {
          return fn3.apply(null, arguments);
        }

        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {
          return fn4.apply(null, arguments);
        }

        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {
          return fn5.apply(null, arguments);
        }

        return generic.apply(null, arguments);
      }; // attach name the typed function


      try {
        Object.defineProperty(fn, 'name', {
          value: name
        });
      } catch (err) {} // old browsers do not support Object.defineProperty and some don't support setting the name property
      // the function name is not essential for the functioning, it's mostly useful for debugging,
      // so it's fine to have unnamed functions.
      // attach signatures to the function


      fn.signatures = createSignaturesMap(signatures);
      return fn;
    }
    /**
     * Test whether a type should be NOT be ignored
     * @param {string} typeName
     * @return {boolean}
     */


    function notIgnore(typeName) {
      return typed.ignore.indexOf(typeName) === -1;
    }
    /**
     * trim a string
     * @param {string} str
     * @return {string}
     */


    function trim(str) {
      return str.trim();
    }
    /**
     * Test whether a string is not empty
     * @param {string} str
     * @return {boolean}
     */


    function notEmpty(str) {
      return !!str;
    }
    /**
     * test whether a value is not strict equal to null
     * @param {*} value
     * @return {boolean}
     */


    function notNull(value) {
      return value !== null;
    }
    /**
     * Test whether a parameter has no types defined
     * @param {Param} param
     * @return {boolean}
     */


    function isInvalidParam(param) {
      return param.types.length === 0;
    }
    /**
     * Return all but the last items of an array
     * @param {Array} arr
     * @return {Array}
     */


    function initial(arr) {
      return arr.slice(0, arr.length - 1);
    }
    /**
     * return the last item of an array
     * @param {Array} arr
     * @return {*}
     */


    function last(arr) {
      return arr[arr.length - 1];
    }
    /**
     * Slice an array or function Arguments
     * @param {Array | Arguments | IArguments} arr
     * @param {number} start
     * @param {number} [end]
     * @return {Array}
     */


    function slice(arr, start, end) {
      return Array.prototype.slice.call(arr, start, end);
    }
    /**
     * Test whether an array contains some item
     * @param {Array} array
     * @param {*} item
     * @return {boolean} Returns true if array contains item, false if not.
     */


    function contains(array, item) {
      return array.indexOf(item) !== -1;
    }
    /**
     * Test whether two arrays have overlapping items
     * @param {Array} array1
     * @param {Array} array2
     * @return {boolean} Returns true when at least one item exists in both arrays
     */


    function hasOverlap(array1, array2) {
      for (var i = 0; i < array1.length; i++) {
        if (contains(array2, array1[i])) {
          return true;
        }
      }

      return false;
    }
    /**
     * Return the first item from an array for which test(arr[i]) returns true
     * @param {Array} arr
     * @param {function} test
     * @return {* | undefined} Returns the first matching item
     *                         or undefined when there is no match
     */


    function findInArray(arr, test) {
      for (var i = 0; i < arr.length; i++) {
        if (test(arr[i])) {
          return arr[i];
        }
      }

      return undefined;
    }
    /**
     * Filter unique items of an array with strings
     * @param {string[]} arr
     * @return {string[]}
     */


    function uniq(arr) {
      var entries = {};

      for (var i = 0; i < arr.length; i++) {
        entries[arr[i]] = true;
      }

      return Object.keys(entries);
    }
    /**
     * Flat map the result invoking a callback for every item in an array.
     * https://gist.github.com/samgiles/762ee337dff48623e729
     * @param {Array} arr
     * @param {function} callback
     * @return {Array}
     */


    function flatMap(arr, callback) {
      return Array.prototype.concat.apply([], arr.map(callback));
    }
    /**
     * Retrieve the function name from a set of typed functions,
     * and check whether the name of all functions match (if given)
     * @param {function[]} fns
     */


    function getName(fns) {
      var name = '';

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i]; // check whether the names are the same when defined

        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
          if (name === '') {
            name = fn.name;
          } else if (name !== fn.name) {
            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
            err.data = {
              actual: fn.name,
              expected: name
            };
            throw err;
          }
        }
      }

      return name;
    } // extract and merge all signatures of a list with typed functions


    function extractSignatures(fns) {
      var err;
      var signaturesMap = {};

      function validateUnique(_signature, _fn) {
        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
          err = new Error('Signature "' + _signature + '" is defined twice');
          err.data = {
            signature: _signature
          };
          throw err; // else: both signatures point to the same function, that's fine
        }
      }

      for (var i = 0; i < fns.length; i++) {
        var fn = fns[i]; // test whether this is a typed-function

        if (typeof fn.signatures === 'object') {
          // merge the signatures
          for (var signature in fn.signatures) {
            if (fn.signatures.hasOwnProperty(signature)) {
              validateUnique(signature, fn.signatures[signature]);
              signaturesMap[signature] = fn.signatures[signature];
            }
          }
        } else if (typeof fn.signature === 'string') {
          validateUnique(fn.signature, fn);
          signaturesMap[fn.signature] = fn;
        } else {
          err = new TypeError('Function is no typed-function (index: ' + i + ')');
          err.data = {
            index: i
          };
          throw err;
        }
      }

      return signaturesMap;
    }

    typed = createTypedFunction('typed', {
      'string, Object': createTypedFunction,
      'Object': function (signaturesMap) {
        // find existing name
        var fns = [];

        for (var signature in signaturesMap) {
          if (signaturesMap.hasOwnProperty(signature)) {
            fns.push(signaturesMap[signature]);
          }
        }

        var name = getName(fns);
        return createTypedFunction(name, signaturesMap);
      },
      '...Function': function (fns) {
        return createTypedFunction(getName(fns), extractSignatures(fns));
      },
      'string, ...Function': function (name, fns) {
        return createTypedFunction(name, extractSignatures(fns));
      }
    });
    typed.create = create;
    typed.types = _types;
    typed.conversions = _conversions;
    typed.ignore = _ignore;
    typed.convert = convert;
    typed.find = find;
    /**
     * add a type
     * @param {{name: string, test: function}} type
     * @param {boolean} [beforeObjectTest=true]
     *                          If true, the new test will be inserted before
     *                          the test with name 'Object' (if any), since
     *                          tests for Object match Array and classes too.
     */

    typed.addType = function (type, beforeObjectTest) {
      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
        throw new TypeError('Object with properties {name: string, test: function} expected');
      }

      if (beforeObjectTest !== false) {
        for (var i = 0; i < typed.types.length; i++) {
          if (typed.types[i].name === 'Object') {
            typed.types.splice(i, 0, type);
            return;
          }
        }
      }

      typed.types.push(type);
    }; // add a conversion


    typed.addConversion = function (conversion) {
      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {
        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
      }

      typed.conversions.push(conversion);
    };

    return typed;
  }

  return create();
});
},{}],"../node_modules/mathjs/src/utils/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInteger = isInteger;
exports.format = format;
exports.splitNumber = splitNumber;
exports.toEngineering = toEngineering;
exports.toFixed = toFixed;
exports.toExponential = toExponential;
exports.toPrecision = toPrecision;
exports.roundDigits = roundDigits;
exports.digits = digits;
exports.nearlyEqual = nearlyEqual;
exports.tanh = exports.sinh = exports.cosh = exports.atanh = exports.asinh = exports.acosh = exports.DBL_EPSILON = exports.expm1 = exports.cbrt = exports.log1p = exports.log10 = exports.log2 = exports.sign = void 0;

var _object = require("./object");

var _is = require("./is");

/**
 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
 */

/**
 * Check if a number is integer
 * @param {number | boolean} value
 * @return {boolean} isInteger
 */
function isInteger(value) {
  if (typeof value === 'boolean') {
    return true;
  }

  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
}
/**
 * Calculate the sign of a number
 * @param {number} x
 * @returns {number}
 */


const sign =
/* #__PURE__ */
Math.sign || function (x) {
  if (x > 0) {
    return 1;
  } else if (x < 0) {
    return -1;
  } else {
    return 0;
  }
};
/**
 * Calculate the base-2 logarithm of a number
 * @param {number} x
 * @returns {number}
 */


exports.sign = sign;

const log2 =
/* #__PURE__ */
Math.log2 || function log2(x) {
  return Math.log(x) / Math.LN2;
};
/**
 * Calculate the base-10 logarithm of a number
 * @param {number} x
 * @returns {number}
 */


exports.log2 = log2;

const log10 =
/* #__PURE__ */
Math.log10 || function log10(x) {
  return Math.log(x) / Math.LN10;
};
/**
 * Calculate the natural logarithm of a number + 1
 * @param {number} x
 * @returns {number}
 */


exports.log10 = log10;

const log1p =
/* #__PURE__ */
Math.log1p || function (x) {
  return Math.log(x + 1);
};
/**
 * Calculate cubic root for a number
 *
 * Code from es6-shim.js:
 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
 *
 * @param {number} x
 * @returns {number} Returns the cubic root of x
 */


exports.log1p = log1p;

const cbrt =
/* #__PURE__ */
Math.cbrt || function cbrt(x) {
  if (x === 0) {
    return x;
  }

  const negate = x < 0;
  let result;

  if (negate) {
    x = -x;
  }

  if (isFinite(x)) {
    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods

    result = (x / (result * result) + 2 * result) / 3;
  } else {
    result = x;
  }

  return negate ? -result : result;
};
/**
 * Calculates exponentiation minus 1
 * @param {number} x
 * @return {number} res
 */


exports.cbrt = cbrt;

const expm1 =
/* #__PURE__ */
Math.expm1 || function expm1(x) {
  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
};
/**
 * Convert a number to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'engineering'    Always use engineering notation.
 *                                          For example '123.4e+0' and '14.0e+6'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lowerExp` and `upperExp` bounds, and
 *                                          uses exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default,
 *                                          not rounding any digits.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12.071, {notation: 'fixed'})                // '12'
 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
 *
 * @param {number} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */


exports.expm1 = expm1;

function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (value === Infinity) {
    return 'Infinity';
  } else if (value === -Infinity) {
    return '-Infinity';
  } else if (isNaN(value)) {
    return 'NaN';
  } // default values for options


  let notation = 'auto';
  let precision;

  if (options) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if ((0, _is.isNumber)(options)) {
      precision = options;
    } else if ((0, _is.isNumber)(options.precision)) {
      precision = options.precision;
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'auto':
      // TODO: clean up some day. Deprecated since: 2018-01-24
      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
        const fixedOptions = (0, _object.mapObject)(options, function (x) {
          return x;
        });
        fixedOptions.exponential = undefined;

        if (options.exponential.lower !== undefined) {
          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
        }

        if (options.exponential.upper !== undefined) {
          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
        }

        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
        return toPrecision(value, precision, fixedOptions);
      } // remove trailing zeros after the decimal point


      return toPrecision(value, precision, options && options).replace(/((\.\d*?)(0+))($|e)/, function () {
        const digits = arguments[2];
        const e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
}
/**
 * Split a number into sign, coefficients, and exponent
 * @param {number | string} value
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 */


function splitNumber(value) {
  // parse the input value
  const match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

  if (!match) {
    throw new SyntaxError('Invalid number ' + value);
  }

  const sign = match[1];
  const digits = match[2];
  let exponent = parseFloat(match[4] || '0');
  const dot = digits.indexOf('.');
  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
  const coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
  .replace(/^0*/, function (zeros) {
    // remove leading zeros, add their count to the exponent
    exponent -= zeros.length;
    return '';
  }).replace(/0*$/, '') // remove trailing zeros
  .split('').map(function (d) {
    return parseInt(d);
  });

  if (coefficients.length === 0) {
    coefficients.push(0);
    exponent++;
  }

  return {
    sign: sign,
    coefficients: coefficients,
    exponent: exponent
  };
}
/**
 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */


function toEngineering(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  const rounded = roundDigits(splitNumber(value), precision);
  const e = rounded.exponent;
  let c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

  const newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

  if ((0, _is.isNumber)(precision)) {
    // add zeroes to give correct sig figs
    while (precision > c.length || e - newExp + 1 > c.length) {
      c.push(0);
    }
  } else {
    // concatenate coefficients with necessary zeros
    const significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)

    while (c.length - 1 < significandsDiff) {
      c.push(0);
    }
  } // find difference in exponents


  let expDiff = Math.abs(e - newExp);
  let decimalIdx = 1; // push decimal index over by expDiff times

  while (expDiff > 0) {
    decimalIdx++;
    expDiff--;
  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
  // otherwise concat with the rest of the coefficients


  const decimals = c.slice(decimalIdx).join('');
  const decimalVal = (0, _is.isNumber)(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
  const str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
  return rounded.sign + str;
}
/**
 * Format a number with fixed notation.
 * @param {number | string} value
 * @param {number} [precision=undefined]  Optional number of decimals after the
 *                                        decimal point. null by default.
 */


function toFixed(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  }

  const splitValue = splitNumber(value);
  const rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
  let c = rounded.coefficients;
  let p = rounded.exponent + 1; // exponent may have changed
  // append zeros if needed

  const pp = p + (precision || 0);

  if (c.length < pp) {
    c = c.concat(zeros(pp - c.length));
  } // prepend zeros if needed


  if (p < 0) {
    c = zeros(-p + 1).concat(c);
    p = 1;
  } // insert a dot if needed


  if (p < c.length) {
    c.splice(p, 0, p === 0 ? '0.' : '.');
  }

  return rounded.sign + c.join('');
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {number | string} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 */


function toExponential(value, precision) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // round if needed, else create a clone


  const split = splitNumber(value);
  const rounded = precision ? roundDigits(split, precision) : split;
  let c = rounded.coefficients;
  const e = rounded.exponent; // append zeros if needed

  if (c.length < precision) {
    c = c.concat(zeros(precision - c.length));
  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


  const first = c.shift();
  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
}
/**
 * Format a number with a certain precision
 * @param {number | string} value
 * @param {number} [precision=undefined] Optional number of digits.
 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
 *                                       By default:
 *                                         lowerExp = -3 (incl)
 *                                         upper = +5 (excl)
 * @return {string}
 */


function toPrecision(value, precision, options) {
  if (isNaN(value) || !isFinite(value)) {
    return String(value);
  } // determine lower and upper bound for exponential notation.


  const lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
  const upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
  const split = splitNumber(value);
  const rounded = precision ? roundDigits(split, precision) : split;

  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {
    // exponential notation
    return toExponential(value, precision);
  } else {
    let c = rounded.coefficients;
    const e = rounded.exponent; // append trailing zeros

    if (c.length < precision) {
      c = c.concat(zeros(precision - c.length));
    } // append trailing zeros
    // TODO: simplify the next statement


    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

    c = zeros(-e).concat(c);
    const dot = e > 0 ? e : 0;

    if (dot < c.length - 1) {
      c.splice(dot + 1, 0, '.');
    }

    return rounded.sign + c.join('');
  }
}
/**
 * Round the number of digits of a number *
 * @param {SplitValue} split       A value split with .splitNumber(value)
 * @param {number} precision  A positive integer
 * @return {SplitValue}
 *              Returns an object containing sign, coefficients, and exponent
 *              with rounded digits
 */


function roundDigits(split, precision) {
  // create a clone
  const rounded = {
    sign: split.sign,
    coefficients: split.coefficients,
    exponent: split.exponent
  };
  const c = rounded.coefficients; // prepend zeros if needed

  while (precision <= 0) {
    c.unshift(0);
    rounded.exponent++;
    precision++;
  }

  if (c.length > precision) {
    const removed = c.splice(precision, c.length - precision);

    if (removed[0] >= 5) {
      let i = precision - 1;
      c[i]++;

      while (c[i] === 10) {
        c.pop();

        if (i === 0) {
          c.unshift(0);
          rounded.exponent++;
          i++;
        }

        i--;
        c[i]++;
      }
    }
  }

  return rounded;
}
/**
 * Create an array filled with zeros.
 * @param {number} length
 * @return {Array}
 */


function zeros(length) {
  const arr = [];

  for (let i = 0; i < length; i++) {
    arr.push(0);
  }

  return arr;
}
/**
 * Count the number of significant digits of a number.
 *
 * For example:
 *   2.34 returns 3
 *   0.0034 returns 2
 *   120.5e+30 returns 4
 *
 * @param {number} value
 * @return {number} digits   Number of significant digits
 */


function digits(value) {
  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
  .length;
}
/**
 * Minimum number added to one that makes the result different than one
 */


const DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
/**
 * Compares two floating point numbers.
 * @param {number} x          First value to compare
 * @param {number} y          Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
*/

exports.DBL_EPSILON = DBL_EPSILON;

function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x === y;
  }

  if (x === y) {
    return true;
  } // NaN


  if (isNaN(x) || isNaN(y)) {
    return false;
  } // at this point x and y should be finite


  if (isFinite(x) && isFinite(y)) {
    // check numbers are very close, needed when comparing numbers near zero
    const diff = Math.abs(x - y);

    if (diff < DBL_EPSILON) {
      return true;
    } else {
      // use relative error
      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}
/**
 * Calculate the hyperbolic arccos of a number
 * @param {number} x
 * @return {number}
 */


const acosh = Math.acosh || function (x) {
  return Math.log(Math.sqrt(x * x - 1) + x);
};

exports.acosh = acosh;

const asinh = Math.asinh || function (x) {
  return Math.log(Math.sqrt(x * x + 1) + x);
};
/**
 * Calculate the hyperbolic arctangent of a number
 * @param {number} x
 * @return {number}
 */


exports.asinh = asinh;

const atanh = Math.atanh || function (x) {
  return Math.log((1 + x) / (1 - x)) / 2;
};
/**
 * Calculate the hyperbolic cosine of a number
 * @param {number} x
 * @returns {number}
 */


exports.atanh = atanh;

const cosh = Math.cosh || function (x) {
  return (Math.exp(x) + Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic sine of a number
 * @param {number} x
 * @returns {number}
 */


exports.cosh = cosh;

const sinh = Math.sinh || function (x) {
  return (Math.exp(x) - Math.exp(-x)) / 2;
};
/**
 * Calculate the hyperbolic tangent of a number
 * @param {number} x
 * @returns {number}
 */


exports.sinh = sinh;

const tanh = Math.tanh || function (x) {
  const e = Math.exp(2 * x);
  return (e - 1) / (e + 1);
};

exports.tanh = tanh;
},{"./object":"../node_modules/mathjs/src/utils/object.js","./is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/utils/bignumber/formatter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.toEngineering = toEngineering;
exports.toExponential = toExponential;
exports.toFixed = toFixed;

var _object = require("../object");

/**
 * Convert a BigNumber to a formatted string representation.
 *
 * Syntax:
 *
 *    format(value)
 *    format(value, options)
 *    format(value, precision)
 *    format(value, fn)
 *
 * Where:
 *
 *    {number} value   The value to be formatted
 *    {Object} options An object with formatting options. Available options:
 *                     {string} notation
 *                         Number notation. Choose from:
 *                         'fixed'          Always use regular number notation.
 *                                          For example '123.40' and '14000000'
 *                         'exponential'    Always use exponential notation.
 *                                          For example '1.234e+2' and '1.4e+7'
 *                         'auto' (default) Regular number notation for numbers
 *                                          having an absolute value between
 *                                          `lower` and `upper` bounds, and uses
 *                                          exponential notation elsewhere.
 *                                          Lower bound is included, upper bound
 *                                          is excluded.
 *                                          For example '123.4' and '1.4e7'.
 *                     {number} precision   A number between 0 and 16 to round
 *                                          the digits of the number.
 *                                          In case of notations 'exponential',
 *                                          'engineering', and 'auto',
 *                                          `precision` defines the total
 *                                          number of significant digits returned.
 *                                          In case of notation 'fixed',
 *                                          `precision` defines the number of
 *                                          significant digits after the decimal
 *                                          point.
 *                                          `precision` is undefined by default.
 *                     {number} lowerExp    Exponent determining the lower boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `-3`.
 *                     {number} upperExp    Exponent determining the upper boundary
 *                                          for formatting a value with an exponent
 *                                          when `notation='auto`.
 *                                          Default value is `5`.
 *    {Function} fn    A custom formatting function. Can be used to override the
 *                     built-in notations. Function `fn` is called with `value` as
 *                     parameter and must return a string. Is useful for example to
 *                     format all values inside a matrix in a particular way.
 *
 * Examples:
 *
 *    format(6.4)                                        // '6.4'
 *    format(1240000)                                    // '1.24e6'
 *    format(1/3)                                        // '0.3333333333333333'
 *    format(1/3, 3)                                     // '0.333'
 *    format(21385, 2)                                   // '21000'
 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
 *
 * @param {BigNumber} value
 * @param {Object | Function | number} [options]
 * @return {string} str The formatted value
 */
function format(value, options) {
  if (typeof options === 'function') {
    // handle format(value, fn)
    return options(value);
  } // handle special cases


  if (!value.isFinite()) {
    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
  } // default values for options


  let notation = 'auto';
  let precision;

  if (options !== undefined) {
    // determine notation from options
    if (options.notation) {
      notation = options.notation;
    } // determine precision from options


    if (typeof options === 'number') {
      precision = options;
    } else if (options.precision) {
      precision = options.precision;
    }
  } // handle the various notations


  switch (notation) {
    case 'fixed':
      return toFixed(value, precision);

    case 'exponential':
      return toExponential(value, precision);

    case 'engineering':
      return toEngineering(value, precision);

    case 'auto':
      // TODO: clean up some day. Deprecated since: 2018-01-24
      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
        const fixedOptions = (0, _object.mapObject)(options, function (x) {
          return x;
        });
        fixedOptions.exponential = undefined;

        if (options.exponential.lower !== undefined) {
          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
        }

        if (options.exponential.upper !== undefined) {
          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
        }

        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
        return format(value, fixedOptions);
      } // determine lower and upper bound for exponential notation.
      // TODO: implement support for upper and lower to be BigNumbers themselves


      const lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
      const upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

      if (value.isZero()) return '0'; // determine whether or not to output exponential notation

      let str;
      const rounded = value.toSignificantDigits(precision);
      const exp = rounded.e;

      if (exp >= lowerExp && exp < upperExp) {
        // normal number notation
        str = rounded.toFixed();
      } else {
        // exponential notation
        str = toExponential(value, precision);
      } // remove trailing zeros after the decimal point


      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
        const digits = arguments[2];
        const e = arguments[4];
        return digits !== '.' ? digits + e : e;
      });

    default:
      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
  }
}
/**
 * Format a BigNumber in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
 * @param {BigNumber | string} value
 * @param {number} [precision]        Optional number of significant figures to return.
 */


function toEngineering(value, precision) {
  // find nearest lower multiple of 3 for exponent
  const e = value.e;
  const newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3; // find difference in exponents, and calculate the value without exponent

  const valueWithoutExp = value.mul(Math.pow(10, -newExp));
  let valueStr = valueWithoutExp.toPrecision(precision);

  if (valueStr.indexOf('e') !== -1) {
    valueStr = valueWithoutExp.toString();
  }

  return valueStr + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
}
/**
 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
 * @param {BigNumber} value
 * @param {number} [precision]  Number of digits in formatted output.
 *                              If not provided, the maximum available digits
 *                              is used.
 * @returns {string} str
 */


function toExponential(value, precision) {
  if (precision !== undefined) {
    return value.toExponential(precision - 1); // Note the offset of one
  } else {
    return value.toExponential();
  }
}
/**
 * Format a number with fixed notation.
 * @param {BigNumber} value
 * @param {number} [precision=undefined] Optional number of decimals after the
 *                                       decimal point. Undefined by default.
 */


function toFixed(value, precision) {
  return value.toFixed(precision);
}
},{"../object":"../node_modules/mathjs/src/utils/object.js"}],"../node_modules/mathjs/src/utils/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.endsWith = endsWith;
exports.format = format;
exports.stringify = stringify;
exports.escape = escape;
exports.compareText = compareText;

var _is = require("./is");

var _number = require("./number");

var _formatter = require("./bignumber/formatter");

/**
 * Check if a text ends with a certain string.
 * @param {string} text
 * @param {string} search
 */
function endsWith(text, search) {
  const start = text.length - search.length;
  const end = text.length;
  return text.substring(start, end) === search;
}
/**
 * Format a value of any type into a string.
 *
 * Usage:
 *     math.format(value)
 *     math.format(value, precision)
 *
 * When value is a function:
 *
 * - When the function has a property `syntax`, it returns this
 *   syntax description.
 * - In other cases, a string `'function'` is returned.
 *
 * When `value` is an Object:
 *
 * - When the object contains a property `format` being a function, this
 *   function is invoked as `value.format(options)` and the result is returned.
 * - When the object has its own `toString` method, this method is invoked
 *   and the result is returned.
 * - In other cases the function will loop over all object properties and
 *   return JSON object notation like '{"a": 2, "b": 3}'.
 *
 * Example usage:
 *     math.format(2/7)                // '0.2857142857142857'
 *     math.format(math.pi, 3)         // '3.14'
 *     math.format(new Complex(2, 3))  // '2 + 3i'
 *     math.format('hello')            // '"hello"'
 *
 * @param {*} value             Value to be stringified
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @return {string} str
 */


function format(value, options) {
  if (typeof value === 'number') {
    return (0, _number.format)(value, options);
  }

  if ((0, _is.isBigNumber)(value)) {
    return (0, _formatter.format)(value, options);
  } // note: we use unsafe duck-typing here to check for Fractions, this is
  // ok here since we're only invoking toString or concatenating its values


  if (looksLikeFraction(value)) {
    if (!options || options.fraction !== 'decimal') {
      // output as ratio, like '1/3'
      return value.s * value.n + '/' + value.d;
    } else {
      // output as decimal, like '0.(3)'
      return value.toString();
    }
  }

  if (Array.isArray(value)) {
    return formatArray(value, options);
  }

  if ((0, _is.isString)(value)) {
    return '"' + value + '"';
  }

  if (typeof value === 'function') {
    return value.syntax ? String(value.syntax) : 'function';
  }

  if (value && typeof value === 'object') {
    if (typeof value.format === 'function') {
      return value.format(options);
    } else if (value && value.toString() !== {}.toString()) {
      // this object has a non-native toString method, use that one
      return value.toString();
    } else {
      const entries = [];

      for (const key in value) {
        if (value.hasOwnProperty(key)) {
          entries.push('"' + key + '": ' + format(value[key], options));
        }
      }

      return '{' + entries.join(', ') + '}';
    }
  }

  return String(value);
}
/**
 * Stringify a value into a string enclosed in double quotes.
 * Unescaped double quotes and backslashes inside the value are escaped.
 * @param {*} value
 * @return {string}
 */


function stringify(value) {
  const text = String(value);
  let escaped = '';
  let i = 0;

  while (i < text.length) {
    let c = text.charAt(i);

    if (c === '\\') {
      escaped += c;
      i++;
      c = text.charAt(i);

      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
        escaped += '\\'; // no valid escape character -> escape it
      }

      escaped += c;
    } else if (c === '"') {
      escaped += '\\"';
    } else {
      escaped += c;
    }

    i++;
  }

  return '"' + escaped + '"';
}
/**
 * Escape special HTML characters
 * @param {*} value
 * @return {string}
 */


function escape(value) {
  let text = String(value);
  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  return text;
}
/**
 * Recursively format an n-dimensional matrix
 * Example output: "[[1, 2], [3, 4]]"
 * @param {Array} array
 * @param {Object | number | Function} [options]  Formatting options. See
 *                                                lib/utils/number:format for a
 *                                                description of the available
 *                                                options.
 * @returns {string} str
 */


function formatArray(array, options) {
  if (Array.isArray(array)) {
    let str = '[';
    const len = array.length;

    for (let i = 0; i < len; i++) {
      if (i !== 0) {
        str += ', ';
      }

      str += formatArray(array[i], options);
    }

    str += ']';
    return str;
  } else {
    return format(array, options);
  }
}
/**
 * Check whether a value looks like a Fraction (unsafe duck-type check)
 * @param {*} value
 * @return {boolean}
 */


function looksLikeFraction(value) {
  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
}
/**
 * Compare two strings
 * @param {string} x
 * @param {string} y
 * @returns {number}
 */


function compareText(x, y) {
  // we don't want to convert numbers to string, only accept string input
  if (!(0, _is.isString)(x)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(x) + ', index: 0)');
  }

  if (!(0, _is.isString)(y)) {
    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + (0, _is.typeOf)(y) + ', index: 1)');
  }

  return x === y ? 0 : x > y ? 1 : -1;
}
},{"./is":"../node_modules/mathjs/src/utils/is.js","./number":"../node_modules/mathjs/src/utils/number.js","./bignumber/formatter":"../node_modules/mathjs/src/utils/bignumber/formatter.js"}],"../node_modules/mathjs/src/error/DimensionError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DimensionError = DimensionError;

/**
 * Create a range error with the message:
 *     'Dimension mismatch (<actual size> != <expected size>)'
 * @param {number | number[]} actual        The actual size
 * @param {number | number[]} expected      The expected size
 * @param {string} [relation='!=']          Optional relation between actual
 *                                          and expected size: '!=', '<', etc.
 * @extends RangeError
 */
function DimensionError(actual, expected, relation) {
  if (!(this instanceof DimensionError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.actual = actual;
  this.expected = expected;
  this.relation = relation;
  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
  this.stack = new Error().stack;
}

DimensionError.prototype = new RangeError();
DimensionError.prototype.constructor = RangeError;
DimensionError.prototype.name = 'DimensionError';
DimensionError.prototype.isDimensionError = true;
},{}],"../node_modules/mathjs/src/error/IndexError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexError = IndexError;

/**
 * Create a range error with the message:
 *     'Index out of range (index < min)'
 *     'Index out of range (index < max)'
 *
 * @param {number} index     The actual index
 * @param {number} [min=0]   Minimum index (included)
 * @param {number} [max]     Maximum index (excluded)
 * @extends RangeError
 */
function IndexError(index, min, max) {
  if (!(this instanceof IndexError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.index = index;

  if (arguments.length < 3) {
    this.min = 0;
    this.max = min;
  } else {
    this.min = min;
    this.max = max;
  }

  if (this.min !== undefined && this.index < this.min) {
    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
  } else if (this.max !== undefined && this.index >= this.max) {
    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
  } else {
    this.message = 'Index out of range (' + this.index + ')';
  }

  this.stack = new Error().stack;
}

IndexError.prototype = new RangeError();
IndexError.prototype.constructor = RangeError;
IndexError.prototype.name = 'IndexError';
IndexError.prototype.isIndexError = true;
},{}],"../node_modules/mathjs/src/utils/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arraySize = arraySize;
exports.validate = validate;
exports.validateIndex = validateIndex;
exports.resize = resize;
exports.reshape = reshape;
exports.squeeze = squeeze;
exports.unsqueeze = unsqueeze;
exports.flatten = flatten;
exports.map = map;
exports.forEach = forEach;
exports.filter = filter;
exports.filterRegExp = filterRegExp;
exports.join = join;
exports.identify = identify;
exports.generalize = generalize;
exports.getArrayDataType = getArrayDataType;
exports.last = last;
exports.initial = initial;
exports.contains = contains;

var _number = require("./number");

var _is = require("./is");

var _string = require("./string");

var _DimensionError = require("../error/DimensionError");

var _IndexError = require("../error/IndexError");

/**
 * Calculate the size of a multi dimensional array.
 * This function checks the size of the first entry, it does not validate
 * whether all dimensions match. (use function `validate` for that)
 * @param {Array} x
 * @Return {Number[]} size
 */
function arraySize(x) {
  let s = [];

  while (Array.isArray(x)) {
    s.push(x.length);
    x = x[0];
  }

  return s;
}
/**
 * Recursively validate whether each element in a multi dimensional array
 * has a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @param {number} dim   Current dimension
 * @throws DimensionError
 * @private
 */


function _validate(array, size, dim) {
  let i;
  const len = array.length;

  if (len !== size[dim]) {
    throw new _DimensionError.DimensionError(len, size[dim]);
  }

  if (dim < size.length - 1) {
    // recursively validate each child array
    const dimNext = dim + 1;

    for (i = 0; i < len; i++) {
      const child = array[i];

      if (!Array.isArray(child)) {
        throw new _DimensionError.DimensionError(size.length - 1, size.length, '<');
      }

      _validate(array[i], size, dimNext);
    }
  } else {
    // last dimension. none of the childs may be an array
    for (i = 0; i < len; i++) {
      if (Array.isArray(array[i])) {
        throw new _DimensionError.DimensionError(size.length + 1, size.length, '>');
      }
    }
  }
}
/**
 * Validate whether each element in a multi dimensional array has
 * a size corresponding to the provided size array.
 * @param {Array} array    Array to be validated
 * @param {number[]} size  Array with the size of each dimension
 * @throws DimensionError
 */


function validate(array, size) {
  const isScalar = size.length === 0;

  if (isScalar) {
    // scalar
    if (Array.isArray(array)) {
      throw new _DimensionError.DimensionError(array.length, 0);
    }
  } else {
    // array
    _validate(array, size, 0);
  }
}
/**
 * Test whether index is an integer number with index >= 0 and index < length
 * when length is provided
 * @param {number} index    Zero-based index
 * @param {number} [length] Length of the array
 */


function validateIndex(index, length) {
  if (!(0, _is.isNumber)(index) || !(0, _number.isInteger)(index)) {
    throw new TypeError('Index must be an integer (value: ' + index + ')');
  }

  if (index < 0 || typeof length === 'number' && index >= length) {
    throw new _IndexError.IndexError(index, length);
  }
}
/**
 * Resize a multi dimensional array. The resized array is returned.
 * @param {Array} array         Array to be resized
 * @param {Array.<number>} size Array with the size of each dimension
 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
 *                              zero by default. Specify for example `null`,
 *                              to clearly see entries that are not explicitly
 *                              set.
 * @return {Array} array         The resized array
 */


function resize(array, size, defaultValue) {
  // TODO: add support for scalars, having size=[] ?
  // check the type of the arguments
  if (!Array.isArray(array) || !Array.isArray(size)) {
    throw new TypeError('Array expected');
  }

  if (size.length === 0) {
    throw new Error('Resizing to scalar is not supported');
  } // check whether size contains positive integers


  size.forEach(function (value) {
    if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');
    }
  }); // recursively resize the array

  const _defaultValue = defaultValue !== undefined ? defaultValue : 0;

  _resize(array, size, 0, _defaultValue);

  return array;
}
/**
 * Recursively resize a multi dimensional array
 * @param {Array} array         Array to be resized
 * @param {number[]} size       Array with the size of each dimension
 * @param {number} dim          Current dimension
 * @param {*} [defaultValue]    Value to be filled in in new entries,
 *                              undefined by default.
 * @private
 */


function _resize(array, size, dim, defaultValue) {
  let i;
  let elem;
  const oldLen = array.length;
  const newLen = size[dim];
  const minLen = Math.min(oldLen, newLen); // apply new length

  array.length = newLen;

  if (dim < size.length - 1) {
    // non-last dimension
    const dimNext = dim + 1; // resize existing child arrays

    for (i = 0; i < minLen; i++) {
      // resize child array
      elem = array[i];

      if (!Array.isArray(elem)) {
        elem = [elem]; // add a dimension

        array[i] = elem;
      }

      _resize(elem, size, dimNext, defaultValue);
    } // create new child arrays


    for (i = minLen; i < newLen; i++) {
      // get child array
      elem = [];
      array[i] = elem; // resize new child array

      _resize(elem, size, dimNext, defaultValue);
    }
  } else {
    // last dimension
    // remove dimensions of existing values
    for (i = 0; i < minLen; i++) {
      while (Array.isArray(array[i])) {
        array[i] = array[i][0];
      }
    } // fill new elements with the default value


    for (i = minLen; i < newLen; i++) {
      array[i] = defaultValue;
    }
  }
}
/**
 * Re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 *
 * @throws {DimensionError}       If the product of the new dimension sizes does
 *                                not equal that of the old ones
 */


function reshape(array, sizes) {
  const flatArray = flatten(array);
  let newArray;

  function product(arr) {
    return arr.reduce((prev, curr) => prev * curr);
  }

  if (!Array.isArray(array) || !Array.isArray(sizes)) {
    throw new TypeError('Array expected');
  }

  if (sizes.length === 0) {
    throw new _DimensionError.DimensionError(0, product(arraySize(array)), '!=');
  }

  let totalSize = 1;

  for (let sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
    totalSize *= sizes[sizeIndex];
  }

  if (flatArray.length !== totalSize) {
    throw new _DimensionError.DimensionError(product(sizes), product(arraySize(array)), '!=');
  }

  try {
    newArray = _reshape(flatArray, sizes);
  } catch (e) {
    if (e instanceof _DimensionError.DimensionError) {
      throw new _DimensionError.DimensionError(product(sizes), product(arraySize(array)), '!=');
    }

    throw e;
  }

  return newArray;
}
/**
 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
 * @param {Array} array           Array to be reshaped
 * @param {Array.<number>} sizes  List of sizes for each dimension
 * @returns {Array}               Array whose data has been formatted to fit the
 *                                specified dimensions
 */


function _reshape(array, sizes) {
  // testing if there are enough elements for the requested shape
  let tmpArray = array;
  let tmpArray2; // for each dimensions starting by the last one and ignoring the first one

  for (let sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
    const size = sizes[sizeIndex];
    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

    const length = tmpArray.length / size;

    for (let i = 0; i < length; i++) {
      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
    } // set it as the new tmpArray for the next loop turn or for return


    tmpArray = tmpArray2;
  }

  return tmpArray;
}
/**
 * Squeeze a multi dimensional array
 * @param {Array} array
 * @param {Array} [size]
 * @returns {Array} returns the array itself
 */


function squeeze(array, size) {
  let s = size || arraySize(array); // squeeze outer dimensions

  while (Array.isArray(array) && array.length === 1) {
    array = array[0];
    s.shift();
  } // find the first dimension to be squeezed


  let dims = s.length;

  while (s[dims - 1] === 1) {
    dims--;
  } // squeeze inner dimensions


  if (dims < s.length) {
    array = _squeeze(array, dims, 0);
    s.length = dims;
  }

  return array;
}
/**
 * Recursively squeeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */


function _squeeze(array, dims, dim) {
  let i, ii;

  if (dim < dims) {
    const next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _squeeze(array[i], dims, next);
    }
  } else {
    while (Array.isArray(array)) {
      array = array[0];
    }
  }

  return array;
}
/**
 * Unsqueeze a multi dimensional array: add dimensions when missing
 *
 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
 *
 * @param {Array} array
 * @param {number} dims       Desired number of dimensions of the array
 * @param {number} [outer]    Number of outer dimensions to be added
 * @param {Array} [size] Current size of array.
 * @returns {Array} returns the array itself
 * @private
 */


function unsqueeze(array, dims, outer, size) {
  let s = size || arraySize(array); // unsqueeze outer dimensions

  if (outer) {
    for (let i = 0; i < outer; i++) {
      array = [array];
      s.unshift(1);
    }
  } // unsqueeze inner dimensions


  array = _unsqueeze(array, dims, 0);

  while (s.length < dims) {
    s.push(1);
  }

  return array;
}
/**
 * Recursively unsqueeze a multi dimensional array
 * @param {Array} array
 * @param {number} dims Required number of dimensions
 * @param {number} dim  Current dimension
 * @returns {Array | *} Returns the squeezed array
 * @private
 */


function _unsqueeze(array, dims, dim) {
  let i, ii;

  if (Array.isArray(array)) {
    const next = dim + 1;

    for (i = 0, ii = array.length; i < ii; i++) {
      array[i] = _unsqueeze(array[i], dims, next);
    }
  } else {
    for (let d = dim; d < dims; d++) {
      array = [array];
    }
  }

  return array;
}
/**
 * Flatten a multi dimensional array, put all elements in a one dimensional
 * array
 * @param {Array} array   A multi dimensional array
 * @return {Array}        The flattened array (1 dimensional)
 */


function flatten(array) {
  if (!Array.isArray(array)) {
    // if not an array, return as is
    return array;
  }

  let flat = [];
  array.forEach(function callback(value) {
    if (Array.isArray(value)) {
      value.forEach(callback); // traverse through sub-arrays recursively
    } else {
      flat.push(value);
    }
  });
  return flat;
}
/**
 * A safe map
 * @param {Array} array
 * @param {function} callback
 */


function map(array, callback) {
  return Array.prototype.map.call(array, callback);
}
/**
 * A safe forEach
 * @param {Array} array
 * @param {function} callback
 */


function forEach(array, callback) {
  Array.prototype.forEach.call(array, callback);
}
/**
 * A safe filter
 * @param {Array} array
 * @param {function} callback
 */


function filter(array, callback) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, callback);
}
/**
 * Filter values in a callback given a regular expression
 * @param {Array} array
 * @param {RegExp} regexp
 * @return {Array} Returns the filtered array
 * @private
 */


function filterRegExp(array, regexp) {
  if (arraySize(array).length !== 1) {
    throw new Error('Only one dimensional matrices supported');
  }

  return Array.prototype.filter.call(array, entry => regexp.test(entry));
}
/**
 * A safe join
 * @param {Array} array
 * @param {string} separator
 */


function join(array, separator) {
  return Array.prototype.join.call(array, separator);
}
/**
 * Assign a numeric identifier to every element of a sorted array
 * @param {Array} a  An array
 * @return {Array} An array of objects containing the original value and its identifier
 */


function identify(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  let b = [];
  let count = 0;
  b[0] = {
    value: a[0],
    identifier: 0
  };

  for (let i = 1; i < a.length; i++) {
    if (a[i] === a[i - 1]) {
      count++;
    } else {
      count = 0;
    }

    b.push({
      value: a[i],
      identifier: count
    });
  }

  return b;
}
/**
 * Remove the numeric identifier from the elements
 * @param {array} a  An array
 * @return {array} An array of values without identifiers
 */


function generalize(a) {
  if (!Array.isArray(a)) {
    throw new TypeError('Array input expected');
  }

  if (a.length === 0) {
    return a;
  }

  let b = [];

  for (let i = 0; i < a.length; i++) {
    b.push(a[i].value);
  }

  return b;
}
/**
 * Check the datatype of a given object
 * This is a low level implementation that should only be used by
 * parent Matrix classes such as SparseMatrix or DenseMatrix
 * This method does not validate Array Matrix shape
 * @param {Array} array
 * @param {function} typeOf   Callback function to use to determine the type of a value
 * @return string
 */


function getArrayDataType(array, typeOf) {
  let type; // to hold type info

  let length = 0; // to hold length value to ensure it has consistent sizes

  for (let i = 0; i < array.length; i++) {
    const item = array[i];
    const isArray = Array.isArray(item); // Saving the target matrix row size

    if (i === 0 && isArray) {
      length = item.length;
    } // If the current item is an array but the length does not equal the targetVectorSize


    if (isArray && item.length !== length) {
      return undefined;
    }

    const itemType = isArray ? getArrayDataType(item, typeOf) // recurse into a nested array
    : typeOf(item);

    if (type === undefined) {
      type = itemType; // first item
    } else if (type !== itemType) {
      return 'mixed';
    } else {// we're good, everything has the same type so far
    }
  }

  return type;
}
/**
 * Return the last item from an array
 * @param array
 * @returns {*}
 */


function last(array) {
  return array[array.length - 1];
}
/**
 * Get all but the last element of array.
 */


function initial(array) {
  return array.slice(0, array.length - 1);
}
/**
 * Test whether an array or string contains an item
 * @param {Array | string} array
 * @param {*} item
 * @return {boolean}
 */


function contains(array, item) {
  return array.indexOf(item) !== -1;
}
},{"./number":"../node_modules/mathjs/src/utils/number.js","./is":"../node_modules/mathjs/src/utils/is.js","./string":"../node_modules/mathjs/src/utils/string.js","../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js"}],"../node_modules/mathjs/src/utils/factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.factory = factory;
exports.sortFactories = sortFactories;
exports.create = create;
exports.isFactory = isFactory;
exports.assertDependencies = assertDependencies;
exports.isOptionalDependency = isOptionalDependency;
exports.stripOptionalNotation = stripOptionalNotation;

var _array = require("./array");

var _object = require("./object");

/**
 * Create a factory function, which can be used to inject dependencies.
 *
 * The created functions are memoized, a consecutive call of the factory
 * with the exact same inputs will return the same function instance.
 * The memoized cache is exposed on `factory.cache` and can be cleared
 * if needed.
 *
 * Example:
 *
 *     const name = 'log'
 *     const dependencies = ['config', 'typed', 'divideScalar', 'Complex']
 *
 *     export const createLog = factory(name, dependencies, ({ typed, config, divideScalar, Complex }) => {
 *       // ... create the function log here and return it
 *     }
 *
 * @param {string} name           Name of the function to be created
 * @param {string[]} dependencies The names of all required dependencies
 * @param {function} create       Callback function called with an object with all dependencies
 * @param {Object} [meta]         Optional object with meta information that will be attached
 *                                to the created factory function as property `meta`.
 * @returns {function}
 */
function factory(name, dependencies, create, meta) {
  function assertAndCreate(scope) {
    // we only pass the requested dependencies to the factory function
    // to prevent functions to rely on dependencies that are not explicitly
    // requested.
    const deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
    assertDependencies(name, dependencies, scope);
    return create(deps);
  }

  assertAndCreate.isFactory = true;
  assertAndCreate.fn = name;
  assertAndCreate.dependencies = dependencies.slice().sort();

  if (meta) {
    assertAndCreate.meta = meta;
  }

  return assertAndCreate;
}
/**
 * Sort all factories such that when loading in order, the dependencies are resolved.
 *
 * @param {Array} factories
 * @returns {Array} Returns a new array with the sorted factories.
 */


function sortFactories(factories) {
  const factoriesByName = {};
  factories.forEach(factory => {
    factoriesByName[factory.fn] = factory;
  });

  function containsDependency(factory, dependency) {
    // TODO: detect circular references
    if (isFactory(factory)) {
      if ((0, _array.contains)(factory.dependencies, dependency.fn || dependency.name)) {
        return true;
      }

      if (factory.dependencies.some(d => containsDependency(factoriesByName[d], dependency))) {
        return true;
      }
    }

    return false;
  }

  const sorted = [];

  function addFactory(factory) {
    let index = 0;

    while (index < sorted.length && !containsDependency(sorted[index], factory)) {
      index++;
    }

    sorted.splice(index, 0, factory);
  } // sort regular factory functions


  factories.filter(isFactory).forEach(addFactory); // sort legacy factory functions AFTER the regular factory functions

  factories.filter(factory => !isFactory(factory)).forEach(addFactory);
  return sorted;
} // TODO: comment or cleanup if unused in the end


function create(factories, scope = {}) {
  sortFactories(factories).forEach(factory => factory(scope));
  return scope;
}
/**
 * Test whether an object is a factory. This is the case when it has
 * properties name, dependencies, and a function create.
 * @param {*} obj
 * @returns {boolean}
 */


function isFactory(obj) {
  return typeof obj === 'function' && typeof obj.fn === 'string' && Array.isArray(obj.dependencies);
}
/**
 * Assert that all dependencies of a list with dependencies are available in the provided scope.
 *
 * Will throw an exception when there are dependencies missing.
 *
 * @param {string} name   Name for the function to be created. Used to generate a useful error message
 * @param {string[]} dependencies
 * @param {Object} scope
 */


function assertDependencies(name, dependencies, scope) {
  const allDefined = dependencies.filter(dependency => !isOptionalDependency(dependency)) // filter optionals
  .every(dependency => scope[dependency] !== undefined);

  if (!allDefined) {
    const missingDependencies = dependencies.filter(dependency => scope[dependency] === undefined); // TODO: create a custom error class for this, a MathjsError or something like that

    throw new Error(`Cannot create function "${name}", ` + `some dependencies are missing: ${missingDependencies.map(d => `"${d}"`).join(', ')}.`);
  }
}

function isOptionalDependency(dependency) {
  return dependency && dependency[0] === '?';
}

function stripOptionalNotation(dependency) {
  return dependency && dependency[0] === '?' ? dependency.slice(1) : dependency;
}
},{"./array":"../node_modules/mathjs/src/utils/array.js","./object":"../node_modules/mathjs/src/utils/object.js"}],"../node_modules/mathjs/src/core/function/typed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTyped = void 0;

var _is = require("../../utils/is");

var _typedFunction = _interopRequireDefault(require("typed-function"));

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a typed-function which checks the types of the arguments and
 * can match them against multiple provided signatures. The typed-function
 * automatically converts inputs in order to find a matching signature.
 * Typed functions throw informative errors in case of wrong input arguments.
 *
 * See the library [typed-function](https://github.com/josdejong/typed-function)
 * for detailed documentation.
 *
 * Syntax:
 *
 *     math.typed(name, signatures) : function
 *     math.typed(signatures) : function
 *
 * Examples:
 *
 *     // create a typed function with multiple types per argument (type union)
 *     const fn2 = typed({
 *       'number | boolean': function (b) {
 *         return 'b is a number or boolean'
 *       },
 *       'string, number | boolean': function (a, b) {
 *         return 'a is a string, b is a number or boolean'
 *       }
 *     })
 *
 *     // create a typed function with an any type argument
 *     const log = typed({
 *       'string, any': function (event, data) {
 *         console.log('event: ' + event + ', data: ' + JSON.stringify(data))
 *       }
 *     })
 *
 * @param {string} [name]                          Optional name for the typed-function
 * @param {Object<string, function>} signatures   Object with one or multiple function signatures
 * @returns {function} The created typed-function.
 */
// returns a new instance of typed-function
let _createTyped = function () {
  // initially, return the original instance of typed-function
  // consecutively, return a new instance from typed.create.
  _createTyped = _typedFunction.default.create;
  return _typedFunction.default;
};

const dependencies = ['?BigNumber', '?Complex', '?DenseMatrix', '?Fraction'];
/**
 * Factory function for creating a new typed instance
 * @param {Object} dependencies   Object with data types like Complex and BigNumber
 * @returns {Function}
 */

const createTyped =
/* #__PURE__ */
(0, _factory.factory)('typed', dependencies, function createTyped({
  BigNumber,
  Complex,
  DenseMatrix,
  Fraction
}) {
  // TODO: typed-function must be able to silently ignore signatures with unknown data types
  // get a new instance of typed-function
  const typed = _createTyped(); // define all types. The order of the types determines in which order function
  // arguments are type-checked (so for performance it's important to put the
  // most used types first).


  typed.types = [{
    name: 'number',
    test: _is.isNumber
  }, {
    name: 'Complex',
    test: _is.isComplex
  }, {
    name: 'BigNumber',
    test: _is.isBigNumber
  }, {
    name: 'Fraction',
    test: _is.isFraction
  }, {
    name: 'Unit',
    test: _is.isUnit
  }, {
    name: 'string',
    test: _is.isString
  }, {
    name: 'Chain',
    test: _is.isChain
  }, {
    name: 'Array',
    test: _is.isArray
  }, {
    name: 'Matrix',
    test: _is.isMatrix
  }, {
    name: 'DenseMatrix',
    test: _is.isDenseMatrix
  }, {
    name: 'SparseMatrix',
    test: _is.isSparseMatrix
  }, {
    name: 'Range',
    test: _is.isRange
  }, {
    name: 'Index',
    test: _is.isIndex
  }, {
    name: 'boolean',
    test: _is.isBoolean
  }, {
    name: 'ResultSet',
    test: _is.isResultSet
  }, {
    name: 'Help',
    test: _is.isHelp
  }, {
    name: 'function',
    test: _is.isFunction
  }, {
    name: 'Date',
    test: _is.isDate
  }, {
    name: 'RegExp',
    test: _is.isRegExp
  }, {
    name: 'null',
    test: _is.isNull
  }, {
    name: 'undefined',
    test: _is.isUndefined
  }, {
    name: 'AccessorNode',
    test: _is.isAccessorNode
  }, {
    name: 'ArrayNode',
    test: _is.isArrayNode
  }, {
    name: 'AssignmentNode',
    test: _is.isAssignmentNode
  }, {
    name: 'BlockNode',
    test: _is.isBlockNode
  }, {
    name: 'ConditionalNode',
    test: _is.isConditionalNode
  }, {
    name: 'ConstantNode',
    test: _is.isConstantNode
  }, {
    name: 'FunctionNode',
    test: _is.isFunctionNode
  }, {
    name: 'FunctionAssignmentNode',
    test: _is.isFunctionAssignmentNode
  }, {
    name: 'IndexNode',
    test: _is.isIndexNode
  }, {
    name: 'Node',
    test: _is.isNode
  }, {
    name: 'ObjectNode',
    test: _is.isObjectNode
  }, {
    name: 'OperatorNode',
    test: _is.isOperatorNode
  }, {
    name: 'ParenthesisNode',
    test: _is.isParenthesisNode
  }, {
    name: 'RangeNode',
    test: _is.isRangeNode
  }, {
    name: 'SymbolNode',
    test: _is.isSymbolNode
  }, {
    name: 'Object',
    test: _is.isObject // order 'Object' last, it matches on other classes too

  }];
  typed.conversions = [{
    from: 'number',
    to: 'BigNumber',
    convert: function (x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      } // note: conversion from number to BigNumber can fail if x has >15 digits


      if ((0, _number.digits)(x) > 15) {
        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
      }

      return new BigNumber(x);
    }
  }, {
    from: 'number',
    to: 'Complex',
    convert: function (x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x, 0);
    }
  }, {
    from: 'number',
    to: 'string',
    convert: function (x) {
      return x + '';
    }
  }, {
    from: 'BigNumber',
    to: 'Complex',
    convert: function (x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.toNumber(), 0);
    }
  }, {
    from: 'Fraction',
    to: 'BigNumber',
    convert: function (x) {
      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
    }
  }, {
    from: 'Fraction',
    to: 'Complex',
    convert: function (x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      return new Complex(x.valueOf(), 0);
    }
  }, {
    from: 'number',
    to: 'Fraction',
    convert: function (x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      const f = new Fraction(x);

      if (f.valueOf() !== x) {
        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
      }

      return f;
    }
  }, {
    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
    //  from: 'Fraction',
    //  to: 'number',
    //  convert: function (x) {
    //    return x.valueOf()
    //  }
    // }, {
    from: 'string',
    to: 'number',
    convert: function (x) {
      const n = Number(x);

      if (isNaN(n)) {
        throw new Error('Cannot convert "' + x + '" to a number');
      }

      return n;
    }
  }, {
    from: 'string',
    to: 'BigNumber',
    convert: function (x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      try {
        return new BigNumber(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to BigNumber');
      }
    }
  }, {
    from: 'string',
    to: 'Fraction',
    convert: function (x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      try {
        return new Fraction(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Fraction');
      }
    }
  }, {
    from: 'string',
    to: 'Complex',
    convert: function (x) {
      if (!Complex) {
        throwNoComplex(x);
      }

      try {
        return new Complex(x);
      } catch (err) {
        throw new Error('Cannot convert "' + x + '" to Complex');
      }
    }
  }, {
    from: 'boolean',
    to: 'number',
    convert: function (x) {
      return +x;
    }
  }, {
    from: 'boolean',
    to: 'BigNumber',
    convert: function (x) {
      if (!BigNumber) {
        throwNoBignumber(x);
      }

      return new BigNumber(+x);
    }
  }, {
    from: 'boolean',
    to: 'Fraction',
    convert: function (x) {
      if (!Fraction) {
        throwNoFraction(x);
      }

      return new Fraction(+x);
    }
  }, {
    from: 'boolean',
    to: 'string',
    convert: function (x) {
      return String(x);
    }
  }, {
    from: 'Array',
    to: 'Matrix',
    convert: function (array) {
      if (!DenseMatrix) {
        throwNoMatrix();
      }

      return new DenseMatrix(array);
    }
  }, {
    from: 'Matrix',
    to: 'Array',
    convert: function (matrix) {
      return matrix.valueOf();
    }
  }];
  return typed;
});
exports.createTyped = createTyped;

function throwNoBignumber(x) {
  throw new Error(`Cannot convert value ${x} into a BigNumber: no class 'BigNumber' provided`);
}

function throwNoComplex(x) {
  throw new Error(`Cannot convert value ${x} into a Complex number: no class 'Complex' provided`);
}

function throwNoMatrix() {
  throw new Error(`Cannot convert array into a Matrix: no class 'DenseMatrix' provided`);
}

function throwNoFraction(x) {
  throw new Error(`Cannot convert value ${x} into a Fraction, no class 'Fraction' provided.`);
}
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","typed-function":"../node_modules/typed-function/typed-function.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/resultset/ResultSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createResultSet = void 0;

var _factory = require("../../utils/factory");

const name = 'ResultSet';
const dependencies = [];
const createResultSet =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, () => {
  /**
   * A ResultSet contains a list or results
   * @class ResultSet
   * @param {Array} entries
   * @constructor ResultSet
   */
  function ResultSet(entries) {
    if (!(this instanceof ResultSet)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.entries = entries || [];
  }
  /**
   * Attach type information
   */


  ResultSet.prototype.type = 'ResultSet';
  ResultSet.prototype.isResultSet = true;
  /**
   * Returns the array with results hold by this ResultSet
   * @memberof ResultSet
   * @returns {Array} entries
   */

  ResultSet.prototype.valueOf = function () {
    return this.entries;
  };
  /**
   * Returns the stringified results of the ResultSet
   * @memberof ResultSet
   * @returns {string} string
   */


  ResultSet.prototype.toString = function () {
    return '[' + this.entries.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the ResultSet
   * @memberof ResultSet
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "ResultSet", "entries": [...]}`
   */


  ResultSet.prototype.toJSON = function () {
    return {
      mathjs: 'ResultSet',
      entries: this.entries
    };
  };
  /**
   * Instantiate a ResultSet from a JSON object
   * @memberof ResultSet
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "ResultSet", "entries": [...]}`
   * @return {ResultSet}
   */


  ResultSet.fromJSON = function (json) {
    return new ResultSet(json.entries);
  };

  return ResultSet;
}, {
  isClass: true
});
exports.createResultSet = createResultSet;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/decimal.js/decimal.js":[function(require,module,exports) {
var define;
;(function (globalScope) {
  'use strict';


  /*
   *  decimal.js v10.2.0
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   */


  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


    // The maximum exponent magnitude.
    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
  var EXP_LIMIT = 9e15,                      // 0 to 9e15

    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    MAX_DIGITS = 1e9,                        // 0 to 1e9

    // Base conversion alphabet.
    NUMERALS = '0123456789abcdef',

    // The natural logarithm of 10 (1025 digits).
    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

    // Pi (1025 digits).
    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


    // The initial configuration properties of the Decimal constructor.
    DEFAULTS = {

      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed at run-time using the `Decimal.config` method.

      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,                         // 1 to MAX_DIGITS

      // The rounding mode used when rounding to `precision`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,                           // 0 to 8

      // The modulo mode used when calculating the modulus: a mod n.
      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
      // The remainder (r) is calculated as: r = a - n * q.
      //
      // UP         0 The remainder is positive if the dividend is negative, else is negative.
      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
      // HALF_EVEN  6 The IEEE 754 remainder function.
      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
      //
      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
      // division (9) are commonly used for the modulus operation. The other rounding modes can also
      // be used, but they may not give useful results.
      modulo: 1,                             // 0 to 9

      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,                          // 0 to -EXP_LIMIT

      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos:  21,                         // 0 to EXP_LIMIT

      // The minimum exponent value, beneath which underflow to zero occurs.
      // JavaScript numbers: -324  (5e-324)
      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

      // The maximum exponent value, above which overflow to Infinity occurs.
      // JavaScript numbers: 308  (1.7976931348623157e+308)
      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

      // Whether to use cryptographically-secure random number generation, if available.
      crypto: false                          // true/false
    },


  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


    Decimal, inexact, noConflict, quadrant,
    external = true,

    decimalError = '[DecimalError] ',
    invalidArgument = decimalError + 'Invalid argument: ',
    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
    cryptoUnavailable = decimalError + 'crypto unavailable',

    mathfloor = Math.floor,
    mathpow = Math.pow,

    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

    BASE = 1e7,
    LOG_BASE = 7,
    MAX_SAFE_INTEGER = 9007199254740991,

    LN10_PRECISION = LN10.length - 1,
    PI_PRECISION = PI.length - 1,

    // Decimal.prototype object
    P = { name: '[object Decimal]' };


  // Decimal prototype methods


  /*
   *  absoluteValue             abs
   *  ceil
   *  comparedTo                cmp
   *  cosine                    cos
   *  cubeRoot                  cbrt
   *  decimalPlaces             dp
   *  dividedBy                 div
   *  dividedToIntegerBy        divToInt
   *  equals                    eq
   *  floor
   *  greaterThan               gt
   *  greaterThanOrEqualTo      gte
   *  hyperbolicCosine          cosh
   *  hyperbolicSine            sinh
   *  hyperbolicTangent         tanh
   *  inverseCosine             acos
   *  inverseHyperbolicCosine   acosh
   *  inverseHyperbolicSine     asinh
   *  inverseHyperbolicTangent  atanh
   *  inverseSine               asin
   *  inverseTangent            atan
   *  isFinite
   *  isInteger                 isInt
   *  isNaN
   *  isNegative                isNeg
   *  isPositive                isPos
   *  isZero
   *  lessThan                  lt
   *  lessThanOrEqualTo         lte
   *  logarithm                 log
   *  [maximum]                 [max]
   *  [minimum]                 [min]
   *  minus                     sub
   *  modulo                    mod
   *  naturalExponential        exp
   *  naturalLogarithm          ln
   *  negated                   neg
   *  plus                      add
   *  precision                 sd
   *  round
   *  sine                      sin
   *  squareRoot                sqrt
   *  tangent                   tan
   *  times                     mul
   *  toBinary
   *  toDecimalPlaces           toDP
   *  toExponential
   *  toFixed
   *  toFraction
   *  toHexadecimal             toHex
   *  toNearest
   *  toNumber
   *  toOctal
   *  toPower                   pow
   *  toPrecision
   *  toSignificantDigits       toSD
   *  toString
   *  truncated                 trunc
   *  valueOf                   toJSON
   */


  /*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */
  P.absoluteValue = P.abs = function () {
    var x = new this.constructor(this);
    if (x.s < 0) x.s = 1;
    return finalise(x);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of positive Infinity.
   *
   */
  P.ceil = function () {
    return finalise(new this.constructor(this), this.e + 1, 2);
  };


  /*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value,
   *   NaN  if the value of either Decimal is NaN.
   *
   */
  P.comparedTo = P.cmp = function (y) {
    var i, j, xdL, ydL,
      x = this,
      xd = x.d,
      yd = (y = new x.constructor(y)).d,
      xs = x.s,
      ys = y.s;

    // Either NaN or ±Infinity?
    if (!xd || !yd) {
      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
    }

    // Either zero?
    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

    // Signs differ?
    if (xs !== ys) return xs;

    // Compare exponents.
    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

    xdL = xd.length;
    ydL = yd.length;

    // Compare digit by digit.
    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
    }

    // Compare lengths.
    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
  };


  /*
   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * cos(0)         = 1
   * cos(-0)        = 1
   * cos(Infinity)  = NaN
   * cos(-Infinity) = NaN
   * cos(NaN)       = NaN
   *
   */
  P.cosine = P.cos = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.d) return new Ctor(NaN);

    // cos(0) = cos(-0) = 1
    if (!x.d[0]) return new Ctor(1);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
  };


  /*
   *
   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   *  cbrt(0)  =  0
   *  cbrt(-0) = -0
   *  cbrt(1)  =  1
   *  cbrt(-1) = -1
   *  cbrt(N)  =  N
   *  cbrt(-I) = -I
   *  cbrt(I)  =  I
   *
   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
   *
   */
  P.cubeRoot = P.cbrt = function () {
    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);
    external = false;

    // Initial estimate.
    s = x.s * mathpow(x.s * x, 1 / 3);

     // Math.cbrt underflow/overflow?
     // Pass x to Math.pow as integer, then adjust the exponent of the result.
    if (!s || Math.abs(s) == 1 / 0) {
      n = digitsToString(x.d);
      e = x.e;

      // Adjust n exponent so it is a multiple of 3 away from x exponent.
      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
      s = mathpow(n, 1 / 3);

      // Rarely, e may be one less than the result exponent value.
      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
      r.s = x.s;
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Halley's method.
    // TODO? Compare Newton's method.
    for (;;) {
      t = r;
      t3 = t.times(t).times(t);
      t3plusx = t3.plus(x);
      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
        // , i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return the number of decimal places of the value of this Decimal.
   *
   */
  P.decimalPlaces = P.dp = function () {
    var w,
      d = this.d,
      n = NaN;

    if (d) {
      w = d.length - 1;
      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

      // Subtract the number of trailing zeros of the last word.
      w = d[w];
      if (w) for (; w % 10 == 0; w /= 10) n--;
      if (n < 0) n = 0;
    }

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedBy = P.div = function (y) {
    return divide(this, new this.constructor(y));
  };


  /*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.dividedToIntegerBy = P.divToInt = function (y) {
    var x = this,
      Ctor = x.constructor;
    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
  };


  /*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */
  P.equals = P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
   * direction of negative Infinity.
   *
   */
  P.floor = function () {
    return finalise(new this.constructor(this), this.e + 1, 3);
  };


  /*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */
  P.greaterThan = P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */
  P.greaterThanOrEqualTo = P.gte = function (y) {
    var k = this.cmp(y);
    return k == 1 || k === 0;
  };


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [1, Infinity]
   *
   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
   *
   * cosh(0)         = 1
   * cosh(-0)        = 1
   * cosh(Infinity)  = Infinity
   * cosh(-Infinity) = Infinity
   * cosh(NaN)       = NaN
   *
   *  x        time taken (ms)   result
   * 1000      9                 9.8503555700852349694e+433
   * 10000     25                4.4034091128314607936e+4342
   * 100000    171               1.4033316802130615897e+43429
   * 1000000   3817              1.5166076984010437725e+434294
   * 10000000  abandoned after 2 minute wait
   *
   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
   *
   */
  P.hyperbolicCosine = P.cosh = function () {
    var k, n, pr, rm, len,
      x = this,
      Ctor = x.constructor,
      one = new Ctor(1);

    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
    if (x.isZero()) return one;

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

    // Estimate the optimum number of times to use the argument reduction.
    // TODO? Estimation reused from cosine() and may not be optimal here.
    if (len < 32) {
      k = Math.ceil(len / 3);
      n = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      n = '2.3283064365386962890625e-10';
    }

    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

    // Reverse argument reduction
    var cosh2_x,
      i = k,
      d8 = new Ctor(8);
    for (; i--;) {
      cosh2_x = x.times(x);
      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
    }

    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
   *
   * sinh(0)         = 0
   * sinh(-0)        = -0
   * sinh(Infinity)  = Infinity
   * sinh(-Infinity) = -Infinity
   * sinh(NaN)       = NaN
   *
   * x        time taken (ms)
   * 10       2 ms
   * 100      5 ms
   * 1000     14 ms
   * 10000    82 ms
   * 100000   886 ms            1.4033316802130615897e+43429
   * 200000   2613 ms
   * 300000   5407 ms
   * 400000   8824 ms
   * 500000   13026 ms          8.7080643612718084129e+217146
   * 1000000  48543 ms
   *
   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
   *
   */
  P.hyperbolicSine = P.sinh = function () {
    var k, pr, rm, len,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
    Ctor.rounding = 1;
    len = x.d.length;

    if (len < 3) {
      x = taylorSeries(Ctor, 2, x, x, true);
    } else {

      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
      // 3 multiplications and 1 addition

      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
      // 4 multiplications and 2 additions

      // Estimate the optimum number of times to use the argument reduction.
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;

      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x, true);

      // Reverse argument reduction
      var sinh2_x,
        d5 = new Ctor(5),
        d16 = new Ctor(16),
        d20 = new Ctor(20);
      for (; k--;) {
        sinh2_x = x.times(x);
        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
      }
    }

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * tanh(x) = sinh(x) / cosh(x)
   *
   * tanh(0)         = 0
   * tanh(-0)        = -0
   * tanh(Infinity)  = 1
   * tanh(-Infinity) = -1
   * tanh(NaN)       = NaN
   *
   */
  P.hyperbolicTangent = P.tanh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(x.s);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 7;
    Ctor.rounding = 1;

    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
  };


  /*
   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
   * this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [0, pi]
   *
   * acos(x) = pi/2 - asin(x)
   *
   * acos(0)       = pi/2
   * acos(-0)      = pi/2
   * acos(1)       = 0
   * acos(-1)      = pi
   * acos(1/2)     = pi/3
   * acos(-1/2)    = 2*pi/3
   * acos(|x| > 1) = NaN
   * acos(NaN)     = NaN
   *
   */
  P.inverseCosine = P.acos = function () {
    var halfPi,
      x = this,
      Ctor = x.constructor,
      k = x.abs().cmp(1),
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (k !== -1) {
      return k === 0
        // |x| is 1
        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
        // |x| > 1 or x is NaN
        : new Ctor(NaN);
    }

    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.asin();
    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return halfPi.minus(x);
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
   * value of this Decimal.
   *
   * Domain: [1, Infinity]
   * Range: [0, Infinity]
   *
   * acosh(x) = ln(x + sqrt(x^2 - 1))
   *
   * acosh(x < 1)     = NaN
   * acosh(NaN)       = NaN
   * acosh(Infinity)  = Infinity
   * acosh(-Infinity) = NaN
   * acosh(0)         = NaN
   * acosh(-0)        = NaN
   * acosh(1)         = 0
   * acosh(-1)        = NaN
   *
   */
  P.inverseHyperbolicCosine = P.acosh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
    if (!x.isFinite()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).minus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * asinh(x) = ln(x + sqrt(x^2 + 1))
   *
   * asinh(NaN)       = NaN
   * asinh(Infinity)  = Infinity
   * asinh(-Infinity) = -Infinity
   * asinh(0)         = 0
   * asinh(-0)        = -0
   *
   */
  P.inverseHyperbolicSine = P.asinh = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite() || x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
    Ctor.rounding = 1;
    external = false;

    x = x.times(x).plus(1).sqrt().plus(x);

    external = true;
    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.ln();
  };


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
   * value of this Decimal.
   *
   * Domain: [-1, 1]
   * Range: [-Infinity, Infinity]
   *
   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
   *
   * atanh(|x| > 1)   = NaN
   * atanh(NaN)       = NaN
   * atanh(Infinity)  = NaN
   * atanh(-Infinity) = NaN
   * atanh(0)         = 0
   * atanh(-0)        = -0
   * atanh(1)         = Infinity
   * atanh(-1)        = -Infinity
   *
   */
  P.inverseHyperbolicTangent = P.atanh = function () {
    var pr, rm, wpr, xsd,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    xsd = x.sd();

    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

    Ctor.precision = wpr = xsd - x.e;

    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

    Ctor.precision = pr + 4;
    Ctor.rounding = 1;

    x = x.ln();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(0.5);
  };


  /*
   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
   * Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
   *
   * asin(0)       = 0
   * asin(-0)      = -0
   * asin(1/2)     = pi/6
   * asin(-1/2)    = -pi/6
   * asin(1)       = pi/2
   * asin(-1)      = -pi/2
   * asin(|x| > 1) = NaN
   * asin(NaN)     = NaN
   *
   * TODO? Compare performance of Taylor series.
   *
   */
  P.inverseSine = P.asin = function () {
    var halfPi, k,
      pr, rm,
      x = this,
      Ctor = x.constructor;

    if (x.isZero()) return new Ctor(x);

    k = x.abs().cmp(1);
    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (k !== -1) {

      // |x| is 1
      if (k === 0) {
        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
        halfPi.s = x.s;
        return halfPi;
      }

      // |x| > 1 or x is NaN
      return new Ctor(NaN);
    }

    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

    Ctor.precision = pr + 6;
    Ctor.rounding = 1;

    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return x.times(2);
  };


  /*
   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
   * of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi/2, pi/2]
   *
   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
   *
   * atan(0)         = 0
   * atan(-0)        = -0
   * atan(1)         = pi/4
   * atan(-1)        = -pi/4
   * atan(Infinity)  = pi/2
   * atan(-Infinity) = -pi/2
   * atan(NaN)       = NaN
   *
   */
  P.inverseTangent = P.atan = function () {
    var i, j, k, n, px, t, r, wpr, x2,
      x = this,
      Ctor = x.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding;

    if (!x.isFinite()) {
      if (!x.s) return new Ctor(NaN);
      if (pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.5);
        r.s = x.s;
        return r;
      }
    } else if (x.isZero()) {
      return new Ctor(x);
    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.25);
      r.s = x.s;
      return r;
    }

    Ctor.precision = wpr = pr + 10;
    Ctor.rounding = 1;

    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

    // Argument reduction
    // Ensure |x| < 0.42
    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

    k = Math.min(28, wpr / LOG_BASE + 2 | 0);

    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

    external = false;

    j = Math.ceil(wpr / LOG_BASE);
    n = 1;
    x2 = x.times(x);
    r = new Ctor(x);
    px = x;

    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
    for (; i !== -1;) {
      px = px.times(x2);
      t = r.minus(px.div(n += 2));

      px = px.times(x2);
      r = t.plus(px.div(n += 2));

      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
    }

    if (k) r = r.times(2 << (k - 1));

    external = true;

    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
  };


  /*
   * Return true if the value of this Decimal is a finite number, otherwise return false.
   *
   */
  P.isFinite = function () {
    return !!this.d;
  };


  /*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */
  P.isInteger = P.isInt = function () {
    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
  };


  /*
   * Return true if the value of this Decimal is NaN, otherwise return false.
   *
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */
  P.isNegative = P.isNeg = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */
  P.isPositive = P.isPos = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
   *
   */
  P.isZero = function () {
    return !!this.d && this.d[0] === 0;
  };


  /*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */
  P.lessThan = P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */
  P.lessThanOrEqualTo = P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * If no base is specified, return log[10](arg).
   *
   * log[base](arg) = ln(arg) / ln(base)
   *
   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
   * otherwise:
   *
   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
   * between the result and the correctly rounded result will be one ulp (unit in the last place).
   *
   * log[-b](a)       = NaN
   * log[0](a)        = NaN
   * log[1](a)        = NaN
   * log[NaN](a)      = NaN
   * log[Infinity](a) = NaN
   * log[b](0)        = -Infinity
   * log[b](-0)       = -Infinity
   * log[b](-a)       = NaN
   * log[b](1)        = 0
   * log[b](Infinity) = Infinity
   * log[b](NaN)      = NaN
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */
  P.logarithm = P.log = function (base) {
    var isBase10, d, denominator, k, inf, num, sd, r,
      arg = this,
      Ctor = arg.constructor,
      pr = Ctor.precision,
      rm = Ctor.rounding,
      guard = 5;

    // Default base is 10.
    if (base == null) {
      base = new Ctor(10);
      isBase10 = true;
    } else {
      base = new Ctor(base);
      d = base.d;

      // Return NaN if base is negative, or non-finite, or is 0 or 1.
      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

      isBase10 = base.eq(10);
    }

    d = arg.d;

    // Is arg negative, non-finite, 0 or 1?
    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
    }

    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
    // integer power of 10.
    if (isBase10) {
      if (d.length > 1) {
        inf = true;
      } else {
        for (k = d[0]; k % 10 === 0;) k /= 10;
        inf = k !== 1;
      }
    }

    external = false;
    sd = pr + guard;
    num = naturalLogarithm(arg, sd);
    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

    // The result will have 5 rounding digits.
    r = divide(num, denominator, sd, 1);

    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
    // calculate 10 further digits.
    //
    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
    // that the result is above or below the boundary. Otherwise, if after calculating the 10
    // further digits, the last 14 are nines, round up and assume the result is exact.
    // Also assume the result is exact if the last 14 are zero.
    //
    // Example of a result that will be incorrectly rounded:
    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
    // place is still 2.6.
    if (checkRoundingDigits(r.d, k = pr, rm)) {

      do {
        sd += 10;
        num = naturalLogarithm(arg, sd);
        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
        r = divide(num, denominator, sd, 1);

        if (!inf) {

          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }

          break;
        }
      } while (checkRoundingDigits(r.d, k += 10, rm));
    }

    external = true;

    return finalise(r, pr, rm);
  };


  /*
   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.max = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'lt');
  };
   */


  /*
   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
   *
   * arguments {number|string|Decimal}
   *
  P.min = function () {
    Array.prototype.push.call(arguments, this);
    return maxOrMin(this.constructor, arguments, 'gt');
  };
   */


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.minus = P.sub = function (y) {
    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return y negated if x is finite and y is ±Infinity.
      else if (x.d) y.s = -y.s;

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with different signs.
      // Return NaN if both are ±Infinity with the same sign.
      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

      return y;
    }

    // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.plus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return y negated if x is zero and y is non-zero.
      if (yd[0]) y.s = -y.s;

      // Return x if y is zero and x is non-zero.
      else if (xd[0]) y = new Ctor(x);

      // Return zero if both are zero.
      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
      else return new Ctor(rm === 3 ? -0 : 0);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    e = mathfloor(y.e / LOG_BASE);
    xe = mathfloor(x.e / LOG_BASE);

    xd = xd.slice();
    k = xe - e;

    // If base 1e7 exponents differ...
    if (k) {
      xLTy = k < 0;

      if (xLTy) {
        d = xd;
        k = -k;
        len = yd.length;
      } else {
        d = yd;
        e = xe;
        len = xd.length;
      }

      // Numbers with massively different exponents would result in a very high number of
      // zeros needing to be prepended, but this can be avoided while still ensuring correct
      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

      if (k > i) {
        k = i;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents.
      d.reverse();
      for (i = k; i--;) d.push(0);
      d.reverse();

    // Base 1e7 exponents equal.
    } else {

      // Check digits to determine which is the bigger number.

      i = xd.length;
      len = yd.length;
      xLTy = i < len;
      if (xLTy) len = i;

      for (i = 0; i < len; i++) {
        if (xd[i] != yd[i]) {
          xLTy = xd[i] < yd[i];
          break;
        }
      }

      k = 0;
    }

    if (xLTy) {
      d = xd;
      xd = yd;
      yd = d;
      y.s = -y.s;
    }

    len = xd.length;

    // Append zeros to `xd` if shorter.
    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

    // Subtract yd from xd.
    for (i = yd.length; i > k;) {

      if (xd[--i] < yd[i]) {
        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
        --xd[j];
        xd[i] += BASE;
      }

      xd[i] -= yd[i];
    }

    // Remove trailing zeros.
    for (; xd[--len] === 0;) xd.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xd[0] === 0; xd.shift()) --e;

    // Zero?
    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * The result depends on the modulo mode.
   *
   */
  P.modulo = P.mod = function (y) {
    var q,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

    // Return x if y is ±Infinity or x is ±0.
    if (!y.d || x.d && !x.d[0]) {
      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
    }

    // Prevent rounding of intermediate calculations.
    external = false;

    if (Ctor.modulo == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // result = x - q * y    where  0 <= result < abs(y)
      q = divide(x, y.abs(), 0, 3, 1);
      q.s *= y.s;
    } else {
      q = divide(x, y, 0, Ctor.modulo, 1);
    }

    q = q.times(y);

    external = true;

    return x.minus(q);
  };


  /*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.naturalExponential = P.exp = function () {
    return naturalExponential(this);
  };


  /*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   */
  P.naturalLogarithm = P.ln = function () {
    return naturalLogarithm(this);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */
  P.negated = P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return finalise(x);
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   */
  P.plus = P.add = function (y) {
    var carry, d, e, i, k, len, pr, rm, xd, yd,
      x = this,
      Ctor = x.constructor;

    y = new Ctor(y);

    // If either is not finite...
    if (!x.d || !y.d) {

      // Return NaN if either is NaN.
      if (!x.s || !y.s) y = new Ctor(NaN);

      // Return x if y is finite and x is ±Infinity.
      // Return x if both are ±Infinity with the same sign.
      // Return NaN if both are ±Infinity with different signs.
      // Return y if x is finite and y is ±Infinity.
      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

      return y;
    }

     // If signs differ...
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    xd = x.d;
    yd = y.d;
    pr = Ctor.precision;
    rm = Ctor.rounding;

    // If either is zero...
    if (!xd[0] || !yd[0]) {

      // Return x if y is zero.
      // Return y if y is non-zero.
      if (!yd[0]) y = new Ctor(x);

      return external ? finalise(y, pr, rm) : y;
    }

    // x and y are finite, non-zero numbers with the same sign.

    // Calculate base 1e7 exponents.
    k = mathfloor(x.e / LOG_BASE);
    e = mathfloor(y.e / LOG_BASE);

    xd = xd.slice();
    i = k - e;

    // If base 1e7 exponents differ...
    if (i) {

      if (i < 0) {
        d = xd;
        i = -i;
        len = yd.length;
      } else {
        d = yd;
        e = k;
        len = xd.length;
      }

      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
      k = Math.ceil(pr / LOG_BASE);
      len = k > len ? k + 1 : len + 1;

      if (i > len) {
        i = len;
        d.length = 1;
      }

      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
      d.reverse();
      for (; i--;) d.push(0);
      d.reverse();
    }

    len = xd.length;
    i = yd.length;

    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
    if (len - i < 0) {
      i = len;
      d = yd;
      yd = xd;
      xd = d;
    }

    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
    for (carry = 0; i;) {
      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
      xd[i] %= BASE;
    }

    if (carry) {
      xd.unshift(carry);
      ++e;
    }

    // Remove trailing zeros.
    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    for (len = xd.length; xd[--len] == 0;) xd.pop();

    y.d = xd;
    y.e = getBase10Exponent(xd, e);

    return external ? finalise(y, pr, rm) : y;
  };


  /*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */
  P.precision = P.sd = function (z) {
    var k,
      x = this;

    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

    if (x.d) {
      k = getPrecision(x.d);
      if (z && x.e + 1 > k) k = x.e + 1;
    } else {
      k = NaN;
    }

    return k;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */
  P.round = function () {
    var x = this,
      Ctor = x.constructor;

    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
  };


  /*
   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-1, 1]
   *
   * sin(x) = x - x^3/3! + x^5/5! - ...
   *
   * sin(0)         = 0
   * sin(-0)        = -0
   * sin(Infinity)  = NaN
   * sin(-Infinity) = NaN
   * sin(NaN)       = NaN
   *
   */
  P.sine = P.sin = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
    Ctor.rounding = 1;

    x = sine(Ctor, toLessThanHalfPi(Ctor, x));

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
  };


  /*
   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   *  sqrt(-n) =  N
   *  sqrt(N)  =  N
   *  sqrt(-I) =  N
   *  sqrt(I)  =  I
   *  sqrt(0)  =  0
   *  sqrt(-0) = -0
   *
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, sd, r, rep, t,
      x = this,
      d = x.d,
      e = x.e,
      s = x.s,
      Ctor = x.constructor;

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !d || !d[0]) {
      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
    }

    external = false;

    // Initial estimate.
    s = Math.sqrt(+x);

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = digitsToString(d);

      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(n);
      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '1e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new Ctor(n);
    } else {
      r = new Ctor(s.toString());
    }

    sd = (e = Ctor.precision) + 3;

    // Newton-Raphson iteration.
    for (;;) {
      t = r;
      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

      // TODO? Replace with for-loop and checkRoundingDigits.
      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
        n = n.slice(sd - 3, sd + 1);

        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
        // 4999, i.e. approaching a rounding boundary, continue the iteration.
        if (n == '9999' || !rep && n == '4999') {

          // On the first iteration only, check to see if rounding up gives the exact result as the
          // nines may infinitely repeat.
          if (!rep) {
            finalise(t, e + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          }

          sd += 4;
          rep = 1;
        } else {

          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
          // If not, then there are further digits and m will be truthy.
          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

            // Truncate to the first rounding digit.
            finalise(r, e + 1, 1);
            m = !r.times(r).eq(x);
          }

          break;
        }
      }
    }

    external = true;

    return finalise(r, e, Ctor.rounding, m);
  };


  /*
   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-Infinity, Infinity]
   *
   * tan(0)         = 0
   * tan(-0)        = -0
   * tan(Infinity)  = NaN
   * tan(-Infinity) = NaN
   * tan(NaN)       = NaN
   *
   */
  P.tangent = P.tan = function () {
    var pr, rm,
      x = this,
      Ctor = x.constructor;

    if (!x.isFinite()) return new Ctor(NaN);
    if (x.isZero()) return new Ctor(x);

    pr = Ctor.precision;
    rm = Ctor.rounding;
    Ctor.precision = pr + 10;
    Ctor.rounding = 1;

    x = x.sin();
    x.s = 1;
    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

    Ctor.precision = pr;
    Ctor.rounding = rm;

    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   */
  P.times = P.mul = function (y) {
    var carry, e, i, k, r, rL, t, xdL, ydL,
      x = this,
      Ctor = x.constructor,
      xd = x.d,
      yd = (y = new Ctor(y)).d;

    y.s *= x.s;

     // If either is NaN, ±Infinity or ±0...
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

        // Return NaN if either is NaN.
        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
        ? NaN

        // Return ±Infinity if either is ±Infinity.
        // Return ±0 if either is ±0.
        : !xd || !yd ? y.s / 0 : y.s * 0);
    }

    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
    xdL = xd.length;
    ydL = yd.length;

    // Ensure xd points to the longer array.
    if (xdL < ydL) {
      r = xd;
      xd = yd;
      yd = r;
      rL = xdL;
      xdL = ydL;
      ydL = rL;
    }

    // Initialise the result array with zeros.
    r = [];
    rL = xdL + ydL;
    for (i = rL; i--;) r.push(0);

    // Multiply!
    for (i = ydL; --i >= 0;) {
      carry = 0;
      for (k = xdL + i; k > i;) {
        t = r[k] + yd[i] * xd[k - i - 1] + carry;
        r[k--] = t % BASE | 0;
        carry = t / BASE | 0;
      }

      r[k] = (r[k] + carry) % BASE | 0;
    }

    // Remove trailing zeros.
    for (; !r[--rL];) r.pop();

    if (carry) ++e;
    else r.shift();

    y.d = r;
    y.e = getBase10Exponent(r, e);

    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
  };


  /*
   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toBinary = function (sd, rm) {
    return toStringBinary(this, 2, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toDecimalPlaces = P.toDP = function (dp, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);
    if (dp === void 0) return x;

    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    return finalise(x, dp + x.e + 1, rm);
  };


  /*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toExponential = function (dp, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x, true);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), dp + 1, rm);
      str = finiteToString(x, true, dp + 1);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */
  P.toFixed = function (dp, rm) {
    var str, y,
      x = this,
      Ctor = x.constructor;

    if (dp === void 0) {
      str = finiteToString(x);
    } else {
      checkInt32(dp, 0, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      y = finalise(new Ctor(x), dp + x.e + 1, rm);
      str = finiteToString(y, false, dp + y.e + 1);
    }

    // To determine whether to add the minus sign look at the value before it was rounded,
    // i.e. look at `x` rather than `y`.
    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return an array representing the value of this Decimal as a simple fraction with an integer
   * numerator and an integer denominator.
   *
   * The denominator will be a positive non-zero value less than or equal to the specified maximum
   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
   * value necessary to represent the number exactly.
   *
   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
   *
   */
  P.toFraction = function (maxD) {
    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
      x = this,
      xd = x.d,
      Ctor = x.constructor;

    if (!xd) return new Ctor(x);

    n1 = d0 = new Ctor(1);
    d1 = n0 = new Ctor(0);

    d = new Ctor(d1);
    e = d.e = getPrecision(xd) - x.e - 1;
    k = e % LOG_BASE;
    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

    if (maxD == null) {

      // d is 10**e, the minimum max-denominator needed.
      maxD = e > 0 ? d : n1;
    } else {
      n = new Ctor(maxD);
      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
    }

    external = false;
    n = new Ctor(digitsToString(xd));
    pr = Ctor.precision;
    Ctor.precision = e = xd.length * LOG_BASE * 2;

    for (;;)  {
      q = divide(n, d, 0, 1, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.cmp(maxD) == 1) break;
      d0 = d1;
      d1 = d2;
      d2 = n1;
      n1 = n0.plus(q.times(d2));
      n0 = d2;
      d2 = d;
      d = n.minus(q.times(d2));
      n = d2;
    }

    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;

    // Determine which fraction is closer to x, n0/d0 or n1/d1?
    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
        ? [n1, d1] : [n0, d0];

    Ctor.precision = pr;
    external = true;

    return r;
  };


  /*
   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toHexadecimal = P.toHex = function (sd, rm) {
    return toStringBinary(this, 16, sd, rm);
  };


  /*
   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
   *
   * The return value will always have the same sign as this Decimal, unless either this Decimal
   * or `y` is NaN, in which case the return value will be also be NaN.
   *
   * The return value is not affected by the value of `precision`.
   *
   * y {number|string|Decimal} The magnitude to round to a multiple of.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toNearest() rounding mode not an integer: {rm}'
   * 'toNearest() rounding mode out of range: {rm}'
   *
   */
  P.toNearest = function (y, rm) {
    var x = this,
      Ctor = x.constructor;

    x = new Ctor(x);

    if (y == null) {

      // If x is not finite, return x.
      if (!x.d) return x;

      y = new Ctor(1);
      rm = Ctor.rounding;
    } else {
      y = new Ctor(y);
      if (rm === void 0) {
        rm = Ctor.rounding;
      } else {
        checkInt32(rm, 0, 8);
      }

      // If x is not finite, return x if y is not NaN, else NaN.
      if (!x.d) return y.s ? x : y;

      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
      if (!y.d) {
        if (y.s) y.s = x.s;
        return y;
      }
    }

    // If y is not zero, calculate the nearest multiple of y to x.
    if (y.d[0]) {
      external = false;
      x = divide(x, y, 0, rm, 1).times(y);
      external = true;
      finalise(x);

    // If y is zero, return zero with the sign of x.
    } else {
      y.s = x.s;
      x = y;
    }

    return x;
  };


  /*
   * Return the value of this Decimal converted to a number primitive.
   * Zero keeps its sign.
   *
   */
  P.toNumber = function () {
    return +this;
  };


  /*
   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
   * digits using rounding mode `rm`.
   *
   * If the optional `sd` argument is present then return binary exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toOctal = function (sd, rm) {
    return toStringBinary(this, 8, sd, rm);
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
   * to `precision` significant digits using rounding mode `rounding`.
   *
   * ECMAScript compliant.
   *
   *   pow(x, NaN)                           = NaN
   *   pow(x, ±0)                            = 1

   *   pow(NaN, non-zero)                    = NaN
   *   pow(abs(x) > 1, +Infinity)            = +Infinity
   *   pow(abs(x) > 1, -Infinity)            = +0
   *   pow(abs(x) == 1, ±Infinity)           = NaN
   *   pow(abs(x) < 1, +Infinity)            = +0
   *   pow(abs(x) < 1, -Infinity)            = +Infinity
   *   pow(+Infinity, y > 0)                 = +Infinity
   *   pow(+Infinity, y < 0)                 = +0
   *   pow(-Infinity, odd integer > 0)       = -Infinity
   *   pow(-Infinity, even integer > 0)      = +Infinity
   *   pow(-Infinity, odd integer < 0)       = -0
   *   pow(-Infinity, even integer < 0)      = +0
   *   pow(+0, y > 0)                        = +0
   *   pow(+0, y < 0)                        = +Infinity
   *   pow(-0, odd integer > 0)              = -0
   *   pow(-0, even integer > 0)             = +0
   *   pow(-0, odd integer < 0)              = -Infinity
   *   pow(-0, even integer < 0)             = +Infinity
   *   pow(finite x < 0, finite non-integer) = NaN
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
   * probability of an incorrectly rounded result
   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
   * i.e. 1 in 250,000,000,000,000
   *
   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */
  P.toPower = P.pow = function (y) {
    var e, k, pr, r, rm, s,
      x = this,
      Ctor = x.constructor,
      yn = +(y = new Ctor(y));

    // Either ±Infinity, NaN or ±0?
    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

    x = new Ctor(x);

    if (x.eq(1)) return x;

    pr = Ctor.precision;
    rm = Ctor.rounding;

    if (y.eq(1)) return finalise(x, pr, rm);

    // y exponent
    e = mathfloor(y.e / LOG_BASE);

    // If y is a small integer use the 'exponentiation by squaring' algorithm.
    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
      r = intPow(Ctor, x, k, pr);
      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
    }

    s = x.s;

    // if x is negative
    if (s < 0) {

      // if y is not an integer
      if (e < y.d.length - 1) return new Ctor(NaN);

      // Result is positive if x is negative and the last digit of integer y is even.
      if ((y.d[e] & 1) == 0) s = 1;

      // if x.eq(-1)
      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
        x.s = s;
        return x;
      }
    }

    // Estimate result exponent.
    // x^y = 10^e,  where e = y * log10(x)
    // log10(x) = log10(x_significand) + x_exponent
    // log10(x_significand) = ln(x_significand) / ln(10)
    k = mathpow(+x, yn);
    e = k == 0 || !isFinite(k)
      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
      : new Ctor(k + '').e;

    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

    // Overflow/underflow?
    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

    external = false;
    Ctor.rounding = x.s = 1;

    // Estimate the extra guard digits needed to ensure five correct rounding digits from
    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
    // new Decimal(2.32456).pow('2087987436534566.46411')
    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
    k = Math.min(12, (e + '').length);

    // r = x^y = exp(y*ln(x))
    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
    if (r.d) {

      // Truncate to the required precision plus five rounding digits.
      r = finalise(r, pr + 5, 1);

      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
      // the result.
      if (checkRoundingDigits(r.d, pr, rm)) {
        e = pr + 10;

        // Truncate to the increased precision plus five rounding digits.
        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }
      }
    }

    r.s = s;
    external = true;
    Ctor.rounding = rm;

    return finalise(r, pr, rm);
  };


  /*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */
  P.toPrecision = function (sd, rm) {
    var str,
      x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);

      x = finalise(new Ctor(x), sd, rm);
      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
    }

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * 'toSD() digits out of range: {sd}'
   * 'toSD() digits not an integer: {sd}'
   * 'toSD() rounding mode not an integer: {rm}'
   * 'toSD() rounding mode out of range: {rm}'
   *
   */
  P.toSignificantDigits = P.toSD = function (sd, rm) {
    var x = this,
      Ctor = x.constructor;

    if (sd === void 0) {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    } else {
      checkInt32(sd, 1, MAX_DIGITS);

      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    }

    return finalise(new Ctor(x), sd, rm);
  };


  /*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */
  P.toString = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() && !x.isZero() ? '-' + str : str;
  };


  /*
   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
   *
   */
  P.truncated = P.trunc = function () {
    return finalise(new this.constructor(this), this.e + 1, 1);
  };


  /*
   * Return a string representing the value of this Decimal.
   * Unlike `toString`, negative zero will include the minus sign.
   *
   */
  P.valueOf = P.toJSON = function () {
    var x = this,
      Ctor = x.constructor,
      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

    return x.isNeg() ? '-' + str : str;
  };


  /*
  // Add aliases to match BigDecimal method names.
  // P.add = P.plus;
  P.subtract = P.minus;
  P.multiply = P.times;
  P.divide = P.div;
  P.remainder = P.mod;
  P.compareTo = P.cmp;
  P.negate = P.neg;
   */


  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


  /*
   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
   *                           finiteToString, naturalExponential, naturalLogarithm
   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
   *  convertBase              toStringBinary, parseOther
   *  cos                      P.cos
   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
   *                           taylorSeries, atan2, parseOther
   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
   *                           naturalLogarithm, ceil, floor, round, trunc
   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
   *                           toStringBinary
   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
   *  getLn10                  P.logarithm, naturalLogarithm
   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
   *  getPrecision             P.precision, P.toFraction
   *  getZeroString            digitsToString, finiteToString
   *  intPow                   P.toPower, parseOther
   *  isOdd                    toLessThanHalfPi
   *  maxOrMin                 max, min
   *  naturalExponential       P.naturalExponential, P.toPower
   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
   *                           P.toPower, naturalExponential
   *  nonFiniteToString        finiteToString, toStringBinary
   *  parseDecimal             Decimal
   *  parseOther               Decimal
   *  sin                      P.sin
   *  taylorSeries             P.cosh, P.sinh, cos, sin
   *  toLessThanHalfPi         P.cos, P.sin
   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
   *  truncate                 intPow
   *
   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
   *                           naturalLogarithm, config, parseOther, random, Decimal
   */


  function digitsToString(d) {
    var i, k, ws,
      indexOfLastWord = d.length - 1,
      str = '',
      w = d[0];

    if (indexOfLastWord > 0) {
      str += w;
      for (i = 1; i < indexOfLastWord; i++) {
        ws = d[i] + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
        str += ws;
      }

      w = d[i];
      ws = w + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
    } else if (w === 0) {
      return '0';
    }

    // Remove trailing zeros of last w.
    for (; w % 10 === 0;) w /= 10;

    return str + w;
  }


  function checkInt32(i, min, max) {
    if (i !== ~~i || i < min || i > max) {
      throw Error(invalidArgument + i);
    }
  }


  /*
   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
   * `repeating == null` if caller is `log` or `pow`,
   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
   */
  function checkRoundingDigits(d, i, rm, repeating) {
    var di, k, r, rd;

    // Get the length of the first word of the array d.
    for (k = d[0]; k >= 10; k /= 10) --i;

    // Is the rounding digit in the first word of d?
    if (--i < 0) {
      i += LOG_BASE;
      di = 0;
    } else {
      di = Math.ceil((i + 1) / LOG_BASE);
      i %= LOG_BASE;
    }

    // i is the index (0 - 6) of the rounding digit.
    // E.g. if within the word 3487563 the first rounding digit is 5,
    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
    k = mathpow(10, LOG_BASE - i);
    rd = d[di] % k | 0;

    if (repeating == null) {
      if (i < 3) {
        if (i == 0) rd = rd / 100 | 0;
        else if (i == 1) rd = rd / 10 | 0;
        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
      } else {
        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
      }
    } else {
      if (i < 4) {
        if (i == 0) rd = rd / 1000 | 0;
        else if (i == 1) rd = rd / 100 | 0;
        else if (i == 2) rd = rd / 10 | 0;
        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
      } else {
        r = ((repeating || rm < 4) && rd + 1 == k ||
        (!repeating && rm > 3) && rd + 1 == k / 2) &&
          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
      }
    }

    return r;
  }


  // Convert string of `baseIn` to an array of numbers of `baseOut`.
  // Eg. convertBase('255', 10, 16) returns [15, 15].
  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
  function convertBase(str, baseIn, baseOut) {
    var j,
      arr = [0],
      arrL,
      i = 0,
      strL = str.length;

    for (; i < strL;) {
      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
      arr[0] += NUMERALS.indexOf(str.charAt(i++));
      for (j = 0; j < arr.length; j++) {
        if (arr[j] > baseOut - 1) {
          if (arr[j + 1] === void 0) arr[j + 1] = 0;
          arr[j + 1] += arr[j] / baseOut | 0;
          arr[j] %= baseOut;
        }
      }
    }

    return arr.reverse();
  }


  /*
   * cos(x) = 1 - x^2/2! + x^4/4! - ...
   * |x| < pi/2
   *
   */
  function cosine(Ctor, x) {
    var k, y,
      len = x.d.length;

    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

    // Estimate the optimum number of times to use the argument reduction.
    if (len < 32) {
      k = Math.ceil(len / 3);
      y = (1 / tinyPow(4, k)).toString();
    } else {
      k = 16;
      y = '2.3283064365386962890625e-10';
    }

    Ctor.precision += k;

    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

    // Reverse argument reduction
    for (var i = k; i--;) {
      var cos2x = x.times(x);
      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
    }

    Ctor.precision -= k;

    return x;
  }


  /*
   * Perform division in the specified base.
   */
  var divide = (function () {

    // Assumes non-zero x and k, and hence non-zero result.
    function multiplyInteger(x, k, base) {
      var temp,
        carry = 0,
        i = x.length;

      for (x = x.slice(); i--;) {
        temp = x[i] * k + carry;
        x[i] = temp % base | 0;
        carry = temp / base | 0;
      }

      if (carry) x.unshift(carry);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, r;

      if (aL != bL) {
        r = aL > bL ? 1 : -1;
      } else {
        for (i = r = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            r = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return r;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1;) a.shift();
    }

    return function (x, y, pr, rm, dp, base) {
      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
        yL, yz,
        Ctor = x.constructor,
        sign = x.s == y.s ? 1 : -1,
        xd = x.d,
        yd = y.d;

      // Either NaN, Infinity or 0?
      if (!xd || !xd[0] || !yd || !yd[0]) {

        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
      }

      if (base) {
        logBase = 1;
        e = x.e - y.e;
      } else {
        base = BASE;
        logBase = LOG_BASE;
        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
      }

      yL = yd.length;
      xL = xd.length;
      q = new Ctor(sign);
      qd = q.d = [];

      // Result exponent may be one less than e.
      // The digit array of a Decimal from toStringBinary may have trailing zeros.
      for (i = 0; yd[i] == (xd[i] || 0); i++);

      if (yd[i] > (xd[i] || 0)) e--;

      if (pr == null) {
        sd = pr = Ctor.precision;
        rm = Ctor.rounding;
      } else if (dp) {
        sd = pr + (x.e - y.e) + 1;
      } else {
        sd = pr;
      }

      if (sd < 0) {
        qd.push(1);
        more = true;
      } else {

        // Convert precision in number of base 10 digits to base 1e7 digits.
        sd = sd / logBase + 2 | 0;
        i = 0;

        // divisor < 1e7
        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++;

          // k is the carry.
          for (; (i < xL || k) && sd--; i++) {
            t = k * base + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          }

          more = k || i < xL;

        // divisor >= 1e7
        } else {

          // Normalise xd and yd so highest order digit of yd is >= base/2
          k = base / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k, base);
            xd = multiplyInteger(xd, k, base);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length;

          // Add zeros to make remainder as long as divisor.
          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];

          if (yd[1] >= base / 2) ++yd0;

          do {
            k = 0;

            // Compare divisor and remainder.
            cmp = compare(yd, rem, yL, remL);

            // If divisor < remainder.
            if (cmp < 0) {

              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

              // k will be how many times the divisor goes into the current remainder.
              k = rem0 / yd0 | 0;

              //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= base) k = base - 1;

                // product = divisor * trial digit.
                prod = multiplyInteger(yd, k, base);
                prodL = prod.length;
                remL = rem.length;

                // Compare product and remainder.
                cmp = compare(prod, rem, prodL, remL);

                // product > remainder.
                if (cmp == 1) {
                  k--;

                  // Subtract divisor from product.
                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
                }
              } else {

                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0);

              // Subtract product from remainder.
              subtract(rem, prod, remL, base);

              // If product was < previous remainder.
              if (cmp == -1) {
                remL = rem.length;

                // Compare divisor and new remainder.
                cmp = compare(yd, rem, yL, remL);

                // If divisor < new remainder, subtract divisor from remainder.
                if (cmp < 1) {
                  k++;

                  // Subtract divisor from remainder.
                  subtract(rem, yL < remL ? yz : yd, remL, base);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            }    // if cmp === 1, k will be 0

            // Add the next digit, k, to the result array.
            qd[i++] = k;

            // Update the remainder.
            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }

          } while ((xi++ < xL || rem[0] !== void 0) && sd--);

          more = rem[0] !== void 0;
        }

        // Leading zero?
        if (!qd[0]) qd.shift();
      }

      // logBase is 1 when divide is being used for base conversion.
      if (logBase == 1) {
        q.e = e;
        inexact = more;
      } else {

        // To calculate q.e, first get the number of digits of qd[0].
        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
        q.e = i + e * logBase - 1;

        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
      }

      return q;
    };
  })();


  /*
   * Round `x` to `sd` significant digits using rounding mode `rm`.
   * Check for over/under-flow.
   */
   function finalise(x, sd, rm, isTruncated) {
    var digits, i, j, k, rd, roundUp, w, xd, xdi,
      Ctor = x.constructor;

    // Don't round if sd is null or undefined.
    out: if (sd != null) {
      xd = x.d;

      // Infinity/NaN.
      if (!xd) return x;

      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd containing rd, a base 1e7 number.
      // xdi: the index of w within xd.
      // digits: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

      // Get the length of the first word of the digits array xd.
      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
      i = sd - digits;

      // Is the rounding digit in the first word of xd?
      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];

        // Get the rounding digit at index j of w.
        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) {
          if (isTruncated) {

            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
            for (; k++ <= xdi;) xd.push(0);
            w = rd = 0;
            digits = 1;
            i %= LOG_BASE;
            j = i - LOG_BASE + 1;
          } else {
            break out;
          }
        } else {
          w = k = xd[xdi];

          // Get the number of digits of w.
          for (digits = 1; k >= 10; k /= 10) digits++;

          // Get the index of rd within w.
          i %= LOG_BASE;

          // Get the index of rd within w, adjusted for leading zeros.
          // The number of leading zeros of w is given by LOG_BASE - digits.
          j = i - LOG_BASE + digits;

          // Get the rounding digit at index j of w.
          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
        }
      }

      // Are there any non-zero digits after the rounding digit?
      isTruncated = isTruncated || sd < 0 ||
        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
      // will give 714.

      roundUp = rm < 4
        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
            rm == (x.s < 0 ? 8 : 7));

      if (sd < 1 || !xd[0]) {
        xd.length = 0;
        if (roundUp) {

          // Convert sd to decimal places.
          sd -= x.e + 1;

          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = -sd || 0;
        } else {

          // Zero.
          xd[0] = x.e = 0;
        }

        return x;
      }

      // Remove excess digits.
      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i);

        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.
        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (roundUp) {
        for (;;) {

          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {

            // i will be the length of xd[0] before k is added.
            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
            j = xd[0] += k;
            for (k = 1; j >= 10; j /= 10) k++;

            // if i != k the length has increased.
            if (i != k) {
              x.e++;
              if (xd[0] == BASE) xd[0] = 1;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      }

      // Remove trailing zeros.
      for (i = xd.length; xd[--i] === 0;) xd.pop();
    }

    if (external) {

      // Overflow?
      if (x.e > Ctor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < Ctor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // Ctor.underflow = true;
      } // else Ctor.underflow = false;
    }

    return x;
  }


  function finiteToString(x, isExp, sd) {
    if (!x.isFinite()) return nonFiniteToString(x);
    var k,
      e = x.e,
      str = digitsToString(x.d),
      len = str.length;

    if (isExp) {
      if (sd && (k = sd - len) > 0) {
        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
      } else if (len > 1) {
        str = str.charAt(0) + '.' + str.slice(1);
      }

      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
    } else if (e < 0) {
      str = '0.' + getZeroString(-e - 1) + str;
      if (sd && (k = sd - len) > 0) str += getZeroString(k);
    } else if (e >= len) {
      str += getZeroString(e + 1 - len);
      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
    } else {
      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
      if (sd && (k = sd - len) > 0) {
        if (e + 1 === len) str += '.';
        str += getZeroString(k);
      }
    }

    return str;
  }


  // Calculate the base 10 exponent from the base 1e7 exponent.
  function getBase10Exponent(digits, e) {
    var w = digits[0];

    // Add the number of digits of the first word of the digits array.
    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
    return e;
  }


  function getLn10(Ctor, sd, pr) {
    if (sd > LN10_PRECISION) {

      // Reset global state in case the exception is caught.
      external = true;
      if (pr) Ctor.precision = pr;
      throw Error(precisionLimitExceeded);
    }
    return finalise(new Ctor(LN10), sd, 1, true);
  }


  function getPi(Ctor, sd, rm) {
    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
    return finalise(new Ctor(PI), sd, rm, true);
  }


  function getPrecision(digits) {
    var w = digits.length - 1,
      len = w * LOG_BASE + 1;

    w = digits[w];

    // If non-zero...
    if (w) {

      // Subtract the number of trailing zeros of the last word.
      for (; w % 10 == 0; w /= 10) len--;

      // Add the number of digits of the first word.
      for (w = digits[0]; w >= 10; w /= 10) len++;
    }

    return len;
  }


  function getZeroString(k) {
    var zs = '';
    for (; k--;) zs += '0';
    return zs;
  }


  /*
   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
   * integer of type number.
   *
   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
   *
   */
  function intPow(Ctor, x, n, pr) {
    var isTruncated,
      r = new Ctor(1),

      // Max n of 9007199254740991 takes 53 loop iterations.
      // Maximum digits array length; leaves [28, 34] guard digits.
      k = Math.ceil(pr / LOG_BASE + 4);

    external = false;

    for (;;) {
      if (n % 2) {
        r = r.times(x);
        if (truncate(r.d, k)) isTruncated = true;
      }

      n = mathfloor(n / 2);
      if (n === 0) {

        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
        n = r.d.length - 1;
        if (isTruncated && r.d[n] === 0) ++r.d[n];
        break;
      }

      x = x.times(x);
      truncate(x.d, k);
    }

    external = true;

    return r;
  }


  function isOdd(n) {
    return n.d[n.d.length - 1] & 1;
  }


  /*
   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
   */
  function maxOrMin(Ctor, args, ltgt) {
    var y,
      x = new Ctor(args[0]),
      i = 0;

    for (; ++i < args.length;) {
      y = new Ctor(args[i]);
      if (!y.s) {
        x = y;
        break;
      } else if (x[ltgt](y)) {
        x = y;
      }
    }

    return x;
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
   * digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(Infinity)  = Infinity
   *  exp(-Infinity) = 0
   *  exp(NaN)       = NaN
   *  exp(±0)        = 1
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   *  The result will always be correctly rounded.
   *
   */
  function naturalExponential(x, sd) {
    var denominator, guard, j, pow, sum, t, wpr,
      rep = 0,
      i = 0,
      k = 0,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // 0/NaN/Infinity?
    if (!x.d || !x.d[0] || x.e > 17) {

      return new Ctor(x.d
        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    t = new Ctor(0.03125);

    // while abs(x) >= 0.1
    while (x.e > -2) {

      // x = x / 2^5
      x = x.times(t);
      k += 5;
    }

    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
    // necessary to ensure the first 4 rounding digits are correct.
    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
    wpr += guard;
    denominator = pow = sum = new Ctor(1);
    Ctor.precision = wpr;

    for (;;) {
      pow = finalise(pow.times(x), wpr, 1);
      denominator = denominator.times(++i);
      t = sum.plus(divide(pow, denominator, wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        j = k;
        while (j--) sum = finalise(sum.times(sum), wpr, 1);

        // Check to see if the first 4 rounding digits are [49]999.
        // If so, repeat the summation with a higher precision, otherwise
        // e.g. with precision: 18, rounding: 1
        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {

          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += 10;
            denominator = pow = t = new Ctor(1);
            i = 0;
            rep++;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
    }
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
   * digits.
   *
   *  ln(-n)        = NaN
   *  ln(0)         = -Infinity
   *  ln(-0)        = -Infinity
   *  ln(1)         = 0
   *  ln(Infinity)  = Infinity
   *  ln(-Infinity) = NaN
   *  ln(NaN)       = NaN
   *
   *  ln(n) (n != 1) is non-terminating.
   *
   */
  function naturalLogarithm(y, sd) {
    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
      n = 1,
      guard = 10,
      x = y,
      xd = x.d,
      Ctor = x.constructor,
      rm = Ctor.rounding,
      pr = Ctor.precision;

    // Is x negative or Infinity, NaN, 0 or 1?
    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
    }

    if (sd == null) {
      external = false;
      wpr = pr;
    } else {
      wpr = sd;
    }

    Ctor.precision = wpr += guard;
    c = digitsToString(xd);
    c0 = c.charAt(0);

    if (Math.abs(e = x.e) < 1.5e15) {

      // Argument reduction.
      // The series converges faster the closer the argument is to 1, so using
      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
      // later be divided by this number, then separate out the power of 10 using
      // ln(a*10^b) = ln(a) + b*ln(10).

      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
      // max n is 6 (gives 0.7 - 1.3)
      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
        x = x.times(y);
        c = digitsToString(x.d);
        c0 = c.charAt(0);
        n++;
      }

      e = x.e;

      if (c0 > 1) {
        x = new Ctor('0.' + c);
        e++;
      } else {
        x = new Ctor(c0 + '.' + c.slice(1));
      }
    } else {

      // The argument reduction method above may result in overflow if the argument y is a massive
      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
      // function using ln(x*10^e) = ln(x) + e*ln(10).
      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
      Ctor.precision = pr;

      return sd == null ? finalise(x, pr, rm, external = true) : x;
    }

    // x1 is x reduced to a value near 1.
    x1 = x;

    // Taylor series.
    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
    // where x = (y - 1)/(y + 1)    (|x| < 1)
    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
    x2 = finalise(x.times(x), wpr, 1);
    denominator = 3;

    for (;;) {
      numerator = finalise(numerator.times(x2), wpr, 1);
      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
        sum = sum.times(2);

        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
        sum = divide(sum, new Ctor(n), wpr, 1);

        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
        // been repeated previously) and the first 4 rounding digits 9999?
        // If so, restart the summation with a higher precision, otherwise
        // e.g. with precision: 12, rounding: 1
        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
        // `wpr - guard` is the index of first rounding digit.
        if (sd == null) {
          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
            Ctor.precision = wpr += guard;
            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
            x2 = finalise(x.times(x), wpr, 1);
            denominator = rep = 1;
          } else {
            return finalise(sum, Ctor.precision = pr, rm, external = true);
          }
        } else {
          Ctor.precision = pr;
          return sum;
        }
      }

      sum = t;
      denominator += 2;
    }
  }


  // ±Infinity, NaN.
  function nonFiniteToString(x) {
    // Unsigned.
    return String(x.s * x.s / 0);
  }


  /*
   * Parse the value of a new Decimal `x` from string `str`.
   */
  function parseDecimal(x, str) {
    var e, i, len;

    // Decimal point?
    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

    // Exponential form?
    if ((i = str.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +str.slice(i + 1);
      str = str.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
    str = str.slice(i, len);

    if (str) {
      len -= i;
      x.e = e = e - i - 1;
      x.d = [];

      // Transform base

      // e is the base 10 exponent.
      // i is where to slice str to get the first word of the digits array.
      i = (e + 1) % LOG_BASE;
      if (e < 0) i += LOG_BASE;

      if (i < len) {
        if (i) x.d.push(+str.slice(0, i));
        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
        str = str.slice(i);
        i = LOG_BASE - str.length;
      } else {
        i -= len;
      }

      for (; i--;) str += '0';
      x.d.push(+str);

      if (external) {

        // Overflow?
        if (x.e > x.constructor.maxE) {

          // Infinity.
          x.d = null;
          x.e = NaN;

        // Underflow?
        } else if (x.e < x.constructor.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
          // x.constructor.underflow = true;
        } // else x.constructor.underflow = false;
      }
    } else {

      // Zero.
      x.e = 0;
      x.d = [0];
    }

    return x;
  }


  /*
   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
   */
  function parseOther(x, str) {
    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

    if (str === 'Infinity' || str === 'NaN') {
      if (!+str) x.s = NaN;
      x.e = NaN;
      x.d = null;
      return x;
    }

    if (isHex.test(str))  {
      base = 16;
      str = str.toLowerCase();
    } else if (isBinary.test(str))  {
      base = 2;
    } else if (isOctal.test(str))  {
      base = 8;
    } else {
      throw Error(invalidArgument + str);
    }

    // Is there a binary exponent part?
    i = str.search(/p/i);

    if (i > 0) {
      p = +str.slice(i + 1);
      str = str.substring(2, i);
    } else {
      str = str.slice(2);
    }

    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
    // fraction part will be restored.
    i = str.indexOf('.');
    isFloat = i >= 0;
    Ctor = x.constructor;

    if (isFloat) {
      str = str.replace('.', '');
      len = str.length;
      i = len - i;

      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
    }

    xd = convertBase(str, base, BASE);
    xe = xd.length - 1;

    // Remove trailing zeros.
    for (i = xe; xd[i] === 0; --i) xd.pop();
    if (i < 0) return new Ctor(x.s * 0);
    x.e = getBase10Exponent(xd, xe);
    x.d = xd;
    external = false;

    // At what precision to perform the division to ensure exact conversion?
    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
    // Therefore using 4 * the number of digits of str will always be enough.
    if (isFloat) x = divide(x, divisor, len * 4);

    // Multiply by the binary exponent part if present.
    if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
    external = true;

    return x;
  }


  /*
   * sin(x) = x - x^3/3! + x^5/5! - ...
   * |x| < pi/2
   *
   */
  function sine(Ctor, x) {
    var k,
      len = x.d.length;

    if (len < 3) return taylorSeries(Ctor, 2, x, x);

    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x);

    // Reverse argument reduction
    var sin2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sin2_x = x.times(x);
      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
    }

    return x;
  }


  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
    var j, t, u, x2,
      i = 1,
      pr = Ctor.precision,
      k = Math.ceil(pr / LOG_BASE);

    external = false;
    x2 = x.times(x);
    u = new Ctor(y);

    for (;;) {
      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
      u = isHyperbolic ? y.plus(t) : y.minus(t);
      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
      t = u.plus(y);

      if (t.d[k] !== void 0) {
        for (j = k; t.d[j] === u.d[j] && j--;);
        if (j == -1) break;
      }

      j = u;
      u = y;
      y = t;
      t = j;
      i++;
    }

    external = true;
    t.d.length = k + 1;

    return t;
  }


  // Exponent e must be positive and non-zero.
  function tinyPow(b, e) {
    var n = b;
    while (--e) n *= b;
    return n;
  }


  // Return the absolute value of `x` reduced to less than or equal to half pi.
  function toLessThanHalfPi(Ctor, x) {
    var t,
      isNeg = x.s < 0,
      pi = getPi(Ctor, Ctor.precision, 1),
      halfPi = pi.times(0.5);

    x = x.abs();

    if (x.lte(halfPi)) {
      quadrant = isNeg ? 4 : 1;
      return x;
    }

    t = x.divToInt(pi);

    if (t.isZero()) {
      quadrant = isNeg ? 3 : 2;
    } else {
      x = x.minus(t.times(pi));

      // 0 <= x < pi
      if (x.lte(halfPi)) {
        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
        return x;
      }

      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
    }

    return x.minus(pi).abs();
  }


  /*
   * Return the value of Decimal `x` as a string in base `baseOut`.
   *
   * If the optional `sd` argument is present include a binary exponent suffix.
   */
  function toStringBinary(x, baseOut, sd, rm) {
    var base, e, i, k, len, roundUp, str, xd, y,
      Ctor = x.constructor,
      isExp = sd !== void 0;

    if (isExp) {
      checkInt32(sd, 1, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;
      else checkInt32(rm, 0, 8);
    } else {
      sd = Ctor.precision;
      rm = Ctor.rounding;
    }

    if (!x.isFinite()) {
      str = nonFiniteToString(x);
    } else {
      str = finiteToString(x);
      i = str.indexOf('.');

      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
      // minBinaryExponent = floor(decimalExponent * log[2](10))
      // log[2](10) = 3.321928094887362347870319429489390175864

      if (isExp) {
        base = 2;
        if (baseOut == 16) {
          sd = sd * 4 - 3;
        } else if (baseOut == 8) {
          sd = sd * 3 - 2;
        }
      } else {
        base = baseOut;
      }

      // Convert the number as an integer then divide the result by its base raised to a power such
      // that the fraction part will be restored.

      // Non-integer.
      if (i >= 0) {
        str = str.replace('.', '');
        y = new Ctor(1);
        y.e = str.length - i;
        y.d = convertBase(finiteToString(y), 10, base);
        y.e = y.d.length;
      }

      xd = convertBase(str, 10, base);
      e = len = xd.length;

      // Remove trailing zeros.
      for (; xd[--len] == 0;) xd.pop();

      if (!xd[0]) {
        str = isExp ? '0p+0' : '0';
      } else {
        if (i < 0) {
          e--;
        } else {
          x = new Ctor(x);
          x.d = xd;
          x.e = e;
          x = divide(x, y, sd, rm, 0, base);
          xd = x.d;
          e = x.e;
          roundUp = inexact;
        }

        // The rounding digit, i.e. the digit after the digit that may be rounded up.
        i = xd[sd];
        k = base / 2;
        roundUp = roundUp || xd[sd + 1] !== void 0;

        roundUp = rm < 4
          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
            rm === (x.s < 0 ? 8 : 7));

        xd.length = sd;

        if (roundUp) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (; ++xd[--sd] > base - 1;) {
            xd[sd] = 0;
            if (!sd) {
              ++e;
              xd.unshift(1);
            }
          }
        }

        // Determine trailing zeros.
        for (len = xd.length; !xd[len - 1]; --len);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

        // Add binary exponent suffix?
        if (isExp) {
          if (len > 1) {
            if (baseOut == 16 || baseOut == 8) {
              i = baseOut == 16 ? 4 : 3;
              for (--len; len % i; len++) str += '0';
              xd = convertBase(str, base, baseOut);
              for (len = xd.length; !xd[len - 1]; --len);

              // xd[0] will always be be 1
              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
            } else {
              str = str.charAt(0) + '.' + str.slice(1);
            }
          }

          str =  str + (e < 0 ? 'p' : 'p+') + e;
        } else if (e < 0) {
          for (; ++e;) str = '0' + str;
          str = '0.' + str;
        } else {
          if (++e > len) for (e -= len; e-- ;) str += '0';
          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
    }

    return x.s < 0 ? '-' + str : str;
  }


  // Does not strip trailing zeros.
  function truncate(arr, len) {
    if (arr.length > len) {
      arr.length = len;
      return true;
    }
  }


  // Decimal methods


  /*
   *  abs
   *  acos
   *  acosh
   *  add
   *  asin
   *  asinh
   *  atan
   *  atanh
   *  atan2
   *  cbrt
   *  ceil
   *  clone
   *  config
   *  cos
   *  cosh
   *  div
   *  exp
   *  floor
   *  hypot
   *  ln
   *  log
   *  log2
   *  log10
   *  max
   *  min
   *  mod
   *  mul
   *  pow
   *  random
   *  round
   *  set
   *  sign
   *  sin
   *  sinh
   *  sqrt
   *  sub
   *  tan
   *  tanh
   *  trunc
   */


  /*
   * Return a new Decimal whose value is the absolute value of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function abs(x) {
    return new this(x).abs();
  }


  /*
   * Return a new Decimal whose value is the arccosine in radians of `x`.
   *
   * x {number|string|Decimal}
   *
   */
  function acos(x) {
    return new this(x).acos();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function acosh(x) {
    return new this(x).acosh();
  }


  /*
   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function add(x, y) {
    return new this(x).plus(y);
  }


  /*
   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function asin(x) {
    return new this(x).asin();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function asinh(x) {
    return new this(x).asinh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function atan(x) {
    return new this(x).atan();
  }


  /*
   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
   * `precision` significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function atanh(x) {
    return new this(x).atanh();
  }


  /*
   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * Domain: [-Infinity, Infinity]
   * Range: [-pi, pi]
   *
   * y {number|string|Decimal} The y-coordinate.
   * x {number|string|Decimal} The x-coordinate.
   *
   * atan2(±0, -0)               = ±pi
   * atan2(±0, +0)               = ±0
   * atan2(±0, -x)               = ±pi for x > 0
   * atan2(±0, x)                = ±0 for x > 0
   * atan2(-y, ±0)               = -pi/2 for y > 0
   * atan2(y, ±0)                = pi/2 for y > 0
   * atan2(±y, -Infinity)        = ±pi for finite y > 0
   * atan2(±y, +Infinity)        = ±0 for finite y > 0
   * atan2(±Infinity, x)         = ±pi/2 for finite x
   * atan2(±Infinity, -Infinity) = ±3*pi/4
   * atan2(±Infinity, +Infinity) = ±pi/4
   * atan2(NaN, x) = NaN
   * atan2(y, NaN) = NaN
   *
   */
  function atan2(y, x) {
    y = new this(y);
    x = new this(x);
    var r,
      pr = this.precision,
      rm = this.rounding,
      wpr = pr + 4;

    // Either NaN
    if (!y.s || !x.s) {
      r = new this(NaN);

    // Both ±Infinity
    } else if (!y.d && !x.d) {
      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
      r.s = y.s;

    // x is ±Infinity or y is ±0
    } else if (!x.d || y.isZero()) {
      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
      r.s = y.s;

    // y is ±Infinity or x is ±0
    } else if (!y.d || x.isZero()) {
      r = getPi(this, wpr, 1).times(0.5);
      r.s = y.s;

    // Both non-zero and finite
    } else if (x.s < 0) {
      this.precision = wpr;
      this.rounding = 1;
      r = this.atan(divide(y, x, wpr, 1));
      x = getPi(this, wpr, 1);
      this.precision = pr;
      this.rounding = rm;
      r = y.s < 0 ? r.minus(x) : r.plus(x);
    } else {
      r = this.atan(divide(y, x, wpr, 1));
    }

    return r;
  }


  /*
   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function cbrt(x) {
    return new this(x).cbrt();
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
   *
   * x {number|string|Decimal}
   *
   */
  function ceil(x) {
    return finalise(x = new this(x), x.e + 1, 2);
  }


  /*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *   maxE       {number}
   *   minE       {number}
   *   modulo     {number}
   *   crypto     {boolean|number}
   *   defaults   {true}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */
  function config(obj) {
    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
    var i, p, v,
      useDefaults = obj.defaults === true,
      ps = [
        'precision', 1, MAX_DIGITS,
        'rounding', 0, 8,
        'toExpNeg', -EXP_LIMIT, 0,
        'toExpPos', 0, EXP_LIMIT,
        'maxE', 0, EXP_LIMIT,
        'minE', -EXP_LIMIT, 0,
        'modulo', 0, 9
      ];

    for (i = 0; i < ps.length; i += 3) {
      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
        else throw Error(invalidArgument + p + ': ' + v);
      }
    }

    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (v === true || v === false || v === 0 || v === 1) {
        if (v) {
          if (typeof crypto != 'undefined' && crypto &&
            (crypto.getRandomValues || crypto.randomBytes)) {
            this[p] = true;
          } else {
            throw Error(cryptoUnavailable);
          }
        } else {
          this[p] = false;
        }
      } else {
        throw Error(invalidArgument + p + ': ' + v);
      }
    }

    return this;
  }


  /*
   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cos(x) {
    return new this(x).cos();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function cosh(x) {
    return new this(x).cosh();
  }


  /*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */
  function clone(obj) {
    var i, p, ps;

    /*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * v {number|string|Decimal} A numeric value.
     *
     */
    function Decimal(v) {
      var e, i, t,
        x = this;

      // Decimal called without new.
      if (!(x instanceof Decimal)) return new Decimal(v);

      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
      // which points to Object.
      x.constructor = Decimal;

      // Duplicate.
      if (v instanceof Decimal) {
        x.s = v.s;

        if (external) {
          if (!v.d || v.e > Decimal.maxE) {

            // Infinity.
            x.e = NaN;
            x.d = null;
          } else if (v.e < Decimal.minE) {

            // Zero.
            x.e = 0;
            x.d = [0];
          } else {
            x.e = v.e;
            x.d = v.d.slice();
          }
        } else {
          x.e = v.e;
          x.d = v.d ? v.d.slice() : v.d;
        }

        return;
      }

      t = typeof v;

      if (t === 'number') {
        if (v === 0) {
          x.s = 1 / v < 0 ? -1 : 1;
          x.e = 0;
          x.d = [0];
          return;
        }

        if (v < 0) {
          v = -v;
          x.s = -1;
        } else {
          x.s = 1;
        }

        // Fast path for small integers.
        if (v === ~~v && v < 1e7) {
          for (e = 0, i = v; i >= 10; i /= 10) e++;

          if (external) {
            if (e > Decimal.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (e < Decimal.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = e;
              x.d = [v];
            }
          } else {
            x.e = e;
            x.d = [v];
          }

          return;

        // Infinity, NaN.
        } else if (v * 0 !== 0) {
          if (!v) x.s = NaN;
          x.e = NaN;
          x.d = null;
          return;
        }

        return parseDecimal(x, v.toString());

      } else if (t !== 'string') {
        throw Error(invalidArgument + v);
      }

      // Minus sign?
      if ((i = v.charCodeAt(0)) === 45) {
        v = v.slice(1);
        x.s = -1;
      } else {
        // Plus sign?
        if (i === 43) v = v.slice(1);
        x.s = 1;
      }

      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
    }

    Decimal.prototype = P;

    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = Decimal.set = config;
    Decimal.clone = clone;
    Decimal.isDecimal = isDecimalInstance;

    Decimal.abs = abs;
    Decimal.acos = acos;
    Decimal.acosh = acosh;        // ES6
    Decimal.add = add;
    Decimal.asin = asin;
    Decimal.asinh = asinh;        // ES6
    Decimal.atan = atan;
    Decimal.atanh = atanh;        // ES6
    Decimal.atan2 = atan2;
    Decimal.cbrt = cbrt;          // ES6
    Decimal.ceil = ceil;
    Decimal.cos = cos;
    Decimal.cosh = cosh;          // ES6
    Decimal.div = div;
    Decimal.exp = exp;
    Decimal.floor = floor;
    Decimal.hypot = hypot;        // ES6
    Decimal.ln = ln;
    Decimal.log = log;
    Decimal.log10 = log10;        // ES6
    Decimal.log2 = log2;          // ES6
    Decimal.max = max;
    Decimal.min = min;
    Decimal.mod = mod;
    Decimal.mul = mul;
    Decimal.pow = pow;
    Decimal.random = random;
    Decimal.round = round;
    Decimal.sign = sign;          // ES6
    Decimal.sin = sin;
    Decimal.sinh = sinh;          // ES6
    Decimal.sqrt = sqrt;
    Decimal.sub = sub;
    Decimal.tan = tan;
    Decimal.tanh = tanh;          // ES6
    Decimal.trunc = trunc;        // ES6

    if (obj === void 0) obj = {};
    if (obj) {
      if (obj.defaults !== true) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }
    }

    Decimal.config(obj);

    return Decimal;
  }


  /*
   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function div(x, y) {
    return new this(x).div(y);
  }


  /*
   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The power to which to raise the base of the natural log.
   *
   */
  function exp(x) {
    return new this(x).exp();
  }


  /*
   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
   *
   * x {number|string|Decimal}
   *
   */
  function floor(x) {
    return finalise(x = new this(x), x.e + 1, 3);
  }


  /*
   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
   * rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
   *
   * arguments {number|string|Decimal}
   *
   */
  function hypot() {
    var i, n,
      t = new this(0);

    external = false;

    for (i = 0; i < arguments.length;) {
      n = new this(arguments[i++]);
      if (!n.d) {
        if (n.s) {
          external = true;
          return new this(1 / 0);
        }
        t = n;
      } else if (t.d) {
        t = t.plus(n.times(n));
      }
    }

    external = true;

    return t.sqrt();
  }


  /*
   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
   * otherwise return false.
   *
   */
  function isDecimalInstance(obj) {
    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
  }


  /*
   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function ln(x) {
    return new this(x).ln();
  }


  /*
   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
   *
   * log[y](x)
   *
   * x {number|string|Decimal} The argument of the logarithm.
   * y {number|string|Decimal} The base of the logarithm.
   *
   */
  function log(x, y) {
    return new this(x).log(y);
  }


  /*
   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log2(x) {
    return new this(x).log(2);
  }


  /*
   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function log10(x) {
    return new this(x).log(10);
  }


  /*
   * Return a new Decimal whose value is the maximum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function max() {
    return maxOrMin(this, arguments, 'lt');
  }


  /*
   * Return a new Decimal whose value is the minimum of the arguments.
   *
   * arguments {number|string|Decimal}
   *
   */
  function min() {
    return maxOrMin(this, arguments, 'gt');
  }


  /*
   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mod(x, y) {
    return new this(x).mod(y);
  }


  /*
   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function mul(x, y) {
    return new this(x).mul(y);
  }


  /*
   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} The base.
   * y {number|string|Decimal} The exponent.
   *
   */
  function pow(x, y) {
    return new this(x).pow(y);
  }


  /*
   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
   * are produced).
   *
   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
   *
   */
  function random(sd) {
    var d, e, k, n,
      i = 0,
      r = new this(1),
      rd = [];

    if (sd === void 0) sd = this.precision;
    else checkInt32(sd, 1, MAX_DIGITS);

    k = Math.ceil(sd / LOG_BASE);

    if (!this.crypto) {
      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

    // Browsers supporting crypto.getRandomValues.
    } else if (crypto.getRandomValues) {
      d = crypto.getRandomValues(new Uint32Array(k));

      for (; i < k;) {
        n = d[i];

        // 0 <= n < 4294967296
        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
        if (n >= 4.29e9) {
          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
        } else {

          // 0 <= n <= 4289999999
          // 0 <= (n % 1e7) <= 9999999
          rd[i++] = n % 1e7;
        }
      }

    // Node.js supporting crypto.randomBytes.
    } else if (crypto.randomBytes) {

      // buffer
      d = crypto.randomBytes(k *= 4);

      for (; i < k;) {

        // 0 <= n < 2147483648
        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
        if (n >= 2.14e9) {
          crypto.randomBytes(4).copy(d, i);
        } else {

          // 0 <= n <= 2139999999
          // 0 <= (n % 1e7) <= 9999999
          rd.push(n % 1e7);
          i += 4;
        }
      }

      i = k / 4;
    } else {
      throw Error(cryptoUnavailable);
    }

    k = rd[--i];
    sd %= LOG_BASE;

    // Convert trailing digits to zeros according to sd.
    if (k && sd) {
      n = mathpow(10, LOG_BASE - sd);
      rd[i] = (k / n | 0) * n;
    }

    // Remove trailing words which are zero.
    for (; rd[i] === 0; i--) rd.pop();

    // Zero?
    if (i < 0) {
      e = 0;
      rd = [0];
    } else {
      e = -1;

      // Remove leading words which are zero and adjust exponent accordingly.
      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

      // Count the digits of the first word of rd to determine leading zeros.
      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

      // Adjust the exponent for leading zeros of the first word of rd.
      if (k < LOG_BASE) e -= LOG_BASE - k;
    }

    r.e = e;
    r.d = rd;

    return r;
  }


  /*
   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
   *
   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
   *
   * x {number|string|Decimal}
   *
   */
  function round(x) {
    return finalise(x = new this(x), x.e + 1, this.rounding);
  }


  /*
   * Return
   *   1    if x > 0,
   *  -1    if x < 0,
   *   0    if x is 0,
   *  -0    if x is -0,
   *   NaN  otherwise
   *
   * x {number|string|Decimal}
   *
   */
  function sign(x) {
    x = new this(x);
    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
  }


  /*
   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sin(x) {
    return new this(x).sin();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function sinh(x) {
    return new this(x).sinh();
  }


  /*
   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   *
   */
  function sqrt(x) {
    return new this(x).sqrt();
  }


  /*
   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
   * using rounding mode `rounding`.
   *
   * x {number|string|Decimal}
   * y {number|string|Decimal}
   *
   */
  function sub(x, y) {
    return new this(x).sub(y);
  }


  /*
   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
   * digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tan(x) {
    return new this(x).tan();
  }


  /*
   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
   * significant digits using rounding mode `rounding`.
   *
   * x {number|string|Decimal} A value in radians.
   *
   */
  function tanh(x) {
    return new this(x).tanh();
  }


  /*
   * Return a new Decimal whose value is `x` truncated to an integer.
   *
   * x {number|string|Decimal}
   *
   */
  function trunc(x) {
    return finalise(x = new this(x), x.e + 1, 1);
  }


  // Create and configure initial Decimal constructor.
  Decimal = clone(DEFAULTS);

  Decimal['default'] = Decimal.Decimal = Decimal;

  // Create the internal constants from their string values.
  LN10 = new Decimal(LN10);
  PI = new Decimal(PI);


  // Export.


  // AMD.
  if (typeof define == 'function' && define.amd) {
    define(function () {
      return Decimal;
    });

  // Node and other environments that support module.exports.
  } else if (typeof module != 'undefined' && module.exports) {
    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {
      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
      P[Symbol.toStringTag] = 'Decimal';
    }

    module.exports = Decimal;

  // Browser.
  } else {
    if (!globalScope) {
      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;
    }

    noConflict = globalScope.Decimal;
    Decimal.noConflict = function () {
      globalScope.Decimal = noConflict;
      return Decimal;
    };

    globalScope.Decimal = Decimal;
  }
})(this);

},{}],"../node_modules/mathjs/src/type/bignumber/BigNumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBigNumberClass = void 0;

var _decimal = _interopRequireDefault(require("decimal.js"));

var _factory = require("../../utils/factory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = 'BigNumber';
const dependencies = ['?on', 'config'];
const createBigNumberClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  on,
  config
}) => {
  const BigNumber = _decimal.default.clone({
    precision: config.precision
  });
  /**
   * Attach type information
   */


  BigNumber.prototype.type = 'BigNumber';
  BigNumber.prototype.isBigNumber = true;
  /**
   * Get a JSON representation of a BigNumber containing
   * type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
   */

  BigNumber.prototype.toJSON = function () {
    return {
      mathjs: 'BigNumber',
      value: this.toString()
    };
  };
  /**
   * Instantiate a BigNumber from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
   * @return {BigNumber}
   */


  BigNumber.fromJSON = function (json) {
    return new BigNumber(json.value);
  };

  if (on) {
    // listen for changed in the configuration, automatically apply changed precision
    on('config', function (curr, prev) {
      if (curr.precision !== prev.precision) {
        BigNumber.config({
          precision: curr.precision
        });
      }
    });
  }

  return BigNumber;
}, {
  isClass: true
});
exports.createBigNumberClass = createBigNumberClass;
},{"decimal.js":"../node_modules/decimal.js/decimal.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/complex.js/complex.js":[function(require,module,exports) {
var define;
/**
 * @license Complex.js v2.0.11 11/02/2016
 *
 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/

/**
 *
 * This class allows the manipulation of complex numbers.
 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
 *
 * Object form
 * { re: <real>, im: <imaginary> }
 * { arg: <angle>, abs: <radius> }
 * { phi: <angle>, r: <radius> }
 *
 * Array / Vector form
 * [ real, imaginary ]
 *
 * Double form
 * 99.3 - Single double value
 *
 * String form
 * '23.1337' - Simple real number
 * '15+3i' - a simple complex number
 * '3-i' - a simple complex number
 *
 * Example:
 *
 * var c = new Complex('99.3+8i');
 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
 *
 */

(function(root) {

  'use strict';

  var cosh = function(x) {
    return (Math.exp(x) + Math.exp(-x)) * 0.5;
  };

  var sinh = function(x) {
    return (Math.exp(x) - Math.exp(-x)) * 0.5;
  };

  /**
   * Calculates cos(x) - 1 using Taylor series if x is small.
   *
   * @param {number} x
   * @returns {number} cos(x) - 1
   */

  var cosm1 = function(x) {
    var limit = Math.PI/4;
    if (x < -limit || x > limit) {
      return (Math.cos(x) - 1.0);
    }

    var xx = x * x;
    return xx *
      (-0.5 + xx *
        (1/24 + xx *
          (-1/720 + xx *
            (1/40320 + xx *
              (-1/3628800 + xx *
                (1/4790014600 + xx *
                  (-1/87178291200 + xx *
                    (1/20922789888000)
                  )
                )
              )
            )
          )
        )
      )
  };

  var hypot = function(x, y) {

    var a = Math.abs(x);
    var b = Math.abs(y);

    if (a < 3000 && b < 3000) {
      return Math.sqrt(a * a + b * b);
    }

    if (a < b) {
      a = b;
      b = x / y;
    } else {
      b = y / x;
    }
    return a * Math.sqrt(1 + b * b);
  };

  var parser_exit = function() {
    throw SyntaxError('Invalid Param');
  };

  /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  function logHypot(a, b) {

    var _a = Math.abs(a);
    var _b = Math.abs(b);

    if (a === 0) {
      return Math.log(_b);
    }

    if (b === 0) {
      return Math.log(_a);
    }

    if (_a < 3000 && _b < 3000) {
      return Math.log(a * a + b * b) * 0.5;
    }

    /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

     Math.log(a * a + b * b) / 2

     *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

     var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;

     return Math.log(a) + Math.log(1 + t * t) / 2;
     };

     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

     Math.log(a / Math.cos(Math.atan2(b, a)))

     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

     */

    return Math.log(a / Math.cos(Math.atan2(b, a)));
  }

  var parse = function(a, b) {

    var z = {'re': 0, 'im': 0};

    if (a === undefined || a === null) {
      z['re'] =
              z['im'] = 0;
    } else if (b !== undefined) {
      z['re'] = a;
      z['im'] = b;
    } else
      switch (typeof a) {

        case 'object':

          if ('im' in a && 're' in a) {
            z['re'] = a['re'];
            z['im'] = a['im'];
          } else if ('abs' in a && 'arg' in a) {
            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['abs'] * Math.cos(a['arg']);
            z['im'] = a['abs'] * Math.sin(a['arg']);
          } else if ('r' in a && 'phi' in a) {
            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
              return Complex['INFINITY'];
            }
            z['re'] = a['r'] * Math.cos(a['phi']);
            z['im'] = a['r'] * Math.sin(a['phi']);
          } else if (a.length === 2) { // Quick array check
            z['re'] = a[0];
            z['im'] = a[1];
          } else {
            parser_exit();
          }
          break;

        case 'string':

          z['im'] = /* void */
                  z['re'] = 0;

          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
          var plus = 1;
          var minus = 0;

          if (tokens === null) {
            parser_exit();
          }

          for (var i = 0; i < tokens.length; i++) {

            var c = tokens[i];

            if (c === ' ' || c === '\t' || c === '\n') {
              /* void */
            } else if (c === '+') {
              plus++;
            } else if (c === '-') {
              minus++;
            } else if (c === 'i' || c === 'I') {

              if (plus + minus === 0) {
                parser_exit();
              }

              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                i++;
              } else {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
              }
              plus = minus = 0;

            } else {

              if (plus + minus === 0 || isNaN(c)) {
                parser_exit();
              }

              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
                i++;
              } else {
                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
              }
              plus = minus = 0;
            }
          }

          // Still something on the stack
          if (plus + minus > 0) {
            parser_exit();
          }
          break;

        case 'number':
          z['im'] = 0;
          z['re'] = a;
          break;

        default:
          parser_exit();
      }

    if (isNaN(z['re']) || isNaN(z['im'])) {
      // If a calculation is NaN, we treat it as NaN and don't throw
      //parser_exit();
    }

    return z;
  };

  /**
   * @constructor
   * @returns {Complex}
   */
  function Complex(a, b) {

    if (!(this instanceof Complex)) {
      return new Complex(a, b);
    }

    var z = parse(a, b);

    this['re'] = z['re'];
    this['im'] = z['im'];
  }

  Complex.prototype = {

    're': 0,
    'im': 0,

    /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */
    'sign': function() {

      var abs = this['abs']();

      return new Complex(
              this['re'] / abs,
              this['im'] / abs);
    },

    /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
    'add': function(a, b) {

      var z = new Complex(a, b);

      // Infinity + Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity + z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      return new Complex(
              this['re'] + z['re'],
              this['im'] + z['im']);
    },

    /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
    'sub': function(a, b) {

      var z = new Complex(a, b);

      // Infinity - Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity - z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      return new Complex(
              this['re'] - z['re'],
              this['im'] - z['im']);
    },

    /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
    'mul': function(a, b) {

      var z = new Complex(a, b);

      // Infinity * 0 = NaN
      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
        return Complex['NAN'];
      }

      // Infinity * z = Infinity { where z != 0 }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      // Short circuit for real values
      if (z['im'] === 0 && this['im'] === 0) {
        return new Complex(this['re'] * z['re'], 0);
      }

      return new Complex(
              this['re'] * z['re'] - this['im'] * z['im'],
              this['re'] * z['im'] + this['im'] * z['re']);
    },

    /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
    'div': function(a, b) {

      var z = new Complex(a, b);

      // 0 / 0 = NaN and Infinity / Infinity = NaN
      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
        return Complex['NAN'];
      }

      // Infinity / 0 = Infinity
      if (this['isInfinite']() || z['isZero']()) {
        return Complex['INFINITY'];
      }

      // 0 / Infinity = 0
      if (this['isZero']() || z['isInfinite']()) {
        return Complex['ZERO'];
      }

      a = this['re'];
      b = this['im'];

      var c = z['re'];
      var d = z['im'];
      var t, x;

      if (0 === d) {
        // Divisor is real
        return new Complex(a / c, b / c);
      }

      if (Math.abs(c) < Math.abs(d)) {

        x = c / d;
        t = c * x + d;

        return new Complex(
                (a * x + b) / t,
                (b * x - a) / t);

      } else {

        x = d / c;
        t = d * x + c;

        return new Complex(
                (a + b * x) / t,
                (b - a * x) / t);
      }
    },

    /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
    'pow': function(a, b) {

      var z = new Complex(a, b);

      a = this['re'];
      b = this['im'];

      if (z['isZero']()) {
        return Complex['ONE'];
      }

      // If the exponent is real
      if (z['im'] === 0) {

        if (b === 0 && a >= 0) {

          return new Complex(Math.pow(a, z['re']), 0);

        } else if (a === 0) { // If base is fully imaginary

          switch ((z['re'] % 4 + 4) % 4) {
            case 0:
              return new Complex(Math.pow(b, z['re']), 0);
            case 1:
              return new Complex(0, Math.pow(b, z['re']));
            case 2:
              return new Complex(-Math.pow(b, z['re']), 0);
            case 3:
              return new Complex(0, -Math.pow(b, z['re']));
          }
        }
      }

      /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */

      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
        return Complex['ZERO'];
      }

      var arg = Math.atan2(b, a);
      var loh = logHypot(a, b);

      a = Math.exp(z['re'] * loh - z['im'] * arg);
      b = z['im'] * loh + z['re'] * arg;
      return new Complex(
              a * Math.cos(b),
              a * Math.sin(b));
    },

    /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
    'sqrt': function() {

      var a = this['re'];
      var b = this['im'];
      var r = this['abs']();

      var re, im;

      if (a >= 0) {

        if (b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }

        re = 0.5 * Math.sqrt(2.0 * (r + a));
      } else {
        re = Math.abs(b) / Math.sqrt(2 * (r - a));
      }

      if (a <= 0) {
        im = 0.5 * Math.sqrt(2.0 * (r - a));
      } else {
        im = Math.abs(b) / Math.sqrt(2 * (r + a));
      }

      return new Complex(re, b < 0 ? -im : im);
    },

    /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
    'exp': function() {

      var tmp = Math.exp(this['re']);

      if (this['im'] === 0) {
        //return new Complex(tmp, 0);
      }
      return new Complex(
              tmp * Math.cos(this['im']),
              tmp * Math.sin(this['im']));
    },

    /**
     * Calculate the complex exponent and subtracts one.
     *
     * This may be more accurate than `Complex(x).exp().sub(1)` if
     * `x` is small.
     *
     * @returns {Complex}
     */
    'expm1': function() {

      /**
       * exp(a + i*b) - 1
       = exp(a) * (cos(b) + j*sin(b)) - 1
       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
       */

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.expm1(a) * Math.cos(b) + cosm1(b),
              Math.exp(a) * Math.sin(b));
    },

    /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
    'log': function() {

      var a = this['re'];
      var b = this['im'];

      if (b === 0 && a > 0) {
        //return new Complex(Math.log(a), 0);
      }

      return new Complex(
              logHypot(a, b),
              Math.atan2(b, a));
    },

    /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */
    'abs': function() {

      return hypot(this['re'], this['im']);
    },

    /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
    'arg': function() {

      return Math.atan2(this['im'], this['re']);
    },

    /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
    'sin': function() {

      // sin(c) = (e^b - e^(-b)) / (2i)

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.sin(a) * cosh(b),
              Math.cos(a) * sinh(b));
    },

    /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
    'cos': function() {

      // cos(z) = (e^b + e^(-b)) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              Math.cos(a) * cosh(b),
              -Math.sin(a) * sinh(b));
    },

    /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
    'tan': function() {

      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) + cosh(b);

      return new Complex(
              Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
    'cot': function() {

      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) - cosh(b);

      return new Complex(
              -Math.sin(a) / d,
              sinh(b) / d);
    },

    /**
     * Calculate the secant
     *
     * @returns {Complex}
     */
    'sec': function() {

      // sec(c) = 2 / (e^(ci) + e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.cos(a) * cosh(b) / d,
              Math.sin(a) * sinh(b) / d);
    },

    /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
    'csc': function() {

      // csc(c) = 2i / (e^(ci) - e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

      return new Complex(
              Math.sin(a) * cosh(b) / d,
              -Math.cos(a) * sinh(b) / d);
    },

    /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
    'asin': function() {

      // asin(c) = -i * log(ci + sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
              b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(t2['im'], -t2['re']);
    },

    /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
    'acos': function() {

      // acos(c) = i * log(c - i * sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];

      var t1 = new Complex(
              b * b - a * a + 1,
              -2 * a * b)['sqrt']();

      var t2 = new Complex(
              t1['re'] - b,
              t1['im'] + a)['log']();

      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
    },

    /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
    'atan': function() {

      // atan(c) = i / 2 log((i + x) / (i - x))

      var a = this['re'];
      var b = this['im'];

      if (a === 0) {

        if (b === 1) {
          return new Complex(0, Infinity);
        }

        if (b === -1) {
          return new Complex(0, -Infinity);
        }
      }

      var d = a * a + (1.0 - b) * (1.0 - b);

      var t1 = new Complex(
              (1 - b * b - a * a) / d,
              -2 * a / d).log();

      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
    },

    /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
    'acot': function() {

      // acot(c) = i / 2 log((c - i) / (c + i))

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {
        return new Complex(Math.atan2(1, a), 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).atan()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).atan();
    },

    /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
    'asec': function() {

      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acos()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).acos();
    },

    /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
    'acsc': function() {

      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(Math.PI / 2, Infinity);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asin()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).asin();
    },

    /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
    'sinh': function() {

      // sinh(c) = (e^c - e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              sinh(a) * Math.cos(b),
              cosh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
    'cosh': function() {

      // cosh(c) = (e^c + e^-c) / 2

      var a = this['re'];
      var b = this['im'];

      return new Complex(
              cosh(a) * Math.cos(b),
              sinh(a) * Math.sin(b));
    },

    /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
    'tanh': function() {

      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) + Math.cos(b);

      return new Complex(
              sinh(a) / d,
              Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'coth': function() {

      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) - Math.cos(b);

      return new Complex(
              sinh(a) / d,
              -Math.sin(b) / d);
    },

    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'csch': function() {

      // csch(c) = 2 / (e^c - e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) - cosh(2 * a);

      return new Complex(
              -2 * sinh(a) * Math.cos(b) / d,
              2 * cosh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
    'sech': function() {

      // sech(c) = 2 / (e^c + e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) + cosh(2 * a);

      return new Complex(
              2 * cosh(a) * Math.cos(b) / d,
              -2 * sinh(a) * Math.sin(b) / d);
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'asinh': function() {

      // asinh(c) = log(c + sqrt(c^2 + 1))

      var tmp = this['im'];
      this['im'] = -this['re'];
      this['re'] = tmp;
      var res = this['asin']();

      this['re'] = -this['im'];
      this['im'] = tmp;
      tmp = res['re'];

      res['re'] = -res['im'];
      res['im'] = tmp;
      return res;
    },

    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'acosh': function() {

      // acosh(c) = log(c + sqrt(c^2 - 1))

      var res = this['acos']();
      if (res['im'] <= 0) {
        var tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
      } else {
        var tmp = res['im'];
        res['im'] = -res['re'];
        res['re'] = tmp;
      }
      return res;
    },

    /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
    'atanh': function() {

      // atanh(c) = log((1+c) / (1-c)) / 2

      var a = this['re'];
      var b = this['im'];

      var noIM = a > 1 && b === 0;
      var oneMinus = 1 - a;
      var onePlus = 1 + a;
      var d = oneMinus * oneMinus + b * b;

      var x = (d !== 0)
              ? new Complex(
                      (onePlus * oneMinus - b * b) / d,
                      (b * oneMinus + onePlus * b) / d)
              : new Complex(
                      (a !== -1) ? (a / 0) : 0,
                      (b !== 0) ? (b / 0) : 0);

      var temp = x['re'];
      x['re'] = logHypot(x['re'], x['im']) / 2;
      x['im'] = Math.atan2(x['im'], temp) / 2;
      if (noIM) {
        x['im'] = -x['im'];
      }
      return x;
    },

    /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
    'acoth': function() {

      // acoth(c) = log((c+1) / (c-1)) / 2

      var a = this['re'];
      var b = this['im'];

      if (a === 0 && b === 0) {
        return new Complex(0, Math.PI / 2);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).atanh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).atanh();
    },

    /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
    'acsch': function() {

      // acsch(c) = log((1+sqrt(1+c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (b === 0) {

        return new Complex(
                (a !== 0)
                ? Math.log(a + Math.sqrt(a * a + 1))
                : Infinity, 0);
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).asinh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).asinh();
    },

    /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
    'asech': function() {

      // asech(c) = log((1+sqrt(1-c^2))/c)

      var a = this['re'];
      var b = this['im'];

      if (this['isZero']()) {
        return Complex['INFINITY'];
      }

      var d = a * a + b * b;
      return (d !== 0)
              ? new Complex(
                      a / d,
                      -b / d).acosh()
              : new Complex(
                      (a !== 0) ? a / 0 : 0,
                      (b !== 0) ? -b / 0 : 0).acosh();
    },

    /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
    'inverse': function() {

      // 1 / 0 = Infinity and 1 / Infinity = 0
      if (this['isZero']()) {
        return Complex['INFINITY'];
      }

      if (this['isInfinite']()) {
        return Complex['ZERO'];
      }

      var a = this['re'];
      var b = this['im'];

      var d = a * a + b * b;

      return new Complex(a / d, -b / d);
    },

    /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
    'conjugate': function() {

      return new Complex(this['re'], -this['im']);
    },

    /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
    'neg': function() {

      return new Complex(-this['re'], -this['im']);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'ceil': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.ceil(this['re'] * places) / places,
              Math.ceil(this['im'] * places) / places);
    },

    /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
    'floor': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.floor(this['re'] * places) / places,
              Math.floor(this['im'] * places) / places);
    },

    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'round': function(places) {

      places = Math.pow(10, places || 0);

      return new Complex(
              Math.round(this['re'] * places) / places,
              Math.round(this['im'] * places) / places);
    },

    /**
     * Compares two complex numbers
     *
     * **Note:** new Complex(Infinity).equals(Infinity) === false
     *
     * @returns {boolean}
     */
    'equals': function(a, b) {

      var z = new Complex(a, b);

      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
    },

    /**
     * Clones the actual object
     *
     * @returns {Complex}
     */
    'clone': function() {

      return new Complex(this['re'], this['im']);
    },

    /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
    'toString': function() {

      var a = this['re'];
      var b = this['im'];
      var ret = '';

      if (this['isNaN']()) {
        return 'NaN';
      }

      if (this['isZero']()) {
        return '0';
      }

      if (this['isInfinite']()) {
        return 'Infinity';
      }

      if (a !== 0) {
        ret += a;
      }

      if (b !== 0) {

        if (a !== 0) {
          ret += b < 0 ? ' - ' : ' + ';
        } else if (b < 0) {
          ret += '-';
        }

        b = Math.abs(b);

        if (1 !== b) {
          ret += b;
        }
        ret += 'i';
      }

      if (!ret)
        return '0';

      return ret;
    },

    /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
    'toVector': function() {

      return [this['re'], this['im']];
    },

    /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
    'valueOf': function() {

      if (this['im'] === 0) {
        return this['re'];
      }
      return null;
    },

    /**
     * Determines whether a complex number is not on the Riemann sphere.
     *
     * @returns {boolean}
     */
    'isNaN': function() {
      return isNaN(this['re']) || isNaN(this['im']);
    },

    /**
     * Determines whether or not a complex number is at the zero pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isZero': function() {
      return (
              (this['re'] === 0 || this['re'] === -0) &&
              (this['im'] === 0 || this['im'] === -0)
              );
    },

    /**
     * Determines whether a complex number is not at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isFinite': function() {
      return isFinite(this['re']) && isFinite(this['im']);
    },

    /**
     * Determines whether or not a complex number is at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isInfinite': function() {
      return !(this['isNaN']() || this['isFinite']());
    }
  };

  Complex['ZERO'] = new Complex(0, 0);
  Complex['ONE'] = new Complex(1, 0);
  Complex['I'] = new Complex(0, 1);
  Complex['PI'] = new Complex(Math.PI, 0);
  Complex['E'] = new Complex(Math.E, 0);
  Complex['INFINITY'] = new Complex(Infinity, Infinity);
  Complex['NAN'] = new Complex(NaN, NaN);
  Complex['EPSILON'] = 1e-16;

  if (typeof define === 'function' && define['amd']) {
    define([], function() {
      return Complex;
    });
  } else if (typeof exports === 'object') {
    Object.defineProperty(exports, "__esModule", {'value': true});
    Complex['default'] = Complex;
    Complex['Complex'] = Complex;
    module['exports'] = Complex;
  } else {
    root['Complex'] = Complex;
  }

})(this);

},{}],"../node_modules/mathjs/src/type/complex/Complex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createComplexClass = void 0;

var _complex = _interopRequireDefault(require("complex.js"));

var _number = require("../../utils/number");

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = 'Complex';
const dependencies = [];
const createComplexClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, () => {
  /**
   * Attach type information
   */
  _complex.default.prototype.type = 'Complex';
  _complex.default.prototype.isComplex = true;
  /**
   * Get a JSON representation of the complex number
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
   */

  _complex.default.prototype.toJSON = function () {
    return {
      mathjs: 'Complex',
      re: this.re,
      im: this.im
    };
  };
  /*
   * Return the value of the complex number in polar notation
   * The angle phi will be set in the interval of [-pi, pi].
   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
   */


  _complex.default.prototype.toPolar = function () {
    return {
      r: this.abs(),
      phi: this.arg()
    };
  };
  /**
   * Get a string representation of the complex number,
   * with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string} str
   */


  _complex.default.prototype.format = function (options) {
    let str = '';
    let im = this.im;
    let re = this.re;
    const strRe = (0, _number.format)(this.re, options);
    const strIm = (0, _number.format)(this.im, options); // round either re or im when smaller than the configured precision

    const precision = (0, _is.isNumber)(options) ? options : options ? options.precision : null;

    if (precision !== null) {
      const epsilon = Math.pow(10, -precision);

      if (Math.abs(re / im) < epsilon) {
        re = 0;
      }

      if (Math.abs(im / re) < epsilon) {
        im = 0;
      }
    }

    if (im === 0) {
      // real value
      str = strRe;
    } else if (re === 0) {
      // purely complex value
      if (im === 1) {
        str = 'i';
      } else if (im === -1) {
        str = '-i';
      } else {
        str = strIm + 'i';
      }
    } else {
      // complex value
      if (im < 0) {
        if (im === -1) {
          str = strRe + ' - i';
        } else {
          str = strRe + ' - ' + strIm.substring(1) + 'i';
        }
      } else {
        if (im === 1) {
          str = strRe + ' + i';
        } else {
          str = strRe + ' + ' + strIm + 'i';
        }
      }
    }

    return str;
  };
  /**
   * Create a complex number from polar coordinates
   *
   * Usage:
   *
   *     Complex.fromPolar(r: number, phi: number) : Complex
   *     Complex.fromPolar({r: number, phi: number}) : Complex
   *
   * @param {*} args...
   * @return {Complex}
   */


  _complex.default.fromPolar = function (args) {
    switch (arguments.length) {
      case 1:
        const arg = arguments[0];

        if (typeof arg === 'object') {
          return (0, _complex.default)(arg);
        }

        throw new TypeError('Input has to be an object with r and phi keys.');

      case 2:
        const r = arguments[0];
        let phi = arguments[1];

        if ((0, _is.isNumber)(r)) {
          if ((0, _is.isUnit)(phi) && phi.hasBase('ANGLE')) {
            // convert unit to a number in radians
            phi = phi.toNumber('rad');
          }

          if ((0, _is.isNumber)(phi)) {
            return new _complex.default({
              r: r,
              phi: phi
            });
          }

          throw new TypeError('Phi is not a number nor an angle unit.');
        } else {
          throw new TypeError('Radius r is not a number.');
        }

      default:
        throw new SyntaxError('Wrong number of arguments in function fromPolar');
    }
  };

  _complex.default.prototype.valueOf = _complex.default.prototype.toString;
  /**
   * Create a Complex number from a JSON object
   * @param {Object} json  A JSON Object structured as
   *                       {"mathjs": "Complex", "re": 2, "im": 3}
   *                       All properties are optional, default values
   *                       for `re` and `im` are 0.
   * @return {Complex} Returns a new Complex number
   */

  _complex.default.fromJSON = function (json) {
    return new _complex.default(json);
  };
  /**
   * Compare two complex numbers, `a` and `b`:
   *
   * - Returns 1 when the real part of `a` is larger than the real part of `b`
   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
   * - Returns 1 when the real parts are equal
   *   and the imaginary part of `a` is larger than the imaginary part of `b`
   * - Returns -1 when the real parts are equal
   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
   * - Returns 0 when both real and imaginary parts are equal.
   *
   * @params {Complex} a
   * @params {Complex} b
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  _complex.default.compare = function (a, b) {
    if (a.re > b.re) {
      return 1;
    }

    if (a.re < b.re) {
      return -1;
    }

    if (a.im > b.im) {
      return 1;
    }

    if (a.im < b.im) {
      return -1;
    }

    return 0;
  };

  return _complex.default;
}, {
  isClass: true
});
exports.createComplexClass = createComplexClass;
},{"complex.js":"../node_modules/complex.js/complex.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/fraction.js/fraction.js":[function(require,module,exports) {
var define;
/**
 * @license Fraction.js v4.0.12 09/09/2015
 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/


/**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */

(function(root) {

  "use strict";

  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
  var MAX_CYCLE_LEN = 2000;

  // Parsed data to avoid calling "new" all the time
  var P = {
    "s": 1,
    "n": 0,
    "d": 1
  };

  function createError(name) {

    function errorConstructor() {
      var temp = Error.apply(this, arguments);
      temp['name'] = this['name'] = name;
      this['stack'] = temp['stack'];
      this['message'] = temp['message'];
    }

    /**
     * Error constructor
     *
     * @constructor
     */
    function IntermediateInheritor() {}
    IntermediateInheritor.prototype = Error.prototype;
    errorConstructor.prototype = new IntermediateInheritor();

    return errorConstructor;
  }

  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

  function assign(n, s) {

    if (isNaN(n = parseInt(n, 10))) {
      throwInvalidParam();
    }
    return n * s;
  }

  function throwInvalidParam() {
    throw new InvalidParameter();
  }

  var parse = function(p1, p2) {

    var n = 0, d = 1, s = 1;
    var v = 0, w = 0, x = 0, y = 1, z = 1;

    var A = 0, B = 1;
    var C = 1, D = 1;

    var N = 10000000;
    var M;

    if (p1 === undefined || p1 === null) {
      /* void */
    } else if (p2 !== undefined) {
      n = p1;
      d = p2;
      s = n * d;
    } else
      switch (typeof p1) {

        case "object":
        {
          if ("d" in p1 && "n" in p1) {
            n = p1["n"];
            d = p1["d"];
            if ("s" in p1)
              n *= p1["s"];
          } else if (0 in p1) {
            n = p1[0];
            if (1 in p1)
              d = p1[1];
          } else {
            throwInvalidParam();
          }
          s = n * d;
          break;
        }
        case "number":
        {
          if (p1 < 0) {
            s = p1;
            p1 = -p1;
          }

          if (p1 % 1 === 0) {
            n = p1;
          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

            if (p1 >= 1) {
              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
              p1 /= z;
            }

            // Using Farey Sequences
            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

            while (B <= N && D <= N) {
              M = (A + C) / (B + D);

              if (p1 === M) {
                if (B + D <= N) {
                  n = A + C;
                  d = B + D;
                } else if (D > B) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
                break;

              } else {

                if (p1 > M) {
                  A += C;
                  B += D;
                } else {
                  C += A;
                  D += B;
                }

                if (B > N) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
              }
            }
            n *= z;
          } else if (isNaN(p1) || isNaN(p2)) {
            d = n = NaN;
          }
          break;
        }
        case "string":
        {
          B = p1.match(/\d+|./g);

          if (B === null)
            throwInvalidParam();

          if (B[A] === '-') {// Check for minus sign at the beginning
            s = -1;
            A++;
          } else if (B[A] === '+') {// Check for plus sign at the beginning
            A++;
          }

          if (B.length === A + 1) { // Check if it's just a simple number "1234"
            w = assign(B[A++], s);
          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

            if (B[A] !== '.') { // Handle 0.5 and .5
              v = assign(B[A++], s);
            }
            A++;

            // Check for decimal places
            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
              w = assign(B[A], s);
              y = Math.pow(10, B[A].length);
              A++;
            }

            // Check for repeating places
            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
              x = assign(B[A + 1], s);
              z = Math.pow(10, B[A + 1].length) - 1;
              A += 3;
            }

          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
            w = assign(B[A], s);
            y = assign(B[A + 2], 1);
            A += 3;
          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
            v = assign(B[A], s);
            w = assign(B[A + 2], s);
            y = assign(B[A + 4], 1);
            A += 5;
          }

          if (B.length <= A) { // Check for more tokens on the stack
            d = y * z;
            s = /* void */
                    n = x + d * v + z * w;
            break;
          }

          /* Fall through on error */
        }
        default:
          throwInvalidParam();
      }

    if (d === 0) {
      throw new DivisionByZero();
    }

    P["s"] = s < 0 ? -1 : 1;
    P["n"] = Math.abs(n);
    P["d"] = Math.abs(d);
  };

  function modpow(b, e, m) {

    var r = 1;
    for (; e > 0; b = (b * b) % m, e >>= 1) {

      if (e & 1) {
        r = (r * b) % m;
      }
    }
    return r;
  }


  function cycleLen(n, d) {

    for (; d % 2 === 0;
            d /= 2) {
    }

    for (; d % 5 === 0;
            d /= 5) {
    }

    if (d === 1) // Catch non-cyclic numbers
      return 0;

    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
    // 10^(d-1) % d == 1
    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
    // as we want to translate the numbers to strings.

    var rem = 10 % d;
    var t = 1;

    for (; rem !== 1; t++) {
      rem = rem * 10 % d;

      if (t > MAX_CYCLE_LEN)
        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
    }
    return t;
  }


     function cycleStart(n, d, len) {

    var rem1 = 1;
    var rem2 = modpow(10, len, d);

    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
      // Solve 10^s == 10^(s+t) (mod d)

      if (rem1 === rem2)
        return t;

      rem1 = rem1 * 10 % d;
      rem2 = rem2 * 10 % d;
    }
    return 0;
  }

  function gcd(a, b) {

    if (!a)
      return b;
    if (!b)
      return a;

    while (1) {
      a %= b;
      if (!a)
        return b;
      b %= a;
      if (!b)
        return a;
    }
  };

  /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction=} a
   * @param {number=} b
   */
  function Fraction(a, b) {

    if (!(this instanceof Fraction)) {
      return new Fraction(a, b);
    }

    parse(a, b);

    if (Fraction['REDUCE']) {
      a = gcd(P["d"], P["n"]); // Abuse a
    } else {
      a = 1;
    }

    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  }

  /**
   * Boolean global variable to be able to disable automatic reduction of the fraction
   *
   */
  Fraction['REDUCE'] = 1;

  Fraction.prototype = {

    "s": 1,
    "n": 0,
    "d": 1,

    /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/
    "abs": function() {

      return new Fraction(this["n"], this["d"]);
    },

    /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/
    "neg": function() {

      return new Fraction(-this["s"] * this["n"], this["d"]);
    },

    /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/
    "add": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/
    "sub": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/
    "mul": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/
    "div": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["d"],
              this["d"] * P["n"]
              );
    },

    /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/
    "clone": function() {
      return new Fraction(this);
    },

    /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/
    "mod": function(a, b) {

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return new Fraction(NaN);
      }

      if (a === undefined) {
        return new Fraction(this["s"] * this["n"] % this["d"], 1);
      }

      parse(a, b);
      if (0 === P["n"] && 0 === this["d"]) {
        Fraction(0, 0); // Throw DivisionByZero
      }

      /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/

      /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */
      return new Fraction(
              this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
              P["d"] * this["d"]
              );
    },

    /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */
    "gcd": function(a, b) {

      parse(a, b);

      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

      return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
    },

    /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */
    "lcm": function(a, b) {

      parse(a, b);

      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

      if (P["n"] === 0 && this["n"] === 0) {
        return new Fraction;
      }
      return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/
    "ceil": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/
    "floor": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/
    "round": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/
    "inverse": function() {

      return new Fraction(this["s"] * this["d"], this["n"]);
    },

    /**
     * Calculates the fraction to some integer exponent
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */
    "pow": function(m) {

      if (m < 0) {
        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
      } else {
        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
      }
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "equals": function(a, b) {

      parse(a, b);
      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "compare": function(a, b) {

      parse(a, b);
      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
      return (0 < t) - (t < 0);
    },

    "simplify": function(eps) {

      // First naive implementation, needs improvement

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return this;
      }

      var cont = this['abs']()['toContinued']();

      eps = eps || 0.001;

      function rec(a) {
        if (a.length === 1)
          return new Fraction(a[0]);
        return rec(a.slice(1))['inverse']()['add'](a[0]);
      }

      for (var i = 0; i < cont.length; i++) {
        var tmp = rec(cont.slice(0, i + 1));
        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
          return tmp['mul'](this['s']);
        }
      }
      return this;
    },

    /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */
    "divisible": function(a, b) {

      parse(a, b);
      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
    },

    /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/
    'valueOf': function() {

      return this["s"] * this["n"] / this["d"];
    },

    /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/
    'toFraction': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str += '-';
      }

      if (d === 1) {
        str += n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str += whole;
          str += " ";
          n %= d;
        }

        str += n;
        str += '/';
        str += d;
      }
      return str;
    },

    /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/
    'toLatex': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str += '-';
      }

      if (d === 1) {
        str += n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str += whole;
          n %= d;
        }

        str += "\\frac{";
        str += n;
        str += '}{';
        str += d;
        str += '}';
      }
      return str;
    },

    /**
     * Returns an array of continued fraction elements
     *
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */
    'toContinued': function() {

      var t;
      var a = this['n'];
      var b = this['d'];
      var res = [];

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return res;
      }

      do {
        res.push(Math.floor(a / b));
        t = a % b;
        a = b;
        b = t;
      } while (a !== 1);

      return res;
    },

    /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/
    'toString': function(dec) {

      var g;
      var N = this["n"];
      var D = this["d"];

      if (isNaN(N) || isNaN(D)) {
        return "NaN";
      }

      if (!Fraction['REDUCE']) {
        g = gcd(N, D);
        N /= g;
        D /= g;
      }

      dec = dec || 15; // 15 = decimal places when no repitation

      var cycLen = cycleLen(N, D); // Cycle length
      var cycOff = cycleStart(N, D, cycLen); // Cycle start

      var str = this['s'] === -1 ? "-" : "";

      str += N / D | 0;

      N %= D;
      N *= 10;

      if (N)
        str += ".";

      if (cycLen) {

        for (var i = cycOff; i--; ) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
        str += "(";
        for (var i = cycLen; i--; ) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
        str += ")";
      } else {
        for (var i = dec; N && i--; ) {
          str += N / D | 0;
          N %= D;
          N *= 10;
        }
      }
      return str;
    }
  };

  if (typeof define === "function" && define["amd"]) {
    define([], function() {
      return Fraction;
    });
  } else if (typeof exports === "object") {
    Object.defineProperty(exports, "__esModule", {'value': true});
    Fraction['default'] = Fraction;
    Fraction['Fraction'] = Fraction;
    module['exports'] = Fraction;
  } else {
    root['Fraction'] = Fraction;
  }

})(this);

},{}],"../node_modules/mathjs/src/type/fraction/Fraction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFractionClass = void 0;

var _fraction = _interopRequireDefault(require("fraction.js"));

var _factory = require("../../utils/factory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = 'Fraction';
const dependencies = [];
const createFractionClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, () => {
  /**
   * Attach type information
   */
  _fraction.default.prototype.type = 'Fraction';
  _fraction.default.prototype.isFraction = true;
  /**
   * Get a JSON representation of a Fraction containing type information
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
   */

  _fraction.default.prototype.toJSON = function () {
    return {
      mathjs: 'Fraction',
      n: this.s * this.n,
      d: this.d
    };
  };
  /**
   * Instantiate a Fraction from a JSON object
   * @param {Object} json  a JSON object structured as:
   *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
   * @return {BigNumber}
   */


  _fraction.default.fromJSON = function (json) {
    return new _fraction.default(json);
  };

  return _fraction.default;
}, {
  isClass: true
});
exports.createFractionClass = createFractionClass;
},{"fraction.js":"../node_modules/fraction.js/fraction.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/Range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRangeClass = void 0;

var _is = require("../../utils/is");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'Range';
const dependencies = [];
const createRangeClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, () => {
  /**
   * Create a range. A range has a start, step, and end, and contains functions
   * to iterate over the range.
   *
   * A range can be constructed as:
   *
   *     const range = new Range(start, end)
   *     const range = new Range(start, end, step)
   *
   * To get the result of the range:
   *     range.forEach(function (x) {
   *         console.log(x)
   *     })
   *     range.map(function (x) {
   *         return math.sin(x)
   *     })
   *     range.toArray()
   *
   * Example usage:
   *
   *     const c = new Range(2, 6)       // 2:1:5
   *     c.toArray()                     // [2, 3, 4, 5]
   *     const d = new Range(2, -3, -1)  // 2:-1:-2
   *     d.toArray()                     // [2, 1, 0, -1, -2]
   *
   * @class Range
   * @constructor Range
   * @param {number} start  included lower bound
   * @param {number} end    excluded upper bound
   * @param {number} [step] step size, default value is 1
   */
  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    const hasStart = start !== null && start !== undefined;
    const hasEnd = end !== null && end !== undefined;
    const hasStep = step !== null && step !== undefined;

    if (hasStart) {
      if ((0, _is.isBigNumber)(start)) {
        start = start.toNumber();
      } else if (typeof start !== 'number') {
        throw new TypeError('Parameter start must be a number');
      }
    }

    if (hasEnd) {
      if ((0, _is.isBigNumber)(end)) {
        end = end.toNumber();
      } else if (typeof end !== 'number') {
        throw new TypeError('Parameter end must be a number');
      }
    }

    if (hasStep) {
      if ((0, _is.isBigNumber)(step)) {
        step = step.toNumber();
      } else if (typeof step !== 'number') {
        throw new TypeError('Parameter step must be a number');
      }
    }

    this.start = hasStart ? parseFloat(start) : 0;
    this.end = hasEnd ? parseFloat(end) : 0;
    this.step = hasStep ? parseFloat(step) : 1;
  }
  /**
   * Attach type information
   */


  Range.prototype.type = 'Range';
  Range.prototype.isRange = true;
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @memberof Range
   * @param {string} str
   * @return {Range | null} range
   */

  Range.parse = function (str) {
    if (typeof str !== 'string') {
      return null;
    }

    const args = str.split(':');
    const nums = args.map(function (arg) {
      return parseFloat(arg);
    });
    const invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return new Range(nums[0], nums[1]);

      case 3:
        return new Range(nums[0], nums[2], nums[1]);

      default:
        return null;
    }
  };
  /**
   * Create a clone of the range
   * @return {Range} clone
   */


  Range.prototype.clone = function () {
    return new Range(this.start, this.end, this.step);
  };
  /**
   * Retrieve the size of the range.
   * Returns an array containing one number, the number of elements in the range.
   * @memberof Range
   * @returns {number[]} size
   */


  Range.prototype.size = function () {
    let len = 0;
    const start = this.start;
    const step = this.step;
    const end = this.end;
    const diff = end - start;

    if ((0, _number.sign)(step) === (0, _number.sign)(diff)) {
      len = Math.ceil(diff / step);
    } else if (diff === 0) {
      len = 0;
    }

    if (isNaN(len)) {
      len = 0;
    }

    return [len];
  };
  /**
   * Calculate the minimum value in the range
   * @memberof Range
   * @return {number | undefined} min
   */


  Range.prototype.min = function () {
    const size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start;
      } else {
        // negative step
        return this.start + (size - 1) * this.step;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Calculate the maximum value in the range
   * @memberof Range
   * @return {number | undefined} max
   */


  Range.prototype.max = function () {
    const size = this.size()[0];

    if (size > 0) {
      if (this.step > 0) {
        // positive step
        return this.start + (size - 1) * this.step;
      } else {
        // negative step
        return this.start;
      }
    } else {
      return undefined;
    }
  };
  /**
   * Execute a callback function for each value in the range.
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Range being traversed.
   */


  Range.prototype.forEach = function (callback) {
    let x = this.start;
    const step = this.step;
    const end = this.end;
    let i = 0;

    if (step > 0) {
      while (x < end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    } else if (step < 0) {
      while (x > end) {
        callback(x, [i], this);
        x += step;
        i++;
      }
    }
  };
  /**
   * Execute a callback function for each value in the Range, and return the
   * results as an array
   * @memberof Range
   * @param {function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @returns {Array} array
   */


  Range.prototype.map = function (callback) {
    const array = [];
    this.forEach(function (value, index, obj) {
      array[index[0]] = callback(value, index, obj);
    });
    return array;
  };
  /**
   * Create an Array with a copy of the Ranges data
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.toArray = function () {
    const array = [];
    this.forEach(function (value, index) {
      array[index[0]] = value;
    });
    return array;
  };
  /**
   * Get the primitive value of the Range, a one dimensional array
   * @memberof Range
   * @returns {Array} array
   */


  Range.prototype.valueOf = function () {
    // TODO: implement a caching mechanism for range.valueOf()
    return this.toArray();
  };
  /**
   * Get a string representation of the range, with optional formatting options.
   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
   * @memberof Range
   * @param {Object | number | function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Range.prototype.format = function (options) {
    let str = (0, _number.format)(this.start, options);

    if (this.step !== 1) {
      str += ':' + (0, _number.format)(this.step, options);
    }

    str += ':' + (0, _number.format)(this.end, options);
    return str;
  };
  /**
   * Get a string representation of the range.
   * @memberof Range
   * @returns {string}
   */


  Range.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the range
   * @memberof Range
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   */


  Range.prototype.toJSON = function () {
    return {
      mathjs: 'Range',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate a Range from a JSON object
   * @memberof Range
   * @param {Object} json A JSON object structured as:
   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
   * @return {Range}
   */


  Range.fromJSON = function (json) {
    return new Range(json.start, json.end, json.step);
  };

  return Range;
}, {
  isClass: true
});
exports.createRangeClass = createRangeClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/Matrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMatrixClass = void 0;

var _factory = require("../../utils/factory");

const name = 'Matrix';
const dependencies = [];
const createMatrixClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, () => {
  /**
   * @constructor Matrix
   *
   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
   * array. A matrix can be constructed as:
   *
   *     let matrix = math.matrix(data)
   *
   * Matrix contains the functions to resize, get and set values, get the size,
   * clone the matrix and to convert the matrix to a vector, array, or scalar.
   * Furthermore, one can iterate over the matrix using map and forEach.
   * The internal Array of the Matrix can be accessed using the function valueOf.
   *
   * Example usage:
   *
   *     let matrix = math.matrix([[1, 2], [3, 4]])
   *     matix.size()              // [2, 2]
   *     matrix.resize([3, 2], 5)
   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
   *
   */
  function Matrix() {
    if (!(this instanceof Matrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Attach type information
   */


  Matrix.prototype.type = 'Matrix';
  Matrix.prototype.isMatrix = true;
  /**
   * Get the Matrix storage constructor for the given format.
   *
   * @param {string} format       The Matrix storage format.
   *
   * @return {Function}           The Matrix storage constructor.
   */

  Matrix.storage = function (format) {
    // TODO: deprecated since v6.0.0. Clean up some day
    throw new Error('Matrix.storage is deprecated since v6.0.0. ' + 'Use the factory function math.matrix instead.');
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @return {string}           The storage format.
   */


  Matrix.prototype.storage = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke storage on a Matrix interface');
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @return {string}           The datatype.
   */


  Matrix.prototype.datatype = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke datatype on a Matrix interface');
  };
  /**
   * Create a new Matrix With the type of the current matrix instance
   * @param {Array | Object} data
   * @param {string} [datatype]
   */


  Matrix.prototype.create = function (data, datatype) {
    throw new Error('Cannot invoke create on a Matrix interface');
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  Matrix.prototype.subset = function (index, replacement, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke subset on a Matrix interface');
  };
  /**
   * Get a single element from the matrix.
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  Matrix.prototype.get = function (index) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke get on a Matrix interface');
  };
  /**
   * Replace a single element in the matrix.
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {Matrix} self
   */


  Matrix.prototype.set = function (index, value, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke set on a Matrix interface');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  Matrix.prototype.resize = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke resize on a Matrix interface');
  };
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  Matrix.prototype.reshape = function (size, defaultValue) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke reshape on a Matrix interface');
  };
  /**
   * Create a clone of the matrix
   * @return {Matrix} clone
   */


  Matrix.prototype.clone = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke clone on a Matrix interface');
  };
  /**
   * Retrieve the size of the matrix.
   * @returns {number[]} size
   */


  Matrix.prototype.size = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke size on a Matrix interface');
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {Matrix} matrix
   */


  Matrix.prototype.map = function (callback, skipZeros) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke map on a Matrix interface');
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  Matrix.prototype.forEach = function (callback) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke forEach on a Matrix interface');
  };
  /**
   * Create an Array with a copy of the data of the Matrix
   * @returns {Array} array
   */


  Matrix.prototype.toArray = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toArray on a Matrix interface');
  };
  /**
   * Get the primitive value of the Matrix: a multidimensional array
   * @returns {Array} array
   */


  Matrix.prototype.valueOf = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke valueOf on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  Matrix.prototype.format = function (options) {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke format on a Matrix interface');
  };
  /**
   * Get a string representation of the matrix
   * @returns {string} str
   */


  Matrix.prototype.toString = function () {
    // must be implemented by each of the Matrix implementations
    throw new Error('Cannot invoke toString on a Matrix interface');
  };

  return Matrix;
}, {
  isClass: true
});
exports.createMatrixClass = createMatrixClass;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/DenseMatrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDenseMatrixClass = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _string = require("../../utils/string");

var _number = require("../../utils/number");

var _object = require("../../utils/object");

var _DimensionError = require("../../error/DimensionError");

var _factory = require("../../utils/factory");

const name = 'DenseMatrix';
const dependencies = ['Matrix'];
const createDenseMatrixClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Matrix
}) => {
  /**
   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
   * @class DenseMatrix
   */
  function DenseMatrix(data, datatype) {
    if (!(this instanceof DenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0, _is.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0, _is.isMatrix)(data)) {
      // check data is a DenseMatrix
      if (data.type === 'DenseMatrix') {
        // clone data & size
        this._data = (0, _object.clone)(data._data);
        this._size = (0, _object.clone)(data._size);
        this._datatype = datatype || data._datatype;
      } else {
        // build data from existing matrix
        this._data = data.toArray();
        this._size = data.size();
        this._datatype = datatype || data._datatype;
      }
    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if ((0, _is.isArray)(data)) {
      // replace nested Matrices with Arrays
      this._data = preprocess(data); // get the dimensions of the array

      this._size = (0, _array.arraySize)(this._data); // verify the dimensions of the array, TODO: compute size while processing array

      (0, _array.validate)(this._data, this._size); // data type unknown

      this._datatype = datatype;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
    }
  }

  DenseMatrix.prototype = new Matrix();
  /**
   * Create a new DenseMatrix
   */

  DenseMatrix.prototype.createDenseMatrix = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  DenseMatrix.prototype.type = 'DenseMatrix';
  DenseMatrix.prototype.isDenseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf DenseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  DenseMatrix.prototype.getDataType = function () {
    return (0, _array.getArrayDataType)(this._data, _is.typeOf);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()  // retrieve storage format
   *
   * @memberof DenseMatrix
   * @return {string}           The storage format.
   */


  DenseMatrix.prototype.storage = function () {
    return 'dense';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()   // retrieve matrix datatype
   *
   * @memberof DenseMatrix
   * @return {string}           The datatype.
   */


  DenseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new DenseMatrix
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  DenseMatrix.prototype.create = function (data, datatype) {
    return new DenseMatrix(data, datatype);
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof DenseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    switch (arguments.length) {
      case 1:
        return _get(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _set(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Get a single element from the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  DenseMatrix.prototype.get = function (index) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length);
    } // check index


    for (let x = 0; x < index.length; x++) {
      (0, _array.validateIndex)(index[x], this._size[x]);
    }

    let data = this._data;

    for (let i = 0, ii = index.length; i < ii; i++) {
      const indexI = index[i];
      (0, _array.validateIndex)(indexI, data.length);
      data = data[indexI];
    }

    return data;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof DenseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {DenseMatrix} self
   */


  DenseMatrix.prototype.set = function (index, value, defaultValue) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length < this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length, '<');
    }

    let i, ii, indexI; // enlarge matrix when needed

    const size = index.map(function (i) {
      return i + 1;
    });

    _fit(this, size, defaultValue); // traverse over the dimensions


    let data = this._data;

    for (i = 0, ii = index.length - 1; i < ii; i++) {
      indexI = index[i];
      (0, _array.validateIndex)(indexI, data.length);
      data = data[indexI];
    } // set new value


    indexI = index[index.length - 1];
    (0, _array.validateIndex)(indexI, data.length);
    data[indexI] = value;
    return this;
  };
  /**
   * Get a submatrix of this matrix
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index   Zero-based index
   * @private
   */


  function _get(matrix, index) {
    if (!(0, _is.isIndex)(index)) {
      throw new TypeError('Invalid index');
    }

    const isScalar = index.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(index.min());
    } else {
      // validate dimensions
      const size = index.size();

      if (size.length !== matrix._size.length) {
        throw new _DimensionError.DimensionError(size.length, matrix._size.length);
      } // validate if any of the ranges in the index is out of range


      const min = index.min();
      const max = index.max();

      for (let i = 0, ii = matrix._size.length; i < ii; i++) {
        (0, _array.validateIndex)(min[i], matrix._size[i]);
        (0, _array.validateIndex)(max[i], matrix._size[i]);
      } // retrieve submatrix
      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
    }
  }
  /**
   * Recursively get a submatrix of a multi dimensional matrix.
   * Index is not checked for correct number or length of dimensions.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {number} dims   Total number of dimensions
   * @param {number} dim    Current dimension
   * @return {Array} submatrix
   * @private
   */


  function _getSubmatrix(data, index, dims, dim) {
    const last = dim === dims - 1;
    const range = index.dimension(dim);

    if (last) {
      return range.map(function (i) {
        (0, _array.validateIndex)(i, data.length);
        return data[i];
      }).valueOf();
    } else {
      return range.map(function (i) {
        (0, _array.validateIndex)(i, data.length);
        const child = data[i];
        return _getSubmatrix(child, index, dims, dim + 1);
      }).valueOf();
    }
  }
  /**
   * Replace a submatrix in this matrix
   * Indexes are zero-based.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix
   * @param {Index} index
   * @param {DenseMatrix | Array | *} submatrix
   * @param {*} defaultValue          Default value, filled in on new entries when
   *                                  the matrix is resized.
   * @return {DenseMatrix} matrix
   * @private
   */


  function _set(matrix, index, submatrix, defaultValue) {
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    const iSize = index.size();
    const isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    let sSize;

    if ((0, _is.isMatrix)(submatrix)) {
      sSize = submatrix.size();
      submatrix = submatrix.valueOf();
    } else {
      sSize = (0, _array.arraySize)(submatrix);
    }

    if (isScalar) {
      // set a scalar
      // check whether submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      }

      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // set a submatrix
      // validate dimensions
      if (iSize.length < matrix._size.length) {
        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');
      }

      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        let i = 0;
        let outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {
        throw new _DimensionError.DimensionError(iSize, sSize, '>');
      } // enlarge matrix when needed


      const size = index.max().map(function (i) {
        return i + 1;
      });

      _fit(matrix, size, defaultValue); // insert the sub matrix


      const dims = iSize.length;
      const dim = 0;

      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
    }

    return matrix;
  }
  /**
   * Replace a submatrix of a multi dimensional matrix.
   * @memberof DenseMatrix
   * @param {Array} data
   * @param {Index} index
   * @param {Array} submatrix
   * @param {number} dims   Total number of dimensions
   * @param {number} dim
   * @private
   */


  function _setSubmatrix(data, index, submatrix, dims, dim) {
    const last = dim === dims - 1;
    const range = index.dimension(dim);

    if (last) {
      range.forEach(function (dataIndex, subIndex) {
        (0, _array.validateIndex)(dataIndex);
        data[dataIndex] = submatrix[subIndex[0]];
      });
    } else {
      range.forEach(function (dataIndex, subIndex) {
        (0, _array.validateIndex)(dataIndex);

        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
      });
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected');
    } // matrix to resize


    const m = copy ? this.clone() : this; // resize matrix

    return _resize(m, size, defaultValue);
  };

  function _resize(matrix, size, defaultValue) {
    // check size
    if (size.length === 0) {
      // first value in matrix
      let v = matrix._data; // go deep

      while ((0, _is.isArray)(v)) {
        v = v[0];
      }

      return v;
    } // resize matrix


    matrix._size = size.slice(0); // copy the array

    matrix._data = (0, _array.resize)(matrix._data, matrix._size, defaultValue); // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof DenseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  DenseMatrix.prototype.reshape = function (size, copy) {
    const m = copy ? this.clone() : this;
    m._data = (0, _array.reshape)(m._data, size);
    m._size = size.slice(0);
    return m;
  };
  /**
   * Enlarge the matrix when it is smaller than given size.
   * If the matrix is larger or equal sized, nothing is done.
   * @memberof DenseMatrix
   * @param {DenseMatrix} matrix           The matrix to be resized
   * @param {number[]} size
   * @param {*} defaultValue          Default value, filled in on new entries.
   * @private
   */


  function _fit(matrix, size, defaultValue) {
    const // copy the array
    newSize = matrix._size.slice(0);

    let changed = false; // add dimensions when needed

    while (newSize.length < size.length) {
      newSize.push(0);
      changed = true;
    } // enlarge size when needed


    for (let i = 0, ii = size.length; i < ii; i++) {
      if (size[i] > newSize[i]) {
        newSize[i] = size[i];
        changed = true;
      }
    }

    if (changed) {
      // resize only when size is changed
      _resize(matrix, newSize, defaultValue);
    }
  }
  /**
   * Create a clone of the matrix
   * @memberof DenseMatrix
   * @return {DenseMatrix} clone
   */


  DenseMatrix.prototype.clone = function () {
    const m = new DenseMatrix({
      data: (0, _object.clone)(this._data),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof DenseMatrix
   * @returns {number[]} size
   */


  DenseMatrix.prototype.size = function () {
    return this._size.slice(0); // return a clone of _size
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   *
   * @return {DenseMatrix} matrix
   */


  DenseMatrix.prototype.map = function (callback) {
    // matrix instance
    const me = this;

    const recurse = function (value, index) {
      if ((0, _is.isArray)(value)) {
        return value.map(function (child, i) {
          return recurse(child, index.concat(i));
        });
      } else {
        return callback(value, index, me);
      }
    }; // return dense format


    return new DenseMatrix({
      data: recurse(this._data, []),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof DenseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   */


  DenseMatrix.prototype.forEach = function (callback) {
    // matrix instance
    const me = this;

    const recurse = function (value, index) {
      if ((0, _is.isArray)(value)) {
        value.forEach(function (child, i) {
          recurse(child, index.concat(i));
        });
      } else {
        callback(value, index, me);
      }
    };

    recurse(this._data, []);
  };
  /**
   * Create an Array with a copy of the data of the DenseMatrix
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.toArray = function () {
    return (0, _object.clone)(this._data);
  };
  /**
   * Get the primitive value of the DenseMatrix: a multidimensional array
   * @memberof DenseMatrix
   * @returns {Array} array
   */


  DenseMatrix.prototype.valueOf = function () {
    return this._data;
  };
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof DenseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  DenseMatrix.prototype.format = function (options) {
    return (0, _string.format)(this._data, options);
  };
  /**
   * Get a string representation of the matrix
   * @memberof DenseMatrix
   * @returns {string} str
   */


  DenseMatrix.prototype.toString = function () {
    return (0, _string.format)(this._data);
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof DenseMatrix
   * @returns {Object}
   */


  DenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'DenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof DenseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix with the diagonal values.
   */


  DenseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    const kSuper = k > 0 ? k : 0;
    const kSub = k < 0 ? -k : 0; // rows & columns

    const rows = this._size[0];
    const columns = this._size[1]; // number diagonal values

    const n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

    const data = []; // loop rows

    for (let i = 0; i < n; i++) {
      data[i] = this._data[i + kSub][i + kSuper];
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [n],
      datatype: this._datatype
    });
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof DenseMatrix
   * @param {Array} size                     The matrix size.
   * @param {number | Matrix | Array } value The values for the diagonal.
   * @param {number | BigNumber} [k=0]       The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]          The default value for non-diagonal
   * @param {string} [datatype]              The datatype for the diagonal
   *
   * @returns {DenseMatrix}
   */


  DenseMatrix.diagonal = function (size, value, k, defaultValue) {
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if ((0, _is.isBigNumber)(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    const kSuper = k > 0 ? k : 0;
    const kSub = k < 0 ? -k : 0; // rows and columns

    const rows = size[0];
    const columns = size[1]; // number of non-zero items

    const n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    let _value; // check value


    if ((0, _is.isArray)(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function (i) {
        // return value @ i
        return value[i];
      };
    } else if ((0, _is.isMatrix)(value)) {
      // matrix size
      const ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function (i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function () {
        // return value
        return value;
      };
    } // discover default value if needed


    if (!defaultValue) {
      // check first value in array
      defaultValue = (0, _is.isBigNumber)(_value(0)) ? _value(0).mul(0) // trick to create a BigNumber with value zero
      : 0;
    } // empty array


    let data = []; // check we need to resize array

    if (size.length > 0) {
      // resize array
      data = (0, _array.resize)(data, size, defaultValue); // fill diagonal

      for (let d = 0; d < n; d++) {
        data[d + kSub][d + kSuper] = _value(d);
      }
    } // create DenseMatrix


    return new DenseMatrix({
      data: data,
      size: [rows, columns]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof DenseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {DenseMatrix}
   */


  DenseMatrix.fromJSON = function (json) {
    return new DenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof DenseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  DenseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    (0, _array.validateIndex)(i, this._size[0]);
    (0, _array.validateIndex)(j, this._size[0]); // swap rows

    DenseMatrix._swapRows(i, j, this._data); // return current instance


    return this;
  };
  /**
   * Swap rows i and j in Dense Matrix data structure.
   *
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   * @param {Array} data     Matrix data
   */


  DenseMatrix._swapRows = function (i, j, data) {
    // swap values i <-> j
    const vi = data[i];
    data[i] = data[j];
    data[j] = vi;
  };
  /**
   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
   * Matrices. Replaces all nested Matrices with Arrays
   * @memberof DenseMatrix
   * @param {Array} data
   * @return {Array} data
   */


  function preprocess(data) {
    for (let i = 0, ii = data.length; i < ii; i++) {
      const elem = data[i];

      if ((0, _is.isArray)(elem)) {
        data[i] = preprocess(elem);
      } else if (elem && elem.isMatrix === true) {
        data[i] = preprocess(elem.valueOf());
      }
    }

    return data;
  }

  return DenseMatrix;
}, {
  isClass: true
});
exports.createDenseMatrixClass = createDenseMatrixClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/utils/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createClone = void 0;

var _object = require("../../utils/object");

var _factory = require("../../utils/factory");

const name = 'clone';
const dependencies = ['typed'];
const createClone =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Clone an object.
   *
   * Syntax:
   *
   *     math.clone(x)
   *
   * Examples:
   *
   *    math.clone(3.5)                   // returns number 3.5
   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
   *    math.clone("hello world")         // returns string "hello world"
   *
   * @param {*} x   Object to be cloned
   * @return {*} A clone of object x
   */
  return typed(name, {
    'any': _object.clone
  });
});
exports.createClone = createClone;
},{"../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/utils/collection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.containsCollections = containsCollections;
exports.deepForEach = deepForEach;
exports.deepMap = deepMap;
exports.reduce = reduce;
exports.scatter = scatter;

var _is = require("./is");

var _IndexError = require("../error/IndexError");

var _array = require("./array");

/**
 * Test whether an array contains collections
 * @param {Array} array
 * @returns {boolean} Returns true when the array contains one or multiple
 *                    collections (Arrays or Matrices). Returns false otherwise.
 */
function containsCollections(array) {
  for (let i = 0; i < array.length; i++) {
    if ((0, _is.isCollection)(array[i])) {
      return true;
    }
  }

  return false;
}
/**
 * Recursively loop over all elements in a given multi dimensional array
 * and invoke the callback on each of the elements.
 * @param {Array | Matrix} array
 * @param {Function} callback     The callback method is invoked with one
 *                                parameter: the current element in the array
 */


function deepForEach(array, callback) {
  if ((0, _is.isMatrix)(array)) {
    array = array.valueOf();
  }

  for (let i = 0, ii = array.length; i < ii; i++) {
    const value = array[i];

    if (Array.isArray(value)) {
      deepForEach(value, callback);
    } else {
      callback(value);
    }
  }
}
/**
 * Execute the callback function element wise for each element in array and any
 * nested array
 * Returns an array with the results
 * @param {Array | Matrix} array
 * @param {Function} callback   The callback is called with two parameters:
 *                              value1 and value2, which contain the current
 *                              element of both arrays.
 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
 *
 * @return {Array | Matrix} res
 */


function deepMap(array, callback, skipZeros) {
  if (array && typeof array.map === 'function') {
    // TODO: replace array.map with a for loop to improve performance
    return array.map(function (x) {
      return deepMap(x, callback, skipZeros);
    });
  } else {
    return callback(array);
  }
}
/**
 * Reduce a given matrix or array to a new matrix or
 * array with one less dimension, applying the given
 * callback in the selected dimension.
 * @param {Array | Matrix} mat
 * @param {number} dim
 * @param {Function} callback
 * @return {Array | Matrix} res
 */


function reduce(mat, dim, callback) {
  const size = Array.isArray(mat) ? (0, _array.arraySize)(mat) : mat.size();

  if (dim < 0 || dim >= size.length) {
    // TODO: would be more clear when throwing a DimensionError here
    throw new _IndexError.IndexError(dim, size.length);
  }

  if ((0, _is.isMatrix)(mat)) {
    return mat.create(_reduce(mat.valueOf(), dim, callback));
  } else {
    return _reduce(mat, dim, callback);
  }
}
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */


function _reduce(mat, dim, callback) {
  let i, ret, val, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      val = mat[0];

      for (i = 1; i < mat.length; i++) {
        val = callback(val, mat[i]);
      }

      return val;
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _reduce(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _reduce(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  const I = mat.length;
  const J = mat[0].length;
  let i, j;
  const ret = [];

  for (j = 0; j < J; j++) {
    const tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
} // TODO: document function scatter


function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
  // a arrays
  const avalues = a._values;
  const aindex = a._index;
  const aptr = a._ptr; // c arrays

  const cindex = c._index; // vars

  let k, k0, k1, i; // check we need to process values (pattern matrix)

  if (x) {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i); // x(i) = A, check we need to call function this time

        if (update) {
          // copy value to workspace calling callback function
          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

          u[i] = mark;
        } else {
          // copy value to workspace
          x[i] = avalues[k];
        }
      } else {
        // i exists in C already
        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

        u[i] = mark;
      }
    }
  } else {
    // values in j
    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
      // row
      i = aindex[k]; // check value exists in current j

      if (w[i] !== mark) {
        // i is new entry in j
        w[i] = mark; // add i to pattern of C

        cindex.push(i);
      } else {
        // indicate function was called on current row
        u[i] = mark;
      }
    }
  }
}
},{"./is":"../node_modules/mathjs/src/utils/is.js","../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js","./array":"../node_modules/mathjs/src/utils/array.js"}],"../node_modules/mathjs/src/function/utils/isInteger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsInteger = void 0;

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'isInteger';
const dependencies = ['typed'];
const createIsInteger =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is an integer number.
   * The function supports `number`, `BigNumber`, and `Fraction`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isInteger(x)
   *
   * Examples:
   *
   *    math.isInteger(2)                     // returns true
   *    math.isInteger(0)                     // returns true
   *    math.isInteger(0.5)                   // returns false
   *    math.isInteger(math.bignumber(500))   // returns true
   *    math.isInteger(math.fraction(4))      // returns true
   *    math.isInteger('3')                   // returns true
   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
   *    math.isInteger(math.complex('2-4i')   // throws an error
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isZero
   *
   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
   *                    Throws an error in case of an unknown data type.
   */
  const isInteger = typed(name, {
    'number': _number.isInteger,
    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
    'BigNumber': function (x) {
      return x.isInt();
    },
    'Fraction': function (x) {
      return x.d === 1 && isFinite(x.n);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, isInteger);
    }
  });
  return isInteger;
});
exports.createIsInteger = createIsInteger;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/plain/number/arithmetic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absNumber = absNumber;
exports.addNumber = addNumber;
exports.subtractNumber = subtractNumber;
exports.multiplyNumber = multiplyNumber;
exports.divideNumber = divideNumber;
exports.unaryMinusNumber = unaryMinusNumber;
exports.unaryPlusNumber = unaryPlusNumber;
exports.cbrtNumber = cbrtNumber;
exports.ceilNumber = ceilNumber;
exports.cubeNumber = cubeNumber;
exports.expNumber = expNumber;
exports.expm1Number = expm1Number;
exports.fixNumber = fixNumber;
exports.floorNumber = floorNumber;
exports.gcdNumber = gcdNumber;
exports.lcmNumber = lcmNumber;
exports.logNumber = logNumber;
exports.log10Number = log10Number;
exports.log2Number = log2Number;
exports.log1pNumber = log1pNumber;
exports.modNumber = modNumber;
exports.nthRootNumber = nthRootNumber;
exports.signNumber = signNumber;
exports.sqrtNumber = sqrtNumber;
exports.squareNumber = squareNumber;
exports.xgcdNumber = xgcdNumber;
exports.powNumber = powNumber;
exports.roundNumber = roundNumber;
exports.normNumber = normNumber;

var _number = require("../../utils/number");

const n1 = 'number';
const n2 = 'number, number';

function absNumber(a) {
  return Math.abs(a);
}

absNumber.signature = n1;

function addNumber(a, b) {
  return a + b;
}

addNumber.signature = n2;

function subtractNumber(a, b) {
  return a - b;
}

subtractNumber.signature = n2;

function multiplyNumber(a, b) {
  return a * b;
}

multiplyNumber.signature = n2;

function divideNumber(a, b) {
  return a / b;
}

divideNumber.signature = n2;

function unaryMinusNumber(x) {
  return -x;
}

unaryMinusNumber.signature = n1;

function unaryPlusNumber(x) {
  return x;
}

unaryPlusNumber.signature = n1;

function cbrtNumber(x) {
  return (0, _number.cbrt)(x);
}

cbrtNumber.signature = n1;

function ceilNumber(x) {
  return Math.ceil(x);
}

ceilNumber.signature = n1;

function cubeNumber(x) {
  return x * x * x;
}

cubeNumber.signature = n1;

function expNumber(x) {
  return Math.exp(x);
}

expNumber.signature = n1;

function expm1Number(x) {
  return (0, _number.expm1)(x);
}

expm1Number.signature = n1;

function fixNumber(x) {
  return x > 0 ? Math.floor(x) : Math.ceil(x);
}

fixNumber.signature = n1;

function floorNumber(x) {
  return Math.floor(x);
}

floorNumber.signature = n1;
/**
 * Calculate gcd for numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the greatest common denominator of a and b
 */

function gcdNumber(a, b) {
  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {
    throw new Error('Parameters in function gcd must be integer numbers');
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm


  let r;

  while (b !== 0) {
    r = a % b;
    a = b;
    b = r;
  }

  return a < 0 ? -a : a;
}

gcdNumber.signature = n2;
/**
 * Calculate lcm for two numbers
 * @param {number} a
 * @param {number} b
 * @returns {number} Returns the least common multiple of a and b
 */

function lcmNumber(a, b) {
  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {
    throw new Error('Parameters in function lcm must be integer numbers');
  }

  if (a === 0 || b === 0) {
    return 0;
  } // https://en.wikipedia.org/wiki/Euclidean_algorithm
  // evaluate lcm here inline to reduce overhead


  let t;
  const prod = a * b;

  while (b !== 0) {
    t = b;
    b = a % t;
    a = t;
  }

  return Math.abs(prod / a);
}

lcmNumber.signature = n2;
/**
 * Calculate the logarithm of a value.
 * @param {number} x
 * @return {number}
 */

function logNumber(x) {
  return Math.log(x);
}

logNumber.signature = n1;
/**
 * Calculate the 10-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log10Number(x) {
  return (0, _number.log10)(x);
}

log10Number.signature = n1;
/**
 * Calculate the 2-base logarithm of a number
 * @param {number} x
 * @return {number}
 */

function log2Number(x) {
  return (0, _number.log2)(x);
}

log2Number.signature = n1;
/**
 * Calculate the natural logarithm of a `number+1`
 * @param {number} x
 * @returns {number}
 */

function log1pNumber(x) {
  return (0, _number.log1p)(x);
}

log1pNumber.signature = n1;
/**
 * Calculate the modulus of two numbers
 * @param {number} x
 * @param {number} y
 * @returns {number} res
 * @private
 */

function modNumber(x, y) {
  if (y > 0) {
    // We don't use JavaScript's % operator here as this doesn't work
    // correctly for x < 0 and x === 0
    // see https://en.wikipedia.org/wiki/Modulo_operation
    return x - y * Math.floor(x / y);
  } else if (y === 0) {
    return x;
  } else {
    // y < 0
    // TODO: implement mod for a negative divisor
    throw new Error('Cannot calculate mod for a negative divisor');
  }
}

modNumber.signature = n2;
/**
 * Calculate the nth root of a, solve x^root == a
 * http://rosettacode.org/wiki/Nth_root#JavaScript
 * @param {number} a
 * @param {number} root
 * @private
 */

function nthRootNumber(a, root) {
  const inv = root < 0;

  if (inv) {
    root = -root;
  }

  if (root === 0) {
    throw new Error('Root must be non-zero');
  }

  if (a < 0 && Math.abs(root) % 2 !== 1) {
    throw new Error('Root must be odd when a is negative.');
  } // edge cases zero and infinity


  if (a === 0) {
    return inv ? Infinity : 0;
  }

  if (!isFinite(a)) {
    return inv ? 0 : a;
  }

  let x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
  // so (-1) ^ (1/root) = -1

  x = a < 0 ? -x : x;
  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
  // Newton's method has some well-known problems at times:
  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

  /*
  let x = 1 // Initial guess
  let xPrev = 1
  let i = 0
  const iMax = 10000
  do {
    const delta = (a / Math.pow(x, root - 1) - x) / root
    xPrev = x
    x = x + delta
    i++
  }
  while (xPrev !== x && i < iMax)
   if (xPrev !== x) {
    throw new Error('Function nthRoot failed to converge')
  }
   return inv ? 1 / x : x
  */
}

nthRootNumber.signature = n2;

function signNumber(x) {
  return (0, _number.sign)(x);
}

signNumber.signature = n1;

function sqrtNumber(x) {
  return Math.sqrt(x);
}

sqrtNumber.signature = n1;

function squareNumber(x) {
  return x * x;
}

squareNumber.signature = n1;
/**
 * Calculate xgcd for two numbers
 * @param {number} a
 * @param {number} b
 * @return {number} result
 * @private
 */

function xgcdNumber(a, b) {
  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
  let t; // used to swap two variables

  let q; // quotient

  let r; // remainder

  let x = 0;
  let lastx = 1;
  let y = 1;
  let lasty = 0;

  if (!(0, _number.isInteger)(a) || !(0, _number.isInteger)(b)) {
    throw new Error('Parameters in function xgcd must be integer numbers');
  }

  while (b) {
    q = Math.floor(a / b);
    r = a - q * b;
    t = x;
    x = lastx - q * x;
    lastx = t;
    t = y;
    y = lasty - q * y;
    lasty = t;
    a = b;
    b = r;
  }

  let res;

  if (a < 0) {
    res = [-a, -lastx, -lasty];
  } else {
    res = [a, a ? lastx : 0, lasty];
  }

  return res;
}

xgcdNumber.signature = n2;
/**
 * Calculates the power of x to y, x^y, for two numbers.
 * @param {number} x
 * @param {number} y
 * @return {number} res
 */

function powNumber(x, y) {
  // x^Infinity === 0 if -1 < x < 1
  // A real number 0 is returned instead of complex(0)
  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
    return 0;
  }

  return Math.pow(x, y);
}

powNumber.signature = n2;
/**
 * round a number to the given number of decimals, or to zero if decimals is
 * not provided
 * @param {number} value
 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
 * @return {number} roundedValue
 */

function roundNumber(value, decimals = 0) {
  return parseFloat((0, _number.toFixed)(value, decimals));
}

roundNumber.signature = n2;
/**
 * Calculate the norm of a number, the absolute value.
 * @param {number} x
 * @return {number}
 */

function normNumber(x) {
  return Math.abs(x);
}

normNumber.signature = n1;
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/plain/number/bitwise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitAndNumber = bitAndNumber;
exports.bitNotNumber = bitNotNumber;
exports.bitOrNumber = bitOrNumber;
exports.bitXorNumber = bitXorNumber;
exports.leftShiftNumber = leftShiftNumber;
exports.rightArithShiftNumber = rightArithShiftNumber;
exports.rightLogShiftNumber = rightLogShiftNumber;

var _number = require("../../utils/number");

const n1 = 'number';
const n2 = 'number, number';

function bitAndNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function bitAnd');
  }

  return x & y;
}

bitAndNumber.signature = n2;

function bitNotNumber(x) {
  if (!(0, _number.isInteger)(x)) {
    throw new Error('Integer expected in function bitNot');
  }

  return ~x;
}

bitNotNumber.signature = n1;

function bitOrNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function bitOr');
  }

  return x | y;
}

bitOrNumber.signature = n2;

function bitXorNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function bitXor');
  }

  return x ^ y;
}

bitXorNumber.signature = n2;

function leftShiftNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function leftShift');
  }

  return x << y;
}

leftShiftNumber.signature = n2;

function rightArithShiftNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function rightArithShift');
  }

  return x >> y;
}

rightArithShiftNumber.signature = n2;

function rightLogShiftNumber(x, y) {
  if (!(0, _number.isInteger)(x) || !(0, _number.isInteger)(y)) {
    throw new Error('Integers expected in function rightLogShift');
  }

  return x >>> y;
}

rightLogShiftNumber.signature = n2;
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/utils/product.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.product = product;

/** @param {number} i
 *  @param {number} n
 *  @returns {number} product of i to n
 */
function product(i, n) {
  let half;

  if (n < i) {
    return 1;
  }

  if (n === i) {
    return n;
  }

  half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

  return product(i, half) * product(half + 1, n);
}
},{}],"../node_modules/mathjs/src/plain/number/combinations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combinationsNumber = combinationsNumber;

var _number = require("../../utils/number");

var _product = require("../../utils/product");

function combinationsNumber(n, k) {
  let prodrange, nMinusk;

  if (!(0, _number.isInteger)(n) || n < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (!(0, _number.isInteger)(k) || k < 0) {
    throw new TypeError('Positive integer value expected in function combinations');
  }

  if (k > n) {
    throw new TypeError('k must be less than or equal to n');
  }

  nMinusk = n - k;

  if (k < nMinusk) {
    prodrange = (0, _product.product)(nMinusk + 1, n);
    return prodrange / (0, _product.product)(1, k);
  }

  prodrange = (0, _product.product)(k + 1, n);
  return prodrange / (0, _product.product)(1, nMinusk);
}

combinationsNumber.signature = 'number, number';
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/product":"../node_modules/mathjs/src/utils/product.js"}],"../node_modules/mathjs/src/plain/number/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phi = exports.e = exports.tau = exports.pi = void 0;
const pi = Math.PI;
exports.pi = pi;
const tau = 2 * Math.PI;
exports.tau = tau;
const e = Math.E;
exports.e = e;
const phi = 1.61803398874989484820458683436563811772030917980576286213545;
exports.phi = phi;
},{}],"../node_modules/mathjs/src/plain/number/logical.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notNumber = notNumber;
exports.orNumber = orNumber;
exports.xorNumber = xorNumber;
exports.andNumber = andNumber;
const n1 = 'number';
const n2 = 'number, number';

function notNumber(x) {
  return !x;
}

notNumber.signature = n1;

function orNumber(x, y) {
  return !!(x || y);
}

orNumber.signature = n2;

function xorNumber(x, y) {
  return !!x !== !!y;
}

xorNumber.signature = n2;

function andNumber(x, y) {
  return !!(x && y);
}

andNumber.signature = n2;
},{}],"../node_modules/mathjs/src/plain/number/relational.js":[function(require,module,exports) {

},{}],"../node_modules/mathjs/src/plain/number/probability.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gammaNumber = gammaNumber;
exports.gammaP = exports.gammaG = void 0;

var _number = require("../../utils/number");

var _product = require("../../utils/product");

function gammaNumber(n) {
  let t, x;

  if ((0, _number.isInteger)(n)) {
    if (n <= 0) {
      return isFinite(n) ? Infinity : NaN;
    }

    if (n > 171) {
      return Infinity; // Will overflow
    }

    return (0, _product.product)(1, n - 1);
  }

  if (n < 0.5) {
    return Math.PI / (Math.sin(Math.PI * n) * gammaNumber(1 - n));
  }

  if (n >= 171.35) {
    return Infinity; // will overflow
  }

  if (n > 85.0) {
    // Extended Stirling Approx
    const twoN = n * n;
    const threeN = twoN * n;
    const fourN = threeN * n;
    const fiveN = fourN * n;
    return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
  }

  --n;
  x = gammaP[0];

  for (let i = 1; i < gammaP.length; ++i) {
    x += gammaP[i] / (n + i);
  }

  t = n + gammaG + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}

gammaNumber.signature = 'number'; // TODO: comment on the variables g and p

const gammaG = 4.7421875;
exports.gammaG = gammaG;
const gammaP = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];
exports.gammaP = gammaP;
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/product":"../node_modules/mathjs/src/utils/product.js"}],"../node_modules/mathjs/src/plain/number/trigonometry.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosNumber = acosNumber;
exports.acoshNumber = acoshNumber;
exports.acotNumber = acotNumber;
exports.acothNumber = acothNumber;
exports.acscNumber = acscNumber;
exports.acschNumber = acschNumber;
exports.asecNumber = asecNumber;
exports.asechNumber = asechNumber;
exports.asinNumber = asinNumber;
exports.asinhNumber = asinhNumber;
exports.atanNumber = atanNumber;
exports.atan2Number = atan2Number;
exports.atanhNumber = atanhNumber;
exports.cosNumber = cosNumber;
exports.coshNumber = coshNumber;
exports.cotNumber = cotNumber;
exports.cothNumber = cothNumber;
exports.cscNumber = cscNumber;
exports.cschNumber = cschNumber;
exports.secNumber = secNumber;
exports.sechNumber = sechNumber;
exports.sinNumber = sinNumber;
exports.sinhNumber = sinhNumber;
exports.tanNumber = tanNumber;
exports.tanhNumber = tanhNumber;

var _number = require("../../utils/number");

const n1 = 'number';
const n2 = 'number, number';

function acosNumber(x) {
  return Math.acos(x);
}

acosNumber.signature = n1;

function acoshNumber(x) {
  return (0, _number.acosh)(x);
}

acoshNumber.signature = n1;

function acotNumber(x) {
  return Math.atan(1 / x);
}

acotNumber.signature = n1;

function acothNumber(x) {
  return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
}

acothNumber.signature = n1;

function acscNumber(x) {
  return Math.asin(1 / x);
}

acscNumber.signature = n1;

function acschNumber(x) {
  const xInv = 1 / x;
  return Math.log(xInv + Math.sqrt(xInv * xInv + 1));
}

acschNumber.signature = n1;

function asecNumber(x) {
  return Math.acos(1 / x);
}

asecNumber.signature = n1;

function asechNumber(x) {
  const xInv = 1 / x;
  const ret = Math.sqrt(xInv * xInv - 1);
  return Math.log(ret + xInv);
}

asechNumber.signature = n1;

function asinNumber(x) {
  return Math.asin(x);
}

asinNumber.signature = n1;

function asinhNumber(x) {
  return (0, _number.asinh)(x);
}

asinhNumber.signature = n1;

function atanNumber(x) {
  return Math.atan(x);
}

atanNumber.signature = n1;

function atan2Number(y, x) {
  return Math.atan2(y, x);
}

atan2Number.signature = n2;

function atanhNumber(x) {
  return (0, _number.atanh)(x);
}

atanhNumber.signature = n1;

function cosNumber(x) {
  return Math.cos(x);
}

cosNumber.signature = n1;

function coshNumber(x) {
  return (0, _number.cosh)(x);
}

coshNumber.signature = n1;

function cotNumber(x) {
  return 1 / Math.tan(x);
}

cotNumber.signature = n1;

function cothNumber(x) {
  const e = Math.exp(2 * x);
  return (e + 1) / (e - 1);
}

cothNumber.signature = n1;

function cscNumber(x) {
  return 1 / Math.sin(x);
}

cscNumber.signature = n1;

function cschNumber(x) {
  // consider values close to zero (+/-)
  if (x === 0) {
    return Number.POSITIVE_INFINITY;
  } else {
    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * (0, _number.sign)(x);
  }
}

cschNumber.signature = n1;

function secNumber(x) {
  return 1 / Math.cos(x);
}

secNumber.signature = n1;

function sechNumber(x) {
  return 2 / (Math.exp(x) + Math.exp(-x));
}

sechNumber.signature = n1;

function sinNumber(x) {
  return Math.sin(x);
}

sinNumber.signature = n1;

function sinhNumber(x) {
  return (0, _number.sinh)(x);
}

sinhNumber.signature = n1;

function tanNumber(x) {
  return Math.tan(x);
}

tanNumber.signature = n1;

function tanhNumber(x) {
  return (0, _number.tanh)(x);
}

tanhNumber.signature = n1;
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/plain/number/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIntegerNumber = isIntegerNumber;
exports.isNegativeNumber = isNegativeNumber;
exports.isPositiveNumber = isPositiveNumber;
exports.isZeroNumber = isZeroNumber;
exports.isNaNNumber = isNaNNumber;

var _number = require("../../utils/number");

const n1 = 'number';

function isIntegerNumber(x) {
  return (0, _number.isInteger)(x);
}

isIntegerNumber.signature = n1;

function isNegativeNumber(x) {
  return x < 0;
}

isNegativeNumber.signature = n1;

function isPositiveNumber(x) {
  return x > 0;
}

isPositiveNumber.signature = n1;

function isZeroNumber(x) {
  return x === 0;
}

isZeroNumber.signature = n1;

function isNaNNumber(x) {
  return Number.isNaN(x);
}

isNaNNumber.signature = n1;
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/plain/number/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arithmetic = require("./arithmetic");

Object.keys(_arithmetic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _arithmetic[key];
    }
  });
});

var _bitwise = require("./bitwise");

Object.keys(_bitwise).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bitwise[key];
    }
  });
});

var _combinations = require("./combinations");

Object.keys(_combinations).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _combinations[key];
    }
  });
});

var _constants = require("./constants");

Object.keys(_constants).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constants[key];
    }
  });
});

var _logical = require("./logical");

Object.keys(_logical).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _logical[key];
    }
  });
});

var _relational = require("./relational");

Object.keys(_relational).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _relational[key];
    }
  });
});

var _probability = require("./probability");

Object.keys(_probability).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _probability[key];
    }
  });
});

var _trigonometry = require("./trigonometry");

Object.keys(_trigonometry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _trigonometry[key];
    }
  });
});

var _utils = require("./utils");

Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _utils[key];
    }
  });
});
},{"./arithmetic":"../node_modules/mathjs/src/plain/number/arithmetic.js","./bitwise":"../node_modules/mathjs/src/plain/number/bitwise.js","./combinations":"../node_modules/mathjs/src/plain/number/combinations.js","./constants":"../node_modules/mathjs/src/plain/number/constants.js","./logical":"../node_modules/mathjs/src/plain/number/logical.js","./relational":"../node_modules/mathjs/src/plain/number/relational.js","./probability":"../node_modules/mathjs/src/plain/number/probability.js","./trigonometry":"../node_modules/mathjs/src/plain/number/trigonometry.js","./utils":"../node_modules/mathjs/src/plain/number/utils.js"}],"../node_modules/mathjs/src/function/utils/isNegative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNegative = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'isNegative';
const dependencies = ['typed'];
const createIsNegative =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is negative: smaller than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNegative(x)
   *
   * Examples:
   *
   *    math.isNegative(3)                     // returns false
   *    math.isNegative(-2)                    // returns true
   *    math.isNegative(0)                     // returns false
   *    math.isNegative(-0)                    // returns false
   *    math.isNegative(math.bignumber(2))     // returns false
   *    math.isNegative(math.fraction(-2, 5))  // returns true
   *    math.isNegative('-2')                  // returns true
   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
   *
   * See also:
   *
   *    isNumeric, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  const isNegative = typed(name, {
    'number': _number.isNegativeNumber,
    'BigNumber': function (x) {
      return x.isNeg() && !x.isZero() && !x.isNaN();
    },
    'Fraction': function (x) {
      return x.s < 0; // It's enough to decide on the sign
    },
    'Unit': function (x) {
      return isNegative(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, isNegative);
    }
  });
  return isNegative;
});
exports.createIsNegative = createIsNegative;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/utils/isNumeric.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNumeric = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

const name = 'isNumeric';
const dependencies = ['typed'];
const createIsNumeric =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is an numeric value.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNumeric(x)
   *
   * Examples:
   *
   *    math.isNumeric(2)                     // returns true
   *    math.isNumeric('2')                   // returns true
   *    math.hasNumericValue('2')             // returns true
   *    math.isNumeric(0)                     // returns true
   *    math.isNumeric(math.bignumber(500))   // returns true
   *    math.isNumeric(math.fraction(4))      // returns true
   *    math.isNumeric(math.complex('2-4i')   // returns false
   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, hasNumericValue
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, or `boolean`. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  const isNumeric = typed(name, {
    'number | BigNumber | Fraction | boolean': function () {
      return true;
    },
    'Complex | Unit | string | null | undefined | Node': function () {
      return false;
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, isNumeric);
    }
  });
  return isNumeric;
});
exports.createIsNumeric = createIsNumeric;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/utils/hasNumericValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHasNumericValue = void 0;

var _factory = require("../../utils/factory");

const name = 'hasNumericValue';
const dependencies = ['typed', 'isNumeric'];
const createHasNumericValue =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  isNumeric
}) => {
  /**
   * Test whether a value is an numeric value.
   *
   * In case of a string, true is returned if the string contains a numeric value.
   *
   * Syntax:
   *
   *     math.hasNumericValue(x)
   *
   * Examples:
   *
   *    math.hasNumericValue(2)                     // returns true
   *    math.hasNumericValue('2')                   // returns true
   *    math.isNumeric('2')                         // returns false
   *    math.hasNumericValue(0)                     // returns true
   *    math.hasNumericValue(math.bignumber(500))   // returns true
   *    math.hasNumericValue(math.fraction(4))      // returns true
   *    math.hasNumericValue(math.complex('2-4i')   // returns false
   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
   *
   * See also:
   *
   *    isZero, isPositive, isNegative, isInteger, isNumeric
   *
   * @param {*} x       Value to be tested
   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
   *                    Throws an error in case of unknown types.
   */
  return typed(name, {
    'string': function (x) {
      return x.trim().length > 0 && !isNaN(Number(x));
    },
    'any': function (x) {
      return isNumeric(x);
    }
  });
});
exports.createHasNumericValue = createHasNumericValue;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/utils/isPositive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsPositive = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'isPositive';
const dependencies = ['typed'];
const createIsPositive =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is positive: larger than zero.
   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPositive(x)
   *
   * Examples:
   *
   *    math.isPositive(3)                     // returns true
   *    math.isPositive(-2)                    // returns false
   *    math.isPositive(0)                     // returns false
   *    math.isPositive(-0)                    // returns false
   *    math.isPositive(0.5)                   // returns true
   *    math.isPositive(math.bignumber(2))     // returns true
   *    math.isPositive(math.fraction(-2, 5))  // returns false
   *    math.isPositive(math.fraction(1,3))    // returns false
   *    math.isPositive('2')                   // returns true
   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  const isPositive = typed(name, {
    'number': _number.isPositiveNumber,
    'BigNumber': function (x) {
      return !x.isNeg() && !x.isZero() && !x.isNaN();
    },
    'Fraction': function (x) {
      return x.s > 0 && x.n > 0;
    },
    'Unit': function (x) {
      return isPositive(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, isPositive);
    }
  });
  return isPositive;
});
exports.createIsPositive = createIsPositive;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/utils/isZero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsZero = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'isZero';
const dependencies = ['typed'];
const createIsZero =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is zero.
   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
   * `Complex`, and `Unit`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isZero(x)
   *
   * Examples:
   *
   *    math.isZero(0)                     // returns true
   *    math.isZero(2)                     // returns false
   *    math.isZero(0.5)                   // returns false
   *    math.isZero(math.bignumber(0))     // returns true
   *    math.isZero(math.fraction(0))      // returns true
   *    math.isZero(math.fraction(1,3))    // returns false
   *    math.isZero(math.complex('2 - 4i') // returns false
   *    math.isZero(math.complex('0i')     // returns true
   *    math.isZero('0')                   // returns true
   *    math.isZero('2')                   // returns false
   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
   *
   * See also:
   *
   *    isNumeric, isPositive, isNegative, isInteger
   *
   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
   * @return {boolean}  Returns true when `x` is zero.
   *                    Throws an error in case of an unknown data type.
   */
  const isZero = typed(name, {
    'number': _number.isZeroNumber,
    'BigNumber': function (x) {
      return x.isZero();
    },
    'Complex': function (x) {
      return x.re === 0 && x.im === 0;
    },
    'Fraction': function (x) {
      return x.d === 1 && x.n === 0;
    },
    'Unit': function (x) {
      return isZero(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, isZero);
    }
  });
  return isZero;
});
exports.createIsZero = createIsZero;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/utils/isNaN.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNaN = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'isNaN';
const dependencies = ['typed'];
const createIsNaN =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is NaN (not a number).
   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isNaN(x)
   *
   * Examples:
   *
   *    math.isNaN(3)                     // returns false
   *    math.isNaN(NaN)                   // returns true
   *    math.isNaN(0)                     // returns false
   *    math.isNaN(math.bignumber(NaN))   // returns true
   *    math.isNaN(math.bignumber(0))     // returns false
   *    math.isNaN(math.fraction(-2, 5))  // returns false
   *    math.isNaN('-2')                  // returns false
   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
   *
   * See also:
   *
   *    isNumeric, isNegative, isPositive, isZero, isInteger
   *
   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is NaN.
   *                    Throws an error in case of an unknown data type.
   */
  return typed(name, {
    'number': _number.isNaNNumber,
    'BigNumber': function (x) {
      return x.isNaN();
    },
    'Fraction': function (x) {
      return false;
    },
    'Complex': function (x) {
      return x.isNaN();
    },
    'Unit': function (x) {
      return Number.isNaN(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, Number.isNaN);
    }
  });
});
exports.createIsNaN = createIsNaN;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/utils/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.warnOnce = void 0;

/**
 * Log a console.warn message only once
 */
const warnOnce = (() => {
  const messages = {};
  return function warnOnce(...args) {
    const message = args.join(', ');

    if (!messages[message]) {
      messages[message] = true;
      console.warn('Warning:', ...args);
    }
  };
})();

exports.warnOnce = warnOnce;
},{}],"../node_modules/mathjs/src/function/utils/typeOf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeprecatedTypeof = exports.createTypeOf = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

var _log = require("../../utils/log");

const name = 'typeOf';
const dependencies = ['typed'];
const createTypeOf =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Determine the type of a variable.
   *
   * Function `typeOf` recognizes the following types of objects:
   *
   * Object                 | Returns       | Example
   * ---------------------- | ------------- | ------------------------------------------
   * null                   | `'null'`      | `math.typeOf(null)`
   * number                 | `'number'`    | `math.typeOf(3.5)`
   * boolean                | `'boolean'`   | `math.typeOf(true)`
   * string                 | `'string'`    | `math.typeOf('hello world')`
   * Array                  | `'Array'`     | `math.typeOf([1, 2, 3])`
   * Date                   | `'Date'`      | `math.typeOf(new Date())`
   * Function               | `'Function'`  | `math.typeOf(function () {})`
   * Object                 | `'Object'`    | `math.typeOf({a: 2, b: 3})`
   * RegExp                 | `'RegExp'`    | `math.typeOf(/a regexp/)`
   * undefined              | `'undefined'` | `math.typeOf(undefined)`
   * math.BigNumber         | `'BigNumber'` | `math.typeOf(math.bignumber('2.3e500'))`
   * math.Chain             | `'Chain'`     | `math.typeOf(math.chain(2))`
   * math.Complex           | `'Complex'`   | `math.typeOf(math.complex(2, 3))`
   * math.Fraction          | `'Fraction'`  | `math.typeOf(math.fraction(1, 3))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Help              | `'Help'`      | `math.typeOf(math.help('sqrt'))`
   * math.Index             | `'Index'`     | `math.typeOf(math.index(1, 3))`
   * math.Matrix            | `'Matrix'`    | `math.typeOf(math.matrix([[1,2], [3, 4]]))`
   * math.Range             | `'Range'`     | `math.typeOf(math.range(0, 10))`
   * math.ResultSet         | `'ResultSet'` | `math.typeOf(math.evaluate('a=2\nb=3'))`
   * math.Unit              | `'Unit'`      | `math.typeOf(math.unit('45 deg'))`
   * math.AccessorNode            | `'AccessorNode'`            | `math.typeOf(math.parse('A[2]'))`
   * math.ArrayNode               | `'ArrayNode'`               | `math.typeOf(math.parse('[1,2,3]'))`
   * math.AssignmentNode          | `'AssignmentNode'`          | `math.typeOf(math.parse('x=2'))`
   * math.BlockNode               | `'BlockNode'`               | `math.typeOf(math.parse('a=2; b=3'))`
   * math.ConditionalNode         | `'ConditionalNode'`         | `math.typeOf(math.parse('x<0 ? -x : x'))`
   * math.ConstantNode            | `'ConstantNode'`            | `math.typeOf(math.parse('2.3'))`
   * math.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeOf(math.parse('f(x)=x^2'))`
   * math.FunctionNode            | `'FunctionNode'`            | `math.typeOf(math.parse('sqrt(4)'))`
   * math.IndexNode               | `'IndexNode'`               | `math.typeOf(math.parse('A[2]').index)`
   * math.ObjectNode              | `'ObjectNode'`              | `math.typeOf(math.parse('{a:2}'))`
   * math.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeOf(math.parse('(2+3)'))`
   * math.RangeNode               | `'RangeNode'`               | `math.typeOf(math.parse('1:10'))`
   * math.SymbolNode              | `'SymbolNode'`              | `math.typeOf(math.parse('x'))`
   *
   * Syntax:
   *
   *    math.typeOf(x)
   *
   * Examples:
   *
   *    math.typeOf(3.5)                     // returns 'number'
   *    math.typeOf(math.complex('2-4i'))    // returns 'Complex'
   *    math.typeOf(math.unit('45 deg'))     // returns 'Unit'
   *    math.typeOf('hello world')           // returns 'string'
   *
   * @param {*} x     The variable for which to test the type.
   * @return {string} Returns the name of the type. Primitive types are lower case,
   *                  non-primitive types are upper-camel-case.
   *                  For example 'number', 'string', 'Array', 'Date'.
   */
  return typed(name, {
    'any': _is.typeOf
  });
}); // For backward compatibility, deprecated since version 6.0.0. Date: 2018-11-06

exports.createTypeOf = createTypeOf;
const createDeprecatedTypeof =
/* #__PURE__ */
(0, _factory.factory)('typeof', [], () => {
  return function (...args) {
    (0, _log.warnOnce)('Function "typeof" has been renamed to "typeOf" in v6.0.0, please use the new function instead.');
    return _is.typeOf.apply(_is.typeOf, args);
  };
});
exports.createDeprecatedTypeof = createDeprecatedTypeof;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/log":"../node_modules/mathjs/src/utils/log.js"}],"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nearlyEqual = nearlyEqual;

/**
 * Compares two BigNumbers.
 * @param {BigNumber} x       First value to compare
 * @param {BigNumber} y       Second value to compare
 * @param {number} [epsilon]  The maximum relative difference between x and y
 *                            If epsilon is undefined or null, the function will
 *                            test whether x and y are exactly equal.
 * @return {boolean} whether the two numbers are nearly equal
 */
function nearlyEqual(x, y, epsilon) {
  // if epsilon is null or undefined, test whether x and y are exactly equal
  if (epsilon === null || epsilon === undefined) {
    return x.eq(y);
  } // use "==" operator, handles infinities


  if (x.eq(y)) {
    return true;
  } // NaN


  if (x.isNaN() || y.isNaN()) {
    return false;
  } // at this point x and y should be finite


  if (x.isFinite() && y.isFinite()) {
    // check numbers are very close, needed when comparing numbers near zero
    const diff = x.minus(y).abs();

    if (diff.isZero()) {
      return true;
    } else {
      // use relative error
      const max = x.constructor.max(x.abs(), y.abs());
      return diff.lte(max.times(epsilon));
    }
  } // Infinite and Number or negative Infinite and positive Infinite cases


  return false;
}
},{}],"../node_modules/mathjs/src/utils/complex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complexEquals = complexEquals;

var _number = require("./number");

/**
 * Test whether two complex values are equal provided a given epsilon.
 * Does not use or change the global Complex.EPSILON setting
 * @param {Complex} x
 * @param {Complex} y
 * @param {number} epsilon
 * @returns {boolean}
 */
function complexEquals(x, y, epsilon) {
  return (0, _number.nearlyEqual)(x.re, y.re, epsilon) && (0, _number.nearlyEqual)(x.im, y.im, epsilon);
}
},{"./number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/function/relational/equalScalar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEqualScalarNumber = exports.createEqualScalar = void 0;

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _complex = require("../../utils/complex");

const name = 'equalScalar';
const dependencies = ['typed', 'config'];
const createEqualScalar =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config
}) => {
  /**
   * Test whether two scalar values are nearly equal.
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
   * @private
   */
  const equalScalar = typed(name, {
    'boolean, boolean': function (x, y) {
      return x === y;
    },
    'number, number': function (x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.eq(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function (x, y) {
      return x.equals(y);
    },
    'Complex, Complex': function (x, y) {
      return (0, _complex.complexEquals)(x, y, config.epsilon);
    },
    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return equalScalar(x.value, y.value);
    }
  });
  return equalScalar;
});
exports.createEqualScalar = createEqualScalar;
const createEqualScalarNumber = (0, _factory.factory)(name, ['typed', 'config'], ({
  typed,
  config
}) => {
  return typed(name, {
    'number, number': function (x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createEqualScalarNumber = createEqualScalarNumber;
},{"../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/complex":"../node_modules/mathjs/src/utils/complex.js"}],"../node_modules/mathjs/src/type/matrix/SparseMatrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSparseMatrixClass = void 0;

var _is = require("../../utils/is");

var _number = require("../../utils/number");

var _string = require("../../utils/string");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _DimensionError = require("../../error/DimensionError");

const name = 'SparseMatrix';
const dependencies = ['typed', 'equalScalar', 'Matrix'];
const createSparseMatrixClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar,
  Matrix
}) => {
  /**
   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
   * for sparse matrices.
   * @class SparseMatrix
   */
  function SparseMatrix(data, datatype) {
    if (!(this instanceof SparseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0, _is.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0, _is.isMatrix)(data)) {
      // create from matrix
      _createFromMatrix(this, data, datatype);
    } else if (data && (0, _is.isArray)(data.index) && (0, _is.isArray)(data.ptr) && (0, _is.isArray)(data.size)) {
      // initialize fields
      this._values = data.values;
      this._index = data.index;
      this._ptr = data.ptr;
      this._size = data.size;
      this._datatype = datatype || data.datatype;
    } else if ((0, _is.isArray)(data)) {
      // create from array
      _createFromArray(this, data, datatype);
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._values = [];
      this._index = [];
      this._ptr = [0];
      this._size = [0, 0];
      this._datatype = datatype;
    }
  }

  function _createFromMatrix(matrix, source, datatype) {
    // check matrix type
    if (source.type === 'SparseMatrix') {
      // clone arrays
      matrix._values = source._values ? (0, _object.clone)(source._values) : undefined;
      matrix._index = (0, _object.clone)(source._index);
      matrix._ptr = (0, _object.clone)(source._ptr);
      matrix._size = (0, _object.clone)(source._size);
      matrix._datatype = datatype || source._datatype;
    } else {
      // build from matrix data
      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
    }
  }

  function _createFromArray(matrix, data, datatype) {
    // initialize fields
    matrix._values = [];
    matrix._index = [];
    matrix._ptr = [];
    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

    const rows = data.length;
    let columns = 0; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0;

    if ((0, _is.isString)(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    } // check we have rows (empty array)


    if (rows > 0) {
      // column index
      let j = 0;

      do {
        // store pointer to values index
        matrix._ptr.push(matrix._index.length); // loop rows


        for (let i = 0; i < rows; i++) {
          // current row
          const row = data[i]; // check row is an array

          if ((0, _is.isArray)(row)) {
            // update columns if needed (only on first column)
            if (j === 0 && columns < row.length) {
              columns = row.length;
            } // check row has column


            if (j < row.length) {
              // value
              const v = row[j]; // check value != 0

              if (!eq(v, zero)) {
                // store value
                matrix._values.push(v); // index


                matrix._index.push(i);
              }
            }
          } else {
            // update columns if needed (only on first column)
            if (j === 0 && columns < 1) {
              columns = 1;
            } // check value != 0 (row is a scalar)


            if (!eq(row, zero)) {
              // store value
              matrix._values.push(row); // index


              matrix._index.push(i);
            }
          }
        } // increment index


        j++;
      } while (j < columns);
    } // store number of values in ptr


    matrix._ptr.push(matrix._index.length); // size


    matrix._size = [rows, columns];
  }

  SparseMatrix.prototype = new Matrix();
  /**
   * Create a new SparseMatrix
   */

  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Attach type information
   */


  SparseMatrix.prototype.type = 'SparseMatrix';
  SparseMatrix.prototype.isSparseMatrix = true;
  /**
   * Get the matrix type
   *
   * Usage:
   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
   *
   * @memberOf SparseMatrix
   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
   */

  SparseMatrix.prototype.getDataType = function () {
    return (0, _array.getArrayDataType)(this._values, _is.typeOf);
  };
  /**
   * Get the storage format used by the matrix.
   *
   * Usage:
   *     const format = matrix.storage()   // retrieve storage format
   *
   * @memberof SparseMatrix
   * @return {string}           The storage format.
   */


  SparseMatrix.prototype.storage = function () {
    return 'sparse';
  };
  /**
   * Get the datatype of the data stored in the matrix.
   *
   * Usage:
   *     const format = matrix.datatype()    // retrieve matrix datatype
   *
   * @memberof SparseMatrix
   * @return {string}           The datatype.
   */


  SparseMatrix.prototype.datatype = function () {
    return this._datatype;
  };
  /**
   * Create a new SparseMatrix
   * @memberof SparseMatrix
   * @param {Array} data
   * @param {string} [datatype]
   */


  SparseMatrix.prototype.create = function (data, datatype) {
    return new SparseMatrix(data, datatype);
  };
  /**
   * Get the matrix density.
   *
   * Usage:
   *     const density = matrix.density()                   // retrieve matrix density
   *
   * @memberof SparseMatrix
   * @return {number}           The matrix density.
   */


  SparseMatrix.prototype.density = function () {
    // rows & columns
    const rows = this._size[0];
    const columns = this._size[1]; // calculate density

    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
  };
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @memberof SparseMatrix
   * @param {Index} index
   * @param {Array | Matrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */


  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke subset on a Pattern only matrix');
    } // check arguments


    switch (arguments.length) {
      case 1:
        return _getsubset(this, index);
      // intentional fall through

      case 2:
      case 3:
        return _setsubset(this, index, replacement, defaultValue);

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };

  function _getsubset(matrix, idx) {
    // check idx
    if (!(0, _is.isIndex)(idx)) {
      throw new TypeError('Invalid index');
    }

    const isScalar = idx.isScalar();

    if (isScalar) {
      // return a scalar
      return matrix.get(idx.min());
    } // validate dimensions


    const size = idx.size();

    if (size.length !== matrix._size.length) {
      throw new _DimensionError.DimensionError(size.length, matrix._size.length);
    } // vars


    let i, ii, k, kk; // validate if any of the ranges in the index is out of range

    const min = idx.min();
    const max = idx.max();

    for (i = 0, ii = matrix._size.length; i < ii; i++) {
      (0, _array.validateIndex)(min[i], matrix._size[i]);
      (0, _array.validateIndex)(max[i], matrix._size[i]);
    } // matrix arrays


    const mvalues = matrix._values;
    const mindex = matrix._index;
    const mptr = matrix._ptr; // rows & columns dimensions for result matrix

    const rows = idx.dimension(0);
    const columns = idx.dimension(1); // workspace & permutation vector

    const w = [];
    const pv = []; // loop rows in resulting matrix

    rows.forEach(function (i, r) {
      // update permutation vector
      pv[i] = r[0]; // mark i in workspace

      w[i] = true;
    }); // result matrix arrays

    const values = mvalues ? [] : undefined;
    const index = [];
    const ptr = []; // loop columns in result matrix

    columns.forEach(function (j) {
      // update ptr
      ptr.push(index.length); // loop values in column j

      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
        // row
        i = mindex[k]; // check row is in result matrix

        if (w[i] === true) {
          // push index
          index.push(pv[i]); // check we need to process values

          if (values) {
            values.push(mvalues[k]);
          }
        }
      }
    }); // update ptr

    ptr.push(index.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: size,
      datatype: matrix._datatype
    });
  }

  function _setsubset(matrix, index, submatrix, defaultValue) {
    // check index
    if (!index || index.isIndex !== true) {
      throw new TypeError('Invalid index');
    } // get index size and check whether the index contains a single value


    const iSize = index.size();
    const isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

    let sSize;

    if ((0, _is.isMatrix)(submatrix)) {
      // submatrix size
      sSize = submatrix.size(); // use array representation

      submatrix = submatrix.toArray();
    } else {
      // get submatrix size (array, scalar)
      sSize = (0, _array.arraySize)(submatrix);
    } // check index is a scalar


    if (isScalar) {
      // verify submatrix is a scalar
      if (sSize.length !== 0) {
        throw new TypeError('Scalar expected');
      } // set value


      matrix.set(index.min(), submatrix, defaultValue);
    } else {
      // validate dimensions, index size must be one or two dimensions
      if (iSize.length !== 1 && iSize.length !== 2) {
        throw new _DimensionError.DimensionError(iSize.length, matrix._size.length, '<');
      } // check submatrix and index have the same dimensions


      if (sSize.length < iSize.length) {
        // calculate number of missing outer dimensions
        let i = 0;
        let outer = 0;

        while (iSize[i] === 1 && sSize[i] === 1) {
          i++;
        }

        while (iSize[i] === 1) {
          outer++;
          i++;
        } // unsqueeze both outer and inner dimensions


        submatrix = (0, _array.unsqueeze)(submatrix, iSize.length, outer, sSize);
      } // check whether the size of the submatrix matches the index size


      if (!(0, _object.deepStrictEqual)(iSize, sSize)) {
        throw new _DimensionError.DimensionError(iSize, sSize, '>');
      } // offsets


      const x0 = index.min()[0];
      const y0 = index.min()[1]; // submatrix rows and columns

      const m = sSize[0];
      const n = sSize[1]; // loop submatrix

      for (let x = 0; x < m; x++) {
        // loop columns
        for (let y = 0; y < n; y++) {
          // value at i, j
          const v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

          matrix.set([x + x0, y + y0], v, defaultValue);
        }
      }
    }

    return matrix;
  }
  /**
   * Get a single element from the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @return {*} value
   */


  SparseMatrix.prototype.get = function (index) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke get on a Pattern only matrix');
    } // row and column


    const i = index[0];
    const j = index[1]; // check i, j are valid

    (0, _array.validateIndex)(i, this._size[0]);
    (0, _array.validateIndex)(j, this._size[1]); // find value index

    const k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      return this._values[k];
    }

    return 0;
  };
  /**
   * Replace a single element in the matrix.
   * @memberof SparseMatrix
   * @param {number[]} index   Zero-based index
   * @param {*} v
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be set to zero.
   * @return {SparseMatrix} self
   */


  SparseMatrix.prototype.set = function (index, v, defaultValue) {
    if (!(0, _is.isArray)(index)) {
      throw new TypeError('Array expected');
    }

    if (index.length !== this._size.length) {
      throw new _DimensionError.DimensionError(index.length, this._size.length);
    } // check it is a pattern matrix


    if (!this._values) {
      throw new Error('Cannot invoke set on a Pattern only matrix');
    } // row and column


    const i = index[0];
    const j = index[1]; // rows & columns

    let rows = this._size[0];
    let columns = this._size[1]; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0;

    if ((0, _is.isString)(this._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, this._datatype);
    } // check we need to resize matrix


    if (i > rows - 1 || j > columns - 1) {
      // resize matrix
      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


      rows = this._size[0];
      columns = this._size[1];
    } // check i, j are valid


    (0, _array.validateIndex)(i, rows);
    (0, _array.validateIndex)(j, columns); // find value index

    const k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


    if (k < this._ptr[j + 1] && this._index[k] === i) {
      // check value != 0
      if (!eq(v, zero)) {
        // update value
        this._values[k] = v;
      } else {
        // remove value from matrix
        _remove(k, j, this._values, this._index, this._ptr);
      }
    } else {
      // insert value @ (i, j)
      _insert(k, i, j, v, this._values, this._index, this._ptr);
    }

    return this;
  };

  function _getValueIndex(i, top, bottom, index) {
    // check row is on the bottom side
    if (bottom - top === 0) {
      return bottom;
    } // loop rows [top, bottom[


    for (let r = top; r < bottom; r++) {
      // check we found value index
      if (index[r] === i) {
        return r;
      }
    } // we did not find row


    return top;
  }

  function _remove(k, j, values, index, ptr) {
    // remove value @ k
    values.splice(k, 1);
    index.splice(k, 1); // update pointers

    for (let x = j + 1; x < ptr.length; x++) {
      ptr[x]--;
    }
  }

  function _insert(k, i, j, v, values, index, ptr) {
    // insert value
    values.splice(k, 0, v); // update row for k

    index.splice(k, 0, i); // update column pointers

    for (let x = j + 1; x < ptr.length; x++) {
      ptr[x]++;
    }
  }
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
    // validate arguments
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // check sizes


    size.forEach(function (value) {
      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    }); // matrix to resize

    const m = copy ? this.clone() : this; // resize matrix

    return _resize(m, size[0], size[1], defaultValue);
  };

  function _resize(matrix, rows, columns, defaultValue) {
    // value to insert at the time of growing matrix
    let value = defaultValue || 0; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0;

    if ((0, _is.isString)(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

      value = typed.convert(value, matrix._datatype);
    } // should we insert the value?


    const ins = !eq(value, zero); // old columns and rows

    const r = matrix._size[0];
    let c = matrix._size[1];
    let i, j, k; // check we need to increase columns

    if (columns > c) {
      // loop new columns
      for (j = c; j < columns; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

        if (ins) {
          // loop rows
          for (i = 0; i < r; i++) {
            // add new matrix._values
            matrix._values.push(value); // update matrix._index


            matrix._index.push(i);
          }
        }
      } // store number of matrix._values in matrix._ptr


      matrix._ptr[columns] = matrix._values.length;
    } else if (columns < c) {
      // truncate matrix._ptr
      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
    } // update columns


    c = columns; // check we need to increase rows

    if (rows > r) {
      // check we have to insert values
      if (ins) {
        // inserts
        let n = 0; // loop columns

        for (j = 0; j < c; j++) {
          // update matrix._ptr for current column
          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

          k = matrix._ptr[j + 1] + n; // pointer

          let p = 0; // loop new rows, initialize pointer

          for (i = r; i < rows; i++, p++) {
            // add value
            matrix._values.splice(k + p, 0, value); // update matrix._index


            matrix._index.splice(k + p, 0, i); // increment inserts


            n++;
          }
        } // store number of matrix._values in matrix._ptr


        matrix._ptr[c] = matrix._values.length;
      }
    } else if (rows < r) {
      // deletes
      let d = 0; // loop columns

      for (j = 0; j < c; j++) {
        // update matrix._ptr for current column
        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

        const k0 = matrix._ptr[j];
        const k1 = matrix._ptr[j + 1] - d; // loop matrix._index

        for (k = k0; k < k1; k++) {
          // row
          i = matrix._index[k]; // check we need to delete value and matrix._index

          if (i > rows - 1) {
            // remove value
            matrix._values.splice(k, 1); // remove item from matrix._index


            matrix._index.splice(k, 1); // increase deletes


            d++;
          }
        }
      } // update matrix._ptr for current column


      matrix._ptr[j] = matrix._values.length;
    } // update matrix._size


    matrix._size[0] = rows;
    matrix._size[1] = columns; // return matrix

    return matrix;
  }
  /**
   * Reshape the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (reshape in place).
   *
   * NOTE: This might be better suited to copy by default, instead of modifying
   *       in place. For now, it operates in place to remain consistent with
   *       resize().
   *
   * @memberof SparseMatrix
   * @param {number[]} size           The new size the matrix should have.
   * @param {boolean} [copy]          Return a reshaped copy of the matrix
   *
   * @return {Matrix}                 The reshaped matrix
   */


  SparseMatrix.prototype.reshape = function (size, copy) {
    // validate arguments
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected');
    }

    if (size.length !== 2) {
      throw new Error('Sparse matrices can only be reshaped in two dimensions');
    } // check sizes


    size.forEach(function (value) {
      if (!(0, _is.isNumber)(value) || !(0, _number.isInteger)(value) || value < 0) {
        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    }); // m * n must not change

    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
    } // matrix to reshape


    const m = copy ? this.clone() : this; // return unchanged if the same shape

    if (this._size[0] === size[0] && this._size[1] === size[1]) {
      return m;
    } // Convert to COO format (generate a column index)


    const colIndex = [];

    for (let i = 0; i < m._ptr.length; i++) {
      for (let j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
        colIndex.push(i);
      }
    } // Clone the values array


    const values = m._values.slice(); // Clone the row index array


    const rowIndex = m._index.slice(); // Transform the (row, column) indices


    for (let i = 0; i < m._index.length; i++) {
      const r1 = rowIndex[i];
      const c1 = colIndex[i];
      const flat = r1 * m._size[1] + c1;
      colIndex[i] = flat % size[1];
      rowIndex[i] = Math.floor(flat / size[1]);
    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
    // sorting several arrays based on some other array.
    // OR, we could easily just:
    // 1. Remove all values from the matrix


    m._values.length = 0;
    m._index.length = 0;
    m._ptr.length = size[1] + 1;
    m._size = size.slice();

    for (let i = 0; i < m._ptr.length; i++) {
      m._ptr[i] = 0;
    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
    // This step is probably the most time-consuming


    for (let h = 0; h < values.length; h++) {
      const i = rowIndex[h];
      const j = colIndex[h];
      const v = values[h];

      const k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);

      _insert(k, i, j, v, m._values, m._index, m._ptr);
    } // The value indices are inserted out of order, but apparently that's... still OK?


    return m;
  };
  /**
   * Create a clone of the matrix
   * @memberof SparseMatrix
   * @return {SparseMatrix} clone
   */


  SparseMatrix.prototype.clone = function () {
    const m = new SparseMatrix({
      values: this._values ? (0, _object.clone)(this._values) : undefined,
      index: (0, _object.clone)(this._index),
      ptr: (0, _object.clone)(this._ptr),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
    return m;
  };
  /**
   * Retrieve the size of the matrix.
   * @memberof SparseMatrix
   * @returns {number[]} size
   */


  SparseMatrix.prototype.size = function () {
    return this._size.slice(0); // copy the Array
  };
  /**
   * Create a new matrix with the results of the callback function executed on
   * each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   *
   * @return {SparseMatrix} matrix
   */


  SparseMatrix.prototype.map = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke map on a Pattern only matrix');
    } // matrix instance


    const me = this; // rows and columns

    const rows = this._size[0];
    const columns = this._size[1]; // invoke callback

    const invoke = function (v, i, j) {
      // invoke callback
      return callback(v, [i, j], me);
    }; // invoke _map


    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
  };
  /**
   * Create a new matrix with the results of the callback function executed on the interval
   * [minRow..maxRow, minColumn..maxColumn].
   */


  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
    // result arrays
    const values = [];
    const index = [];
    const ptr = []; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0;

    if ((0, _is.isString)(matrix._datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, matrix._datatype);
    } // invoke callback


    const invoke = function (v, x, y) {
      // invoke callback
      v = callback(v, x, y); // check value != 0

      if (!eq(v, zero)) {
        // store value
        values.push(v); // index

        index.push(x);
      }
    }; // loop columns


    for (let j = minColumn; j <= maxColumn; j++) {
      // store pointer to values index
      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      const k0 = matrix._ptr[j];
      const k1 = matrix._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (let k = k0; k < k1; k++) {
          // row index
          const i = matrix._index[k]; // check i is in range

          if (i >= minRow && i <= maxRow) {
            // value @ k
            invoke(matrix._values[k], i - minRow, j - minColumn);
          }
        }
      } else {
        // create a cache holding all defined values
        const values = {};

        for (let k = k0; k < k1; k++) {
          const i = matrix._index[k];
          values[i] = matrix._values[k];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (let i = minRow; i <= maxRow; i++) {
          const value = i in values ? values[i] : 0;
          invoke(value, i - minRow, j - minColumn);
        }
      }
    } // store number of values in ptr


    ptr.push(values.length); // return sparse matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
    });
  }
  /**
   * Execute a callback function on each entry of the matrix.
   * @memberof SparseMatrix
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix being traversed.
   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
   */


  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
    // check it is a pattern matrix
    if (!this._values) {
      throw new Error('Cannot invoke forEach on a Pattern only matrix');
    } // matrix instance


    const me = this; // rows and columns

    const rows = this._size[0];
    const columns = this._size[1]; // loop columns

    for (let j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      const k0 = this._ptr[j];
      const k1 = this._ptr[j + 1];

      if (skipZeros) {
        // loop k within [k0, k1[
        for (let k = k0; k < k1; k++) {
          // row index
          const i = this._index[k]; // value @ k

          callback(this._values[k], [i, j], me);
        }
      } else {
        // create a cache holding all defined values
        const values = {};

        for (let k = k0; k < k1; k++) {
          const i = this._index[k];
          values[i] = this._values[k];
        } // loop over all rows (indexes can be unordered so we can't use that),
        // and either read the value or zero


        for (let i = 0; i < rows; i++) {
          const value = i in values ? values[i] : 0;
          callback(value, [i, j], me);
        }
      }
    }
  };
  /**
   * Create an Array with a copy of the data of the SparseMatrix
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.toArray = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, true);
  };
  /**
   * Get the primitive value of the SparseMatrix: a two dimensions array
   * @memberof SparseMatrix
   * @returns {Array} array
   */


  SparseMatrix.prototype.valueOf = function () {
    return _toArray(this._values, this._index, this._ptr, this._size, false);
  };

  function _toArray(values, index, ptr, size, copy) {
    // rows and columns
    const rows = size[0];
    const columns = size[1]; // result

    const a = []; // vars

    let i, j; // initialize array

    for (i = 0; i < rows; i++) {
      a[i] = [];

      for (j = 0; j < columns; j++) {
        a[i][j] = 0;
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      const k0 = ptr[j];
      const k1 = ptr[j + 1]; // loop k within [k0, k1[

      for (let k = k0; k < k1; k++) {
        // row index
        i = index[k]; // set value (use one for pattern matrix)

        a[i][j] = values ? copy ? (0, _object.clone)(values[k]) : values[k] : 1;
      }
    }

    return a;
  }
  /**
   * Get a string representation of the matrix, with optional formatting options.
   * @memberof SparseMatrix
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @returns {string} str
   */


  SparseMatrix.prototype.format = function (options) {
    // rows and columns
    const rows = this._size[0];
    const columns = this._size[1]; // density

    const density = this.density(); // rows & columns

    let str = 'Sparse Matrix [' + (0, _string.format)(rows, options) + ' x ' + (0, _string.format)(columns, options) + '] density: ' + (0, _string.format)(density, options) + '\n'; // loop columns

    for (let j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      const k0 = this._ptr[j];
      const k1 = this._ptr[j + 1]; // loop k within [k0, k1[

      for (let k = k0; k < k1; k++) {
        // row index
        const i = this._index[k]; // append value

        str += '\n    (' + (0, _string.format)(i, options) + ', ' + (0, _string.format)(j, options) + ') ==> ' + (this._values ? (0, _string.format)(this._values[k], options) : 'X');
      }
    }

    return str;
  };
  /**
   * Get a string representation of the matrix
   * @memberof SparseMatrix
   * @returns {string} str
   */


  SparseMatrix.prototype.toString = function () {
    return (0, _string.format)(this.toArray());
  };
  /**
   * Get a JSON representation of the matrix
   * @memberof SparseMatrix
   * @returns {Object}
   */


  SparseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'SparseMatrix',
      values: this._values,
      index: this._index,
      ptr: this._ptr,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Get the kth Matrix diagonal.
   *
   * @memberof SparseMatrix
   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
   *
   * @returns {Matrix}                     The matrix vector with the diagonal values.
   */


  SparseMatrix.prototype.diagonal = function (k) {
    // validate k if any
    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    }

    const kSuper = k > 0 ? k : 0;
    const kSub = k < 0 ? -k : 0; // rows & columns

    const rows = this._size[0];
    const columns = this._size[1]; // number diagonal values

    const n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

    const values = [];
    const index = [];
    const ptr = []; // initial ptr value

    ptr[0] = 0; // loop columns

    for (let j = kSuper; j < columns && values.length < n; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      const k0 = this._ptr[j];
      const k1 = this._ptr[j + 1]; // loop x within [k0, k1[

      for (let x = k0; x < k1; x++) {
        // row index
        const i = this._index[x]; // check row

        if (i === j - kSuper + kSub) {
          // value on this column
          values.push(this._values[x]); // store row

          index[values.length - 1] = i - kSub; // exit loop

          break;
        }
      }
    } // close ptr


    ptr.push(values.length); // return matrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [n, 1]
    });
  };
  /**
   * Generate a matrix from a JSON object
   * @memberof SparseMatrix
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
   *                       where mathjs is optional
   * @returns {SparseMatrix}
   */


  SparseMatrix.fromJSON = function (json) {
    return new SparseMatrix(json);
  };
  /**
   * Create a diagonal matrix.
   *
   * @memberof SparseMatrix
   * @param {Array} size                       The matrix size.
   * @param {number | Array | Matrix } value   The values for the diagonal.
   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
   * @param {number} [defaultValue]            The default value for non-diagonal
   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
   *
   * @returns {SparseMatrix}
   */


  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
    if (!(0, _is.isArray)(size)) {
      throw new TypeError('Array expected, size parameter');
    }

    if (size.length !== 2) {
      throw new Error('Only two dimensions matrix are supported');
    } // map size & validate


    size = size.map(function (s) {
      // check it is a big number
      if ((0, _is.isBigNumber)(s)) {
        // convert it
        s = s.toNumber();
      } // validate arguments


      if (!(0, _is.isNumber)(s) || !(0, _number.isInteger)(s) || s < 1) {
        throw new Error('Size values must be positive integers');
      }

      return s;
    }); // validate k if any

    if (k) {
      // convert BigNumber to a number
      if ((0, _is.isBigNumber)(k)) {
        k = k.toNumber();
      } // is must be an integer


      if (!(0, _is.isNumber)(k) || !(0, _number.isInteger)(k)) {
        throw new TypeError('The parameter k must be an integer number');
      }
    } else {
      // default value
      k = 0;
    } // equal signature to use


    let eq = equalScalar; // zero value

    let zero = 0;

    if ((0, _is.isString)(datatype)) {
      // find signature that matches (datatype, datatype)
      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype

      zero = typed.convert(0, datatype);
    }

    const kSuper = k > 0 ? k : 0;
    const kSub = k < 0 ? -k : 0; // rows and columns

    const rows = size[0];
    const columns = size[1]; // number of non-zero items

    const n = Math.min(rows - kSub, columns - kSuper); // value extraction function

    let _value; // check value


    if ((0, _is.isArray)(value)) {
      // validate array
      if (value.length !== n) {
        // number of values in array must be n
        throw new Error('Invalid value array length');
      } // define function


      _value = function (i) {
        // return value @ i
        return value[i];
      };
    } else if ((0, _is.isMatrix)(value)) {
      // matrix size
      const ms = value.size(); // validate matrix

      if (ms.length !== 1 || ms[0] !== n) {
        // number of values in array must be n
        throw new Error('Invalid matrix length');
      } // define function


      _value = function (i) {
        // return value @ i
        return value.get([i]);
      };
    } else {
      // define function
      _value = function () {
        // return value
        return value;
      };
    } // create arrays


    const values = [];
    const index = [];
    const ptr = []; // loop items

    for (let j = 0; j < columns; j++) {
      // number of rows with value
      ptr.push(values.length); // diagonal index

      const i = j - kSuper; // check we need to set diagonal value

      if (i >= 0 && i < n) {
        // get value @ i
        const v = _value(i); // check for zero


        if (!eq(v, zero)) {
          // column
          index.push(i + kSub); // add value

          values.push(v);
        }
      }
    } // last value should be number of values


    ptr.push(values.length); // create SparseMatrix

    return new SparseMatrix({
      values: values,
      index: index,
      ptr: ptr,
      size: [rows, columns]
    });
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @memberof SparseMatrix
   * @param {number} i       Matrix row index 1
   * @param {number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  SparseMatrix.prototype.swapRows = function (i, j) {
    // check index
    if (!(0, _is.isNumber)(i) || !(0, _number.isInteger)(i) || !(0, _is.isNumber)(j) || !(0, _number.isInteger)(j)) {
      throw new Error('Row index must be positive integers');
    } // check dimensions


    if (this._size.length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    } // validate index


    (0, _array.validateIndex)(i, this._size[0]);
    (0, _array.validateIndex)(j, this._size[0]); // swap rows

    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


    return this;
  };
  /**
   * Loop rows with data in column j.
   *
   * @param {number} j            Column
   * @param {Array} values        Matrix values
   * @param {Array} index         Matrix row indeces
   * @param {Array} ptr           Matrix column pointers
   * @param {Function} callback   Callback function invoked for every row in column j
   */


  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
    // indeces for column j
    const k0 = ptr[j];
    const k1 = ptr[j + 1]; // loop

    for (let k = k0; k < k1; k++) {
      // invoke callback
      callback(index[k], values[k]);
    }
  };
  /**
   * Swap rows x and y in Sparse Matrix data structures.
   *
   * @param {number} x         Matrix row index 1
   * @param {number} y         Matrix row index 2
   * @param {number} columns   Number of columns in matrix
   * @param {Array} values     Matrix values
   * @param {Array} index      Matrix row indeces
   * @param {Array} ptr        Matrix column pointers
   */


  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
    // loop columns
    for (let j = 0; j < columns; j++) {
      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
      const k0 = ptr[j];
      const k1 = ptr[j + 1]; // find value index @ x

      const kx = _getValueIndex(x, k0, k1, index); // find value index @ x


      const ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
        // swap values (check for pattern matrix)
        if (values) {
          const v = values[kx];
          values[kx] = values[ky];
          values[ky] = v;
        } // next column


        continue;
      } // check x row exist & no y row


      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
        // value @ x (check for pattern matrix)
        const vx = values ? values[kx] : undefined; // insert value @ y

        index.splice(ky, 0, y);

        if (values) {
          values.splice(ky, 0, vx);
        } // remove value @ x (adjust array index if needed)


        index.splice(ky <= kx ? kx + 1 : kx, 1);

        if (values) {
          values.splice(ky <= kx ? kx + 1 : kx, 1);
        } // next column


        continue;
      } // check y row exist & no x row


      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
        // value @ y (check for pattern matrix)
        const vy = values ? values[ky] : undefined; // insert value @ x

        index.splice(kx, 0, x);

        if (values) {
          values.splice(kx, 0, vy);
        } // remove value @ y (adjust array index if needed)


        index.splice(kx <= ky ? ky + 1 : ky, 1);

        if (values) {
          values.splice(kx <= ky ? ky + 1 : ky, 1);
        }
      }
    }
  };

  return SparseMatrix;
}, {
  isClass: true
});
exports.createSparseMatrixClass = createSparseMatrixClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNumber = void 0;

var _factory = require("../utils/factory");

var _collection = require("../utils/collection");

const name = 'number';
const dependencies = ['typed'];
const createNumber =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Create a number or convert a string, boolean, or unit to a number.
   * When value is a matrix, all elements will be converted to number.
   *
   * Syntax:
   *
   *    math.number(value)
   *    math.number(unit, valuelessUnit)
   *
   * Examples:
   *
   *    math.number(2)                         // returns number 2
   *    math.number('7.2')                     // returns number 7.2
   *    math.number(true)                      // returns number 1
   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, string, unit
   *
   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
   * @return {number | Array | Matrix} The created number
   */
  const number = typed('number', {
    '': function () {
      return 0;
    },
    'number': function (x) {
      return x;
    },
    'string': function (x) {
      if (x === 'NaN') return NaN;
      const num = Number(x);

      if (isNaN(num)) {
        throw new SyntaxError('String "' + x + '" is no valid number');
      }

      return num;
    },
    'BigNumber': function (x) {
      return x.toNumber();
    },
    'Fraction': function (x) {
      return x.valueOf();
    },
    'Unit': function (x) {
      throw new Error('Second argument with valueless unit expected');
    },
    'null': function (x) {
      return 0;
    },
    'Unit, string | Unit': function (unit, valuelessUnit) {
      return unit.toNumber(valuelessUnit);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, number);
    }
  });
  return number;
});
exports.createNumber = createNumber;
},{"../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createString = void 0;

var _factory = require("../utils/factory");

var _collection = require("../utils/collection");

var _number = require("../utils/number");

const name = 'string';
const dependencies = ['typed'];
const createString =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Create a string or convert any object into a string.
   * Elements of Arrays and Matrices are processed element wise.
   *
   * Syntax:
   *
   *    math.string(value)
   *
   * Examples:
   *
   *    math.string(4.2)               // returns string '4.2'
   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
   *
   *    const u = math.unit(5, 'km')
   *    math.string(u.to('m'))         // returns string '5000 m'
   *
   *    math.string([true, false])     // returns ['true', 'false']
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, unit
   *
   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
   * @return {string | Array | Matrix} The created string
   */
  const string = typed(name, {
    '': function () {
      return '';
    },
    'number': _number.format,
    'null': function (x) {
      return 'null';
    },
    'boolean': function (x) {
      return x + '';
    },
    'string': function (x) {
      return x;
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, string);
    },
    'any': function (x) {
      return String(x);
    }
  });
  return string;
});
exports.createString = createString;
},{"../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/type/boolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBoolean = void 0;

var _factory = require("../utils/factory");

var _collection = require("../utils/collection");

const name = 'boolean';
const dependencies = ['typed'];
const createBoolean =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Create a boolean or convert a string or number to a boolean.
   * In case of a number, `true` is returned for non-zero numbers, and `false` in
   * case of zero.
   * Strings can be `'true'` or `'false'`, or can contain a number.
   * When value is a matrix, all elements will be converted to boolean.
   *
   * Syntax:
   *
   *    math.boolean(x)
   *
   * Examples:
   *
   *    math.boolean(0)     // returns false
   *    math.boolean(1)     // returns true
   *    math.boolean(-3)     // returns true
   *    math.boolean('true')     // returns true
   *    math.boolean('false')     // returns false
   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
   *
   * See also:
   *
   *    bignumber, complex, index, matrix, string, unit
   *
   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
   * @return {boolean | Array | Matrix} The boolean value
   */
  const bool = typed(name, {
    '': function () {
      return false;
    },
    'boolean': function (x) {
      return x;
    },
    'number': function (x) {
      return !!x;
    },
    'null': function (x) {
      return false;
    },
    'BigNumber': function (x) {
      return !x.isZero();
    },
    'string': function (x) {
      // try case insensitive
      const lcase = x.toLowerCase();

      if (lcase === 'true') {
        return true;
      } else if (lcase === 'false') {
        return false;
      } // test whether value is a valid number


      const num = Number(x);

      if (x !== '' && !isNaN(num)) {
        return !!num;
      }

      throw new Error('Cannot convert "' + x + '" to a boolean');
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, bool);
    }
  });
  return bool;
});
exports.createBoolean = createBoolean;
},{"../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/bignumber/function/bignumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBignumber = void 0;

var _factory = require("../../../utils/factory");

var _collection = require("../../../utils/collection");

const name = 'bignumber';
const dependencies = ['typed', 'BigNumber'];
const createBignumber =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Create a BigNumber, which can store numbers with arbitrary precision.
   * When a matrix is provided, all elements will be converted to BigNumber.
   *
   * Syntax:
   *
   *    math.bignumber(x)
   *
   * Examples:
   *
   *    0.1 + 0.2                                  // returns number 0.30000000000000004
   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
   *
   *
   *    7.2e500                                    // returns number Infinity
   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
   *
   * See also:
   *
   *    boolean, complex, index, matrix, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
   *                                                    0 by default.
   * @returns {BigNumber} The created bignumber
   */
  const bignumber = typed('bignumber', {
    '': function () {
      return new BigNumber(0);
    },
    'number': function (x) {
      // convert to string to prevent errors in case of >15 digits
      return new BigNumber(x + '');
    },
    'string': function (x) {
      return new BigNumber(x);
    },
    'BigNumber': function (x) {
      // we assume a BigNumber is immutable
      return x;
    },
    'Fraction': function (x) {
      return new BigNumber(x.n).div(x.d).times(x.s);
    },
    'null': function (x) {
      return new BigNumber(0);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, bignumber);
    }
  });
  return bignumber;
});
exports.createBignumber = createBignumber;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/complex/function/complex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createComplex = void 0;

var _factory = require("../../../utils/factory");

var _collection = require("../../../utils/collection");

const name = 'complex';
const dependencies = ['typed', 'Complex'];
const createComplex =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Complex
}) => {
  /**
   * Create a complex value or convert a value to a complex value.
   *
   * Syntax:
   *
   *     math.complex()                           // creates a complex value with zero
   *                                              // as real and imaginary part.
   *     math.complex(re : number, im : string)   // creates a complex value with provided
   *                                              // values for real and imaginary part.
   *     math.complex(re : number)                // creates a complex value with provided
   *                                              // real value and zero imaginary part.
   *     math.complex(complex : Complex)          // clones the provided complex value.
   *     math.complex(arg : string)               // parses a string into a complex value.
   *     math.complex(array : Array)              // converts the elements of the array
   *                                              // or matrix element wise into a
   *                                              // complex value.
   *     math.complex({re: number, im: number})   // creates a complex value with provided
   *                                              // values for real an imaginary part.
   *     math.complex({r: number, phi: number})   // creates a complex value with provided
   *                                              // polar coordinates
   *
   * Examples:
   *
   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
   *    a.re = 5                          // a = Complex 5 - 4i
   *    const i = a.im                    // Number -4
   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
   *    const c = math.complex()          // Complex 0 + 0i
   *    const d = math.add(a, b)          // Complex 5 + 2i
   *
   * See also:
   *
   *    bignumber, boolean, index, matrix, number, string, unit
   *
   * @param {* | Array | Matrix} [args]
   *            Arguments specifying the real and imaginary part of the complex number
   * @return {Complex | Array | Matrix} Returns a complex value
   */
  const complex = typed('complex', {
    '': function () {
      return Complex.ZERO;
    },
    'number': function (x) {
      return new Complex(x, 0);
    },
    'number, number': function (re, im) {
      return new Complex(re, im);
    },
    // TODO: this signature should be redundant
    'BigNumber, BigNumber': function (re, im) {
      return new Complex(re.toNumber(), im.toNumber());
    },
    'Fraction': function (x) {
      return new Complex(x.valueOf(), 0);
    },
    'Complex': function (x) {
      return x.clone();
    },
    'string': function (x) {
      return Complex(x); // for example '2 + 3i'
    },
    'null': function (x) {
      return Complex(0);
    },
    'Object': function (x) {
      if ('re' in x && 'im' in x) {
        return new Complex(x.re, x.im);
      }

      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
        return new Complex(x);
      }

      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, complex);
    }
  });
  return complex;
});
exports.createComplex = createComplex;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/fraction/function/fraction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFraction = void 0;

var _factory = require("../../../utils/factory");

var _collection = require("../../../utils/collection");

const name = 'fraction';
const dependencies = ['typed', 'Fraction'];
const createFraction =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Fraction
}) => {
  /**
   * Create a fraction convert a value to a fraction.
   *
   * Syntax:
   *     math.fraction(numerator, denominator)
   *     math.fraction({n: numerator, d: denominator})
   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
   *                                                   into fractions
   *
   * Examples:
   *
   *     math.fraction(1, 3)
   *     math.fraction('2/3')
   *     math.fraction({n: 2, d: 3})
   *     math.fraction([0.2, 0.25, 1.25])
   *
   * See also:
   *
   *    bignumber, number, string, unit
   *
   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
   *            Arguments specifying the numerator and denominator of
   *            the fraction
   * @return {Fraction | Array | Matrix} Returns a fraction
   */
  const fraction = typed('fraction', {
    'number': function (x) {
      if (!isFinite(x) || isNaN(x)) {
        throw new Error(x + ' cannot be represented as a fraction');
      }

      return new Fraction(x);
    },
    'string': function (x) {
      return new Fraction(x);
    },
    'number, number': function (numerator, denominator) {
      return new Fraction(numerator, denominator);
    },
    'null': function (x) {
      return new Fraction(0);
    },
    'BigNumber': function (x) {
      return new Fraction(x.toString());
    },
    'Fraction': function (x) {
      return x; // fractions are immutable
    },
    'Object': function (x) {
      return new Fraction(x);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, fraction);
    }
  });
  return fraction;
});
exports.createFraction = createFraction;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/matrix/function/matrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMatrix = void 0;

var _factory = require("../../../utils/factory");

const name = 'matrix';
const dependencies = ['typed', 'Matrix', 'DenseMatrix', 'SparseMatrix'];
const createMatrix =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Matrix,
  DenseMatrix,
  SparseMatrix
}) => {
  /**
   * Create a Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   * Supported storage formats are 'dense' and 'sparse'.
   *
   * Syntax:
   *
   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
   *
   * Examples:
   *
   *    let m = math.matrix([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, sparse
   *
   * @param {Array | Matrix} [data]    A multi dimensional array
   * @param {string} [format]          The Matrix storage format
   *
   * @return {Matrix} The created matrix
   */
  return typed(name, {
    '': function () {
      return _create([]);
    },
    'string': function (format) {
      return _create([], format);
    },
    'string, string': function (format, datatype) {
      return _create([], format, datatype);
    },
    'Array': function (data) {
      return _create(data);
    },
    'Matrix': function (data) {
      return _create(data, data.storage());
    },
    'Array | Matrix, string': _create,
    'Array | Matrix, string, string': _create
  });
  /**
   * Create a new Matrix with given storage format
   * @param {Array} data
   * @param {string} [format]
   * @param {string} [datatype]
   * @returns {Matrix} Returns a new Matrix
   * @private
   */

  function _create(data, format, datatype) {
    // get storage format constructor
    if (format === 'dense' || format === 'default' || format === undefined) {
      return new DenseMatrix(data, datatype);
    }

    if (format === 'sparse') {
      return new SparseMatrix(data, datatype);
    }

    throw new TypeError('Unknown matrix type ' + JSON.stringify(format) + '.');
  }
});
exports.createMatrix = createMatrix;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/unit/function/splitUnit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSplitUnit = void 0;

var _factory = require("../../../utils/factory");

const name = 'splitUnit';
const dependencies = ['typed'];
const createSplitUnit =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Split a unit in an array of units whose sum is equal to the original unit.
   *
   * Syntax:
   *
   *     splitUnit(unit: Unit, parts: Array.<Unit>)
   *
   * Example:
   *
   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
   *     // [ 3 feet, 3.3700787401575 inch ]
   *
   * See also:
   *
   *     unit
   *
   * @param {Array} [parts] An array of strings or valueless units.
   * @return {Array} An array of units.
   */
  return typed(name, {
    'Unit, Array': function (unit, parts) {
      return unit.splitUnit(parts);
    }
  });
});
exports.createSplitUnit = createSplitUnit;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/arithmetic/unaryMinus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnaryMinus = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'unaryMinus';
const dependencies = ['typed'];
const createUnaryMinus =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Inverse the sign of a value, apply a unary minus operation.
   *
   * For matrices, the function is evaluated element wise. Boolean values and
   * strings will be converted to a number. For complex numbers, both real and
   * complex value are inverted.
   *
   * Syntax:
   *
   *    math.unaryMinus(x)
   *
   * Examples:
   *
   *    math.unaryMinus(3.5)      // returns -3.5
   *    math.unaryMinus(-4.2)     // returns 4.2
   *
   * See also:
   *
   *    add, subtract, unaryPlus
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
   */
  const unaryMinus = typed(name, {
    'number': _number.unaryMinusNumber,
    'Complex': function (x) {
      return x.neg();
    },
    'BigNumber': function (x) {
      return x.neg();
    },
    'Fraction': function (x) {
      return x.neg();
    },
    'Unit': function (x) {
      const res = x.clone();
      res.value = unaryMinus(x.value);
      return res;
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since unaryMinus(0) = 0
      return (0, _collection.deepMap)(x, unaryMinus, true);
    } // TODO: add support for string

  });
  return unaryMinus;
});
exports.createUnaryMinus = createUnaryMinus;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/unaryPlus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnaryPlus = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'unaryPlus';
const dependencies = ['typed', 'config', 'BigNumber'];
const createUnaryPlus =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  BigNumber
}) => {
  /**
   * Unary plus operation.
   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.unaryPlus(x)
   *
   * Examples:
   *
   *    math.unaryPlus(3.5)      // returns 3.5
   *    math.unaryPlus(1)     // returns 1
   *
   * See also:
   *
   *    unaryMinus, add, subtract
   *
   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
   *            Input value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns the input value when numeric, converts to a number when input is non-numeric.
   */
  const unaryPlus = typed(name, {
    'number': _number.unaryPlusNumber,
    'Complex': function (x) {
      return x; // complex numbers are immutable
    },
    'BigNumber': function (x) {
      return x; // bignumbers are immutable
    },
    'Fraction': function (x) {
      return x; // fractions are immutable
    },
    'Unit': function (x) {
      return x.clone();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since unaryPlus(0) = 0
      return (0, _collection.deepMap)(x, unaryPlus, true);
    },
    'boolean | string': function (x) {
      // convert to a number or bignumber
      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;
    }
  });
  return unaryPlus;
});
exports.createUnaryPlus = createUnaryPlus;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/abs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAbs = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'abs';
const dependencies = ['typed'];
const createAbs =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the absolute value of a number. For matrices, the function is
   * evaluated element wise.
   *
   * Syntax:
   *
   *    math.abs(x)
   *
   * Examples:
   *
   *    math.abs(3.5)                // returns number 3.5
   *    math.abs(-4.2)               // returns number 4.2
   *
   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
   *
   * See also:
   *
   *    sign
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            A number or matrix for which to get the absolute value
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Absolute value of `x`
   */
  const abs = typed(name, {
    'number': _number.absNumber,
    'Complex': function (x) {
      return x.abs();
    },
    'BigNumber': function (x) {
      return x.abs();
    },
    'Fraction': function (x) {
      return x.abs();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since abs(0) = 0
      return (0, _collection.deepMap)(x, abs, true);
    },
    'Unit': function (x) {
      return x.abs();
    }
  });
  return abs;
});
exports.createAbs = createAbs;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/matrix/apply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createApply = void 0;

var _factory = require("../../utils/factory");

var _array = require("../../utils/array");

var _is = require("../../utils/is");

var _IndexError = require("../../error/IndexError");

const name = 'apply';
const dependencies = ['typed', 'isInteger'];
const createApply =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  isInteger
}) => {
  /**
   * Apply a function that maps an array to a scalar
   * along a given axis of a matrix or array.
   * Returns a new matrix or array with one less dimension than the input.
   *
   * Syntax:
   *
   *     math.apply(A, dim, callback)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [3, 4]]
   *    const sum = math.sum
   *
   *    math.apply(A, 0, sum)             // returns [4, 6]
   *    math.apply(A, 1, sum)             // returns [3, 7]
   *
   * See also:
   *
   *    map, filter, forEach
   *
   * @param {Array | Matrix} array   The input Matrix
   * @param {number} dim             The dimension along which the callback is applied
   * @param {Function} callback      The callback function that is applied. This Function
   *                                 should take an array or 1-d matrix as an input and
   *                                 return a number.
   * @return {Array | Matrix} res    The residual matrix with the function applied over some dimension.
   */
  const apply = typed(name, {
    'Array | Matrix, number | BigNumber, function': function (mat, dim, callback) {
      if (!isInteger(dim)) {
        throw new TypeError('Integer number expected for dimension');
      }

      const size = Array.isArray(mat) ? (0, _array.arraySize)(mat) : mat.size();

      if (dim < 0 || dim >= size.length) {
        throw new _IndexError.IndexError(dim, size.length);
      }

      if ((0, _is.isMatrix)(mat)) {
        return mat.create(_apply(mat.valueOf(), dim, callback));
      } else {
        return _apply(mat, dim, callback);
      }
    }
  });
  return apply;
});
/**
 * Recursively reduce a matrix
 * @param {Array} mat
 * @param {number} dim
 * @param {Function} callback
 * @returns {Array} ret
 * @private
 */

exports.createApply = createApply;

function _apply(mat, dim, callback) {
  let i, ret, tran;

  if (dim <= 0) {
    if (!Array.isArray(mat[0])) {
      return callback(mat);
    } else {
      tran = _switch(mat);
      ret = [];

      for (i = 0; i < tran.length; i++) {
        ret[i] = _apply(tran[i], dim - 1, callback);
      }

      return ret;
    }
  } else {
    ret = [];

    for (i = 0; i < mat.length; i++) {
      ret[i] = _apply(mat[i], dim - 1, callback);
    }

    return ret;
  }
}
/**
 * Transpose a matrix
 * @param {Array} mat
 * @returns {Array} ret
 * @private
 */


function _switch(mat) {
  const I = mat.length;
  const J = mat[0].length;
  let i, j;
  const ret = [];

  for (j = 0; j < J; j++) {
    const tmp = [];

    for (i = 0; i < I; i++) {
      tmp.push(mat[i][j]);
    }

    ret.push(tmp);
  }

  return ret;
}
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js"}],"../node_modules/mathjs/src/function/arithmetic/addScalar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddScalar = void 0;

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'addScalar';
const dependencies = ['typed'];
const createAddScalar =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Add two scalar values, `x + y`.
   * This function is meant for internal use: it is used by the public function
   * `add`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`
   * @private
   */
  const addScalar = typed(name, {
    'number, number': _number.addNumber,
    'Complex, Complex': function (x, y) {
      return x.add(y);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.plus(y);
    },
    'Fraction, Fraction': function (x, y) {
      return x.add(y);
    },
    'Unit, Unit': function (x, y) {
      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
      if (!x.equalBase(y)) throw new Error('Units do not match');
      const res = x.clone();
      res.value = addScalar(res.value, y.value);
      res.fixPrefix = false;
      return res;
    }
  });
  return addScalar;
});
exports.createAddScalar = createAddScalar;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/cbrt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCbrt = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'cbrt';
const dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];
const createCbrt =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  config,
  typed,
  isNegative,
  unaryMinus,
  matrix,
  Complex,
  BigNumber,
  Fraction
}) => {
  /**
   * Calculate the cubic root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cbrt(x)
   *    math.cbrt(x, allRoots)
   *
   * Examples:
   *
   *    math.cbrt(27)                  // returns 3
   *    math.cube(3)                   // returns 27
   *    math.cbrt(-64)                 // returns -4
   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
   *
   *    const x = math.complex('8i')
   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
   *    math.cbrt(x, true)             // returns Matrix [
   *                                    //    1.7320508075689 + i
   *                                    //   -1.7320508075689 + i
   *                                    //   -2i
   *                                    // ]
   *
   * See also:
   *
   *    square, sqrt, cube
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
   *            Value for which to calculate the cubic root.
   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
   *            when `x` is a number or complex number. If true, all complex
   *            roots are returned, if false (default) the principal root is
   *            returned.
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
   *            Returns the cubic root of `x`
   */
  const cbrt = typed(name, {
    'number': _number.cbrtNumber,
    // note: signature 'number, boolean' is also supported,
    //       created by typed as it knows how to convert number to Complex
    'Complex': _cbrtComplex,
    'Complex, boolean': _cbrtComplex,
    'BigNumber': function (x) {
      return x.cbrt();
    },
    'Unit': _cbrtUnit,
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since cbrt(0) = 0
      return (0, _collection.deepMap)(x, cbrt, true);
    }
  });
  /**
   * Calculate the cubic root for a complex number
   * @param {Complex} x
   * @param {boolean} [allRoots]   If true, the function will return an array
   *                               with all three roots. If false or undefined,
   *                               the principal root is returned.
   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
   * @private
   */

  function _cbrtComplex(x, allRoots) {
    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
    const arg3 = x.arg() / 3;
    const abs = x.abs(); // principal root:

    const principal = new Complex((0, _number.cbrtNumber)(abs), 0).mul(new Complex(0, arg3).exp());

    if (allRoots) {
      const all = [principal, new Complex((0, _number.cbrtNumber)(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex((0, _number.cbrtNumber)(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];
      return config.matrix === 'Array' ? all : matrix(all);
    } else {
      return principal;
    }
  }
  /**
   * Calculate the cubic root for a Unit
   * @param {Unit} x
   * @return {Unit} Returns the cubic root of x
   * @private
   */


  function _cbrtUnit(x) {
    if (x.value && (0, _is.isComplex)(x.value)) {
      let result = x.clone();
      result.value = 1.0;
      result = result.pow(1.0 / 3); // Compute the units

      result.value = _cbrtComplex(x.value); // Compute the value

      return result;
    } else {
      const negate = isNegative(x.value);

      if (negate) {
        x.value = unaryMinus(x.value);
      } // TODO: create a helper function for this


      let third;

      if ((0, _is.isBigNumber)(x.value)) {
        third = new BigNumber(1).div(3);
      } else if ((0, _is.isFraction)(x.value)) {
        third = new Fraction(1, 3);
      } else {
        third = 1 / 3;
      }

      let result = x.pow(third);

      if (negate) {
        result.value = unaryMinus(result.value);
      }

      return result;
    }
  }

  return cbrt;
});
exports.createCbrt = createCbrt;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/ceil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCeil = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number2 = require("../../plain/number");

const name = 'ceil';
const dependencies = ['typed', 'config', 'round'];
const createCeil =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  round
}) => {
  /**
   * Round a value towards plus infinity
   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.ceil(x)
   *
   * Examples:
   *
   *    math.ceil(3.2)               // returns number 4
   *    math.ceil(3.8)               // returns number 4
   *    math.ceil(-4.2)              // returns number -4
   *    math.ceil(-4.7)              // returns number -4
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.ceil(c)                 // returns Complex 4 - 2i
   *
   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
   *
   * See also:
   *
   *    floor, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  const ceil = typed('ceil', {
    'number': function (x) {
      if ((0, _number.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return (0, _number2.ceilNumber)(x);
      }
    },
    'Complex': function (x) {
      return x.ceil();
    },
    'BigNumber': function (x) {
      if ((0, _nearlyEqual.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.ceil();
      }
    },
    'Fraction': function (x) {
      return x.ceil();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since ceil(0) = 0
      return (0, _collection.deepMap)(x, ceil, true);
    }
  });
  return ceil;
});
exports.createCeil = createCeil;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/cube.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCube = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'cube';
const dependencies = ['typed'];
const createCube =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Compute the cube of a value, `x * x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cube(x)
   *
   * Examples:
   *
   *    math.cube(2)            // returns number 8
   *    math.pow(2, 3)          // returns number 8
   *    math.cube(4)            // returns number 64
   *    4 * 4 * 4               // returns number 64
   *
   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
   *
   * See also:
   *
   *    multiply, square, pow, cbrt
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
   */
  const cube = typed(name, {
    'number': _number.cubeNumber,
    'Complex': function (x) {
      return x.mul(x).mul(x); // Is faster than pow(x, 3)
    },
    'BigNumber': function (x) {
      return x.times(x).times(x);
    },
    'Fraction': function (x) {
      return x.pow(3); // Is faster than mul()mul()mul()
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since cube(0) = 0
      return (0, _collection.deepMap)(x, cube, true);
    },
    'Unit': function (x) {
      return x.pow(3);
    }
  });
  return cube;
});
exports.createCube = createCube;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExp = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'exp';
const dependencies = ['typed'];
const createExp =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the exponent of a value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.exp(x)
   *
   * Examples:
   *
   *    math.exp(2)                  // returns number 7.3890560989306495
   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
   *    math.log(math.exp(2))        // returns number 2
   *
   *    math.exp([1, 2, 3])
   *    // returns Array [
   *    //   2.718281828459045,
   *    //   7.3890560989306495,
   *    //   20.085536923187668
   *    // ]
   *
   * See also:
   *
   *    expm1, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  const exp = typed(name, {
    'number': _number.expNumber,
    'Complex': function (x) {
      return x.exp();
    },
    'BigNumber': function (x) {
      return x.exp();
    },
    'Array | Matrix': function (x) {
      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
      return (0, _collection.deepMap)(x, exp);
    }
  });
  return exp;
});
exports.createExp = createExp;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/expm1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExpm1 = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'expm1';
const dependencies = ['typed', 'Complex'];
const createExpm1 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Complex
}) => {
  /**
   * Calculate the value of subtracting 1 from the exponential value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.expm1(x)
   *
   * Examples:
   *
   *    math.expm1(2)                      // returns number 6.38905609893065
   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
   *    math.log(math.expm1(2) + 1)        // returns number 2
   *
   *    math.expm1([1, 2, 3])
   *    // returns Array [
   *    //   1.718281828459045,
   *    //   6.3890560989306495,
   *    //   19.085536923187668
   *    // ]
   *
   * See also:
   *
   *    exp, log, pow
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
   */
  const expm1 = typed(name, {
    'number': _number.expm1Number,
    'Complex': function (x) {
      const r = Math.exp(x.re);
      return new Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
    },
    'BigNumber': function (x) {
      return x.exp().minus(1);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, expm1);
    }
  });
  return expm1;
});
exports.createExpm1 = createExpm1;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/fix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFix = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'fix';
const dependencies = ['typed', 'Complex', 'ceil', 'floor'];
const createFix =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Complex,
  ceil,
  floor
}) => {
  /**
   * Round a value towards zero.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.fix(x)
   *
   * Examples:
   *
   *    math.fix(3.2)                // returns number 3
   *    math.fix(3.8)                // returns number 3
   *    math.fix(-4.2)               // returns number -4
   *    math.fix(-4.7)               // returns number -4
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.fix(c)                  // returns Complex 3 - 2i
   *
   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]
   *
   * See also:
   *
   *    ceil, floor, round
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
  const fix = typed('fix', {
    'number': function (x) {
      return x > 0 ? floor(x) : ceil(x);
    },
    'Complex': function (x) {
      return new Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
    },
    'BigNumber': function (x) {
      return x.isNegative() ? ceil(x) : floor(x);
    },
    'Fraction': function (x) {
      return x.s < 0 ? x.ceil() : x.floor();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since fix(0) = 0
      return (0, _collection.deepMap)(x, fix, true);
    }
  });
  return fix;
});
exports.createFix = createFix;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/arithmetic/floor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFloor = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

const name = 'floor';
const dependencies = ['typed', 'config', 'round'];
const createFloor =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  round
}) => {
  /**
   * Round a value towards minus infinity.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.floor(x)
   *
   * Examples:
   *
   *    math.floor(3.2)              // returns number 3
   *    math.floor(3.8)              // returns number 3
   *    math.floor(-4.2)             // returns number -5
   *    math.floor(-4.7)             // returns number -5
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.floor(c)                // returns Complex 3 - 3i
   *
   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]
   *
   * See also:
   *
   *    ceil, fix, round
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */
  const floor = typed('floor', {
    'number': function (x) {
      if ((0, _number.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return Math.floor(x);
      }
    },
    'Complex': function (x) {
      return x.floor();
    },
    'BigNumber': function (x) {
      if ((0, _nearlyEqual.nearlyEqual)(x, round(x), config.epsilon)) {
        return round(x);
      } else {
        return x.floor();
      }
    },
    'Fraction': function (x) {
      return x.floor();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since floor(0) = 0
      return (0, _collection.deepMap)(x, floor, true);
    }
  });
  return floor;
});
exports.createFloor = createFloor;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm01 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm01';
const dependencies = ['typed'];
const createAlgorithm01 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  Dij          ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm1(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    const adata = denseMatrix._data;
    const asize = denseMatrix._size;
    const adt = denseMatrix._datatype; // sparse matrix arrays

    const bvalues = sparseMatrix._values;
    const bindex = sparseMatrix._index;
    const bptr = sparseMatrix._ptr;
    const bsize = sparseMatrix._size;
    const bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // process data types

    const dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

    const cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

    let i, j; // result (DenseMatrix)

    const cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // workspace


    const x = []; // marks indicating we have a value in x for a given column

    const w = []; // loop columns in b

    for (j = 0; j < columns; j++) {
      // column mark
      const mark = j + 1; // values in column j

      for (let k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

        w[i] = mark;
      } // loop rows


      for (i = 0; i < rows; i++) {
        // check row is in workspace
        if (w[i] === mark) {
          // c[i][j] was already calculated
          cdata[i][j] = x[i];
        } else {
          // item does not exist in S
          cdata[i][j] = adata[i][j];
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm01 = createAlgorithm01;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm04.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm04 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm04';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm04 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  B(i,j)       ; B(i,j) !== 0
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm04(a, b, callback) {
    // sparse matrix arrays
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const asize = a._size;
    const adt = a._datatype; // sparse matrix arrays

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr;
    const bsize = b._size;
    const bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cvalues = avalues && bvalues ? [] : undefined;
    const cindex = [];
    const cptr = []; // matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspace

    const xa = avalues && bvalues ? [] : undefined;
    const xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    const wa = [];
    const wb = []; // vars

    let i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      const mark = j + 1; // loop A(:,j)

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // update c

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop B(:,j)


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check row exists in A

        if (wa[i] === mark) {
          // update record in xa @ i
          if (xa) {
            // invoke callback
            const v = cf(xa[i], bvalues[k]); // check for zero

            if (!eq(v, zero)) {
              // update workspace
              xa[i] = v;
            } else {
              // remove mark (index will be removed later)
              wa[i] = null;
            }
          }
        } else {
          // update c
          cindex.push(i); // update workspace

          wb[i] = mark; // check we need to process values

          if (xb) {
            xb[i] = bvalues[k];
          }
        }
      } // check we need to process values (non pattern matrix)


      if (xa && xb) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // check workspace has value @ i

          if (wa[i] === mark) {
            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
            cvalues[k] = xa[i]; // increment pointer

            k++;
          } else if (wb[i] === mark) {
            // push value (bij != 0)
            cvalues[k] = xb[i]; // increment pointer

            k++;
          } else {
            // remove index @ k
            cindex.splice(k, 1);
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
exports.createAlgorithm04 = createAlgorithm04;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm10 = void 0;

var _factory = require("../../../utils/factory");

const name = 'algorithm10';
const dependencies = ['typed', 'DenseMatrix'];
const createAlgorithm10 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  DenseMatrix
}) => {
  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  b          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm10(s, b, callback, inverse) {
    // sparse matrix arrays
    const avalues = s._values;
    const aindex = s._index;
    const aptr = s._ptr;
    const asize = s._size;
    const adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cdata = []; // matrix

    const c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    const x = []; // marks indicating we have a value in x for a given column

    const w = []; // loop columns

    for (let j = 0; j < columns; j++) {
      // columns mark
      const mark = j + 1; // values in j

      for (let k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        const r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (let i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = b;
        }
      }
    } // return sparse matrix


    return c;
  };
});
exports.createAlgorithm10 = createAlgorithm10;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm13 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm13';
const dependencies = ['typed'];
const createAlgorithm13 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, Bij..z)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Matrix}   b                 The DenseMatrix instance (B)
   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
   */
  return function algorithm13(a, b, callback) {
    // a arrays
    const adata = a._data;
    const asize = a._size;
    const adt = a._datatype; // b arrays

    const bdata = b._data;
    const bsize = b._size;
    const bdt = b._datatype; // c arrays

    const csize = []; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // validate each one of the dimension sizes


    for (let s = 0; s < asize.length; s++) {
      // must match
      if (asize[s] !== bsize[s]) {
        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
      } // update dimension in c


      csize[s] = asize[s];
    } // datatype


    let dt; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    const cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: csize,
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv) {
    // initialize array for this level
    const cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (let i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = f(av[i], bv[i]);
      }
    } else {
      // iterate current level
      for (let j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
      }
    }

    return cv;
  }
});
exports.createAlgorithm13 = createAlgorithm13;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm14 = void 0;

var _factory = require("../../../utils/factory");

var _object = require("../../../utils/object");

const name = 'algorithm14';
const dependencies = ['typed'];
const createAlgorithm14 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
   * Callback function invoked MxN times.
   *
   * C(i,j,...z) = f(Aij..z, b)
   *
   * @param {Matrix}   a                 The DenseMatrix instance (A)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij..z,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
   */
  return function algorithm14(a, b, callback, inverse) {
    // a arrays
    const adata = a._data;
    const asize = a._size;
    const adt = a._datatype; // datatype

    let dt; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // populate cdata, iterate through dimensions


    const cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

    return a.createDenseMatrix({
      data: cdata,
      size: (0, _object.clone)(asize),
      datatype: dt
    });
  }; // recursive function

  function _iterate(f, level, s, n, av, bv, inverse) {
    // initialize array for this level
    const cv = []; // check we reach the last level

    if (level === s.length - 1) {
      // loop arrays in last level
      for (let i = 0; i < n; i++) {
        // invoke callback and store value
        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
      }
    } else {
      // iterate current level
      for (let j = 0; j < n; j++) {
        // iterate next level
        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
      }
    }

    return cv;
  }
});
exports.createAlgorithm14 = createAlgorithm14;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../utils/object":"../node_modules/mathjs/src/utils/object.js"}],"../node_modules/mathjs/src/function/arithmetic/gcd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGcd = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm01");

var _algorithm2 = require("../../type/matrix/utils/algorithm04");

var _algorithm3 = require("../../type/matrix/utils/algorithm10");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

var _number = require("../../plain/number");

const name = 'gcd';
const dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
const createGcd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  BigNumber,
  DenseMatrix
}) => {
  const algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed
  });
  const algorithm04 = (0, _algorithm2.createAlgorithm04)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm3.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the greatest common divisor for two or more values or arrays.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gcd(a, b)
   *    math.gcd(a, b, c, ...)
   *
   * Examples:
   *
   *    math.gcd(8, 12)              // returns 4
   *    math.gcd(-4, 6)              // returns 2
   *    math.gcd(25, 15, -10)        // returns 5
   *
   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
   *
   * See also:
   *
   *    lcm, xgcd
   *
   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
   */

  const gcd = typed(name, {
    'number, number': _number.gcdNumber,
    'BigNumber, BigNumber': _gcdBigNumber,
    'Fraction, Fraction': function (x, y) {
      return x.gcd(y);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm04(x, y, gcd);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm01(y, x, gcd, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm01(x, y, gcd, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, gcd);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return gcd(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return gcd(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return gcd(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      return algorithm10(x, y, gcd, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      return algorithm14(x, y, gcd, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      return algorithm10(y, x, gcd, true);
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      return algorithm14(y, x, gcd, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, gcd, false).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, gcd, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
      let res = gcd(a, b);

      for (let i = 0; i < args.length; i++) {
        res = gcd(res, args[i]);
      }

      return res;
    }
  });
  return gcd;
  /**
   * Calculate gcd for BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns greatest common denominator of a and b
   * @private
   */

  function _gcdBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function gcd must be integer numbers');
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm


    const zero = new BigNumber(0);

    while (!b.isZero()) {
      const r = a.mod(b);
      a = b;
      b = r;
    }

    return a.lt(zero) ? a.neg() : a;
  }
});
exports.createGcd = createGcd;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm04":"../node_modules/mathjs/src/type/matrix/utils/algorithm04.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm02 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm02';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm02 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    const adata = denseMatrix._data;
    const asize = denseMatrix._size;
    const adt = denseMatrix._datatype; // sparse matrix arrays

    const bvalues = sparseMatrix._values;
    const bindex = sparseMatrix._index;
    const bptr = sparseMatrix._ptr;
    const bsize = sparseMatrix._size;
    const bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (SparseMatrix)


    const cvalues = [];
    const cindex = [];
    const cptr = []; // loop columns in b

    for (let j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // values in column j

      for (let k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        const i = bindex[k]; // update C(i,j)

        const cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

        if (!eq(cij, zero)) {
          // push i & v
          cindex.push(i);
          cvalues.push(cij);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return sparseMatrix.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm02 = createAlgorithm02;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm06.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm06 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

var _collection = require("../../../utils/collection");

const name = 'algorithm06';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm06 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm06(a, b, callback) {
    // sparse matrix arrays
    const avalues = a._values;
    const asize = a._size;
    const adt = a._datatype; // sparse matrix arrays

    const bvalues = b._values;
    const bsize = b._size;
    const bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cvalues = avalues && bvalues ? [] : undefined;
    const cindex = [];
    const cptr = []; // matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    const x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    const w = []; // marks indicating value in a given row has been updated

    const u = []; // loop columns

    for (let j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      const mark = j + 1; // scatter the values of A(:,j) into workspace

      (0, _collection.scatter)(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace

      (0, _collection.scatter)(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)

      if (x) {
        // initialize first index in j
        let k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          const i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[i] === mark) {
            // value @ i
            const v = x[i]; // check for zero value

            if (!eq(v, zero)) {
              // push value
              cvalues.push(v); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          } else {
            // remove value @ i, do not increment pointer
            cindex.splice(k, 1);
          }
        }
      } else {
        // initialize first index in j
        let p = cptr[j]; // loop index in j

        while (p < cindex.length) {
          // row
          const r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

          if (u[r] !== mark) {
            // remove value @ i, do not increment pointer
            cindex.splice(p, 1);
          } else {
            // increment pointer
            p++;
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
exports.createAlgorithm06 = createAlgorithm06;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm11 = void 0;

var _factory = require("../../../utils/factory");

const name = 'algorithm11';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm11 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked NZ times (number of nonzero items in S).
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  0          ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm11(s, b, callback, inverse) {
    // sparse matrix arrays
    const avalues = s._values;
    const aindex = s._index;
    const aptr = s._ptr;
    const asize = s._size;
    const adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cvalues = [];
    const cindex = [];
    const cptr = []; // matrix

    const c = s.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // loop columns

    for (let j = 0; j < columns; j++) {
      // initialize ptr
      cptr[j] = cindex.length; // values in j

      for (let k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        const i = aindex[k]; // invoke callback

        const v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

        if (!eq(v, zero)) {
          // push index & value
          cindex.push(i);
          cvalues.push(v);
        }
      }
    } // update ptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
exports.createAlgorithm11 = createAlgorithm11;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/arithmetic/lcm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLcm = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm06");

var _algorithm3 = require("../../type/matrix/utils/algorithm11");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

var _number = require("../../plain/number");

const name = 'lcm';
const dependencies = ['typed', 'matrix', 'equalScalar'];
const createLcm =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm06 = (0, _algorithm2.createAlgorithm06)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm3.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the least common multiple for two or more values or arrays.
   *
   * lcm is defined as:
   *
   *     lcm(a, b) = abs(a * b) / gcd(a, b)
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.lcm(a, b)
   *    math.lcm(a, b, c, ...)
   *
   * Examples:
   *
   *    math.lcm(4, 6)               // returns 12
   *    math.lcm(6, 21)              // returns 42
   *    math.lcm(6, 21, 5)           // returns 210
   *
   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
   *
   * See also:
   *
   *    gcd, xgcd
   *
   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
   */

  const lcm = typed(name, {
    'number, number': _number.lcmNumber,
    'BigNumber, BigNumber': _lcmBigNumber,
    'Fraction, Fraction': function (x, y) {
      return x.lcm(y);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm06(x, y, lcm);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, lcm, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm02(x, y, lcm, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, lcm);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return lcm(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return lcm(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return lcm(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      return algorithm11(x, y, lcm, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      return algorithm14(x, y, lcm, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      return algorithm11(y, x, lcm, true);
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      return algorithm14(y, x, lcm, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, lcm, false).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, lcm, true).valueOf();
    },
    // TODO: need a smarter notation here
    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
      let res = lcm(a, b);

      for (let i = 0; i < args.length; i++) {
        res = lcm(res, args[i]);
      }

      return res;
    }
  });
  return lcm;
  /**
   * Calculate lcm for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @returns {BigNumber} Returns the least common multiple of a and b
   * @private
   */

  function _lcmBigNumber(a, b) {
    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function lcm must be integer numbers');
    }

    if (a.isZero()) {
      return a;
    }

    if (b.isZero()) {
      return b;
    } // https://en.wikipedia.org/wiki/Euclidean_algorithm
    // evaluate lcm here inline to reduce overhead


    const prod = a.times(b);

    while (!b.isZero()) {
      const t = b;
      b = a.mod(t);
      a = t;
    }

    return prod.div(a).abs();
  }
});
exports.createLcm = createLcm;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm06":"../node_modules/mathjs/src/type/matrix/utils/algorithm06.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/log10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLog10 = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'log10';
const dependencies = ['typed', 'config', 'Complex'];
const createLog10 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex
}) => {
  /**
   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log10(x)
   *
   * Examples:
   *
   *    math.log10(0.00001)            // returns -5
   *    math.log10(10000)              // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *    math.pow(10, 4)                // returns 10000
   *
   * See also:
   *
   *    exp, log, log1p, log2
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 10-base logarithm of `x`
   */
  const log10 = typed(name, {
    'number': function (x) {
      if (x >= 0 || config.predictable) {
        return (0, _number.log10Number)(x);
      } else {
        // negative value -> complex value computation
        return new Complex(x, 0).log().div(Math.LN10);
      }
    },
    'Complex': function (x) {
      return new Complex(x).log().div(Math.LN10);
    },
    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.log();
      } else {
        // downgrade to number, return Complex valued result
        return new Complex(x.toNumber(), 0).log().div(Math.LN10);
      }
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, log10);
    }
  });
  return log10;
});
exports.createLog10 = createLog10;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/log2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLog2 = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'log2';
const dependencies = ['typed', 'config', 'Complex'];
const createLog2 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex
}) => {
  /**
   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log2(x)
   *
   * Examples:
   *
   *    math.log2(0.03125)           // returns -5
   *    math.log2(16)                // returns 4
   *    math.log2(16) / math.log2(2) // returns 4
   *    math.pow(2, 4)               // returns 16
   *
   * See also:
   *
   *    exp, log, log1p, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the 2-base logarithm of `x`
   */
  const log2 = typed(name, {
    'number': function (x) {
      if (x >= 0 || config.predictable) {
        return (0, _number.log2Number)(x);
      } else {
        // negative value -> complex value computation
        return _log2Complex(new Complex(x, 0));
      }
    },
    'Complex': _log2Complex,
    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.log(2);
      } else {
        // downgrade to number, return Complex valued result
        return _log2Complex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, log2);
    }
  });
  /**
   * Calculate log2 for a complex value
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log2Complex(x) {
    const newX = Math.sqrt(x.re * x.re + x.im * x.im);
    return new Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
  }

  return log2;
});
exports.createLog2 = createLog2;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm03 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm03';
const dependencies = ['typed'];
const createAlgorithm03 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
   * Callback function invoked M*N times.
   *
   *
   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(Dij, 0)    ; otherwise
   *
   *
   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
   */
  return function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
    // dense matrix arrays
    const adata = denseMatrix._data;
    const asize = denseMatrix._size;
    const adt = denseMatrix._datatype; // sparse matrix arrays

    const bvalues = sparseMatrix._values;
    const bindex = sparseMatrix._index;
    const bptr = sparseMatrix._ptr;
    const bsize = sparseMatrix._size;
    const bdt = sparseMatrix._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!bvalues) {
      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result (DenseMatrix)


    const cdata = []; // initialize dense matrix

    for (let z = 0; z < rows; z++) {
      // initialize row
      cdata[z] = [];
    } // workspace


    const x = []; // marks indicating we have a value in x for a given column

    const w = []; // loop columns in b

    for (let j = 0; j < columns; j++) {
      // column mark
      const mark = j + 1; // values in column j

      for (let k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        const i = bindex[k]; // update workspace

        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
        w[i] = mark;
      } // process workspace


      for (let y = 0; y < rows; y++) {
        // check we have a calculated value for current row
        if (w[y] === mark) {
          // use calculated value
          cdata[y][j] = x[y];
        } else {
          // calculate value
          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
        }
      }
    } // return dense matrix


    return denseMatrix.createDenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    });
  };
});
exports.createAlgorithm03 = createAlgorithm03;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm05.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm05 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm05';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm05 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm05(a, b, callback) {
    // sparse matrix arrays
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const asize = a._size;
    const adt = a._datatype; // sparse matrix arrays

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr;
    const bsize = b._size;
    const bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cvalues = avalues && bvalues ? [] : undefined;
    const cindex = [];
    const cptr = []; // matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    const xa = cvalues ? [] : undefined;
    const xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    const wa = [];
    const wb = []; // vars

    let i, j, k, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      const mark = j + 1; // loop values A(:,j)

      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
        // row
        i = aindex[k]; // push index

        cindex.push(i); // update workspace

        wa[i] = mark; // check we need to process values

        if (xa) {
          xa[i] = avalues[k];
        }
      } // loop values B(:,j)


      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
        // row
        i = bindex[k]; // check row existed in A

        if (wa[i] !== mark) {
          // push index
          cindex.push(i);
        } // update workspace


        wb[i] = mark; // check we need to process values

        if (xb) {
          xb[i] = bvalues[k];
        }
      } // check we need to process values (non pattern matrix)


      if (cvalues) {
        // initialize first index in j
        k = cptr[j]; // loop index in j

        while (k < cindex.length) {
          // row
          i = cindex[k]; // marks

          const wai = wa[i];
          const wbi = wb[i]; // check Aij or Bij are nonzero

          if (wai === mark || wbi === mark) {
            // matrix values @ i,j
            const va = wai === mark ? xa[i] : zero;
            const vb = wbi === mark ? xb[i] : zero; // Cij

            const vc = cf(va, vb); // check for zero

            if (!eq(vc, zero)) {
              // push value
              cvalues.push(vc); // increment pointer

              k++;
            } else {
              // remove value @ i, do not increment pointer
              cindex.splice(k, 1);
            }
          }
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
exports.createAlgorithm05 = createAlgorithm05;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm12 = void 0;

var _factory = require("../../../utils/factory");

const name = 'algorithm12';
const dependencies = ['typed', 'DenseMatrix'];
const createAlgorithm12 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  DenseMatrix
}) => {
  /**
   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
   * Callback function invoked MxN times.
   *
   *
   *          ┌  f(Sij, b)  ; S(i,j) !== 0
   * C(i,j) = ┤
   *          └  f(0, b)    ; otherwise
   *
   *
   * @param {Matrix}   s                 The SparseMatrix instance (S)
   * @param {Scalar}   b                 The Scalar value
   * @param {Function} callback          The f(Aij,b) operation to invoke
   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
   */
  return function algorithm12(s, b, callback, inverse) {
    // sparse matrix arrays
    const avalues = s._values;
    const aindex = s._index;
    const aptr = s._ptr;
    const asize = s._size;
    const adt = s._datatype; // sparse matrix cannot be a Pattern matrix

    if (!avalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string') {
      // datatype
      dt = adt; // convert b to the same datatype

      b = typed.convert(b, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cdata = []; // matrix

    const c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    const x = []; // marks indicating we have a value in x for a given column

    const w = []; // loop columns

    for (let j = 0; j < columns; j++) {
      // columns mark
      const mark = j + 1; // values in j

      for (let k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        const r = aindex[k]; // update workspace

        x[r] = avalues[k];
        w[r] = mark;
      } // loop rows


      for (let i = 0; i < rows; i++) {
        // initialize C on first column
        if (j === 0) {
          // create row array
          cdata[i] = [];
        } // check sparse matrix has a value @ i,j


        if (w[i] === mark) {
          // invoke callback, update C
          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
        } else {
          // dense matrix value @ i, j
          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
        }
      }
    } // return sparse matrix


    return c;
  };
});
exports.createAlgorithm12 = createAlgorithm12;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/arithmetic/mod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMod = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm03");

var _algorithm3 = require("../../type/matrix/utils/algorithm05");

var _algorithm4 = require("../../type/matrix/utils/algorithm11");

var _algorithm5 = require("../../type/matrix/utils/algorithm12");

var _algorithm6 = require("../../type/matrix/utils/algorithm13");

var _algorithm7 = require("../../type/matrix/utils/algorithm14");

var _number = require("../../plain/number");

const name = 'mod';
const dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
const createMod =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  DenseMatrix
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed
  });
  const algorithm05 = (0, _algorithm3.createAlgorithm05)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm5.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm6.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm7.createAlgorithm14)({
    typed
  });
  /**
   * Calculates the modulus, the remainder of an integer division.
   *
   * For matrices, the function is evaluated element wise.
   *
   * The modulus is defined as:
   *
   *     x - y * floor(x / y)
   *
   * See https://en.wikipedia.org/wiki/Modulo_operation.
   *
   * Syntax:
   *
   *    math.mod(x, y)
   *
   * Examples:
   *
   *    math.mod(8, 3)                // returns 2
   *    math.mod(11, 2)               // returns 1
   *
   *    function isOdd(x) {
   *      return math.mod(x, 2) != 0
   *    }
   *
   *    isOdd(2)                      // returns false
   *    isOdd(3)                      // returns true
   *
   * See also:
   *
   *    divide
   *
   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
   */

  const mod = typed(name, {
    'number, number': _number.modNumber,
    'BigNumber, BigNumber': function (x, y) {
      return y.isZero() ? x : x.mod(y);
    },
    'Fraction, Fraction': function (x, y) {
      return x.mod(y);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm05(x, y, mod, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, mod, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, mod, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, mod);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return mod(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return mod(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return mod(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, mod, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, mod, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, mod, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, mod, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, mod, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, mod, true).valueOf();
    }
  });
  return mod;
});
exports.createMod = createMod;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm05":"../node_modules/mathjs/src/type/matrix/utils/algorithm05.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/multiplyScalar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMultiplyScalar = void 0;

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'multiplyScalar';
const dependencies = ['typed'];
const createMultiplyScalar =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Multiply two scalar values, `x * y`.
   * This function is meant for internal use: it is used by the public function
   * `multiply`
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`
   * @private
   */
  const multiplyScalar = typed('multiplyScalar', {
    'number, number': _number.multiplyNumber,
    'Complex, Complex': function (x, y) {
      return x.mul(y);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.times(y);
    },
    'Fraction, Fraction': function (x, y) {
      return x.mul(y);
    },
    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {
      const res = y.clone();
      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
      return res;
    },
    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {
      const res = x.clone();
      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
      return res;
    },
    'Unit, Unit': function (x, y) {
      return x.multiply(y);
    }
  });
  return multiplyScalar;
});
exports.createMultiplyScalar = createMultiplyScalar;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/multiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMultiply = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _algorithm = require("../../type/matrix/utils/algorithm11");

var _algorithm2 = require("../../type/matrix/utils/algorithm14");

const name = 'multiply';
const dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar'];
const createMultiply =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  addScalar,
  multiplyScalar,
  equalScalar
}) => {
  const algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed
  });
  /**
   * Multiply two or more values, `x * y`.
   * For matrices, the matrix product is calculated.
   *
   * Syntax:
   *
   *    math.multiply(x, y)
   *    math.multiply(x, y, z, ...)
   *
   * Examples:
   *
   *    math.multiply(4, 5.2)        // returns number 20.8
   *    math.multiply(2, 3, 4)       // returns number 24
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.multiply(a, b)          // returns Complex 5 + 14i
   *
   *    const c = [[1, 2], [4, 3]]
   *    const d = [[1, 2, 3], [3, -4, 7]]
   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
   *
   *    const e = math.unit('2.1 km')
   *    math.multiply(3, e)          // returns Unit 6.3 km
   *
   * See also:
   *
   *    divide, prod, cross, dot
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
   */

  const multiply = typed(name, (0, _object.extend)({
    // we extend the signatures of multiplyScalar with signatures dealing with matrices
    'Array, Array': function (x, y) {
      // check dimensions
      _validateMatrixDimensions((0, _array.arraySize)(x), (0, _array.arraySize)(y)); // use dense matrix implementation


      const m = multiply(matrix(x), matrix(y)); // return array or scalar

      return (0, _is.isMatrix)(m) ? m.valueOf() : m;
    },
    'Matrix, Matrix': function (x, y) {
      // dimensions
      const xsize = x.size();
      const ysize = y.size(); // check dimensions

      _validateMatrixDimensions(xsize, ysize); // process dimensions


      if (xsize.length === 1) {
        // process y dimensions
        if (ysize.length === 1) {
          // Vector * Vector
          return _multiplyVectorVector(x, y, xsize[0]);
        } // Vector * Matrix


        return _multiplyVectorMatrix(x, y);
      } // process y dimensions


      if (ysize.length === 1) {
        // Matrix * Vector
        return _multiplyMatrixVector(x, y);
      } // Matrix * Matrix


      return _multiplyMatrixMatrix(x, y);
    },
    'Matrix, Array': function (x, y) {
      // use Matrix * Matrix implementation
      return multiply(x, matrix(y));
    },
    'Array, Matrix': function (x, y) {
      // use Matrix * Matrix implementation
      return multiply(matrix(x, y.storage()), y);
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    },
    'any, any': multiplyScalar,
    'any, any, ...any': function (x, y, rest) {
      let result = multiply(x, y);

      for (let i = 0; i < rest.length; i++) {
        result = multiply(result, rest[i]);
      }

      return result;
    }
  }, multiplyScalar.signatures));

  function _validateMatrixDimensions(size1, size2) {
    // check left operand dimensions
    switch (size1.length) {
      case 1:
        // check size2
        switch (size2.length) {
          case 1:
            // Vector x Vector
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
            }

            break;

          case 2:
            // Vector x Matrix
            if (size1[0] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      case 2:
        // check size2
        switch (size2.length) {
          case 1:
            // Matrix x Vector
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
            }

            break;

          case 2:
            // Matrix x Matrix
            if (size1[1] !== size2[0]) {
              // throw error
              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
            }

            break;

          default:
            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
        }

        break;

      default:
        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
    }
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (N)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {number}             Scalar value
   */


  function _multiplyVectorVector(a, b, n) {
    // check empty vector
    if (n === 0) {
      throw new Error('Cannot multiply two empty vectors');
    } // a dense


    const adata = a._data;
    const adt = a._datatype; // b dense

    const bdata = b._data;
    const bdt = b._datatype; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result (do not initialize it with zero)


    let c = mf(adata[0], bdata[0]); // loop data

    for (let i = 1; i < n; i++) {
      // multiply and accumulate
      c = af(c, mf(adata[i], bdata[i]));
    }

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Matrix         (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorMatrix(a, b) {
    // process storage
    if (b.storage() !== 'dense') {
      throw new Error('Support for SparseMatrix not implemented');
    }

    return _multiplyVectorDenseMatrix(a, b);
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Dense Vector   (M)
   * @param {Matrix} b            Dense Matrix   (MxN)
   *
   * @return {Matrix}             Dense Vector   (N)
   */


  function _multiplyVectorDenseMatrix(a, b) {
    // a dense
    const adata = a._data;
    const asize = a._size;
    const adt = a._datatype; // b dense

    const bdata = b._data;
    const bsize = b._size;
    const bdt = b._datatype; // rows & columns

    const alength = asize[0];
    const bcolumns = bsize[1]; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    const c = []; // loop matrix columns

    for (let j = 0; j < bcolumns; j++) {
      // sum (do not initialize it with zero)
      let sum = mf(adata[0], bdata[0][j]); // loop vector

      for (let i = 1; i < alength; i++) {
        // multiply & accumulate
        sum = af(sum, mf(adata[i], bdata[i][j]));
      }

      c[j] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Dense Vector   (N)
   *
   * @return {Matrix}             Dense Vector   (M)
   */


  const _multiplyMatrixVector = typed('_multiplyMatrixVector', {
    'DenseMatrix, any': _multiplyDenseMatrixVector,
    'SparseMatrix, any': _multiplySparseMatrixVector
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            Matrix         (MxN)
   * @param {Matrix} b            Matrix         (NxC)
   *
   * @return {Matrix}             Matrix         (MxC)
   */


  const _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
  });
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix  (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             Dense Vector (M)
   */


  function _multiplyDenseMatrixVector(a, b) {
    // a dense
    const adata = a._data;
    const asize = a._size;
    const adt = a._datatype; // b dense

    const bdata = b._data;
    const bdt = b._datatype; // rows & columns

    const arows = asize[0];
    const acolumns = asize[1]; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    const c = []; // loop matrix a rows

    for (let i = 0; i < arows; i++) {
      // current row
      const row = adata[i]; // sum (do not initialize it with zero)

      let sum = mf(row[0], bdata[0]); // loop matrix a columns

      for (let j = 1; j < acolumns; j++) {
        // multiply & accumulate
        sum = af(sum, mf(row[j], bdata[j]));
      }

      c[i] = sum;
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            DenseMatrix    (NxC)
   *
   * @return {Matrix}             DenseMatrix    (MxC)
   */


  function _multiplyDenseMatrixDenseMatrix(a, b) {
    // a dense
    const adata = a._data;
    const asize = a._size;
    const adt = a._datatype; // b dense

    const bdata = b._data;
    const bsize = b._size;
    const bdt = b._datatype; // rows & columns

    const arows = asize[0];
    const acolumns = asize[1];
    const bcolumns = bsize[1]; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    const c = []; // loop matrix a rows

    for (let i = 0; i < arows; i++) {
      // current row
      const row = adata[i]; // initialize row array

      c[i] = []; // loop matrix b columns

      for (let j = 0; j < bcolumns; j++) {
        // sum (avoid initializing sum to zero)
        let sum = mf(row[0], bdata[0][j]); // loop matrix a columns

        for (let x = 1; x < acolumns; x++) {
          // multiply & accumulate
          sum = af(sum, mf(row[x], bdata[x][j]));
        }

        c[i][j] = sum;
      }
    } // return matrix


    return a.createDenseMatrix({
      data: c,
      size: [arows, bcolumns],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            DenseMatrix    (MxN)
   * @param {Matrix} b            SparseMatrix   (NxC)
   *
   * @return {Matrix}             SparseMatrix   (MxC)
   */


  function _multiplyDenseMatrixSparseMatrix(a, b) {
    // a dense
    const adata = a._data;
    const asize = a._size;
    const adt = a._datatype; // b sparse

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr;
    const bsize = b._size;
    const bdt = b._datatype; // validate b matrix

    if (!bvalues) {
      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
    } // rows & columns


    const arows = asize[0];
    const bcolumns = bsize[1]; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // equalScalar signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    const cvalues = [];
    const cindex = [];
    const cptr = []; // c matrix

    const c = b.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // loop b columns

    for (let jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // indeces in column jb

      const kb0 = bptr[jb];
      const kb1 = bptr[jb + 1]; // do not process column jb if no data exists

      if (kb1 > kb0) {
        // last row mark processed
        let last = 0; // loop a rows

        for (let i = 0; i < arows; i++) {
          // column mark
          const mark = i + 1; // C[i, jb]

          let cij; // values in b column j

          for (let kb = kb0; kb < kb1; kb++) {
            // row
            const ib = bindex[kb]; // check value has been initialized

            if (last !== mark) {
              // first value in column jb
              cij = mf(adata[i][ib], bvalues[kb]); // update mark

              last = mark;
            } else {
              // accumulate value
              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
            }
          } // check column has been processed and value != 0


          if (last === mark && !eq(cij, zero)) {
            // push row & value
            cindex.push(i);
            cvalues.push(cij);
          }
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix    (MxN)
   * @param {Matrix} b            Dense Vector (N)
   *
   * @return {Matrix}             SparseMatrix    (M, 1)
   */


  function _multiplySparseMatrixVector(a, b) {
    // a sparse
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    const bdata = b._data;
    const bdt = b._datatype; // rows & columns

    const arows = a._size[0];
    const brows = b._size[0]; // result

    const cvalues = [];
    const cindex = [];
    const cptr = []; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // equalScalar signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // workspace


    const x = []; // vector with marks indicating a value x[i] exists in a given column

    const w = []; // update ptr

    cptr[0] = 0; // rows in b

    for (let ib = 0; ib < brows; ib++) {
      // b[ib]
      const vbi = bdata[ib]; // check b[ib] != 0, avoid loops

      if (!eq(vbi, zero)) {
        // A values & index in ib column
        for (let ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
          // a row
          const ia = aindex[ka]; // check value exists in current j

          if (!w[ia]) {
            // ia is new entry in j
            w[ia] = true; // add i to pattern of C

            cindex.push(ia); // x(ia) = A

            x[ia] = mf(vbi, avalues[ka]);
          } else {
            // i exists in C already
            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
          }
        }
      }
    } // copy values from x to column jb of c


    for (let p1 = cindex.length, p = 0; p < p1; p++) {
      // row
      const ic = cindex[p]; // copy value

      cvalues[p] = x[ic];
    } // update ptr


    cptr[1] = cindex.length; // return sparse matrix

    return a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, 1],
      datatype: dt
    });
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            DenseMatrix       (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixDenseMatrix(a, b) {
    // a sparse
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const adt = a._datatype; // validate a matrix

    if (!avalues) {
      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
    } // b dense


    const bdata = b._data;
    const bdt = b._datatype; // rows & columns

    const arows = a._size[0];
    const brows = b._size[0];
    const bcolumns = b._size[1]; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // equalScalar signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt);
    } // result


    const cvalues = [];
    const cindex = [];
    const cptr = []; // c matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    const x = []; // vector with marks indicating a value x[i] exists in a given column

    const w = []; // loop b columns

    for (let jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      const mark = jb + 1; // rows in jb

      for (let ib = 0; ib < brows; ib++) {
        // b[ib, jb]
        const vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

        if (!eq(vbij, zero)) {
          // A values & index in ib column
          for (let ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // a row
            const ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(vbij, avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
            }
          }
        }
      } // copy values from x to column jb of c


      for (let p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
        // row
        const ic = cindex[p]; // copy value

        cvalues[p] = x[ic];
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }
  /**
   * C = A * B
   *
   * @param {Matrix} a            SparseMatrix      (MxN)
   * @param {Matrix} b            SparseMatrix      (NxC)
   *
   * @return {Matrix}             SparseMatrix      (MxC)
   */


  function _multiplySparseMatrixSparseMatrix(a, b) {
    // a sparse
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const adt = a._datatype; // b sparse

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr;
    const bdt = b._datatype; // rows & columns

    const arows = a._size[0];
    const bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

    const values = avalues && bvalues; // datatype

    let dt; // addScalar signature to use

    let af = addScalar; // multiplyScalar signature to use

    let mf = multiplyScalar; // process data types

    if (adt && bdt && adt === bdt && typeof adt === 'string') {
      // datatype
      dt = adt; // find signatures that matches (dt, dt)

      af = typed.find(addScalar, [dt, dt]);
      mf = typed.find(multiplyScalar, [dt, dt]);
    } // result


    const cvalues = values ? [] : undefined;
    const cindex = [];
    const cptr = []; // c matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [arows, bcolumns],
      datatype: dt
    }); // workspace

    const x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

    const w = []; // variables

    let ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

    for (let jb = 0; jb < bcolumns; jb++) {
      // update ptr
      cptr[jb] = cindex.length; // mark in workspace for current column

      const mark = jb + 1; // B values & index in j

      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
        // b row
        ib = bindex[kb]; // check we need to process values

        if (values) {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia); // x(ia) = A

              x[ia] = mf(bvalues[kb], avalues[ka]);
            } else {
              // i exists in C already
              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
            }
          }
        } else {
          // loop values in a[:,ib]
          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
            // row
            ia = aindex[ka]; // check value exists in current j

            if (w[ia] !== mark) {
              // ia is new entry in j
              w[ia] = mark; // add i to pattern of C

              cindex.push(ia);
            }
          }
        }
      } // check we need to process matrix values (pattern matrix)


      if (values) {
        // copy values from x to column jb of c
        for (let p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
          // row
          const ic = cindex[p]; // copy value

          cvalues[p] = x[ic];
        }
      }
    } // update ptr


    cptr[bcolumns] = cindex.length; // return sparse matrix

    return c;
  }

  return multiply;
});
exports.createMultiply = createMultiply;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/arithmetic/nthRoot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNthRootNumber = exports.createNthRoot = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm01");

var _algorithm2 = require("../../type/matrix/utils/algorithm02");

var _algorithm3 = require("../../type/matrix/utils/algorithm06");

var _algorithm4 = require("../../type/matrix/utils/algorithm11");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

var _algorithm6 = require("../../type/matrix/utils/algorithm14");

var _number = require("../../plain/number");

const name = 'nthRoot';
const dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];
const createNthRoot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  BigNumber
}) => {
  const algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed
  });
  const algorithm02 = (0, _algorithm2.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm06 = (0, _algorithm3.createAlgorithm06)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm6.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the nth root of a value.
   * The principal nth root of a positive real number A, is the positive real
   * solution of the equation
   *
   *     x^root = A
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *     math.nthRoot(a)
   *     math.nthRoot(a, root)
   *
   * Examples:
   *
   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
   *     math.sqrt(9)          // returns 3, as 3^2 == 9
   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param {number | BigNumber | Array | Matrix | Complex} a
   *              Value for which to calculate the nth root
   * @param {number | BigNumber} [root=2]    The root.
   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
   */

  const complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
  const nthRoot = typed(name, {
    'number': function (x) {
      return (0, _number.nthRootNumber)(x, 2);
    },
    'number, number': _number.nthRootNumber,
    'BigNumber': function (x) {
      return _bigNthRoot(x, new BigNumber(2));
    },
    'Complex': function (x) {
      throw new Error(complexErr);
    },
    'Complex, number': function (x, y) {
      throw new Error(complexErr);
    },
    'BigNumber, BigNumber': _bigNthRoot,
    'Array | Matrix': function (x) {
      return nthRoot(x, 2);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse + sparse
        return algorithm06(x, y, nthRoot);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, nthRoot, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // dense + sparse
        return algorithm01(x, y, nthRoot, false);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, nthRoot);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      return algorithm11(x, y, nthRoot, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      return algorithm14(x, y, nthRoot, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      // density must be one (no zeros in matrix)
      if (y.density() === 1) {
        // sparse - scalar
        return algorithm11(y, x, nthRoot, true);
      } else {
        // throw exception
        throw new Error('Root must be non-zero');
      }
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      return algorithm14(y, x, nthRoot, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return nthRoot(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return nthRoot(x, matrix(y)).valueOf();
    }
  });
  return nthRoot;
  /**
   * Calculate the nth root of a for BigNumbers, solve x^root == a
   * https://rosettacode.org/wiki/Nth_root#JavaScript
   * @param {BigNumber} a
   * @param {BigNumber} root
   * @private
   */

  function _bigNthRoot(a, root) {
    const precision = BigNumber.precision;
    const Big = BigNumber.clone({
      precision: precision + 2
    });
    const zero = new BigNumber(0);
    const one = new Big(1);
    const inv = root.isNegative();

    if (inv) {
      root = root.neg();
    }

    if (root.isZero()) {
      throw new Error('Root must be non-zero');
    }

    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
      throw new Error('Root must be odd when a is negative.');
    } // edge cases zero and infinity


    if (a.isZero()) {
      return inv ? new Big(Infinity) : 0;
    }

    if (!a.isFinite()) {
      return inv ? zero : a;
    }

    let x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
    // so (-1) ^ (1/root) = -1

    x = a.isNeg() ? x.neg() : x;
    return new BigNumber((inv ? one.div(x) : x).toPrecision(precision));
  }
});
exports.createNthRoot = createNthRoot;
const createNthRootNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed'], ({
  typed
}) => {
  return typed(name, {
    'number': _number.nthRootNumber,
    'number, number': _number.nthRootNumber
  });
});
exports.createNthRootNumber = createNthRootNumber;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm06":"../node_modules/mathjs/src/type/matrix/utils/algorithm06.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSign = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'sign';
const dependencies = ['typed', 'BigNumber', 'Fraction'];
const createSign =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber,
  Fraction
}) => {
  /**
   * Compute the sign of a value. The sign of a value x is:
   *
   * -  1 when x > 0
   * - -1 when x < 0
   * -  0 when x == 0
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sign(x)
   *
   * Examples:
   *
   *    math.sign(3.5)               // returns 1
   *    math.sign(-4.2)              // returns -1
   *    math.sign(0)                 // returns 0
   *
   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
   *
   * See also:
   *
   *    abs
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            The number for which to determine the sign
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
   *            The sign of `x`
   */
  const sign = typed(name, {
    'number': _number.signNumber,
    'Complex': function (x) {
      return x.sign();
    },
    'BigNumber': function (x) {
      return new BigNumber(x.cmp(0));
    },
    'Fraction': function (x) {
      return new Fraction(x.s, 1);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sign(0) = 0
      return (0, _collection.deepMap)(x, sign, true);
    },
    'Unit': function (x) {
      return sign(x.value);
    }
  });
  return sign;
});
exports.createSign = createSign;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/sqrt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSqrt = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'sqrt';
const dependencies = ['config', 'typed', 'Complex'];
const createSqrt =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  config,
  typed,
  Complex
}) => {
  /**
   * Calculate the square root of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sqrt(x)
   *
   * Examples:
   *
   *    math.sqrt(25)                // returns 5
   *    math.square(5)               // returns 25
   *    math.sqrt(-4)                // returns Complex 2i
   *
   * See also:
   *
   *    square, multiply, cube, cbrt, sqrtm
   *
   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
   *            Value for which to calculate the square root.
   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
   *            Returns the square root of `x`
   */
  const sqrt = typed('sqrt', {
    'number': _sqrtNumber,
    'Complex': function (x) {
      return x.sqrt();
    },
    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.sqrt();
      } else {
        // negative value -> downgrade to number to do complex value computation
        return _sqrtNumber(x.toNumber());
      }
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sqrt(0) = 0
      return (0, _collection.deepMap)(x, sqrt, true);
    },
    'Unit': function (x) {
      // Someday will work for complex units when they are implemented
      return x.pow(0.5);
    }
  });
  /**
   * Calculate sqrt for a number
   * @param {number} x
   * @returns {number | Complex} Returns the square root of x
   * @private
   */

  function _sqrtNumber(x) {
    if (isNaN(x)) {
      return NaN;
    } else if (x >= 0 || config.predictable) {
      return Math.sqrt(x);
    } else {
      return new Complex(x, 0).sqrt();
    }
  }

  return sqrt;
});
exports.createSqrt = createSqrt;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/arithmetic/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSquare = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'square';
const dependencies = ['typed'];
const createSquare =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Compute the square of a value, `x * x`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.square(x)
   *
   * Examples:
   *
   *    math.square(2)           // returns number 4
   *    math.square(3)           // returns number 9
   *    math.pow(3, 2)           // returns number 9
   *    math.multiply(3, 3)      // returns number 9
   *
   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
   *
   * See also:
   *
   *    multiply, cube, sqrt, pow
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
   *            Number for which to calculate the square
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
   *            Squared value
   */
  const square = typed(name, {
    'number': _number.squareNumber,
    'Complex': function (x) {
      return x.mul(x);
    },
    'BigNumber': function (x) {
      return x.times(x);
    },
    'Fraction': function (x) {
      return x.mul(x);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since square(0) = 0
      return (0, _collection.deepMap)(x, square, true);
    },
    'Unit': function (x) {
      return x.pow(2);
    }
  });
  return square;
});
exports.createSquare = createSquare;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/subtract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSubtract = void 0;

var _factory = require("../../utils/factory");

var _DimensionError = require("../../error/DimensionError");

var _algorithm = require("../../type/matrix/utils/algorithm01");

var _algorithm2 = require("../../type/matrix/utils/algorithm03");

var _algorithm3 = require("../../type/matrix/utils/algorithm05");

var _algorithm4 = require("../../type/matrix/utils/algorithm10");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

var _algorithm6 = require("../../type/matrix/utils/algorithm14");

const name = 'subtract';
const dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];
const createSubtract =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  addScalar,
  unaryMinus,
  DenseMatrix
}) => {
  // TODO: split function subtract in two: subtract and subtractScalar
  const algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed
  });
  const algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed
  });
  const algorithm05 = (0, _algorithm3.createAlgorithm05)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm4.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm6.createAlgorithm14)({
    typed
  });
  /**
   * Subtract two values, `x - y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.subtract(x, y)
   *
   * Examples:
   *
   *    math.subtract(5.3, 2)        // returns number 3.3
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(4, 1)
   *    math.subtract(a, b)          // returns Complex -2 + 2i
   *
   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
   *
   *    const c = math.unit('2.1 km')
   *    const d = math.unit('500m')
   *    math.subtract(c, d)          // returns Unit 1.6 km
   *
   * See also:
   *
   *    add
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
   *            Initial value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
   *            Value to subtract from `x`
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Subtraction of `x` and `y`
   */

  const subtract = typed(name, {
    'number, number': function (x, y) {
      return x - y;
    },
    'Complex, Complex': function (x, y) {
      return x.sub(y);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.minus(y);
    },
    'Fraction, Fraction': function (x, y) {
      return x.sub(y);
    },
    'Unit, Unit': function (x, y) {
      if (x.value === null) {
        throw new Error('Parameter x contains a unit with undefined value');
      }

      if (y.value === null) {
        throw new Error('Parameter y contains a unit with undefined value');
      }

      if (!x.equalBase(y)) {
        throw new Error('Units do not match');
      }

      const res = x.clone();
      res.value = subtract(res.value, y.value);
      res.fixPrefix = false;
      return res;
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      checkEqualDimensions(x, y);
      return algorithm05(x, y, subtract);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      checkEqualDimensions(x, y);
      return algorithm03(y, x, subtract, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      checkEqualDimensions(x, y);
      return algorithm01(x, y, subtract, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      checkEqualDimensions(x, y);
      return algorithm13(x, y, subtract);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return subtract(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return subtract(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return subtract(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm10(x, unaryMinus(y), addScalar);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, subtract);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm10(y, x, subtract, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, subtract, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, subtract, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, subtract, true).valueOf();
    }
  });
  return subtract;
});
/**
 * Check whether matrix x and y have the same number of dimensions.
 * Throws a DimensionError when dimensions are not equal
 * @param {Matrix} x
 * @param {Matrix} y
 */

exports.createSubtract = createSubtract;

function checkEqualDimensions(x, y) {
  const xsize = x.size();
  const ysize = y.size();

  if (xsize.length !== ysize.length) {
    throw new _DimensionError.DimensionError(xsize.length, ysize.length);
  }
}
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm05":"../node_modules/mathjs/src/type/matrix/utils/algorithm05.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/arithmetic/xgcd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createXgcd = void 0;

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'xgcd';
const dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
const createXgcd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  BigNumber
}) => {
  /**
   * Calculate the extended greatest common divisor for two values.
   * See https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
   *
   * Syntax:
   *
   *    math.xgcd(a, b)
   *
   * Examples:
   *
   *    math.xgcd(8, 12)             // returns [4, -1, 1]
   *    math.gcd(8, 12)              // returns 4
   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
   *
   * See also:
   *
   *    gcd, lcm
   *
   * @param {number | BigNumber} a  An integer number
   * @param {number | BigNumber} b  An integer number
   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
   */
  return typed(name, {
    'number, number': function (a, b) {
      const res = (0, _number.xgcdNumber)(a, b);
      return config.matrix === 'Array' ? res : matrix(res);
    },
    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

  });
  /**
   * Calculate xgcd for two BigNumbers
   * @param {BigNumber} a
   * @param {BigNumber} b
   * @return {BigNumber[]} result
   * @private
   */

  function _xgcdBigNumber(a, b) {
    // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    let // used to swap two variables
    t;
    let // quotient
    q;
    let // remainder
    r;
    const zero = new BigNumber(0);
    const one = new BigNumber(1);
    let x = zero;
    let lastx = one;
    let y = one;
    let lasty = zero;

    if (!a.isInt() || !b.isInt()) {
      throw new Error('Parameters in function xgcd must be integer numbers');
    }

    while (!b.isZero()) {
      q = a.div(b).floor();
      r = a.mod(b);
      t = x;
      x = lastx.minus(q.times(x));
      lastx = t;
      t = y;
      y = lasty.minus(q.times(y));
      lasty = t;
      a = b;
      b = r;
    }

    let res;

    if (a.lt(zero)) {
      res = [a.neg(), lastx.neg(), lasty.neg()];
    } else {
      res = [a, !a.isZero() ? lastx : 0, lasty];
    }

    return config.matrix === 'Array' ? res : matrix(res);
  }
});
exports.createXgcd = createXgcd;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm09.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm09 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm09';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm09 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
   * Callback function invoked NZA times, number of nonzero elements in A.
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
   * C(i,j) = ┤
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm09(a, b, callback) {
    // sparse matrix arrays
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const asize = a._size;
    const adt = a._datatype; // sparse matrix arrays

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr;
    const bsize = b._size;
    const bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cvalues = avalues && bvalues ? [] : undefined;
    const cindex = [];
    const cptr = []; // matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    const x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

    const w = []; // vars

    let i, j, k, k0, k1; // loop columns

    for (j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // column mark

      const mark = j + 1; // check we need to process values

      if (x) {
        // loop B(:,j)
        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
          // row
          i = bindex[k]; // update workspace

          w[i] = mark;
          x[i] = bvalues[k];
        }
      } // loop A(:,j)


      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // check we need to process values

        if (x) {
          // b value @ i,j
          const vb = w[i] === mark ? x[i] : zero; // invoke f

          const vc = cf(avalues[k], vb); // check zero value

          if (!eq(vc, zero)) {
            // push index
            cindex.push(i); // push value

            cvalues.push(vc);
          }
        } else {
          // push index
          cindex.push(i);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
exports.createAlgorithm09 = createAlgorithm09;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/function/arithmetic/dotMultiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDotMultiply = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm09");

var _algorithm3 = require("../../type/matrix/utils/algorithm11");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

const name = 'dotMultiply';
const dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];
const createDotMultiply =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  multiplyScalar
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm09 = (0, _algorithm2.createAlgorithm09)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm3.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Multiply two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotMultiply(x, y)
   *
   * Examples:
   *
   *    math.dotMultiply(2, 4) // returns 8
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
   *
   * See also:
   *
   *    multiply, divide, dotDivide
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
   */

  const dotMultiply = typed(name, {
    'any, any': multiplyScalar,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm09(x, y, multiplyScalar, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, multiplyScalar, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm02(x, y, multiplyScalar, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, multiplyScalar);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return dotMultiply(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return dotMultiply(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, multiplyScalar, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, multiplyScalar, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm11(y, x, multiplyScalar, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, multiplyScalar, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
    }
  });
  return dotMultiply;
});
exports.createDotMultiply = createDotMultiply;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm09":"../node_modules/mathjs/src/type/matrix/utils/algorithm09.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/utils/bignumber/bitwise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitAndBigNumber = bitAndBigNumber;
exports.bitNotBigNumber = bitNotBigNumber;
exports.bitOrBigNumber = bitOrBigNumber;
exports.bitwise = bitwise;
exports.bitXor = bitXor;
exports.leftShiftBigNumber = leftShiftBigNumber;
exports.rightArithShiftBigNumber = rightArithShiftBigNumber;

/**
 * Bitwise and for Bignumbers
 *
 * Special Cases:
 *   N &  n =  N
 *   n &  0 =  0
 *   n & -1 =  n
 *   n &  n =  n
 *   I &  I =  I
 *  -I & -I = -I
 *   I & -I =  0
 *   I &  n =  n
 *   I & -n =  I
 *  -I &  n =  0
 *  -I & -n = -I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` & `y`, is fully precise
 * @private
 */
function bitAndBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitAnd');
  }

  const BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.eq(-1) || x.eq(y)) {
    return x;
  }

  if (y.isZero() || x.eq(-1)) {
    return y;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      if (x.isNegative() === y.isNegative()) {
        return x;
      }

      return new BigNumber(0);
    }

    if (!x.isFinite()) {
      if (y.isNegative()) {
        return x;
      }

      if (x.isNegative()) {
        return new BigNumber(0);
      }

      return y;
    }

    if (!y.isFinite()) {
      if (x.isNegative()) {
        return y;
      }

      if (y.isNegative()) {
        return new BigNumber(0);
      }

      return x;
    }
  }

  return bitwise(x, y, function (a, b) {
    return a & b;
  });
}
/**
 * Bitwise not
 * @param {BigNumber} x
 * @return {BigNumber} Result of ~`x`, fully precise
 *
 */


function bitNotBigNumber(x) {
  if (x.isFinite() && !x.isInteger()) {
    throw new Error('Integer expected in function bitNot');
  }

  const BigNumber = x.constructor;
  const prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });
  let result = x.plus(new BigNumber(1));
  result.s = -result.s || null;
  BigNumber.config({
    precision: prevPrec
  });
  return result;
}
/**
 * Bitwise OR for BigNumbers
 *
 * Special Cases:
 *   N |  n =  N
 *   n |  0 =  n
 *   n | -1 = -1
 *   n |  n =  n
 *   I |  I =  I
 *  -I | -I = -I
 *   I | -n = -1
 *   I | -I = -1
 *   I |  n =  I
 *  -I |  n = -I
 *  -I | -n = -n
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` | `y`, fully precise
 */


function bitOrBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitOr');
  }

  const BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  const negOne = new BigNumber(-1);

  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
    return y;
  }

  if (y.isZero() || x.eq(negOne)) {
    return x;
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
      return negOne;
    }

    if (x.isNegative() && y.isNegative()) {
      return x.isFinite() ? x : y;
    }

    return x.isFinite() ? y : x;
  }

  return bitwise(x, y, function (a, b) {
    return a | b;
  });
}
/**
 * Applies bitwise function to numbers
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @param {function (a, b)} func
 * @return {BigNumber}
 */


function bitwise(x, y, func) {
  const BigNumber = x.constructor;
  let xBits, yBits;
  const xSign = +(x.s < 0);
  const ySign = +(y.s < 0);

  if (xSign) {
    xBits = decCoefficientToBinaryString(bitNotBigNumber(x));

    for (let i = 0; i < xBits.length; ++i) {
      xBits[i] ^= 1;
    }
  } else {
    xBits = decCoefficientToBinaryString(x);
  }

  if (ySign) {
    yBits = decCoefficientToBinaryString(bitNotBigNumber(y));

    for (let i = 0; i < yBits.length; ++i) {
      yBits[i] ^= 1;
    }
  } else {
    yBits = decCoefficientToBinaryString(y);
  }

  let minBits, maxBits, minSign;

  if (xBits.length <= yBits.length) {
    minBits = xBits;
    maxBits = yBits;
    minSign = xSign;
  } else {
    minBits = yBits;
    maxBits = xBits;
    minSign = ySign;
  }

  let shortLen = minBits.length;
  let longLen = maxBits.length;
  const expFuncVal = func(xSign, ySign) ^ 1;
  let outVal = new BigNumber(expFuncVal ^ 1);
  let twoPower = new BigNumber(1);
  const two = new BigNumber(2);
  const prevPrec = BigNumber.precision;
  BigNumber.config({
    precision: 1E9
  });

  while (shortLen > 0) {
    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  while (longLen > 0) {
    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
      outVal = outVal.plus(twoPower);
    }

    twoPower = twoPower.times(two);
  }

  BigNumber.config({
    precision: prevPrec
  });

  if (expFuncVal === 0) {
    outVal.s = -outVal.s;
  }

  return outVal;
}
/* Extracted from decimal.js, and edited to specialize. */


function decCoefficientToBinaryString(x) {
  // Convert to string
  const a = x.d; // array with digits

  let r = a[0] + '';

  for (let i = 1; i < a.length; ++i) {
    let s = a[i] + '';

    for (let z = 7 - s.length; z--;) {
      s = '0' + s;
    }

    r += s;
  }

  let j = r.length;

  while (r.charAt(j) === '0') {
    j--;
  }

  let xe = x.e;
  let str = r.slice(0, j + 1 || 1);
  const strL = str.length;

  if (xe > 0) {
    if (++xe > strL) {
      // Append zeros.
      xe -= strL;

      while (xe--) {
        str += '0';
      }
    } else if (xe < strL) {
      str = str.slice(0, xe) + '.' + str.slice(xe);
    }
  } // Convert from base 10 (decimal) to base 2


  const arr = [0];

  for (let i = 0; i < str.length;) {
    let arrL = arr.length;

    while (arrL--) {
      arr[arrL] *= 10;
    }

    arr[0] += parseInt(str.charAt(i++)); // convert to int

    for (let j = 0; j < arr.length; ++j) {
      if (arr[j] > 1) {
        if (arr[j + 1] === null || arr[j + 1] === undefined) {
          arr[j + 1] = 0;
        }

        arr[j + 1] += arr[j] >> 1;
        arr[j] &= 1;
      }
    }
  }

  return arr.reverse();
}
/**
 * Bitwise XOR for BigNumbers
 *
 * Special Cases:
 *   N ^  n =  N
 *   n ^  0 =  n
 *   n ^  n =  0
 *   n ^ -1 = ~n
 *   I ^  n =  I
 *   I ^ -n = -I
 *   I ^ -I = -1
 *  -I ^  n = -I
 *  -I ^ -n =  I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` ^ `y`, fully precise
 *
 */


function bitXor(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function bitXor');
  }

  const BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN()) {
    return new BigNumber(NaN);
  }

  if (x.isZero()) {
    return y;
  }

  if (y.isZero()) {
    return x;
  }

  if (x.eq(y)) {
    return new BigNumber(0);
  }

  const negOne = new BigNumber(-1);

  if (x.eq(negOne)) {
    return bitNotBigNumber(y);
  }

  if (y.eq(negOne)) {
    return bitNotBigNumber(x);
  }

  if (!x.isFinite() || !y.isFinite()) {
    if (!x.isFinite() && !y.isFinite()) {
      return negOne;
    }

    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
  }

  return bitwise(x, y, function (a, b) {
    return a ^ b;
  });
}
/**
 * Bitwise left shift
 *
 * Special Cases:
 *  n << -n = N
 *  n <<  N = N
 *  N <<  n = N
 *  n <<  0 = n
 *  0 <<  n = 0
 *  I <<  I = N
 *  I <<  n = I
 *  n <<  I = I
 *
 * @param {BigNumber} x
 * @param {BigNumber} y
 * @return {BigNumber} Result of `x` << `y`
 *
 */


function leftShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function leftShift');
  }

  const BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!x.isFinite() && !y.isFinite()) {
    return new BigNumber(NaN);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.times(Math.pow(2, y.toNumber()) + '');
  }

  return x.times(new BigNumber(2).pow(y));
}
/*
 * Special Cases:
 *   n >> -n =  N
 *   n >>  N =  N
 *   N >>  n =  N
 *   I >>  I =  N
 *   n >>  0 =  n
 *   I >>  n =  I
 *  -I >>  n = -I
 *  -I >>  I = -I
 *   n >>  I =  I
 *  -n >>  I = -1
 *   0 >>  n =  0
 *
 * @param {BigNumber} value
 * @param {BigNumber} value
 * @return {BigNumber} Result of `x` >> `y`
 *
 */


function rightArithShiftBigNumber(x, y) {
  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
    throw new Error('Integers expected in function rightArithShift');
  }

  const BigNumber = x.constructor;

  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
    return new BigNumber(NaN);
  }

  if (x.isZero() || y.isZero()) {
    return x;
  }

  if (!y.isFinite()) {
    if (x.isNegative()) {
      return new BigNumber(-1);
    }

    if (!x.isFinite()) {
      return new BigNumber(NaN);
    }

    return new BigNumber(0);
  } // Math.pow(2, y) is fully precise for y < 55, and fast


  if (y.lt(55)) {
    return x.div(Math.pow(2, y.toNumber()) + '').floor();
  }

  return x.div(new BigNumber(2).pow(y)).floor();
}
},{}],"../node_modules/mathjs/src/function/bitwise/bitAnd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBitAnd = void 0;

var _bitwise = require("../../utils/bignumber/bitwise");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm11");

var _algorithm3 = require("../../type/matrix/utils/algorithm13");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm06");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'bitAnd';
const dependencies = ['typed', 'matrix', 'equalScalar'];
const createBitAnd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm06 = (0, _algorithm5.createAlgorithm06)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise AND two values, `x & y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitAnd(x, y)
   *
   * Examples:
   *
   *    math.bitAnd(53, 131)               // returns number 1
   *
   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
   *
   * See also:
   *
   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to and
   * @param  {number | BigNumber | Array | Matrix} y Second value to and
   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
   */

  const bitAnd = typed(name, {
    'number, number': _number.bitAndNumber,
    'BigNumber, BigNumber': _bitwise.bitAndBigNumber,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm06(x, y, bitAnd, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, bitAnd, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm02(x, y, bitAnd, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, bitAnd);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return bitAnd(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return bitAnd(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return bitAnd(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, bitAnd, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, bitAnd, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm11(y, x, bitAnd, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, bitAnd, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitAnd, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitAnd, true).valueOf();
    }
  });
  return bitAnd;
});
exports.createBitAnd = createBitAnd;
},{"../../utils/bignumber/bitwise":"../node_modules/mathjs/src/utils/bignumber/bitwise.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm06":"../node_modules/mathjs/src/type/matrix/utils/algorithm06.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/bitwise/bitNot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBitNot = void 0;

var _bitwise = require("../../utils/bignumber/bitwise");

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'bitNot';
const dependencies = ['typed'];
const createBitNot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Bitwise NOT value, `~x`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.bitNot(x)
   *
   * Examples:
   *
   *    math.bitNot(1)               // returns number -2
   *
   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
   *
   * See also:
   *
   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to not
   * @return {number | BigNumber | Array | Matrix} NOT of `x`
   */
  const bitNot = typed(name, {
    'number': _number.bitNotNumber,
    'BigNumber': _bitwise.bitNotBigNumber,
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, bitNot);
    }
  });
  return bitNot;
});
exports.createBitNot = createBitNot;
},{"../../utils/bignumber/bitwise":"../node_modules/mathjs/src/utils/bignumber/bitwise.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/bitwise/bitOr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBitOr = void 0;

var _bitwise = require("../../utils/bignumber/bitwise");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm14");

var _algorithm2 = require("../../type/matrix/utils/algorithm13");

var _algorithm3 = require("../../type/matrix/utils/algorithm10");

var _algorithm4 = require("../../type/matrix/utils/algorithm04");

var _algorithm5 = require("../../type/matrix/utils/algorithm01");

var _number = require("../../plain/number");

const name = 'bitOr';
const dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
const createBitOr =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  DenseMatrix
}) => {
  const algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed
  });
  const algorithm04 = (0, _algorithm4.createAlgorithm04)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm3.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm2.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise OR two values, `x | y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the lowest print base.
   *
   * Syntax:
   *
   *    math.bitOr(x, y)
   *
   * Examples:
   *
   *    math.bitOr(1, 2)               // returns number 3
   *
   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to or
   * @param  {number | BigNumber | Array | Matrix} y Second value to or
   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
   */

  const bitOr = typed(name, {
    'number, number': _number.bitOrNumber,
    'BigNumber, BigNumber': _bitwise.bitOrBigNumber,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm04(x, y, bitOr);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm01(y, x, bitOr, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm01(x, y, bitOr, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, bitOr);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return bitOr(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return bitOr(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return bitOr(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm10(x, y, bitOr, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, bitOr, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm10(y, x, bitOr, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, bitOr, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitOr, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitOr, true).valueOf();
    }
  });
  return bitOr;
});
exports.createBitOr = createBitOr;
},{"../../utils/bignumber/bitwise":"../node_modules/mathjs/src/utils/bignumber/bitwise.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm04":"../node_modules/mathjs/src/type/matrix/utils/algorithm04.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm07 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm07';
const dependencies = ['typed', 'DenseMatrix'];
const createAlgorithm07 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  DenseMatrix
}) => {
  /**
   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
   * Callback function invoked MxN times.
   *
   * C(i,j) = f(Aij, Bij)
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    DenseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm07(a, b, callback) {
    // sparse matrix arrays
    const asize = a._size;
    const adt = a._datatype; // sparse matrix arrays

    const bsize = b._size;
    const bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // vars


    let i, j; // result arrays

    const cdata = []; // initialize c

    for (i = 0; i < rows; i++) {
      cdata[i] = [];
    } // matrix


    const c = new DenseMatrix({
      data: cdata,
      size: [rows, columns],
      datatype: dt
    }); // workspaces

    const xa = [];
    const xb = []; // marks indicating we have a value in x for a given column

    const wa = [];
    const wb = []; // loop columns

    for (j = 0; j < columns; j++) {
      // columns mark
      const mark = j + 1; // scatter the values of A(:,j) into workspace

      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


      _scatter(b, j, wb, xb, mark); // loop rows


      for (i = 0; i < rows; i++) {
        // matrix values @ i,j
        const va = wa[i] === mark ? xa[i] : zero;
        const vb = wb[i] === mark ? xb[i] : zero; // invoke callback

        cdata[i][j] = cf(va, vb);
      }
    } // return sparse matrix


    return c;
  };

  function _scatter(m, j, w, x, mark) {
    // a arrays
    const values = m._values;
    const index = m._index;
    const ptr = m._ptr; // loop values in column j

    for (let k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
      // row
      const i = index[k]; // update workspace

      w[i] = mark;
      x[i] = values[k];
    }
  }
});
exports.createAlgorithm07 = createAlgorithm07;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/function/bitwise/bitXor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBitXor = void 0;

var _bitwise = require("../../utils/bignumber/bitwise");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'bitXor';
const dependencies = ['typed', 'matrix', 'DenseMatrix'];
const createBitXor =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise XOR two values, `x ^ y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.bitXor(x, y)
   *
   * Examples:
   *
   *    math.bitXor(1, 2)               // returns number 3
   *
   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x First value to xor
   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
   */

  const bitXor = typed(name, {
    'number, number': _number.bitXorNumber,
    'BigNumber, BigNumber': _bitwise.bitXor,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, bitXor);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, bitXor, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, bitXor, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, bitXor);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return bitXor(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return bitXor(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return bitXor(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, bitXor, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, bitXor, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, bitXor, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, bitXor, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, bitXor, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, bitXor, true).valueOf();
    }
  });
  return bitXor;
});
exports.createBitXor = createBitXor;
},{"../../utils/bignumber/bitwise":"../node_modules/mathjs/src/utils/bignumber/bitwise.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/complex/arg.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createArg = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'arg';
const dependencies = ['typed'];
const createArg =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Compute the argument of a complex value.
   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.arg(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 2)
   *    math.arg(a) / math.pi          // returns number 0.25
   *
   *    const b = math.complex('2 + 3i')
   *    math.arg(b)                    // returns number 0.982793723247329
   *    math.atan2(3, 2)               // returns number 0.982793723247329
   *
   * See also:
   *
   *    re, im, conj, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The argument of x
   */
  const arg = typed(name, {
    'number': function (x) {
      return Math.atan2(0, x);
    },
    'BigNumber': function (x) {
      return x.constructor.atan2(0, x);
    },
    'Complex': function (x) {
      return x.arg();
    },
    // TODO: implement BigNumber support for function arg
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, arg);
    }
  });
  return arg;
});
exports.createArg = createArg;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/complex/conj.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConj = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'conj';
const dependencies = ['typed'];
const createConj =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Compute the complex conjugate of a complex value.
   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.conj(x)
   *
   * Examples:
   *
   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
   *
   * See also:
   *
   *    re, im, arg, abs
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            The complex conjugate of x
   */
  const conj = typed(name, {
    'number': function (x) {
      return x;
    },
    'BigNumber': function (x) {
      return x;
    },
    'Complex': function (x) {
      return x.conjugate();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, conj);
    }
  });
  return conj;
});
exports.createConj = createConj;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/complex/im.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIm = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'im';
const dependencies = ['typed'];
const createIm =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Get the imaginary part of a complex number.
   * For a complex number `a + bi`, the function returns `b`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.im(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number -5.2
   *    math.re(math.complex(2.4))     // returns number 0
   *
   * See also:
   *
   *    re, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
   */
  const im = typed(name, {
    'number': function (x) {
      return 0;
    },
    'BigNumber': function (x) {
      return x.mul(0);
    },
    'Complex': function (x) {
      return x.im;
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, im);
    }
  });
  return im;
});
exports.createIm = createIm;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/complex/re.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRe = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 're';
const dependencies = ['typed'];
const createRe =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Get the real part of a complex number.
   * For a complex number `a + bi`, the function returns `a`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.re(x)
   *
   * Examples:
   *
   *    const a = math.complex(2, 3)
   *    math.re(a)                     // returns number 2
   *    math.im(a)                     // returns number 3
   *
   *    math.re(math.complex('-5.2i')) // returns number 0
   *    math.re(math.complex(2.4))     // returns number 2.4
   *
   * See also:
   *
   *    im, conj, abs, arg
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            A complex number or array with complex numbers
   * @return {number | BigNumber | Array | Matrix} The real part of x
   */
  const re = typed(name, {
    'number': function (x) {
      return x;
    },
    'BigNumber': function (x) {
      return x;
    },
    'Complex': function (x) {
      return x.re;
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, re);
    }
  });
  return re;
});
exports.createRe = createRe;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/logical/not.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNot = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'not';
const dependencies = ['typed'];
const createNot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Logical `not`. Flips boolean value of a given parameter.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.not(x)
   *
   * Examples:
   *
   *    math.not(2)      // returns false
   *    math.not(0)      // returns true
   *    math.not(true)   // returns false
   *
   *    a = [2, -7, 0]
   *    math.not(a)      // returns [false, false, true]
   *
   * See also:
   *
   *    and, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when input is a zero or empty value.
   */
  const not = typed(name, {
    'number': _number.notNumber,
    'Complex': function (x) {
      return x.re === 0 && x.im === 0;
    },
    'BigNumber': function (x) {
      return x.isZero() || x.isNaN();
    },
    'Unit': function (x) {
      return x.value !== null ? not(x.value) : true;
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, not);
    }
  });
  return not;
});
exports.createNot = createNot;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/logical/or.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOr = void 0;

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm12");

var _algorithm3 = require("../../type/matrix/utils/algorithm13");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm05");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'or';
const dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
const createOr =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm05 = (0, _algorithm5.createAlgorithm05)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm2.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.or(x, y)
   *
   * Examples:
   *
   *    math.or(2, 4)   // returns true
   *
   *    a = [2, 5, 0]
   *    b = [0, 22, 0]
   *    c = 0
   *
   *    math.or(a, b)   // returns [true, true, false]
   *    math.or(b, c)   // returns [false, true, false]
   *
   * See also:
   *
   *    and, not, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
   */

  const or = typed(name, {
    'number, number': _number.orNumber,
    'Complex, Complex': function (x, y) {
      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
    },
    'BigNumber, BigNumber': function (x, y) {
      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
    },
    'Unit, Unit': function (x, y) {
      return or(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm05(x, y, or);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, or, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, or, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, or);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return or(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return or(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return or(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, or, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, or, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, or, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, or, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, or, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, or, true).valueOf();
    }
  });
  return or;
});
exports.createOr = createOr;
},{"../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm05":"../node_modules/mathjs/src/type/matrix/utils/algorithm05.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/logical/xor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createXor = void 0;

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'xor';
const dependencies = ['typed', 'matrix', 'DenseMatrix'];
const createXor =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.xor(x, y)
   *
   * Examples:
   *
   *    math.xor(2, 4)   // returns false
   *
   *    a = [2, 0, 0]
   *    b = [2, 7, 0]
   *    c = 0
   *
   *    math.xor(a, b)   // returns [false, true, false]
   *    math.xor(a, c)   // returns [true, false, false]
   *
   * See also:
   *
   *    and, not, or
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
   */

  const xor = typed(name, {
    'number, number': _number.xorNumber,
    'Complex, Complex': function (x, y) {
      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function (x, y) {
      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
    },
    'Unit, Unit': function (x, y) {
      return xor(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, xor);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, xor, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, xor, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, xor);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return xor(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return xor(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return xor(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, xor, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, xor, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, xor, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, xor, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, xor, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, xor, true).valueOf();
    }
  });
  return xor;
});
exports.createXor = createXor;
},{"../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/matrix/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConcat = void 0;

var _is = require("../../utils/is");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _IndexError = require("../../error/IndexError");

var _DimensionError = require("../../error/DimensionError");

var _factory = require("../../utils/factory");

const name = 'concat';
const dependencies = ['typed', 'matrix', 'isInteger'];
const createConcat =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  isInteger
}) => {
  /**
   * Concatenate two or more matrices.
   *
   * Syntax:
   *
   *     math.concat(A, B, C, ...)
   *     math.concat(A, B, C, ..., dim)
   *
   * Where:
   *
   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
   *   By default the last dimension of the matrices.
   *
   * Examples:
   *
   *    const A = [[1, 2], [5, 6]]
   *    const B = [[3, 4], [7, 8]]
   *
   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
   *    math.concat('hello', ' ', 'world') // returns 'hello world'
   *
   * See also:
   *
   *    size, squeeze, subset, transpose
   *
   * @param {... Array | Matrix} args     Two or more matrices
   * @return {Array | Matrix} Concatenated matrix
   */
  return typed(name, {
    // TODO: change signature to '...Array | Matrix, dim?' when supported
    '...Array | Matrix | number | BigNumber': function (args) {
      let i;
      const len = args.length;
      let dim = -1; // zero-based dimension

      let prevDim;
      let asMatrix = false;
      const matrices = []; // contains multi dimensional arrays

      for (i = 0; i < len; i++) {
        const arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

        if ((0, _is.isMatrix)(arg)) {
          asMatrix = true;
        }

        if ((0, _is.isNumber)(arg) || (0, _is.isBigNumber)(arg)) {
          if (i !== len - 1) {
            throw new Error('Dimension must be specified as last argument');
          } // last argument contains the dimension on which to concatenate


          prevDim = dim;
          dim = arg.valueOf(); // change BigNumber to number

          if (!isInteger(dim)) {
            throw new TypeError('Integer number expected for dimension');
          }

          if (dim < 0 || i > 0 && dim > prevDim) {
            // TODO: would be more clear when throwing a DimensionError here
            throw new _IndexError.IndexError(dim, prevDim + 1);
          }
        } else {
          // this is a matrix or array
          const m = (0, _object.clone)(arg).valueOf();
          const size = (0, _array.arraySize)(m);
          matrices[i] = m;
          prevDim = dim;
          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

          if (i > 0 && dim !== prevDim) {
            throw new _DimensionError.DimensionError(prevDim + 1, dim + 1);
          }
        }
      }

      if (matrices.length === 0) {
        throw new SyntaxError('At least one matrix expected');
      }

      let res = matrices.shift();

      while (matrices.length) {
        res = _concat(res, matrices.shift(), dim, 0);
      }

      return asMatrix ? matrix(res) : res;
    },
    '...string': function (args) {
      return args.join('');
    }
  });
});
/**
 * Recursively concatenate two matrices.
 * The contents of the matrices is not cloned.
 * @param {Array} a             Multi dimensional array
 * @param {Array} b             Multi dimensional array
 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
 * @param {number} dim          The current dim (zero-based)
 * @return {Array} c            The concatenated matrix
 * @private
 */

exports.createConcat = createConcat;

function _concat(a, b, concatDim, dim) {
  if (dim < concatDim) {
    // recurse into next dimension
    if (a.length !== b.length) {
      throw new _DimensionError.DimensionError(a.length, b.length);
    }

    const c = [];

    for (let i = 0; i < a.length; i++) {
      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
    }

    return c;
  } else {
    // concatenate this dimension
    return a.concat(b);
  }
}
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js","../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/column.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createColumn = void 0;

var _factory = require("../../utils/factory");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

const name = 'column';
const dependencies = ['typed', 'Index', 'matrix', 'range'];
const createColumn =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Index,
  matrix,
  range
}) => {
  /**
   * Return a column from a Matrix.
   *
   * Syntax:
   *
   *     math.column(value, index)
   *
   * Example:
   *
   *     // get a column
   *     const d = [[1, 2], [3, 4]]
   *     math.column(d, 1) // returns [2, 4]
   *
   * See also:
   *
   *     row
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} column           The index of the column
   * @return {Array | Matrix}         The retrieved column
   */
  const column = typed(name, {
    'Matrix, number': _column,
    'Array, number': function (value, column) {
      return _column(matrix((0, _object.clone)(value)), column).valueOf();
    }
  });
  return column;
  /**
   * Retrieve a column of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} column  The index of the column
   * @return {Matrix}        The retrieved column
   */

  function _column(value, column) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    (0, _array.validateIndex)(column, value.size()[1]);
    const rowRange = range(0, value.size()[0]);
    const index = new Index(rowRange, column);
    return value.subset(index);
  }
});
exports.createColumn = createColumn;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js"}],"../node_modules/mathjs/src/function/matrix/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCross = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'cross';
const dependencies = ['typed', 'matrix', 'subtract', 'multiply'];
const createCross =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  subtract,
  multiply
}) => {
  /**
   * Calculate the cross product for two vectors in three dimensional space.
   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
   * as:
   *
   *    cross(A, B) = [
   *      a2 * b3 - a3 * b2,
   *      a3 * b1 - a1 * b3,
   *      a1 * b2 - a2 * b1
   *    ]
   *
   * If one of the input vectors has a dimension greater than 1, the output
   * vector will be a 1x3 (2-dimensional) matrix.
   *
   * Syntax:
   *
   *    math.cross(x, y)
   *
   * Examples:
   *
   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
   *
   * See also:
   *
   *    dot, multiply
   *
   * @param  {Array | Matrix} x   First vector
   * @param  {Array | Matrix} y   Second vector
   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
   */
  return typed(name, {
    'Matrix, Matrix': function (x, y) {
      return matrix(_cross(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function (x, y) {
      return matrix(_cross(x.toArray(), y));
    },
    'Array, Matrix': function (x, y) {
      return matrix(_cross(x, y.toArray()));
    },
    'Array, Array': _cross
  });
  /**
   * Calculate the cross product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {Array} Returns the cross product of x and y
   * @private
   */

  function _cross(x, y) {
    const highestDimension = Math.max((0, _array.arraySize)(x).length, (0, _array.arraySize)(y).length);
    x = (0, _array.squeeze)(x);
    y = (0, _array.squeeze)(y);
    const xSize = (0, _array.arraySize)(x);
    const ySize = (0, _array.arraySize)(y);

    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
    }

    const product = [subtract(multiply(x[1], y[2]), multiply(x[2], y[1])), subtract(multiply(x[2], y[0]), multiply(x[0], y[2])), subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))];

    if (highestDimension > 1) {
      return [product];
    } else {
      return product;
    }
  }
});
exports.createCross = createCross;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/diag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDiag = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'diag';
const dependencies = ['typed', 'matrix', 'DenseMatrix', 'SparseMatrix'];
const createDiag =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  DenseMatrix,
  SparseMatrix
}) => {
  /**
   * Create a diagonal matrix or retrieve the diagonal of a matrix
   *
   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
   * When k is positive, the values are placed on the super diagonal.
   * When k is negative, the values are placed on the sub diagonal.
   *
   * Syntax:
   *
   *     math.diag(X)
   *     math.diag(X, format)
   *     math.diag(X, k)
   *     math.diag(X, k, format)
   *
   * Examples:
   *
   *     // create a diagonal matrix
   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
   *
   *    // retrieve the diagonal from a matrix
   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
   *    math.diag(a)   // returns [1, 5, 9]
   *
   * See also:
   *
   *     ones, zeros, identity
   *
   * @param {Matrix | Array} x          A two dimensional matrix or a vector
   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
   *                                    in or retrieved.
   * @param {string} [format='dense']   The matrix storage format.
   *
   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
   */
  return typed(name, {
    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
    'Array': function (x) {
      return _diag(x, 0, (0, _array.arraySize)(x), null);
    },
    'Array, number': function (x, k) {
      return _diag(x, k, (0, _array.arraySize)(x), null);
    },
    'Array, BigNumber': function (x, k) {
      return _diag(x, k.toNumber(), (0, _array.arraySize)(x), null);
    },
    'Array, string': function (x, format) {
      return _diag(x, 0, (0, _array.arraySize)(x), format);
    },
    'Array, number, string': function (x, k, format) {
      return _diag(x, k, (0, _array.arraySize)(x), format);
    },
    'Array, BigNumber, string': function (x, k, format) {
      return _diag(x, k.toNumber(), (0, _array.arraySize)(x), format);
    },
    'Matrix': function (x) {
      return _diag(x, 0, x.size(), x.storage());
    },
    'Matrix, number': function (x, k) {
      return _diag(x, k, x.size(), x.storage());
    },
    'Matrix, BigNumber': function (x, k) {
      return _diag(x, k.toNumber(), x.size(), x.storage());
    },
    'Matrix, string': function (x, format) {
      return _diag(x, 0, x.size(), format);
    },
    'Matrix, number, string': function (x, k, format) {
      return _diag(x, k, x.size(), format);
    },
    'Matrix, BigNumber, string': function (x, k, format) {
      return _diag(x, k.toNumber(), x.size(), format);
    }
  });
  /**
   * Creeate diagonal matrix from a vector or vice versa
   * @param {Array | Matrix} x
   * @param {number} k
   * @param {string} format Storage format for matrix. If null,
   *                          an Array is returned
   * @returns {Array | Matrix}
   * @private
   */

  function _diag(x, k, size, format) {
    if (!(0, _number.isInteger)(k)) {
      throw new TypeError('Second parameter in function diag must be an integer');
    }

    const kSuper = k > 0 ? k : 0;
    const kSub = k < 0 ? -k : 0; // check dimensions

    switch (size.length) {
      case 1:
        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

      case 2:
        return _getDiagonal(x, k, format, size, kSub, kSuper);
    }

    throw new RangeError('Matrix for function diag must be 2 dimensional');
  }

  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
    // matrix size
    const ms = [l + kSub, l + kSuper];

    if (format && format !== 'sparse' && format !== 'dense') {
      throw new TypeError(`Unknown matrix type ${format}"`);
    } // create diagonal matrix


    const m = format === 'sparse' ? SparseMatrix.diagonal(ms, x, k) : DenseMatrix.diagonal(ms, x, k); // check we need to return a matrix

    return format !== null ? m : m.valueOf();
  }

  function _getDiagonal(x, k, format, s, kSub, kSuper) {
    // check x is a Matrix
    if ((0, _is.isMatrix)(x)) {
      // get diagonal matrix
      const dm = x.diagonal(k); // check we need to return a matrix

      if (format !== null) {
        // check we need to change matrix format
        if (format !== dm.storage()) {
          return matrix(dm, format);
        }

        return dm;
      }

      return dm.valueOf();
    } // vector size


    const n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

    const vector = []; // loop diagonal

    for (let i = 0; i < n; i++) {
      vector[i] = x[i + kSub][i + kSuper];
    } // check we need to return a matrix


    return format !== null ? matrix(vector) : vector;
  }
});
exports.createDiag = createDiag;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/eye.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEye = void 0;

var _factory = require("../../utils/factory");

// TODO: function eye is removed since v5.0.0 (June 2018). Remove it some day.
const createEye =
/* #__PURE__ */
(0, _factory.factory)('eye', [], () => {
  return function eye() {
    throw new Error('Function "eye" is renamed to "identity" since mathjs version 5.0.0. ' + 'To keep eye working, create an alias for it using "math.import({eye: math.identity}, {override: true})"');
  };
});
exports.createEye = createEye;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/utils/function.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoize = memoize;
exports.memoizeCompare = memoizeCompare;
exports.maxArgumentCount = maxArgumentCount;

// function utils

/**
 * Memoize a given function by caching the computed result.
 * The cache of a memoized function can be cleared by deleting the `cache`
 * property of the function.
 *
 * @param {function} fn                     The function to be memoized.
 *                                          Must be a pure function.
 * @param {function(args: Array)} [hasher]  A custom hash builder.
 *                                          Is JSON.stringify by default.
 * @return {function}                       Returns the memoized function
 */
function memoize(fn, hasher) {
  return function memoize() {
    if (typeof memoize.cache !== 'object') {
      memoize.cache = {};
    }

    const args = [];

    for (let i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    const hash = hasher ? hasher(args) : JSON.stringify(args);

    if (!(hash in memoize.cache)) {
      memoize.cache[hash] = fn.apply(fn, args);
    }

    return memoize.cache[hash];
  };
}
/**
 * Memoize a given function by caching all results and the arguments,
 * and comparing against the arguments of previous results before
 * executing again.
 * This is less performant than `memoize` which calculates a hash,
 * which is very fast to compare. Use `memoizeCompare` only when it is
 * not possible to create a unique serializable hash from the function
 * arguments.
 * The isEqual function must compare two sets of arguments
 * and return true when equal (can be a deep equality check for example).
 * @param {function} fn
 * @param {function(a: *, b: *) : boolean} isEqual
 * @returns {function}
 */


function memoizeCompare(fn, isEqual) {
  const memoize = function memoize() {
    const args = [];

    for (let i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    for (let c = 0; c < memoize.cache.length; c++) {
      const cached = memoize.cache[c];

      if (isEqual(args, cached.args)) {
        // TODO: move this cache entry to the top so recently used entries move up?
        return cached.res;
      }
    }

    const res = fn.apply(fn, args);
    memoize.cache.unshift({
      args,
      res
    });
    return res;
  };

  memoize.cache = [];
  return memoize;
}
/**
 * Find the maximum number of arguments expected by a typed function.
 * @param {function} fn   A typed function
 * @return {number} Returns the maximum number of expected arguments.
 *                  Returns -1 when no signatures where found on the function.
 */


function maxArgumentCount(fn) {
  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
    const count = (signature.match(/,/g) || []).length + 1;
    return Math.max(args, count);
  }, -1);
}
},{}],"../node_modules/mathjs/src/function/matrix/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFilter = void 0;

var _array = require("../../utils/array");

var _function = require("../../utils/function");

var _factory = require("../../utils/factory");

const name = 'filter';
const dependencies = ['typed'];
const createFilter =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Filter the items in an array or one dimensional matrix.
   *
   * Syntax:
   *
   *    math.filter(x, test)
   *
   * Examples:
   *
   *    function isPositive (x) {
   *      return x > 0
   *    }
   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
   *
   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
   *
   * See also:
   *
   *    forEach, map, sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
   * @param {Function | RegExp} test
   *        A function or regular expression to test items.
   *        All entries for which `test` returns true are returned.
   *        When `test` is a function, it is invoked with three parameters:
   *        the value of the element, the index of the element, and the
   *        matrix/array being traversed. The function must return a boolean.
   * @return {Matrix | Array} Returns the filtered matrix.
   */
  return typed('filter', {
    'Array, function': _filterCallback,
    'Matrix, function': function (x, test) {
      return x.create(_filterCallback(x.toArray(), test));
    },
    'Array, RegExp': _array.filterRegExp,
    'Matrix, RegExp': function (x, test) {
      return x.create((0, _array.filterRegExp)(x.toArray(), test));
    }
  });
});
/**
 * Filter values in a callback given a callback function
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

exports.createFilter = createFilter;

function _filterCallback(x, callback) {
  // figure out what number of arguments the callback function expects
  const args = (0, _function.maxArgumentCount)(callback);
  return (0, _array.filter)(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index]);
    } else {
      // 3 or -1
      return callback(value, [index], array);
    }
  });
}
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/function":"../node_modules/mathjs/src/utils/function.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/flatten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFlatten = void 0;

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'flatten';
const dependencies = ['typed', 'matrix'];
const createFlatten =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  /**
   * Flatten a multi dimensional matrix into a single dimensional matrix.
   *
   * Syntax:
   *
   *    math.flatten(x)
   *
   * Examples:
   *
   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
   *
   * See also:
   *
   *    concat, resize, size, squeeze
   *
   * @param {Matrix | Array} x   Matrix to be flattened
   * @return {Matrix | Array} Returns the flattened matrix
   */
  return typed(name, {
    'Array': function (x) {
      return (0, _array.flatten)((0, _object.clone)(x));
    },
    'Matrix': function (x) {
      const flat = (0, _array.flatten)((0, _object.clone)(x.toArray())); // TODO: return the same matrix type as x

      return matrix(flat);
    }
  });
});
exports.createFlatten = createFlatten;
},{"../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/forEach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createForEach = void 0;

var _function = require("../../utils/function");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'forEach';
const dependencies = ['typed'];
const createForEach =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Iterate over all elements of a matrix/array, and executes the given callback function.
   *
   * Syntax:
   *
   *    math.forEach(x, callback)
   *
   * Examples:
   *
   *    math.forEach([1, 2, 3], function(value) {
   *      console.log(value)
   *    })
   *    // outputs 1, 2, 3
   *
   * See also:
   *
   *    filter, map, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback function is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the Matrix/array being traversed.
   */
  return typed(name, {
    'Array, function': _forEach,
    'Matrix, function': function (x, callback) {
      return x.forEach(callback);
    }
  });
});
/**
 * forEach for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @private
 */

exports.createForEach = createForEach;

function _forEach(array, callback) {
  // figure out what number of arguments the callback function expects
  const args = (0, _function.maxArgumentCount)(callback);

  const recurse = function (value, index) {
    if (Array.isArray(value)) {
      (0, _array.forEach)(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        callback(value);
      } else if (args === 2) {
        callback(value, index);
      } else {
        // 3 or -1
        callback(value, index, array);
      }
    }
  };

  recurse(array, []);
}
},{"../../utils/function":"../node_modules/mathjs/src/utils/function.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/getMatrixDataType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetMatrixDataType = void 0;

var _factory = require("../../utils/factory");

var _array = require("../../utils/array");

var _is = require("../../utils/is");

const name = 'getMatrixDataType';
const dependencies = ['typed'];
const createGetMatrixDataType =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Find the data type of all elements in a matrix or array,
   * for example 'number' if all items are a number and 'Complex' if all values
   * are complex numbers.
   * If a matrix contains more than one data type, it will return 'mixed'.
   *
   * Syntax:
   *
   *    math.getMatrixDataType(x)
   *
   * Examples:
   *
   *    const x = [ [1, 2, 3], [4, 5, 6] ]
   *    const mixedX = [ [1, true], [2, 3] ]
   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
   *    const sparse = math.sparse(x)
   *    const dense = math.matrix(x)
   *    math.getMatrixDataType(x)   // returns 'number'
   *    math.getMatrixDataType(sparse)   // returns 'number'
   *    math.getMatrixDataType(dense)   // returns 'number'
   *    math.getMatrixDataType(mixedX) // returns 'mixed'
   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
   *    math.getMatrixDataType(unitX) // returns 'Unit'
   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
   *
   * See also:
   *  SparseMatrix, DenseMatrix
   *
   * @param {...Matrix | Array} x   The Matrix with values.
   *
   * @return {string} A string representation of the matrix type
   */
  return typed(name, {
    'Array': function (x) {
      return (0, _array.getArrayDataType)(x, _is.typeOf);
    },
    'Matrix': function (x) {
      return x.getDataType();
    }
  });
});
exports.createGetMatrixDataType = createGetMatrixDataType;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/function/matrix/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIdentity = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'identity';
const dependencies = ['typed', 'config', 'matrix', 'BigNumber', 'DenseMatrix', 'SparseMatrix'];
const createIdentity =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  BigNumber,
  DenseMatrix,
  SparseMatrix
}) => {
  /**
   * Create a 2-dimensional identity matrix with size m x n or n x n.
   * The matrix has ones on the diagonal and zeros elsewhere.
   *
   * Syntax:
   *
   *    math.identity(n)
   *    math.identity(n, format)
   *    math.identity(m, n)
   *    math.identity(m, n, format)
   *    math.identity([m, n])
   *    math.identity([m, n], format)
   *
   * Examples:
   *
   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
   *
   * See also:
   *
   *    diag, ones, zeros, size, range
   *
   * @param {...number | Matrix | Array} size   The size for the matrix
   * @param {string} [format]                   The Matrix storage format
   *
   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
   */
  return typed(name, {
    '': function () {
      return config.matrix === 'Matrix' ? matrix([]) : [];
    },
    'string': function (format) {
      return matrix(format);
    },
    'number | BigNumber': function (rows) {
      return _identity(rows, rows, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, string': function (rows, format) {
      return _identity(rows, rows, format);
    },
    'number | BigNumber, number | BigNumber': function (rows, cols) {
      return _identity(rows, cols, config.matrix === 'Matrix' ? 'dense' : undefined);
    },
    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {
      return _identity(rows, cols, format);
    },
    'Array': function (size) {
      return _identityVector(size);
    },
    'Array, string': function (size, format) {
      return _identityVector(size, format);
    },
    'Matrix': function (size) {
      return _identityVector(size.valueOf(), size.storage());
    },
    'Matrix, string': function (size, format) {
      return _identityVector(size.valueOf(), format);
    }
  });

  function _identityVector(size, format) {
    switch (size.length) {
      case 0:
        return format ? matrix(format) : [];

      case 1:
        return _identity(size[0], size[0], format);

      case 2:
        return _identity(size[0], size[1], format);

      default:
        throw new Error('Vector containing two values expected');
    }
  }
  /**
   * Create an identity matrix
   * @param {number | BigNumber} rows
   * @param {number | BigNumber} cols
   * @param {string} [format]
   * @returns {Matrix}
   * @private
   */


  function _identity(rows, cols, format) {
    // BigNumber constructor with the right precision
    const Big = (0, _is.isBigNumber)(rows) || (0, _is.isBigNumber)(cols) ? BigNumber : null;
    if ((0, _is.isBigNumber)(rows)) rows = rows.toNumber();
    if ((0, _is.isBigNumber)(cols)) cols = cols.toNumber();

    if (!(0, _number.isInteger)(rows) || rows < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    if (!(0, _number.isInteger)(cols) || cols < 1) {
      throw new Error('Parameters in function identity must be positive integers');
    }

    const one = Big ? new BigNumber(1) : 1;
    const defaultValue = Big ? new Big(0) : 0;
    const size = [rows, cols]; // check we need to return a matrix

    if (format) {
      // create diagonal matrix (use optimized implementation for storage format)
      if (format === 'sparse') {
        return SparseMatrix.diagonal(size, one, 0, defaultValue);
      }

      if (format === 'dense') {
        return DenseMatrix.diagonal(size, one, 0, defaultValue);
      }

      throw new TypeError(`Unknown matrix type "${format}"`);
    } // create and resize array


    const res = (0, _array.resize)([], size, defaultValue); // fill in ones on the diagonal

    const minimum = rows < cols ? rows : cols; // fill diagonal

    for (let d = 0; d < minimum; d++) {
      res[d][d] = one;
    }

    return res;
  }
});
exports.createIdentity = createIdentity;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/kron.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createKron = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'kron';
const dependencies = ['typed', 'matrix', 'multiplyScalar'];
const createKron =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  multiplyScalar
}) => {
  /**
     * Calculates the kronecker product of 2 matrices or vectors.
     *
     * NOTE: If a one dimensional vector / matrix is given, it will be
     * wrapped so its two dimensions.
     * See the examples.
     *
     * Syntax:
     *
     *    math.kron(x, y)
     *
     * Examples:
     *
     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
     *
     *    math.kron([1,1], [2,3,4])
     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
     *
     * See also:
     *
     *    multiply, dot, cross
     *
     * @param  {Array | Matrix} x     First vector
     * @param  {Array | Matrix} y     Second vector
     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
     */
  return typed(name, {
    'Matrix, Matrix': function (x, y) {
      return matrix(_kron(x.toArray(), y.toArray()));
    },
    'Matrix, Array': function (x, y) {
      return matrix(_kron(x.toArray(), y));
    },
    'Array, Matrix': function (x, y) {
      return matrix(_kron(x, y.toArray()));
    },
    'Array, Array': _kron
  });
  /**
     * Calculate the kronecker product of two matrices / vectors
     * @param {Array} a  First vector
     * @param {Array} b  Second vector
     * @returns {Array} Returns the kronecker product of x and y
     * @private
     */

  function _kron(a, b) {
    // Deal with the dimensions of the matricies.
    if ((0, _array.arraySize)(a).length === 1) {
      // Wrap it in a 2D Matrix
      a = [a];
    }

    if ((0, _array.arraySize)(b).length === 1) {
      // Wrap it in a 2D Matrix
      b = [b];
    }

    if ((0, _array.arraySize)(a).length > 2 || (0, _array.arraySize)(b).length > 2) {
      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
    }

    let t = [];
    let r = [];
    return a.map(function (a) {
      return b.map(function (b) {
        r = [];
        t.push(r);
        return a.map(function (y) {
          return b.map(function (x) {
            return r.push(multiplyScalar(y, x));
          });
        });
      });
    }) && t;
  }
});
exports.createKron = createKron;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMap = void 0;

var _function = require("../../utils/function");

var _factory = require("../../utils/factory");

const name = 'map';
const dependencies = ['typed'];
const createMap =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Create a new matrix or array with the results of the callback function executed on
   * each entry of the matrix/array.
   *
   * Syntax:
   *
   *    math.map(x, callback)
   *
   * Examples:
   *
   *    math.map([1, 2, 3], function(value) {
   *      return value * value
   *    })  // returns [1, 4, 9]
   *
   * See also:
   *
   *    filter, forEach, sort
   *
   * @param {Matrix | Array} x    The matrix to iterate on.
   * @param {Function} callback   The callback method is invoked with three
   *                              parameters: the value of the element, the index
   *                              of the element, and the matrix being traversed.
   * @return {Matrix | array}     Transformed map of x
   */
  return typed(name, {
    'Array, function': _map,
    'Matrix, function': function (x, callback) {
      return x.map(callback);
    }
  });
});
/**
 * Map for a multi dimensional array
 * @param {Array} array
 * @param {Function} callback
 * @return {Array}
 * @private
 */

exports.createMap = createMap;

function _map(array, callback) {
  // figure out what number of arguments the callback function expects
  const args = (0, _function.maxArgumentCount)(callback);

  const recurse = function (value, index) {
    if (Array.isArray(value)) {
      return value.map(function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i));
      });
    } else {
      // invoke the callback function with the right number of arguments
      if (args === 1) {
        return callback(value);
      } else if (args === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, array);
      }
    }
  };

  return recurse(array, []);
}
},{"../../utils/function":"../node_modules/mathjs/src/utils/function.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/ones.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOnes = void 0;

var _is = require("../../utils/is");

var _number = require("../../utils/number");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'ones';
const dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
const createOnes =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  BigNumber
}) => {
  /**
   * Create a matrix filled with ones. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.ones(m)
   *    math.ones(m, format)
   *    math.ones(m, n)
   *    math.ones(m, n, format)
   *    math.ones([m, n])
   *    math.ones([m, n], format)
   *    math.ones([m, n, p, ...])
   *    math.ones([m, n, p, ...], format)
   *
   * Examples:
   *
   *    math.ones(3)                   // returns [1, 1, 1]
   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
   *
   * See also:
   *
   *    zeros, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix | number}  A matrix filled with ones
   */
  return typed('ones', {
    '': function () {
      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
    },
    // math.ones(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function (size) {
      const last = size[size.length - 1];

      if (typeof last === 'string') {
        const format = size.pop();
        return _ones(size, format);
      } else if (config.matrix === 'Array') {
        return _ones(size);
      } else {
        return _ones(size, 'default');
      }
    },
    'Array': _ones,
    'Matrix': function (size) {
      const format = size.storage();
      return _ones(size.valueOf(), format);
    },
    'Array | Matrix, string': function (size, format) {
      return _ones(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with ones
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _ones(size, format) {
    const hasBigNumbers = _normalize(size);

    const defaultValue = hasBigNumbers ? new BigNumber(1) : 1;

    _validate(size);

    if (format) {
      // return a matrix
      const m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      const arr = [];

      if (size.length > 0) {
        return (0, _array.resize)(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    let hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if ((0, _is.isBigNumber)(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {
        throw new Error('Parameters in function ones must be positive integers');
      }
    });
  }
});
exports.createOnes = createOnes;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/utils/noop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noBignumber = noBignumber;
exports.noFraction = noFraction;
exports.noMatrix = noMatrix;
exports.noIndexClass = noIndexClass;
exports.noSubset = noSubset;

function noBignumber() {
  throw new Error('No "bignumber" implementation available');
}

function noFraction() {
  throw new Error('No "fraction" implementation available');
}

function noMatrix() {
  throw new Error('No "matrix" implementation available');
}

function noIndexClass() {
  throw new Error('No "Index" implementation available');
}

function noSubset() {
  throw new Error('No "matrix" implementation available');
}
},{}],"../node_modules/mathjs/src/function/matrix/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRange = void 0;

var _factory = require("../../utils/factory");

var _noop = require("../../utils/noop");

const name = 'range';
const dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
const createRange =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  bignumber,
  smaller,
  smallerEq,
  larger,
  largerEq
}) => {
  /**
   * Create an array from a range.
   * By default, the range end is excluded. This can be customized by providing
   * an extra parameter `includeEnd`.
   *
   * Syntax:
   *
   *     math.range(str [, includeEnd])               // Create a range from a string,
   *                                                  // where the string contains the
   *                                                  // start, optional step, and end,
   *                                                  // separated by a colon.
   *     math.range(start, end [, includeEnd])        // Create a range with start and
   *                                                  // end and a step size of 1.
   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
   *                                                  // and end.
   *
   * Where:
   *
   * - `str: string`
   *   A string 'start:end' or 'start:step:end'
   * - `start: {number | BigNumber}`
   *   Start of the range
   * - `end: number | BigNumber`
   *   End of the range, excluded by default, included when parameter includeEnd=true
   * - `step: number | BigNumber`
   *   Step size. Default value is 1.
   * - `includeEnd: boolean`
   *   Option to specify whether to include the end or not. False by default.
   *
   * Examples:
   *
   *     math.range(2, 6)        // [2, 3, 4, 5]
   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
   *     math.range('2:1:6')     // [2, 3, 4, 5]
   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
   *
   * See also:
   *
   *     ones, zeros, size, subset
   *
   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
   * @return {Array | Matrix} range
   */
  return typed(name, {
    // TODO: simplify signatures when typed-function supports default values and optional arguments
    // TODO: a number or boolean should not be converted to string here
    'string': _strRange,
    'string, boolean': _strRange,
    'number, number': function (start, end) {
      return _out(_rangeEx(start, end, 1));
    },
    'number, number, number': function (start, end, step) {
      return _out(_rangeEx(start, end, step));
    },
    'number, number, boolean': function (start, end, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
    },
    'number, number, number, boolean': function (start, end, step, includeEnd) {
      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
    },
    'BigNumber, BigNumber': function (start, end) {
      const BigNumber = start.constructor;
      return _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber': function (start, end, step) {
      return _out(_bigRangeEx(start, end, step));
    },
    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {
      const BigNumber = start.constructor;
      return includeEnd ? _out(_bigRangeInc(start, end, new BigNumber(1))) : _out(_bigRangeEx(start, end, new BigNumber(1)));
    },
    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {
      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
    }
  });

  function _out(arr) {
    if (config.matrix === 'Matrix') {
      return matrix ? matrix(arr) : (0, _noop.noMatrix)();
    }

    return arr;
  }

  function _strRange(str, includeEnd) {
    const r = _parse(str);

    if (!r) {
      throw new SyntaxError('String "' + str + '" is no valid range');
    }

    let fn;

    if (config.number === 'BigNumber') {
      if (bignumber === undefined) {
        (0, _noop.noBignumber)();
      }

      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
      return _out(fn(bignumber(r.start), bignumber(r.end), bignumber(r.step)));
    } else {
      fn = includeEnd ? _rangeInc : _rangeEx;
      return _out(fn(r.start, r.end, r.step));
    }
  }
  /**
   * Create a range with numbers. End is excluded
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeEx(start, end, step) {
    const array = [];
    let x = start;

    if (step > 0) {
      while (smaller(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (larger(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with numbers. End is included
   * @param {number} start
   * @param {number} end
   * @param {number} step
   * @returns {Array} range
   * @private
   */


  function _rangeInc(start, end, step) {
    const array = [];
    let x = start;

    if (step > 0) {
      while (smallerEq(x, end)) {
        array.push(x);
        x += step;
      }
    } else if (step < 0) {
      while (largerEq(x, end)) {
        array.push(x);
        x += step;
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is excluded
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeEx(start, end, step) {
    const zero = bignumber(0);
    const array = [];
    let x = start;

    if (step.gt(zero)) {
      while (smaller(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (larger(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Create a range with big numbers. End is included
   * @param {BigNumber} start
   * @param {BigNumber} end
   * @param {BigNumber} step
   * @returns {Array} range
   * @private
   */


  function _bigRangeInc(start, end, step) {
    const zero = bignumber(0);
    const array = [];
    let x = start;

    if (step.gt(zero)) {
      while (smallerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    } else if (step.lt(zero)) {
      while (largerEq(x, end)) {
        array.push(x);
        x = x.plus(step);
      }
    }

    return array;
  }
  /**
   * Parse a string into a range,
   * The string contains the start, optional step, and end, separated by a colon.
   * If the string does not contain a valid range, null is returned.
   * For example str='0:2:11'.
   * @param {string} str
   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
   * @private
   */


  function _parse(str) {
    const args = str.split(':'); // number

    const nums = args.map(function (arg) {
      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
      return Number(arg);
    });
    const invalid = nums.some(function (num) {
      return isNaN(num);
    });

    if (invalid) {
      return null;
    }

    switch (nums.length) {
      case 2:
        return {
          start: nums[0],
          end: nums[1],
          step: 1
        };

      case 3:
        return {
          start: nums[0],
          end: nums[2],
          step: nums[1]
        };

      default:
        return null;
    }
  }
});
exports.createRange = createRange;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/noop":"../node_modules/mathjs/src/utils/noop.js"}],"../node_modules/mathjs/src/function/matrix/reshape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReshape = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'reshape';
const dependencies = ['typed', 'isInteger', 'matrix'];
const createReshape =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  isInteger,
  matrix
}) => {
  /**
   * Reshape a multi dimensional array to fit the specified dimensions
   *
   * Syntax:
   *
   *     math.reshape(x, sizes)
   *
   * Examples:
   *
   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
   *
   *     math.reshape([[1, 2], [3, 4]], [1, 4])
   *     // returns Array  [[1, 2, 3, 4]]
   *
   *     math.reshape([[1, 2], [3, 4]], [4])
   *     // returns Array [1, 2, 3, 4]
   *
   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
   *     math.reshape(x, [2, 2, 2])
   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
   *
   * See also:
   *
   *     size, squeeze, resize
   *
   * @param {Array | Matrix | *} x  Matrix to be reshaped
   * @param {number[]} sizes        One dimensional array with integral sizes for
   *                                each dimension
   *
   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
   *
   * @throws {TypeError}            If `sizes` does not contain solely integers
   * @throws {DimensionError}       If the product of the new dimension sizes does
   *                                not equal that of the old ones
   */
  return typed(name, {
    'Matrix, Array': function (x, sizes) {
      if (x.reshape) {
        return x.reshape(sizes);
      } else {
        return matrix((0, _array.reshape)(x.valueOf(), sizes));
      }
    },
    'Array, Array': function (x, sizes) {
      sizes.forEach(function (size) {
        if (!isInteger(size)) {
          throw new TypeError('Invalid size for dimension: ' + size);
        }
      });
      return (0, _array.reshape)(x, sizes);
    }
  });
});
exports.createReshape = createReshape;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/error/ArgumentsError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgumentsError = ArgumentsError;

/**
 * Create a syntax error with the message:
 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
 * @param {string} fn     Function name
 * @param {number} count  Actual argument count
 * @param {number} min    Minimum required argument count
 * @param {number} [max]  Maximum required argument count
 * @extends Error
 */
function ArgumentsError(fn, count, min, max) {
  if (!(this instanceof ArgumentsError)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  this.fn = fn;
  this.count = count;
  this.min = min;
  this.max = max;
  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
  this.stack = new Error().stack;
}

ArgumentsError.prototype = new Error();
ArgumentsError.prototype.constructor = Error;
ArgumentsError.prototype.name = 'ArgumentsError';
ArgumentsError.prototype.isArgumentsError = true;
},{}],"../node_modules/mathjs/src/function/matrix/resize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createResize = void 0;

var _is = require("../../utils/is");

var _DimensionError = require("../../error/DimensionError");

var _ArgumentsError = require("../../error/ArgumentsError");

var _number = require("../../utils/number");

var _string = require("../../utils/string");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'resize';
const dependencies = ['config', 'matrix'];
const createResize =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  config,
  matrix
}) => {
  /**
   * Resize a matrix
   *
   * Syntax:
   *
   *     math.resize(x, size)
   *     math.resize(x, size, defaultValue)
   *
   * Examples:
   *
   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
   *
   * See also:
   *
   *     size, squeeze, subset, reshape
   *
   * @param {Array | Matrix | *} x             Matrix to be resized
   * @param {Array | Matrix} size              One dimensional array with numbers
   * @param {number | string} [defaultValue=0] Zero by default, except in
   *                                           case of a string, in that case
   *                                           defaultValue = ' '
   * @return {* | Array | Matrix} A resized clone of matrix `x`
   */
  // TODO: rework resize to a typed-function
  return function resize(x, size, defaultValue) {
    if (arguments.length !== 2 && arguments.length !== 3) {
      throw new _ArgumentsError.ArgumentsError('resize', arguments.length, 2, 3);
    }

    if ((0, _is.isMatrix)(size)) {
      size = size.valueOf(); // get Array
    }

    if ((0, _is.isBigNumber)(size[0])) {
      // convert bignumbers to numbers
      size = size.map(function (value) {
        return !(0, _is.isBigNumber)(value) ? value : value.toNumber();
      });
    } // check x is a Matrix


    if ((0, _is.isMatrix)(x)) {
      // use optimized matrix implementation, return copy
      return x.resize(size, defaultValue, true);
    }

    if (typeof x === 'string') {
      // resize string
      return _resizeString(x, size, defaultValue);
    } // check result should be a matrix


    const asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

    if (size.length === 0) {
      // output a scalar
      while (Array.isArray(x)) {
        x = x[0];
      }

      return (0, _object.clone)(x);
    } else {
      // output an array/matrix
      if (!Array.isArray(x)) {
        x = [x];
      }

      x = (0, _object.clone)(x);
      const res = (0, _array.resize)(x, size, defaultValue);
      return asMatrix ? matrix(res) : res;
    }
  };
  /**
   * Resize a string
   * @param {string} str
   * @param {number[]} size
   * @param {string} [defaultChar=' ']
   * @private
   */

  function _resizeString(str, size, defaultChar) {
    if (defaultChar !== undefined) {
      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
        throw new TypeError('Single character expected as defaultValue');
      }
    } else {
      defaultChar = ' ';
    }

    if (size.length !== 1) {
      throw new _DimensionError.DimensionError(size.length, 1);
    }

    const len = size[0];

    if (typeof len !== 'number' || !(0, _number.isInteger)(len)) {
      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + (0, _string.format)(size) + ')');
    }

    if (str.length > len) {
      return str.substring(0, len);
    } else if (str.length < len) {
      let res = str;

      for (let i = 0, ii = len - str.length; i < ii; i++) {
        res += defaultChar;
      }

      return res;
    } else {
      return str;
    }
  }
});
exports.createResize = createResize;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../../error/ArgumentsError":"../node_modules/mathjs/src/error/ArgumentsError.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/row.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRow = void 0;

var _factory = require("../../utils/factory");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

const name = 'row';
const dependencies = ['typed', 'Index', 'matrix', 'range'];
const createRow =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Index,
  matrix,
  range
}) => {
  /**
   * Return a row from a Matrix.
   *
   * Syntax:
   *
   *     math.row(value, index)
   *
   * Example:
   *
   *     // get a row
   *     const d = [[1, 2], [3, 4]]
   *     math.row(d, 1) // returns [3, 4]
   *
   * See also:
   *
   *     column
   *
   * @param {Array | Matrix } value   An array or matrix
   * @param {number} row              The index of the row
   * @return {Array | Matrix}         The retrieved row
   */
  const row = typed(name, {
    'Matrix, number': _row,
    'Array, number': function (value, row) {
      return _row(matrix((0, _object.clone)(value)), row).valueOf();
    }
  });
  return row;
  /**
   * Retrieve a row of a matrix
   * @param {Matrix } value  A matrix
   * @param {number} row     The index of the row
   * @return {Matrix}        The retrieved row
   */

  function _row(value, row) {
    // check dimensions
    if (value.size().length !== 2) {
      throw new Error('Only two dimensional matrix is supported');
    }

    (0, _array.validateIndex)(row, value.size()[0]);
    const columnRange = range(0, value.size()[1]);
    const index = new Index(row, columnRange);
    return value.subset(index);
  }
});
exports.createRow = createRow;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js"}],"../node_modules/mathjs/src/function/matrix/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSize = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _noop = require("../../utils/noop");

const name = 'size';
const dependencies = ['typed', 'config', '?matrix'];
const createSize =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix
}) => {
  /**
   * Calculate the size of a matrix or scalar.
   *
   * Syntax:
   *
   *     math.size(x)
   *
   * Examples:
   *
   *     math.size(2.3)                  // returns []
   *     math.size('hello world')        // returns [11]
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.size(A)                    // returns [2, 3]
   *     math.size(math.range(1,6))      // returns [5]
   *
   * See also:
   *
   *     resize, squeeze, subset
   *
   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
   * @return {Array | Matrix} A vector with size of `x`.
   */
  return typed(name, {
    'Matrix': function (x) {
      return x.create(x.size());
    },
    'Array': _array.arraySize,
    'string': function (x) {
      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);
    },
    'number | Complex | BigNumber | Unit | boolean | null': function (x) {
      // scalar
      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : (0, _noop.noMatrix)();
    }
  });
});
exports.createSize = createSize;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/noop":"../node_modules/mathjs/src/utils/noop.js"}],"../node_modules/mathjs/src/function/matrix/squeeze.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSqueeze = void 0;

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'squeeze';
const dependencies = ['typed', 'matrix'];
const createSqueeze =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  /**
   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
   *
   * Syntax:
   *
   *     math.squeeze(x)
   *
   * Examples:
   *
   *     math.squeeze([3])           // returns 3
   *     math.squeeze([[3]])         // returns 3
   *
   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
   *
   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
   *
   *     // only inner and outer dimensions are removed
   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
   *
   * See also:
   *
   *     subset
   *
   * @param {Matrix | Array} x      Matrix to be squeezed
   * @return {Matrix | Array} Squeezed matrix
   */
  return typed(name, {
    'Array': function (x) {
      return (0, _array.squeeze)((0, _object.clone)(x));
    },
    'Matrix': function (x) {
      const res = (0, _array.squeeze)(x.toArray()); // FIXME: return the same type of matrix as the input

      return Array.isArray(res) ? matrix(res) : res;
    },
    'any': function (x) {
      // scalar
      return (0, _object.clone)(x);
    }
  });
});
exports.createSqueeze = createSqueeze;
},{"../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/utils/customs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSafeProperty = getSafeProperty;
exports.setSafeProperty = setSafeProperty;
exports.isSafeProperty = isSafeProperty;
exports.validateSafeMethod = validateSafeMethod;
exports.isSafeMethod = isSafeMethod;
exports.isPlainObject = isPlainObject;

var _object = require("./object");

/**
 * Get a property of a plain object
 * Throws an error in case the object is not a plain object or the
 * property is not defined on the object itself
 * @param {Object} object
 * @param {string} prop
 * @return {*} Returns the property value when safe
 */
function getSafeProperty(object, prop) {
  // only allow getting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    return object[prop];
  }

  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
    throw new Error('Cannot access method "' + prop + '" as a property');
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Set a property on a plain object.
 * Throws an error in case the object is not a plain object or the
 * property would override an inherited property like .constructor or .toString
 * @param {Object} object
 * @param {string} prop
 * @param {*} value
 * @return {*} Returns the value
 */
// TODO: merge this function into access.js?


function setSafeProperty(object, prop, value) {
  // only allow setting safe properties of a plain object
  if (isPlainObject(object) && isSafeProperty(object, prop)) {
    object[prop] = value;
    return value;
  }

  throw new Error('No access to property "' + prop + '"');
}
/**
 * Test whether a property is safe to use for an object.
 * For example .toString and .constructor are not safe
 * @param {string} prop
 * @return {boolean} Returns true when safe
 */


function isSafeProperty(object, prop) {
  if (!object || typeof object !== 'object') {
    return false;
  } // SAFE: whitelisted
  // e.g length


  if ((0, _object.hasOwnProperty)(safeNativeProperties, prop)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (prop in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (prop in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}
/**
 * Validate whether a method is safe.
 * Throws an error when that's not the case.
 * @param {Object} object
 * @param {string} method
 */
// TODO: merge this function into assign.js?


function validateSafeMethod(object, method) {
  if (!isSafeMethod(object, method)) {
    throw new Error('No access to method "' + method + '"');
  }
}
/**
 * Check whether a method is safe.
 * Throws an error when that's not the case (for example for `constructor`).
 * @param {Object} object
 * @param {string} method
 * @return {boolean} Returns true when safe, false otherwise
 */


function isSafeMethod(object, method) {
  if (!object || typeof object[method] !== 'function') {
    return false;
  } // UNSAFE: ghosted
  // e.g overridden toString
  // Note that IE10 doesn't support __proto__ and we can't do this check there.


  if ((0, _object.hasOwnProperty)(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
    return false;
  } // SAFE: whitelisted
  // e.g toString


  if ((0, _object.hasOwnProperty)(safeNativeMethods, method)) {
    return true;
  } // UNSAFE: inherited from Object prototype
  // e.g constructor


  if (method in Object.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Object.prototype is a root object
    return false;
  } // UNSAFE: inherited from Function prototype
  // e.g call, apply


  if (method in Function.prototype) {
    // 'in' is used instead of hasOwnProperty for nodejs v0.10
    // which is inconsistent on root prototypes. It is safe
    // here because Function.prototype is a root object
    return false;
  }

  return true;
}

function isPlainObject(object) {
  return typeof object === 'object' && object && object.constructor === Object;
}

const safeNativeProperties = {
  length: true,
  name: true
};
const safeNativeMethods = {
  toString: true,
  valueOf: true,
  toLocaleString: true
};
},{"./object":"../node_modules/mathjs/src/utils/object.js"}],"../node_modules/mathjs/src/function/matrix/subset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSubset = void 0;

var _is = require("../../utils/is");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _customs = require("../../utils/customs");

var _DimensionError = require("../../error/DimensionError");

var _factory = require("../../utils/factory");

const name = 'subset';
const dependencies = ['typed', 'matrix'];
const createSubset =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  /**
   * Get or set a subset of a matrix or string.
   *
   * Syntax:
   *     math.subset(value, index)                                // retrieve a subset
   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
   *
   * Examples:
   *
   *     // get a subset
   *     const d = [[1, 2], [3, 4]]
   *     math.subset(d, math.index(1, 0))        // returns 3
   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
   *
   *     // replace a subset
   *     const e = []
   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
   *
   * See also:
   *
   *     size, resize, squeeze, index
   *
   * @param {Array | Matrix | string} matrix  An array, matrix, or string
   * @param {Index} index                     An index containing ranges for each
   *                                          dimension
   * @param {*} [replacement]                 An array, matrix, or scalar.
   *                                          If provided, the subset is replaced with replacement.
   *                                          If not provided, the subset is returned
   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
   *                                          the matrix is resized. If not provided,
   *                                          math.matrix elements will be left undefined.
   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
   */
  return typed(name, {
    // get subset
    'Array, Index': function (value, index) {
      const m = matrix(value);
      const subset = m.subset(index); // returns a Matrix

      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
    },
    'Matrix, Index': function (value, index) {
      return value.subset(index);
    },
    'Object, Index': _getObjectProperty,
    'string, Index': _getSubstring,
    // set subset
    'Array, Index, any': function (value, index, replacement) {
      return matrix((0, _object.clone)(value)).subset(index, replacement, undefined).valueOf();
    },
    'Array, Index, any, any': function (value, index, replacement, defaultValue) {
      return matrix((0, _object.clone)(value)).subset(index, replacement, defaultValue).valueOf();
    },
    'Matrix, Index, any': function (value, index, replacement) {
      return value.clone().subset(index, replacement);
    },
    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {
      return value.clone().subset(index, replacement, defaultValue);
    },
    'string, Index, string': _setSubstring,
    'string, Index, string, string': _setSubstring,
    'Object, Index, any': _setObjectProperty
  });
});
/**
 * Retrieve a subset of a string
 * @param {string} str            string from which to get a substring
 * @param {Index} index           An index containing ranges for each dimension
 * @returns {string} substring
 * @private
 */

exports.createSubset = createSubset;

function _getSubstring(str, index) {
  if (!(0, _is.isIndex)(index)) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size().length, 1);
  } // validate whether the range is out of range


  const strLen = str.length;
  (0, _array.validateIndex)(index.min()[0], strLen);
  (0, _array.validateIndex)(index.max()[0], strLen);
  const range = index.dimension(0);
  let substr = '';
  range.forEach(function (v) {
    substr += str.charAt(v);
  });
  return substr;
}
/**
 * Replace a substring in a string
 * @param {string} str            string to be replaced
 * @param {Index} index           An index containing ranges for each dimension
 * @param {string} replacement    Replacement string
 * @param {string} [defaultValue] Default value to be uses when resizing
 *                                the string. is ' ' by default
 * @returns {string} result
 * @private
 */


function _setSubstring(str, index, replacement, defaultValue) {
  if (!index || index.isIndex !== true) {
    // TODO: better error message
    throw new TypeError('Index expected');
  }

  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size().length, 1);
  }

  if (defaultValue !== undefined) {
    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
      throw new TypeError('Single character expected as defaultValue');
    }
  } else {
    defaultValue = ' ';
  }

  const range = index.dimension(0);
  const len = range.size()[0];

  if (len !== replacement.length) {
    throw new _DimensionError.DimensionError(range.size()[0], replacement.length);
  } // validate whether the range is out of range


  const strLen = str.length;
  (0, _array.validateIndex)(index.min()[0]);
  (0, _array.validateIndex)(index.max()[0]); // copy the string into an array with characters

  const chars = [];

  for (let i = 0; i < strLen; i++) {
    chars[i] = str.charAt(i);
  }

  range.forEach(function (v, i) {
    chars[v] = replacement.charAt(i[0]);
  }); // initialize undefined characters with a space

  if (chars.length > strLen) {
    for (let i = strLen - 1, len = chars.length; i < len; i++) {
      if (!chars[i]) {
        chars[i] = defaultValue;
      }
    }
  }

  return chars.join('');
}
/**
 * Retrieve a property from an object
 * @param {Object} object
 * @param {Index} index
 * @return {*} Returns the value of the property
 * @private
 */


function _getObjectProperty(object, index) {
  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size(), 1);
  }

  const key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  }

  return (0, _customs.getSafeProperty)(object, key);
}
/**
 * Set a property on an object
 * @param {Object} object
 * @param {Index} index
 * @param {*} replacement
 * @return {*} Returns the updated object
 * @private
 */


function _setObjectProperty(object, index, replacement) {
  if (index.size().length !== 1) {
    throw new _DimensionError.DimensionError(index.size(), 1);
  }

  const key = index.dimension(0);

  if (typeof key !== 'string') {
    throw new TypeError('String expected as index to retrieve an object property');
  } // clone the object, and apply the property to the clone


  const updated = (0, _object.clone)(object);
  (0, _customs.setSafeProperty)(updated, key, replacement);
  return updated;
}
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTranspose = void 0;

var _object = require("../../utils/object");

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

const name = 'transpose';
const dependencies = ['typed', 'matrix'];
const createTranspose =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  /**
   * Transpose a matrix. All values of the matrix are reflected over its
   * main diagonal. Only applicable to two dimensional matrices containing
   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
   * vectors and scalars return the input unchanged.
   *
   * Syntax:
   *
   *     math.transpose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, 6]]
   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
   *
   * See also:
   *
   *     diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be transposed
   * @return {Array | Matrix}   The transposed matrix
   */
  const transpose = typed('transpose', {
    'Array': function (x) {
      // use dense matrix implementation
      return transpose(matrix(x)).valueOf();
    },
    'Matrix': function (x) {
      // matrix size
      const size = x.size(); // result

      let c; // process dimensions

      switch (size.length) {
        case 1:
          // vector
          c = x.clone();
          break;

        case 2:
          // rows and columns
          const rows = size[0];
          const columns = size[1]; // check columns

          if (columns === 0) {
            // throw exception
            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + (0, _string.format)(size) + ')');
          } // process storage format


          switch (x.storage()) {
            case 'dense':
              c = _denseTranspose(x, rows, columns);
              break;

            case 'sparse':
              c = _sparseTranspose(x, rows, columns);
              break;
          }

          break;

        default:
          // multi dimensional
          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + (0, _string.format)(this._size) + ')');
      }

      return c;
    },
    // scalars
    'any': function (x) {
      return (0, _object.clone)(x);
    }
  });

  function _denseTranspose(m, rows, columns) {
    // matrix array
    const data = m._data; // transposed matrix data

    const transposed = [];
    let transposedRow; // loop columns

    for (let j = 0; j < columns; j++) {
      // initialize row
      transposedRow = transposed[j] = []; // loop rows

      for (let i = 0; i < rows; i++) {
        // set data
        transposedRow[i] = (0, _object.clone)(data[i][j]);
      }
    } // return matrix


    return m.createDenseMatrix({
      data: transposed,
      size: [columns, rows],
      datatype: m._datatype
    });
  }

  function _sparseTranspose(m, rows, columns) {
    // matrix arrays
    const values = m._values;
    const index = m._index;
    const ptr = m._ptr; // result matrices

    const cvalues = values ? [] : undefined;
    const cindex = [];
    const cptr = []; // row counts

    const w = [];

    for (let x = 0; x < rows; x++) {
      w[x] = 0;
    } // vars


    let p, l, j; // loop values in matrix

    for (p = 0, l = index.length; p < l; p++) {
      // number of values in row
      w[index[p]]++;
    } // cumulative sum


    let sum = 0; // initialize cptr with the cummulative sum of row counts

    for (let i = 0; i < rows; i++) {
      // update cptr
      cptr.push(sum); // update sum

      sum += w[i]; // update w

      w[i] = cptr[i];
    } // update cptr


    cptr.push(sum); // loop columns

    for (j = 0; j < columns; j++) {
      // values & index in column
      for (let k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
        // C values & index
        const q = w[index[k]]++; // C[j, i] = A[i, j]

        cindex[q] = j; // check we need to process values (pattern matrix)

        if (values) {
          cvalues[q] = (0, _object.clone)(values[k]);
        }
      }
    } // return matrix


    return m.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [columns, rows],
      datatype: m._datatype
    });
  }

  return transpose;
});
exports.createTranspose = createTranspose;
},{"../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/ctranspose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCtranspose = void 0;

var _factory = require("../../utils/factory");

const name = 'ctranspose';
const dependencies = ['typed', 'transpose', 'conj'];
const createCtranspose =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  transpose,
  conj
}) => {
  /**
   * Transpose and complex conjugate a matrix. All values of the matrix are
   * reflected over its main diagonal and then the complex conjugate is
   * taken. This is equivalent to complex conjugation for scalars and
   * vectors.
   *
   * Syntax:
   *
   *     math.ctranspose(x)
   *
   * Examples:
   *
   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
   *
   * See also:
   *
   *     transpose, diag, inv, subset, squeeze
   *
   * @param {Array | Matrix} x  Matrix to be ctransposed
   * @return {Array | Matrix}   The ctransposed matrix
   */
  return typed(name, {
    'any': function (x) {
      return conj(transpose(x));
    }
  });
});
exports.createCtranspose = createCtranspose;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/zeros.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createZeros = void 0;

var _is = require("../../utils/is");

var _number = require("../../utils/number");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'zeros';
const dependencies = ['typed', 'config', 'matrix', 'BigNumber'];
const createZeros =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  BigNumber
}) => {
  /**
   * Create a matrix filled with zeros. The created matrix can have one or
   * multiple dimensions.
   *
   * Syntax:
   *
   *    math.zeros(m)
   *    math.zeros(m, format)
   *    math.zeros(m, n)
   *    math.zeros(m, n, format)
   *    math.zeros([m, n])
   *    math.zeros([m, n], format)
   *
   * Examples:
   *
   *    math.zeros(3)                  // returns [0, 0, 0]
   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
   *
   *    const A = [[1, 2, 3], [4, 5, 6]]
   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
   *
   * See also:
   *
   *    ones, identity, size, range
   *
   * @param {...number | Array} size    The size of each dimension of the matrix
   * @param {string} [format]           The Matrix storage format
   *
   * @return {Array | Matrix}           A matrix filled with zeros
   */
  return typed(name, {
    '': function () {
      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
    },
    // math.zeros(m, n, p, ..., format)
    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
    '...number | BigNumber | string': function (size) {
      const last = size[size.length - 1];

      if (typeof last === 'string') {
        const format = size.pop();
        return _zeros(size, format);
      } else if (config.matrix === 'Array') {
        return _zeros(size);
      } else {
        return _zeros(size, 'default');
      }
    },
    'Array': _zeros,
    'Matrix': function (size) {
      const format = size.storage();
      return _zeros(size.valueOf(), format);
    },
    'Array | Matrix, string': function (size, format) {
      return _zeros(size.valueOf(), format);
    }
  });
  /**
   * Create an Array or Matrix with zeros
   * @param {Array} size
   * @param {string} [format='default']
   * @return {Array | Matrix}
   * @private
   */

  function _zeros(size, format) {
    const hasBigNumbers = _normalize(size);

    const defaultValue = hasBigNumbers ? new BigNumber(0) : 0;

    _validate(size);

    if (format) {
      // return a matrix
      const m = matrix(format);

      if (size.length > 0) {
        return m.resize(size, defaultValue);
      }

      return m;
    } else {
      // return an Array
      const arr = [];

      if (size.length > 0) {
        return (0, _array.resize)(arr, size, defaultValue);
      }

      return arr;
    }
  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


  function _normalize(size) {
    let hasBigNumbers = false;
    size.forEach(function (value, index, arr) {
      if ((0, _is.isBigNumber)(value)) {
        hasBigNumbers = true;
        arr[index] = value.toNumber();
      }
    });
    return hasBigNumbers;
  } // validate arguments


  function _validate(size) {
    size.forEach(function (value) {
      if (typeof value !== 'number' || !(0, _number.isInteger)(value) || value < 0) {
        throw new Error('Parameters in function zeros must be positive integers');
      }
    });
  }
}); // TODO: zeros contains almost the same code as ones. Reuse this?

exports.createZeros = createZeros;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/special/erf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createErf = void 0;

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'erf';
const dependencies = ['typed'];
const createErf =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Compute the erf function of a value using a rational Chebyshev
   * approximations for different intervals of x.
   *
   * This is a translation of W. J. Cody's Fortran implementation from 1987
   * ( https://www.netlib.org/specfun/erf ). See the AMS publication
   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
   * for an explanation of this process.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.erf(x)
   *
   * Examples:
   *
   *    math.erf(0.2)    // returns 0.22270258921047847
   *    math.erf(-0.5)   // returns -0.5204998778130465
   *    math.erf(4)      // returns 0.9999999845827421
   *
   * @param {number | Array | Matrix} x   A real number
   * @return {number | Array | Matrix}    The erf of `x`
   */
  const erf = typed('name', {
    'number': function (x) {
      const y = Math.abs(x);

      if (y >= MAX_NUM) {
        return (0, _number.sign)(x);
      }

      if (y <= THRESH) {
        return (0, _number.sign)(x) * erf1(y);
      }

      if (y <= 4.0) {
        return (0, _number.sign)(x) * (1 - erfc2(y));
      }

      return (0, _number.sign)(x) * (1 - erfc3(y));
    },
    'Array | Matrix': function (n) {
      return (0, _collection.deepMap)(n, erf);
    } // TODO: For complex numbers, use the approximation for the Faddeeva function
    //  from "More Efficient Computation of the Complex Error Function" (AMS)

  });
  /**
   * Approximates the error function erf() for x <= 0.46875 using this function:
   *               n
   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
   *              j=0
   */

  function erf1(y) {
    const ysq = y * y;
    let xnum = P[0][4] * ysq;
    let xden = ysq;
    let i;

    for (i = 0; i < 3; i += 1) {
      xnum = (xnum + P[0][i]) * ysq;
      xden = (xden + Q[0][i]) * ysq;
    }

    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
  }
  /**
   * Approximates the complement of the error function erfc() for
   * 0.46875 <= x <= 4.0 using this function:
   *                       n
   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
   *                      j=0
   */


  function erfc2(y) {
    let xnum = P[1][8] * y;
    let xden = y;
    let i;

    for (i = 0; i < 7; i += 1) {
      xnum = (xnum + P[1][i]) * y;
      xden = (xden + Q[1][i]) * y;
    }

    const result = (xnum + P[1][7]) / (xden + Q[1][7]);
    const ysq = parseInt(y * 16) / 16;
    const del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }
  /**
   * Approximates the complement of the error function erfc() for x > 4.0 using
   * this function:
   *
   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
   *               n
   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
   *              j=0
   */


  function erfc3(y) {
    let ysq = 1 / (y * y);
    let xnum = P[2][5] * ysq;
    let xden = ysq;
    let i;

    for (i = 0; i < 4; i += 1) {
      xnum = (xnum + P[2][i]) * ysq;
      xden = (xden + Q[2][i]) * ysq;
    }

    let result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
    result = (SQRPI - result) / y;
    ysq = parseInt(y * 16) / 16;
    const del = (y - ysq) * (y + ysq);
    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
  }

  return erf;
});
/**
 * Upper bound for the first approximation interval, 0 <= x <= THRESH
 * @constant
 */

exports.createErf = createErf;
const THRESH = 0.46875;
/**
 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
 * @constant
 */

const SQRPI = 5.6418958354775628695e-1;
/**
 * Coefficients for each term of the numerator sum (p_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

const P = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
/**
 * Coefficients for each term of the denominator sum (q_j) for each approximation
 * interval (see W. J. Cody's paper for more details)
 * @constant
 */

const Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
/**
 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
 * return 1
 */

const MAX_NUM = Math.pow(2, 53);
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/statistics/mode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMode = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'mode';
const dependencies = ['typed', 'isNaN', 'isNumeric'];
const createMode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  isNaN,
  isNumeric
}) => {
  /**
  * Computes the mode of a set of numbers or a list with values(numbers or characters).
  * If there are more than one modes, it returns a list of those values.
  *
  * Syntax:
  *
  *     math.mode(a, b, c, ...)
  *     math.mode(A)
  *
  * Examples:
  *
  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
  *     math.mode('a','a','b','c')                           // returns ["a"]
  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
  *
  * See also:
  *
  *     median,
  *     mean
  *
  * @param {... *} args  A single matrix
  * @return {*} The mode of all values
  */
  return typed(name, {
    'Array | Matrix': _mode,
    '...': function (args) {
      return _mode(args);
    }
  });
  /**
   * Calculates the mode in an 1-dimensional array
   * @param {Array} values
   * @return {Array} mode
   * @private
   */

  function _mode(values) {
    values = (0, _array.flatten)(values.valueOf());
    const num = values.length;

    if (num === 0) {
      throw new Error('Cannot calculate mode of an empty array');
    }

    const count = {};
    let mode = [];
    let max = 0;

    for (let i = 0; i < values.length; i++) {
      const value = values[i];

      if (isNumeric(value) && isNaN(value)) {
        throw new Error('Cannot calculate mode of an array containing NaN values');
      }

      if (!(value in count)) {
        count[value] = 0;
      }

      count[value]++;

      if (count[value] === max) {
        mode.push(value);
      } else if (count[value] > max) {
        max = count[value];
        mode = [value];
      }
    }

    return mode;
  }
});
exports.createMode = createMode;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.improveErrorMessage = improveErrorMessage;

var _is = require("../../../utils/is");

/**
 * Improve error messages for statistics functions. Errors are typically
 * thrown in an internally used function like larger, causing the error
 * not to mention the function (like max) which is actually used by the user.
 *
 * @param {Error} err
 * @param {String} fnName
 * @param {*} [value]
 * @return {Error}
 */
function improveErrorMessage(err, fnName, value) {
  // TODO: add information with the index (also needs transform in expression parser)
  let details;

  if (String(err).indexOf('Unexpected type') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
    return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
  }

  if (String(err).indexOf('complex numbers') !== -1) {
    details = arguments.length > 2 ? ' (type: ' + (0, _is.typeOf)(value) + ', value: ' + JSON.stringify(value) + ')' : '';
    return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
  }

  return err;
}
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/function/statistics/prod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProd = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

const name = 'prod';
const dependencies = ['typed', 'multiply'];
const createProd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  multiply
}) => {
  /**
   * Compute the product of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.prod(a, b, c, ...)
   *     math.prod(A)
   *
   * Examples:
   *
   *     math.multiply(2, 3)           // returns 6
   *     math.prod(2, 3)               // returns 6
   *     math.prod(2, 3, 4)            // returns 24
   *     math.prod([2, 3, 4])          // returns 24
   *     math.prod([[2, 5], [4, 3]])   // returns 120
   *
   * See also:
   *
   *    mean, median, min, max, sum, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The product of all values
   */
  return typed(name, {
    // prod([a, b, c, d, ...])
    'Array | Matrix': _prod,
    // prod([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      // TODO: implement prod(A, dim)
      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
    },
    // prod(a, b, c, d, ...)
    '...': function (args) {
      return _prod(args);
    }
  });
  /**
   * Recursively calculate the product of an n-dimensional array
   * @param {Array} array
   * @return {number} prod
   * @private
   */

  function _prod(array) {
    let prod;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        prod = prod === undefined ? value : multiply(prod, value);
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'prod', value);
      }
    });

    if (prod === undefined) {
      throw new Error('Cannot calculate prod of an empty array');
    }

    return prod;
  }
});
exports.createProd = createProd;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js"}],"../node_modules/mathjs/src/function/string/format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFormat = void 0;

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

const name = 'format';
const dependencies = ['typed'];
const createFormat =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Format a value of any type into a string.
   *
   * Syntax:
   *
   *    math.format(value)
   *    math.format(value, options)
   *    math.format(value, precision)
   *    math.format(value, callback)
   *
   * Where:
   *
   *  - `value: *`
   *    The value to be formatted
   *  - `options: Object`
   *    An object with formatting options. Available options:
   *    - `notation: string`
   *      Number notation. Choose from:
   *      - 'fixed'
   *        Always use regular number notation.
   *        For example '123.40' and '14000000'
   *      - 'exponential'
   *        Always use exponential notation.
   *        For example '1.234e+2' and '1.4e+7'
   *      - 'engineering'
   *        Always use engineering notation.
   *        For example '123.4e+0' and '14.0e+6'
   *      - 'auto' (default)
   *        Regular number notation for numbers having an absolute value between
   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
   *        Lower bound is included, upper bound is excluded.
   *        For example '123.4' and '1.4e7'.
   *    - `precision: number`
   *      A number between 0 and 16 to round the digits of the number. In case
   *      of notations 'exponential', 'engineering', and 'auto', `precision`
   *      defines the total number of significant digits returned.
   *      In case of notation 'fixed', `precision` defines the number of
   *      significant digits after the decimal point.
   *      `precision` is undefined by default.
   *    - `lowerExp: number`
   *      Exponent determining the lower boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `-3`.
   *    - `upperExp: number`
   *      Exponent determining the upper boundary for formatting a value with
   *      an exponent when `notation='auto`. Default value is `5`.
   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
   *      configured, and will output `0.(3)` when 'decimal' is configured.
   * - `callback: function`
   *   A custom formatting function, invoked for all numeric elements in `value`,
   *   for example all elements of a matrix, or the real and imaginary
   *   parts of a complex number. This callback can be used to override the
   *   built-in numeric notation with any type of formatting. Function `callback`
   *   is called with `value` as parameter and must return a string.
   *
   * When `value` is an Object:
   *
   * - When the object contains a property `format` being a function, this function
   *   is invoked as `value.format(options)` and the result is returned.
   * - When the object has its own `toString` method, this method is invoked
   *   and the result is returned.
   * - In other cases the function will loop over all object properties and
   *   return JSON object notation like '{"a": 2, "b": 3}'.
   *
   * When value is a function:
   *
   * - When the function has a property `syntax`, it returns this
   *   syntax description.
   * - In other cases, a string `'function'` is returned.
   *
   * Examples:
   *
   *    math.format(6.4)                                        // returns '6.4'
   *    math.format(1240000)                                    // returns '1.24e6'
   *    math.format(1/3)                                        // returns '0.3333333333333333'
   *    math.format(1/3, 3)                                     // returns '0.333'
   *    math.format(21385, 2)                                   // returns '21000'
   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
   *
   *    function formatCurrency(value) {
   *      // return currency notation with two digits:
   *      return '$' + value.toFixed(2)
   *
   *      // you could also use math.format inside the callback:
   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
   *    }
   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
   *
   * See also:
   *
   *    print
   *
   * @param {*} value                               Value to be stringified
   * @param {Object | Function | number} [options]  Formatting options
   * @return {string} The formatted value
   */
  return typed(name, {
    'any': _string.format,
    'any, Object | function | number': _string.format
  });
});
exports.createFormat = createFormat;
},{"../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/string/print.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPrint = void 0;

var _string = require("../../utils/string");

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

const name = 'print';
const dependencies = ['typed'];
const createPrint =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Interpolate values into a string template.
   *
   * Syntax:
   *
   *     math.print(template, values)
   *     math.print(template, values, precision)
   *     math.print(template, values, options)
   *
   * Example usage:
   *
   *     // the following outputs: 'Lucy is 5 years old'
   *     math.print('Lucy is $age years old', {age: 5})
   *
   *     // the following outputs: 'The value of pi is 3.141592654'
   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
   *
   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
   *     math.print('Hello $user.name! The date is $date', {
   *       user: {
   *         name: 'Mary',
   *       },
   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
   *     })
   *
   *     // the following outputs: 'My favorite fruits are apples and bananas !'
   *     math.print('My favorite fruits are $0 and $1 !', [
   *       'apples',
   *       'bananas'
   *     ])
   *
   * See also:
   *
   *     format
   *
   * @param {string} template           A string containing variable placeholders.
   * @param {Object | Array | Matrix}   values An object or array containing variables
   *                                    which will be filled in in the template.
   * @param {number | Object} [options] Formatting options,
   *                                    or the number of digits to format numbers.
   *                                    See function math.format for a description
   *                                    of all options.
   * @return {string} Interpolated string
   */
  return typed(name, {
    // note: Matrix will be converted automatically to an Array
    'string, Object | Array': _print,
    'string, Object | Array, number | Object': _print
  });
});
/**
 * Interpolate values into a string template.
 * @param {string} template
 * @param {Object} values
 * @param {number | Object} [options]
 * @returns {string} Interpolated string
 * @private
 */

exports.createPrint = createPrint;

function _print(template, values, options) {
  return template.replace(/\$([\w.]+)/g, function (original, key) {
    const keys = key.split('.');
    let value = values[keys.shift()];

    while (keys.length && value !== undefined) {
      const k = keys.shift();
      value = k ? value[k] : value + '.';
    }

    if (value !== undefined) {
      if (!(0, _is.isString)(value)) {
        return (0, _string.format)(value, options);
      } else {
        return value;
      }
    }

    return original;
  });
}
},{"../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/unit/to.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTo = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm13");

var _algorithm2 = require("../../type/matrix/utils/algorithm14");

const name = 'to';
const dependencies = ['typed', 'matrix'];
const createTo =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  const algorithm13 = (0, _algorithm.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed
  });
  /**
   * Change the unit of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.to(x, unit)
   *
   * Examples:
   *
   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
   *
   * See also:
   *
   *    unit
   *
   * @param {Unit | Array | Matrix} x     The unit to be converted.
   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
   *                                      or a unit without value.
   * @return {Unit | Array | Matrix} value with changed, fixed unit.
   */

  const to = typed(name, {
    'Unit, Unit | string': function (x, unit) {
      return x.to(unit);
    },
    'Matrix, Matrix': function (x, y) {
      // SparseMatrix does not support Units
      return algorithm13(x, y, to);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return to(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return to(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return to(x, matrix(y));
    },
    'Matrix, any': function (x, y) {
      // SparseMatrix does not support Units
      return algorithm14(x, y, to, false);
    },
    'any, Matrix': function (x, y) {
      // SparseMatrix does not support Units
      return algorithm14(y, x, to, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, to, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, to, true).valueOf();
    }
  });
  return to;
});
exports.createTo = createTo;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/utils/isPrime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsPrime = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

const name = 'isPrime';
const dependencies = ['typed'];
const createIsPrime =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Test whether a value is prime: has no divisors other than itself and one.
   * The function supports type `number`, `bignumber`.
   *
   * The function is evaluated element-wise in case of Array or Matrix input.
   *
   * Syntax:
   *
   *     math.isPrime(x)
   *
   * Examples:
   *
   *    math.isPrime(3)                     // returns true
   *    math.isPrime(-2)                    // returns false
   *    math.isPrime(0)                     // returns false
   *    math.isPrime(-0)                    // returns false
   *    math.isPrime(0.5)                   // returns false
   *    math.isPrime('2')                   // returns true
   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
   *
   * See also:
   *
   *    isNumeric, isZero, isNegative, isInteger
   *
   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
   * @return {boolean}  Returns true when `x` is larger than zero.
   *                    Throws an error in case of an unknown data type.
   */
  const isPrime = typed(name, {
    'number': function (x) {
      if (x < 2) {
        return false;
      }

      if (x === 2) {
        return true;
      }

      if (x % 2 === 0) {
        return false;
      }

      for (let i = 3; i * i <= x; i += 2) {
        if (x % i === 0) {
          return false;
        }
      }

      return true;
    },
    'BigNumber': function (x) {
      if (x.lt(2)) {
        return false;
      }

      if (x.equals(2)) {
        return true;
      }

      if (x.mod(2).isZero()) {
        return false;
      }

      for (let i = new x.constructor(3); i.times(i).lte(x); i = i.plus(1)) {
        if (x.mod(i).isZero()) {
          return false;
        }
      }

      return true;
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, isPrime);
    }
  });
  return isPrime;
});
exports.createIsPrime = createIsPrime;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/utils/numeric.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNumeric = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _noop = require("../../utils/noop");

const name = 'numeric';
const dependencies = ['number', '?bignumber', '?fraction'];
const createNumeric =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  number,
  bignumber,
  fraction
}) => {
  const validInputTypes = {
    'string': true,
    'number': true,
    'BigNumber': true,
    'Fraction': true // Load the conversion functions for each output type

  };
  const validOutputTypes = {
    'number': x => number(x),
    'BigNumber': bignumber ? x => bignumber(x) : _noop.noBignumber,
    'Fraction': fraction ? x => fraction(x) : _noop.noFraction
    /**
     * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
     *
     * Syntax:
     *
     *    math.numeric(x)
     *
     * Examples:
     *
     *    math.numeric('4')                           // returns number 4
     *    math.numeric('4', 'number')                 // returns number 4
     *    math.numeric('4', 'BigNumber')              // returns BigNumber 4
     *    math.numeric('4', 'Fraction')               // returns Fraction 4
     *    math.numeric(4, 'Fraction')                 // returns Fraction 4
     *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4
     *
     * See also:
     *
     *    number, fraction, bignumber, string, format
     *
     * @param {string | number | BigNumber | Fraction } value
     *              A numeric value or a string containing a numeric value
     * @param {string} outputType
     *              Desired numeric output type.
     *              Available values: 'number', 'BigNumber', or 'Fraction'
     * @return {number | BigNumber | Fraction}
     *              Returns an instance of the numeric in the requested type
     */

  };
  return function numeric(value, outputType) {
    const inputType = (0, _is.typeOf)(value);

    if (!(inputType in validInputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
    }

    if (!(outputType in validOutputTypes)) {
      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
    }

    if (outputType === inputType) {
      return value;
    } else {
      return validOutputTypes[outputType](value);
    }
  };
});
exports.createNumeric = createNumeric;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/noop":"../node_modules/mathjs/src/utils/noop.js"}],"../node_modules/mathjs/src/function/arithmetic/divideScalar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDivideScalar = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

const name = 'divideScalar';
const dependencies = ['typed', 'numeric'];
const createDivideScalar =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  numeric
}) => {
  /**
   * Divide two scalar values, `x / y`.
   * This function is meant for internal use: it is used by the public functions
   * `divide` and `inv`.
   *
   * This function does not support collections (Array or Matrix).
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`
   * @private
   */
  const divideScalar = typed(name, {
    'number, number': function (x, y) {
      return x / y;
    },
    'Complex, Complex': function (x, y) {
      return x.div(y);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.div(y);
    },
    'Fraction, Fraction': function (x, y) {
      return x.div(y);
    },
    'Unit, number | Fraction | BigNumber': function (x, y) {
      const res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

      const one = numeric(1, (0, _is.typeOf)(y));
      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);
      return res;
    },
    'number | Fraction | BigNumber, Unit': function (x, y) {
      let res = y.clone();
      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

      const one = numeric(1, (0, _is.typeOf)(x));
      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);
      return res;
    },
    'Unit, Unit': function (x, y) {
      return x.divide(y);
    }
  });
  return divideScalar;
});
exports.createDivideScalar = createDivideScalar;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/function/arithmetic/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPow = void 0;

var _factory = require("../../utils/factory");

var _number = require("../../utils/number");

var _array = require("../../utils/array");

var _number2 = require("../../plain/number");

const name = 'pow';
const dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];
const createPow =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  identity,
  multiply,
  matrix,
  number,
  fraction,
  Complex
}) => {
  /**
   * Calculates the power of x to y, `x ^ y`.
   * Matrix exponentiation is supported for square matrices `x`, and positive
   * integer exponents `y`.
   *
   * For cubic roots of negative numbers, the function returns the principal
   * root by default. In order to let the function return the real root,
   * math.js can be configured with `math.config({predictable: true})`.
   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
   *
   * Syntax:
   *
   *    math.pow(x, y)
   *
   * Examples:
   *
   *    math.pow(2, 3)               // returns number 8
   *
   *    const a = math.complex(2, 3)
   *    math.pow(a, 2)                // returns Complex -5 + 12i
   *
   *    const b = [[1, 2], [4, 3]]
   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    multiply, sqrt, cbrt, nthRoot
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex} y                          The exponent
   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
   */
  return typed(name, {
    'number, number': _pow,
    'Complex, Complex': function (x, y) {
      return x.pow(y);
    },
    'BigNumber, BigNumber': function (x, y) {
      if (y.isInteger() || x >= 0 || config.predictable) {
        return x.pow(y);
      } else {
        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
      }
    },
    'Fraction, Fraction': function (x, y) {
      if (y.d !== 1) {
        if (config.predictable) {
          throw new Error('Function pow does not support non-integer exponents for fractions.');
        } else {
          return _pow(x.valueOf(), y.valueOf());
        }
      } else {
        return x.pow(y);
      }
    },
    'Array, number': _powArray,
    'Array, BigNumber': function (x, y) {
      return _powArray(x, y.toNumber());
    },
    'Matrix, number': _powMatrix,
    'Matrix, BigNumber': function (x, y) {
      return _powMatrix(x, y.toNumber());
    },
    'Unit, number | BigNumber': function (x, y) {
      return x.pow(y);
    }
  });
  /**
   * Calculates the power of x to y, x^y, for two numbers.
   * @param {number} x
   * @param {number} y
   * @return {number | Complex} res
   * @private
   */

  function _pow(x, y) {
    // Alternatively could define a 'realmode' config option or something, but
    // 'predictable' will work for now
    if (config.predictable && !(0, _number.isInteger)(y) && x < 0) {
      // Check to see if y can be represented as a fraction
      try {
        const yFrac = fraction(y);
        const yNum = number(yFrac);

        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
          if (yFrac.d % 2 === 1) {
            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
          }
        }
      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.
      // Unable to express y as a fraction, so continue on

    } // **for predictable mode** x^Infinity === NaN if x < -1
    // N.B. this behavour is different from `Math.pow` which gives
    // (-2)^Infinity === Infinity


    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
      return NaN;
    }

    if ((0, _number.isInteger)(y) || x >= 0 || config.predictable) {
      return (0, _number2.powNumber)(x, y);
    } else {
      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow
      // x^Infinity === 0 if -1 < x < 1
      // A real number 0 is returned instead of complex(0)
      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
        return 0;
      }

      return new Complex(x, 0).pow(y, 0);
    }
  }
  /**
   * Calculate the power of a 2d array
   * @param {Array} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Array}
   * @private
   */


  function _powArray(x, y) {
    if (!(0, _number.isInteger)(y) || y < 0) {
      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
    } // verify that A is a 2 dimensional square matrix


    const s = (0, _array.arraySize)(x);

    if (s.length !== 2) {
      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
    }

    if (s[0] !== s[1]) {
      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
    }

    let res = identity(s[0]).valueOf();
    let px = x;

    while (y >= 1) {
      if ((y & 1) === 1) {
        res = multiply(px, res);
      }

      y >>= 1;
      px = multiply(px, px);
    }

    return res;
  }
  /**
   * Calculate the power of a 2d matrix
   * @param {Matrix} x     must be a 2 dimensional, square matrix
   * @param {number} y    a positive, integer value
   * @returns {Matrix}
   * @private
   */


  function _powMatrix(x, y) {
    return matrix(_powArray(x.valueOf(), y));
  }
});
exports.createPow = createPow;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRoundNumber = exports.createRound = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

var _algorithm = require("../../type/matrix/utils/algorithm11");

var _algorithm2 = require("../../type/matrix/utils/algorithm12");

var _algorithm3 = require("../../type/matrix/utils/algorithm14");

var _number2 = require("../../plain/number");

const NO_INT = 'Number of decimals in function round must be an integer';
const name = 'round';
const dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];
const createRound =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  zeros,
  BigNumber,
  DenseMatrix
}) => {
  const algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm2.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm14 = (0, _algorithm3.createAlgorithm14)({
    typed
  });
  /**
   * Round a value towards the nearest integer.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.round(x)
   *    math.round(x, n)
   *
   * Examples:
   *
   *    math.round(3.2)              // returns number 3
   *    math.round(3.8)              // returns number 4
   *    math.round(-4.2)             // returns number -4
   *    math.round(-4.7)             // returns number -5
   *    math.round(math.pi, 3)       // returns number 3.142
   *    math.round(123.45678, 2)     // returns number 123.46
   *
   *    const c = math.complex(3.2, -2.7)
   *    math.round(c)                // returns Complex 3 - 3i
   *
   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
   *
   * See also:
   *
   *    ceil, fix, floor
   *
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
   */

  const round = typed(name, { ...roundNumberSignatures,
    'Complex': function (x) {
      return x.round();
    },
    'Complex, number': function (x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Complex, BigNumber': function (x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      const _n = n.toNumber();

      return x.round(_n);
    },
    'number, BigNumber': function (x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return new BigNumber(x).toDecimalPlaces(n.toNumber());
    },
    'BigNumber': function (x) {
      return x.toDecimalPlaces(0);
    },
    'BigNumber, BigNumber': function (x, n) {
      if (!n.isInteger()) {
        throw new TypeError(NO_INT);
      }

      return x.toDecimalPlaces(n.toNumber());
    },
    'Fraction': function (x) {
      return x.round();
    },
    'Fraction, number': function (x, n) {
      if (n % 1) {
        throw new TypeError(NO_INT);
      }

      return x.round(n);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since round(0) = 0
      return (0, _collection.deepMap)(x, round, true);
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      return algorithm11(x, y, round, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      return algorithm14(x, y, round, false);
    },
    'number | Complex | BigNumber, SparseMatrix': function (x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm12(y, x, round, true);
    },
    'number | Complex | BigNumber, DenseMatrix': function (x, y) {
      // check scalar is zero
      if (equalScalar(x, 0)) {
        // do not execute algorithm, result will be a zero matrix
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, round, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, round, false).valueOf();
    },
    'number | Complex | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, round, true).valueOf();
    }
  });
  return round;
});
exports.createRound = createRound;
const roundNumberSignatures = {
  'number': _number2.roundNumber,
  'number, number': function (x, n) {
    if (!(0, _number.isInteger)(n)) {
      throw new TypeError(NO_INT);
    }

    if (n < 0 || n > 15) {
      throw new Error('Number of decimals in function round must be in te range of 0-15');
    }

    return (0, _number2.roundNumber)(x, n);
  }
};
const createRoundNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed'], ({
  typed
}) => {
  return typed(name, roundNumberSignatures);
});
exports.createRoundNumber = createRoundNumber;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLog = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'log';
const dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
const createLog =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  divideScalar,
  Complex
}) => {
  /**
   * Calculate the logarithm of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log(x)
   *    math.log(x, base)
   *
   * Examples:
   *
   *    math.log(3.5)                  // returns 1.252762968495368
   *    math.exp(math.log(2.4))        // returns 2.4
   *
   *    math.pow(10, 4)                // returns 10000
   *    math.log(10000, 10)            // returns 4
   *    math.log(10000) / math.log(10) // returns 4
   *
   *    math.log(1024, 2)              // returns 10
   *    math.pow(2, 10)                // returns 1024
   *
   * See also:
   *
   *    exp, log2, log10, log1p
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x`
   */
  const log = typed(name, {
    'number': function (x) {
      if (x >= 0 || config.predictable) {
        return (0, _number.logNumber)(x);
      } else {
        // negative value -> complex value computation
        return new Complex(x, 0).log();
      }
    },
    'Complex': function (x) {
      return x.log();
    },
    'BigNumber': function (x) {
      if (!x.isNegative() || config.predictable) {
        return x.ln();
      } else {
        // downgrade to number, return Complex valued result
        return new Complex(x.toNumber(), 0).log();
      }
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, log);
    },
    'any, any': function (x, base) {
      // calculate logarithm for a specified base, log(x, base)
      return divideScalar(log(x), log(base));
    }
  });
  return log;
});
exports.createLog = createLog;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/arithmetic/log1p.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLog1p = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

const name = 'log1p';
const dependencies = ['typed', 'config', 'divideScalar', 'log', 'Complex'];
const createLog1p =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  divideScalar,
  log,
  Complex
}) => {
  /**
   * Calculate the logarithm of a `value+1`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.log1p(x)
   *    math.log1p(x, base)
   *
   * Examples:
   *
   *    math.log1p(2.5)                 // returns 1.252762968495368
   *    math.exp(math.log1p(1.4))       // returns 2.4
   *
   *    math.pow(10, 4)                 // returns 10000
   *    math.log1p(9999, 10)            // returns 4
   *    math.log1p(9999) / math.log(10) // returns 4
   *
   * See also:
   *
   *    exp, log, log2, log10
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the logarithm of `x+1`.
   * @param {number | BigNumber | Complex} [base=e]
   *            Optional base for the logarithm. If not provided, the natural
   *            logarithm of `x+1` is calculated.
   * @return {number | BigNumber | Complex | Array | Matrix}
   *            Returns the logarithm of `x+1`
   */
  const log1p = typed(name, {
    'number': function (x) {
      if (x >= -1 || config.predictable) {
        return (0, _number.log1p)(x);
      } else {
        // negative value -> complex value computation
        return _log1pComplex(new Complex(x, 0));
      }
    },
    'Complex': _log1pComplex,
    'BigNumber': function (x) {
      const y = x.plus(1);

      if (!y.isNegative() || config.predictable) {
        return y.ln();
      } else {
        // downgrade to number, return Complex valued result
        return _log1pComplex(new Complex(x.toNumber(), 0));
      }
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, log1p);
    },
    'any, any': function (x, base) {
      // calculate logarithm for a specified base, log1p(x, base)
      return divideScalar(log1p(x), log(base));
    }
  });
  /**
   * Calculate the natural logarithm of a complex number + 1
   * @param {Complex} x
   * @returns {Complex}
   * @private
   */

  function _log1pComplex(x) {
    const xRe1p = x.re + 1;
    return new Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
  }

  return log1p;
});
exports.createLog1p = createLog1p;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/function/arithmetic/nthRoots.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNthRoots = void 0;

var _factory = require("../../utils/factory");

const name = 'nthRoots';
const dependencies = ['config', 'typed', 'divideScalar', 'Complex'];
const createNthRoots =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  divideScalar,
  Complex
}) => {
  /**
   * Calculate the nth roots of a value.
   * An nth root of a positive real number A,
   * is a positive real solution of the equation "x^root = A".
   * This function returns an array of complex values.
   *
   * Syntax:
   *
   *    math.nthRoots(x)
   *    math.nthRoots(x, root)
   *
   * Examples:
   *
   *    math.nthRoots(1)
   *    // returns [
   *    //   {re: 1, im: 0},
   *    //   {re: -1, im: 0}
   *    // ]
   *    nthRoots(1, 3)
   *    // returns [
   *    //   { re: 1, im: 0 },
   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
   *    ]
   *
   * See also:
   *
   *    nthRoot, pow, sqrt
   *
   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
   */
  const nthRoots = typed(name, {
    'Complex': function (x) {
      return _nthComplexRoots(x, 2);
    },
    'Complex, number': _nthComplexRoots
  });
  /**
   * Each function here returns a real multiple of i as a Complex value.
   * @param  {number} val
   * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
   */
  // This is used to fix float artifacts for zero-valued components.

  const _calculateExactResult = [function realPos(val) {
    return new Complex(val, 0);
  }, function imagPos(val) {
    return new Complex(0, val);
  }, function realNeg(val) {
    return new Complex(-val, 0);
  }, function imagNeg(val) {
    return new Complex(0, -val);
  }];
  /**
   * Calculate the nth root of a Complex Number a using De Movire's Theorem.
   * @param  {Complex} a
   * @param  {number} root
   * @return {Array} array of n Complex Roots
   */

  function _nthComplexRoots(a, root) {
    if (root < 0) throw new Error('Root must be greater than zero');
    if (root === 0) throw new Error('Root must be non-zero');
    if (root % 1 !== 0) throw new Error('Root must be an integer');
    if (a === 0 || a.abs() === 0) return [new Complex(0, 0)];
    const aIsNumeric = typeof a === 'number';
    let offset; // determine the offset (argument of a)/(pi/2)

    if (aIsNumeric || a.re === 0 || a.im === 0) {
      if (aIsNumeric) {
        offset = 2 * +(a < 0); // numeric value on the real axis
      } else if (a.im === 0) {
        offset = 2 * +(a.re < 0); // complex value on the real axis
      } else {
        offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
      }
    }

    const arg = a.arg();
    const abs = a.abs();
    const roots = [];
    const r = Math.pow(abs, 1 / root);

    for (let k = 0; k < root; k++) {
      const halfPiFactor = (offset + 4 * k) / root;
      /**
       * If (offset + 4*k)/root is an integral multiple of pi/2
       * then we can produce a more exact result.
       */

      if (halfPiFactor === Math.round(halfPiFactor)) {
        roots.push(_calculateExactResult[halfPiFactor % 4](r));
        continue;
      }

      roots.push(new Complex({
        r: r,
        phi: (arg + 2 * Math.PI * k) / root
      }));
    }

    return roots;
  }

  return nthRoots;
});
exports.createNthRoots = createNthRoots;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/arithmetic/dotPow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDotPow = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm11");

var _algorithm4 = require("../../type/matrix/utils/algorithm12");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

var _algorithm6 = require("../../type/matrix/utils/algorithm14");

const name = 'dotPow';
const dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix'];
const createDotPow =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar,
  matrix,
  pow,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm11 = (0, _algorithm3.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm4.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm6.createAlgorithm14)({
    typed
  });
  /**
   * Calculates the power of x to y element wise.
   *
   * Syntax:
   *
   *    math.dotPow(x, y)
   *
   * Examples:
   *
   *    math.dotPow(2, 3)            // returns number 8
   *
   *    const a = [[1, 2], [4, 3]]
   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
   *
   * See also:
   *
   *    pow, sqrt, multiply
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
   */

  const dotPow = typed(name, {
    'any, any': pow,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, pow, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, pow, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, pow, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, pow);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return dotPow(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return dotPow(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return dotPow(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, dotPow, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, dotPow, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, dotPow, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, dotPow, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, dotPow, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, dotPow, true).valueOf();
    }
  });
  return dotPow;
});
exports.createDotPow = createDotPow;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/arithmetic/dotDivide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDotDivide = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm03");

var _algorithm3 = require("../../type/matrix/utils/algorithm07");

var _algorithm4 = require("../../type/matrix/utils/algorithm11");

var _algorithm5 = require("../../type/matrix/utils/algorithm12");

var _algorithm6 = require("../../type/matrix/utils/algorithm13");

var _algorithm7 = require("../../type/matrix/utils/algorithm14");

const name = 'dotDivide';
const dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];
const createDotDivide =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  divideScalar,
  DenseMatrix
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm3.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm5.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm6.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm7.createAlgorithm14)({
    typed
  });
  /**
   * Divide two matrices element wise. The function accepts both matrices and
   * scalar values.
   *
   * Syntax:
   *
   *    math.dotDivide(x, y)
   *
   * Examples:
   *
   *    math.dotDivide(2, 4)   // returns 0.5
   *
   *    a = [[9, 5], [6, 1]]
   *    b = [[3, 2], [5, 2]]
   *
   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
   *
   * See also:
   *
   *    divide, multiply, dotMultiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
   */

  const dotDivide = typed(name, {
    'any, any': divideScalar,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, divideScalar, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, divideScalar, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, divideScalar, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, divideScalar);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return dotDivide(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return dotDivide(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, divideScalar, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, divideScalar, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
    }
  });
  return dotDivide;
});
exports.createDotDivide = createDotDivide;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/algebra/solver/utils/solveValidation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSolveValidation = createSolveValidation;

var _is = require("../../../../utils/is");

var _array = require("../../../../utils/array");

var _string = require("../../../../utils/string");

function createSolveValidation({
  DenseMatrix
}) {
  /**
   * Validates matrix and column vector b for backward/forward substitution algorithms.
   *
   * @param {Matrix} m            An N x N matrix
   * @param {Array | Matrix} b    A column vector
   * @param {Boolean} copy        Return a copy of vector b
   *
   * @return {DenseMatrix}        Dense column vector b
   */
  return function solveValidation(m, b, copy) {
    // matrix size
    const size = m.size(); // validate matrix dimensions

    if (size.length !== 2) {
      throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(size) + ')');
    } // rows & columns


    const rows = size[0];
    const columns = size[1]; // validate rows & columns

    if (rows !== columns) {
      throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');
    } // vars


    let data, i, bdata; // check b is matrix

    if ((0, _is.isMatrix)(b)) {
      // matrix size
      const msize = b.size(); // vector

      if (msize.length === 1) {
        // check vector length
        if (msize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // create data array


        data = []; // matrix data (DenseMatrix)

        bdata = b._data; // loop b data

        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [bdata[i]];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // two dimensions


      if (msize.length === 2) {
        // array must be a column vector
        if (msize[0] !== rows || msize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // check matrix type


        if ((0, _is.isDenseMatrix)(b)) {
          // check a copy is needed
          if (copy) {
            // create data array
            data = []; // matrix data (DenseMatrix)

            bdata = b._data; // loop b data

            for (i = 0; i < rows; i++) {
              // row array
              data[i] = [bdata[i][0]];
            } // return Dense Matrix


            return new DenseMatrix({
              data: data,
              size: [rows, 1],
              datatype: b._datatype
            });
          } // b is already a column vector


          return b;
        } // create data array


        data = [];

        for (i = 0; i < rows; i++) {
          data[i] = [0];
        } // sparse matrix arrays


        const values = b._values;
        const index = b._index;
        const ptr = b._ptr; // loop values in column 0

        for (let k1 = ptr[1], k = ptr[0]; k < k1; k++) {
          // row
          i = index[k]; // add to data

          data[i][0] = values[k];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1],
          datatype: b._datatype
        });
      } // throw error


      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
    } // check b is array


    if ((0, _is.isArray)(b)) {
      // size
      const asize = (0, _array.arraySize)(b); // check matrix dimensions, vector

      if (asize.length === 1) {
        // check vector length
        if (asize[0] !== rows) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // create data array


        data = []; // loop b

        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [b[i]];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      }

      if (asize.length === 2) {
        // array must be a column vector
        if (asize[0] !== rows || asize[1] !== 1) {
          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
        } // create data array


        data = []; // loop b data

        for (i = 0; i < rows; i++) {
          // row array
          data[i] = [b[i][0]];
        } // return Dense Matrix


        return new DenseMatrix({
          data: data,
          size: [rows, 1]
        });
      } // throw error


      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
    }
  };
}
},{"../../../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../../../utils/string":"../node_modules/mathjs/src/utils/string.js"}],"../node_modules/mathjs/src/function/algebra/solver/lsolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLsolve = void 0;

var _factory = require("../../../utils/factory");

var _solveValidation = require("./utils/solveValidation");

const name = 'lsolve';
const dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
const createLsolve =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  divideScalar,
  multiplyScalar,
  subtract,
  equalScalar,
  DenseMatrix
}) => {
  const solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
   *
   * `L * x = b`
   *
   * Syntax:
   *
   *    math.lsolve(L, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = lsolve(a, b)  // [[-5.5], [20]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} L       A N x N matrix or array (L)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _sparseForwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _denseForwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function (a, b) {
      // create dense matrix from array
      const m = matrix(a); // use matrix implementation

      const r = _denseForwardSubstitution(m, b); // result


      return r.valueOf();
    }
  });

  function _denseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    const bdata = b._data; // rows & columns

    const rows = m._size[0];
    const columns = m._size[1]; // result

    const x = []; // data

    const data = m._data; // forward solve m * x = b, loop columns

    for (let j = 0; j < columns; j++) {
      // b[j]
      const bj = bdata[j][0] || 0; // x[j]

      let xj; // forward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        const vjj = data[j][j]; // check vjj

        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        xj = divideScalar(bj, vjj); // loop rows

        for (let i = j + 1; i < rows; i++) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
        }
      } else {
        // zero @ j
        xj = 0;
      } // update x


      x[j] = [xj];
    } // return vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseForwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    const bdata = b._data; // rows & columns

    const rows = m._size[0];
    const columns = m._size[1]; // matrix arrays

    const values = m._values;
    const index = m._index;
    const ptr = m._ptr; // vars

    let i, k; // result

    const x = []; // forward solve m * x = b, loop columns

    for (let j = 0; j < columns; j++) {
      // b[j]
      const bj = bdata[j][0] || 0; // forward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        let vjj = 0; // lower triangular matrix values & index (column j)

        const jvalues = [];
        const jindex = []; // last index in column

        let l = ptr[j + 1]; // values in column, find value @ [j, j]

        for (k = ptr[j]; k < l; k++) {
          // row
          i = index[k]; // check row (rows are not sorted!)

          if (i === j) {
            // update vjj
            vjj = values[k];
          } else if (i > j) {
            // store lower triangular
            jvalues.push(values[k]);
            jindex.push(i);
          }
        } // at this point we must have a value @ [j, j]


        if (equalScalar(vjj, 0)) {
          // system cannot be solved, there is no value @ [j, j]
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        const xj = divideScalar(bj, vjj); // loop lower triangular

        for (k = 0, l = jindex.length; k < l; k++) {
          // row
          i = jindex[k]; // update copy of b

          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
        } // update x


        x[j] = [xj];
      } else {
        // update x
        x[j] = [0];
      }
    } // return vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});
exports.createLsolve = createLsolve;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/solveValidation":"../node_modules/mathjs/src/function/algebra/solver/utils/solveValidation.js"}],"../node_modules/mathjs/src/function/algebra/solver/usolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUsolve = void 0;

var _factory = require("../../../utils/factory");

var _solveValidation = require("./utils/solveValidation");

const name = 'usolve';
const dependencies = ['typed', 'matrix', 'divideScalar', 'multiplyScalar', 'subtract', 'equalScalar', 'DenseMatrix'];
const createUsolve =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  divideScalar,
  multiplyScalar,
  subtract,
  equalScalar,
  DenseMatrix
}) => {
  const solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
   *
   * `U * x = b`
   *
   * Syntax:
   *
   *    math.usolve(U, b)
   *
   * Examples:
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = usolve(a, b)  // [[8], [9]]
   *
   * See also:
   *
   *    lup, slu, usolve, lusolve
   *
   * @param {Matrix, Array} U       A N x N matrix or array (U)
   * @param {Matrix, Array} b       A column vector with the b values
   *
   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
   */

  return typed(name, {
    'SparseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _sparseBackwardSubstitution(m, b);
    },
    'DenseMatrix, Array | Matrix': function (m, b) {
      // process matrix
      return _denseBackwardSubstitution(m, b);
    },
    'Array, Array | Matrix': function (a, b) {
      // create dense matrix from array
      const m = matrix(a); // use matrix implementation

      const r = _denseBackwardSubstitution(m, b); // result


      return r.valueOf();
    }
  });

  function _denseBackwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    const bdata = b._data; // rows & columns

    const rows = m._size[0];
    const columns = m._size[1]; // result

    const x = []; // arrays

    const data = m._data; // backward solve m * x = b, loop columns (backwards)

    for (let j = columns - 1; j >= 0; j--) {
      // b[j]
      const bj = bdata[j][0] || 0; // x[j]

      let xj; // backward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        const vjj = data[j][j]; // check vjj

        if (equalScalar(vjj, 0)) {
          // system cannot be solved
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        xj = divideScalar(bj, vjj); // loop rows

        for (let i = j - 1; i >= 0; i--) {
          // update copy of b
          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
        }
      } else {
        // zero value @ j
        xj = 0;
      } // update x


      x[j] = [xj];
    } // return column vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }

  function _sparseBackwardSubstitution(m, b) {
    // validate matrix and vector, return copy of column vector b
    b = solveValidation(m, b, true); // column vector data

    const bdata = b._data; // rows & columns

    const rows = m._size[0];
    const columns = m._size[1]; // matrix arrays

    const values = m._values;
    const index = m._index;
    const ptr = m._ptr; // vars

    let i, k; // result

    const x = []; // backward solve m * x = b, loop columns (backwards)

    for (let j = columns - 1; j >= 0; j--) {
      // b[j]
      const bj = bdata[j][0] || 0; // backward substitution (outer product) avoids inner looping when bj === 0

      if (!equalScalar(bj, 0)) {
        // value @ [j, j]
        let vjj = 0; // upper triangular matrix values & index (column j)

        const jvalues = [];
        const jindex = []; // first & last indeces in column

        const f = ptr[j];
        let l = ptr[j + 1]; // values in column, find value @ [j, j], loop backwards

        for (k = l - 1; k >= f; k--) {
          // row
          i = index[k]; // check row

          if (i === j) {
            // update vjj
            vjj = values[k];
          } else if (i < j) {
            // store upper triangular
            jvalues.push(values[k]);
            jindex.push(i);
          }
        } // at this point we must have a value @ [j, j]


        if (equalScalar(vjj, 0)) {
          // system cannot be solved, there is no value @ [j, j]
          throw new Error('Linear system cannot be solved since matrix is singular');
        } // calculate xj


        const xj = divideScalar(bj, vjj); // loop upper triangular

        for (k = 0, l = jindex.length; k < l; k++) {
          // row
          i = jindex[k]; // update copy of b

          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
        } // update x


        x[j] = [xj];
      } else {
        // update x
        x[j] = [0];
      }
    } // return vector


    return new DenseMatrix({
      data: x,
      size: [rows, 1]
    });
  }
});
exports.createUsolve = createUsolve;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/solveValidation":"../node_modules/mathjs/src/function/algebra/solver/utils/solveValidation.js"}],"../node_modules/mathjs/src/type/matrix/utils/algorithm08.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAlgorithm08 = void 0;

var _factory = require("../../../utils/factory");

var _DimensionError = require("../../../error/DimensionError");

const name = 'algorithm08';
const dependencies = ['typed', 'equalScalar'];
const createAlgorithm08 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equalScalar
}) => {
  /**
   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
   * Callback function invoked MAX(NNZA, NNZB) times
   *
   *
   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
   *          └  0            ; otherwise
   *
   *
   * @param {Matrix}   a                 The SparseMatrix instance (A)
   * @param {Matrix}   b                 The SparseMatrix instance (B)
   * @param {Function} callback          The f(Aij,Bij) operation to invoke
   *
   * @return {Matrix}                    SparseMatrix (C)
   *
   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
   */
  return function algorithm08(a, b, callback) {
    // sparse matrix arrays
    const avalues = a._values;
    const aindex = a._index;
    const aptr = a._ptr;
    const asize = a._size;
    const adt = a._datatype; // sparse matrix arrays

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr;
    const bsize = b._size;
    const bdt = b._datatype; // validate dimensions

    if (asize.length !== bsize.length) {
      throw new _DimensionError.DimensionError(asize.length, bsize.length);
    } // check rows & columns


    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
    } // sparse matrix cannot be a Pattern matrix


    if (!avalues || !bvalues) {
      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
    } // rows & columns


    const rows = asize[0];
    const columns = asize[1]; // datatype

    let dt; // equal signature to use

    let eq = equalScalar; // zero value

    let zero = 0; // callback signature to use

    let cf = callback; // process data types

    if (typeof adt === 'string' && adt === bdt) {
      // datatype
      dt = adt; // find signature that matches (dt, dt)

      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype

      zero = typed.convert(0, dt); // callback

      cf = typed.find(callback, [dt, dt]);
    } // result arrays


    const cvalues = [];
    const cindex = [];
    const cptr = []; // matrix

    const c = a.createSparseMatrix({
      values: cvalues,
      index: cindex,
      ptr: cptr,
      size: [rows, columns],
      datatype: dt
    }); // workspace

    const x = []; // marks indicating we have a value in x for a given column

    const w = []; // vars

    let k, k0, k1, i; // loop columns

    for (let j = 0; j < columns; j++) {
      // update cptr
      cptr[j] = cindex.length; // columns mark

      const mark = j + 1; // loop values in a

      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = aindex[k]; // mark workspace

        w[i] = mark; // set value

        x[i] = avalues[k]; // add index

        cindex.push(i);
      } // loop values in b


      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
        // row
        i = bindex[k]; // check value exists in workspace

        if (w[i] === mark) {
          // evaluate callback
          x[i] = cf(x[i], bvalues[k]);
        }
      } // initialize first index in j


      k = cptr[j]; // loop index in j

      while (k < cindex.length) {
        // row
        i = cindex[k]; // value @ i

        const v = x[i]; // check for zero value

        if (!eq(v, zero)) {
          // push value
          cvalues.push(v); // increment pointer

          k++;
        } else {
          // remove value @ i, do not increment pointer
          cindex.splice(k, 1);
        }
      }
    } // update cptr


    cptr[columns] = cindex.length; // return sparse matrix

    return c;
  };
});
exports.createAlgorithm08 = createAlgorithm08;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js"}],"../node_modules/mathjs/src/function/bitwise/leftShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLeftShift = void 0;

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm11");

var _algorithm3 = require("../../type/matrix/utils/algorithm13");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm01");

var _algorithm6 = require("../../type/matrix/utils/algorithm10");

var _algorithm7 = require("../../type/matrix/utils/algorithm08");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

var _bitwise = require("../../utils/bignumber/bitwise");

const name = 'leftShift';
const dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
const createLeftShift =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  zeros,
  DenseMatrix
}) => {
  const algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed
  });
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm08 = (0, _algorithm7.createAlgorithm08)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm6.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.leftShift(x, y)
   *
   * Examples:
   *
   *    math.leftShift(1, 2)               // returns number 4
   *
   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
   *
   * See also:
   *
   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
   */

  const leftShift = typed(name, {
    'number, number': _number.leftShiftNumber,
    'BigNumber, BigNumber': _bitwise.leftShiftBigNumber,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm08(x, y, leftShift, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, leftShift, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm01(x, y, leftShift, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, leftShift);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return leftShift(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return leftShift(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return leftShift(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, leftShift, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, leftShift, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, leftShift, true);
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, leftShift, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return leftShift(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return leftShift(x, matrix(y)).valueOf();
    }
  });
  return leftShift;
});
exports.createLeftShift = createLeftShift;
},{"../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm08":"../node_modules/mathjs/src/type/matrix/utils/algorithm08.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js","../../utils/bignumber/bitwise":"../node_modules/mathjs/src/utils/bignumber/bitwise.js"}],"../node_modules/mathjs/src/function/bitwise/rightArithShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRightArithShift = void 0;

var _bitwise = require("../../utils/bignumber/bitwise");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm11");

var _algorithm3 = require("../../type/matrix/utils/algorithm13");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm01");

var _algorithm6 = require("../../type/matrix/utils/algorithm10");

var _algorithm7 = require("../../type/matrix/utils/algorithm08");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'rightArithShift';
const dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
const createRightArithShift =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  zeros,
  DenseMatrix
}) => {
  const algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed
  });
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm08 = (0, _algorithm7.createAlgorithm08)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm6.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightArithShift(x, y)
   *
   * Examples:
   *
   *    math.rightArithShift(4, 2)               // returns number 1
   *
   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
   *
   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
   * @param  {number | BigNumber} y Amount of shifts
   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
   */

  const rightArithShift = typed(name, {
    'number, number': _number.rightArithShiftNumber,
    'BigNumber, BigNumber': _bitwise.rightArithShiftBigNumber,
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm08(x, y, rightArithShift, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, rightArithShift, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm01(x, y, rightArithShift, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, rightArithShift);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return rightArithShift(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, rightArithShift, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, rightArithShift, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, rightArithShift, true);
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, rightArithShift, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return rightArithShift(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return rightArithShift(x, matrix(y)).valueOf();
    }
  });
  return rightArithShift;
});
exports.createRightArithShift = createRightArithShift;
},{"../../utils/bignumber/bitwise":"../node_modules/mathjs/src/utils/bignumber/bitwise.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm08":"../node_modules/mathjs/src/type/matrix/utils/algorithm08.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/bitwise/rightLogShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRightLogShift = void 0;

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm11");

var _algorithm3 = require("../../type/matrix/utils/algorithm13");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm01");

var _algorithm6 = require("../../type/matrix/utils/algorithm10");

var _algorithm7 = require("../../type/matrix/utils/algorithm08");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'rightLogShift';
const dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];
const createRightLogShift =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  zeros,
  DenseMatrix
}) => {
  const algorithm01 = (0, _algorithm5.createAlgorithm01)({
    typed
  });
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm08 = (0, _algorithm7.createAlgorithm08)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm6.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
   * For matrices, the function is evaluated element wise.
   * For units, the function is evaluated on the best prefix base.
   *
   * Syntax:
   *
   *    math.rightLogShift(x, y)
   *
   * Examples:
   *
   *    math.rightLogShift(4, 2)               // returns number 1
   *
   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
   *
   * See also:
   *
   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
   *
   * @param  {number | Array | Matrix} x Value to be shifted
   * @param  {number} y Amount of shifts
   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
   */

  const rightLogShift = typed(name, {
    'number, number': _number.rightLogShiftNumber,
    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm08(x, y, rightLogShift, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, rightLogShift, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm01(x, y, rightLogShift, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, rightLogShift);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return rightLogShift(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm11(x, y, rightLogShift, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      // check scalar
      if (equalScalar(y, 0)) {
        return x.clone();
      }

      return algorithm14(x, y, rightLogShift, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm10(y, x, rightLogShift, true);
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      // check scalar
      if (equalScalar(x, 0)) {
        return zeros(y.size(), y.storage());
      }

      return algorithm14(y, x, rightLogShift, true);
    },
    'Array, number | BigNumber': function (x, y) {
      // use matrix implementation
      return rightLogShift(matrix(x), y).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      // use matrix implementation
      return rightLogShift(x, matrix(y)).valueOf();
    }
  });
  return rightLogShift;
});
exports.createRightLogShift = createRightLogShift;
},{"../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm08":"../node_modules/mathjs/src/type/matrix/utils/algorithm08.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/logical/and.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnd = void 0;

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm11");

var _algorithm3 = require("../../type/matrix/utils/algorithm13");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm06");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'and';
const dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];
const createAnd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  zeros,
  not
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm06 = (0, _algorithm5.createAlgorithm06)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm2.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm13 = (0, _algorithm3.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.and(x, y)
   *
   * Examples:
   *
   *    math.and(2, 4)   // returns true
   *
   *    a = [2, 0, 0]
   *    b = [3, 7, 0]
   *    c = 0
   *
   *    math.and(a, b)   // returns [true, false, false]
   *    math.and(a, c)   // returns [false, false, false]
   *
   * See also:
   *
   *    not, or, xor
   *
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
   * @return {boolean | Array | Matrix}
   *            Returns true when both inputs are defined with a nonzero/nonempty value.
   */

  const and = typed(name, {
    'number, number': _number.andNumber,
    'Complex, Complex': function (x, y) {
      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
    },
    'BigNumber, BigNumber': function (x, y) {
      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
    },
    'Unit, Unit': function (x, y) {
      return and(x.value || 0, y.value || 0);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm06(x, y, and, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm02(y, x, and, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm02(x, y, and, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, and);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return and(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return and(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return and(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(x, y, and, false);
    },
    'DenseMatrix, any': function (x, y) {
      // check scalar
      if (not(y)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(x, y, and, false);
    },
    'any, SparseMatrix': function (x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm11(y, x, and, true);
    },
    'any, DenseMatrix': function (x, y) {
      // check scalar
      if (not(x)) {
        // return zero matrix
        return zeros(x.size(), x.storage());
      }

      return algorithm14(y, x, and, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return and(matrix(x), y).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return and(x, matrix(y)).valueOf();
    }
  });
  return and;
});
exports.createAnd = createAnd;
},{"../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm06":"../node_modules/mathjs/src/type/matrix/utils/algorithm06.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/relational/compare.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCompareNumber = exports.createCompare = void 0;

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm12");

var _algorithm3 = require("../../type/matrix/utils/algorithm14");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm05");

const name = 'compare';
const dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];
const createCompare =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  equalScalar,
  matrix,
  BigNumber,
  Fraction,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm05 = (0, _algorithm5.createAlgorithm05)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm2.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm3.createAlgorithm14)({
    typed
  });
  /**
   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * x and y are considered equal when the relative difference between x and y
   * is smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.compare(x, y)
   *
   * Examples:
   *
   *    math.compare(6, 1)           // returns 1
   *    math.compare(2, 3)           // returns -1
   *    math.compare(7, 7)           // returns 0
   *    math.compare('10', '2')      // returns 1
   *    math.compare('1000', '1e3')  // returns 0
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compare(a, b)           // returns 1
   *
   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
   *
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
   */

  const compare = typed(name, {
    'boolean, boolean': function (x, y) {
      return x === y ? 0 : x > y ? 1 : -1;
    },
    'number, number': function (x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    },
    'BigNumber, BigNumber': function (x, y) {
      return (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));
    },
    'Fraction, Fraction': function (x, y) {
      return new Fraction(x.compare(y));
    },
    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return compare(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm05(x, y, compare);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, compare, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, compare, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, compare);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return compare(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return compare(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return compare(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, compare, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, compare, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, compare, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, compare, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, compare, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, compare, true).valueOf();
    }
  });
  return compare;
});
exports.createCompare = createCompare;
const createCompareNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed', 'config'], ({
  typed,
  config
}) => {
  return typed(name, {
    'number, number': function (x, y) {
      return (0, _number.nearlyEqual)(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
    }
  });
});
exports.createCompareNumber = createCompareNumber;
},{"../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm05":"../node_modules/mathjs/src/type/matrix/utils/algorithm05.js"}],"../node_modules/javascript-natural-sort/naturalSort.js":[function(require,module,exports) {
/*
 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
 */
/*jshint unused:false */
module.exports = function naturalSort (a, b) {
	"use strict";
	var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
		sre = /(^[ ]*|[ ]*$)/g,
		dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
		hre = /^0x[0-9a-f]+$/i,
		ore = /^0/,
		i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
		// convert all to strings strip whitespace
		x = i(a).replace(sre, '') || '',
		y = i(b).replace(sre, '') || '',
		// chunk/tokenize
		xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
		// numeric, hex or date detection
		xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
		yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
		oFxNcL, oFyNcL;
	// first try and sort Hex codes or Dates
	if (yD) {
		if ( xD < yD ) { return -1; }
		else if ( xD > yD ) { return 1; }
	}
	// natural sorting through split numeric strings and default strings
	for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
		// find floats not starting with '0', string or 0 if not defined (Clint Priest)
		oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
		oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
		// handle numeric vs string comparison - number < string - (Kyle Adams)
		if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
		// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
		else if (typeof oFxNcL !== typeof oFyNcL) {
			oFxNcL += '';
			oFyNcL += '';
		}
		if (oFxNcL < oFyNcL) { return -1; }
		if (oFxNcL > oFyNcL) { return 1; }
	}
	return 0;
};

},{}],"../node_modules/mathjs/src/function/relational/compareNatural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCompareNatural = void 0;

var _javascriptNaturalSort = _interopRequireDefault(require("javascript-natural-sort"));

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const name = 'compareNatural';
const dependencies = ['typed', 'compare'];
const createCompareNatural =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  compare
}) => {
  const compareBooleans = compare.signatures['boolean,boolean'];
  /**
   * Compare two values of any type in a deterministic, natural way.
   *
   * For numeric values, the function works the same as `math.compare`.
   * For types of values that can't be compared mathematically,
   * the function compares in a natural way.
   *
   * For numeric values, x and y are considered equal when the relative
   * difference between x and y is smaller than the configured epsilon.
   * The function cannot be used to compare values smaller than
   * approximately 2.22e-16.
   *
   * For Complex numbers, first the real parts are compared. If equal,
   * the imaginary parts are compared.
   *
   * Strings are compared with a natural sorting algorithm, which
   * orders strings in a "logic" way following some heuristics.
   * This differs from the function `compare`, which converts the string
   * into a numeric value and compares that. The function `compareText`
   * on the other hand compares text lexically.
   *
   * Arrays and Matrices are compared value by value until there is an
   * unequal pair of values encountered. Objects are compared by sorted
   * keys until the keys or their values are unequal.
   *
   * Syntax:
   *
   *    math.compareNatural(x, y)
   *
   * Examples:
   *
   *    math.compareNatural(6, 1)              // returns 1
   *    math.compareNatural(2, 3)              // returns -1
   *    math.compareNatural(7, 7)              // returns 0
   *
   *    math.compareNatural('10', '2')         // returns 1
   *    math.compareText('10', '2')            // returns -1
   *    math.compare('10', '2')                // returns 1
   *
   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
   *    math.compare('Answer: 10', 'Answer: 2')
   *        // Error: Cannot convert "Answer: 10" to a number
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('40 mm')
   *    math.compareNatural(a, b)              // returns 1
   *
   *    const c = math.complex('2 + 3i')
   *    const d = math.complex('2 + 4i')
   *    math.compareNatural(c, d)              // returns -1
   *
   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
   *    math.compareNatural([1, 2], [1, 2])       // returns 0
   *
   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
   *
   * See also:
   *
   *    compare, compareText
   *
   * @param  {*} x First value to compare
   * @param  {*} y Second value to compare
   * @return {number} Returns the result of the comparison:
   *                  1 when x > y, -1 when x < y, and 0 when x == y.
   */

  const compareNatural = typed(name, {
    'any, any': function (x, y) {
      const typeX = (0, _is.typeOf)(x);
      const typeY = (0, _is.typeOf)(y);
      let c; // numeric types

      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
        c = compare(x, y);

        if (c.toString() !== '0') {
          // c can be number, BigNumber, or Fraction
          return c > 0 ? 1 : -1; // return a number
        } else {
          return (0, _javascriptNaturalSort.default)(typeX, typeY);
        }
      } // matrix types


      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
        c = compareMatricesAndArrays(x, y);

        if (c !== 0) {
          return c;
        } else {
          return (0, _javascriptNaturalSort.default)(typeX, typeY);
        }
      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


      if (typeX !== typeY) {
        return (0, _javascriptNaturalSort.default)(typeX, typeY);
      }

      if (typeX === 'Complex') {
        return compareComplexNumbers(x, y);
      }

      if (typeX === 'Unit') {
        if (x.equalBase(y)) {
          return compareNatural(x.value, y.value);
        } // compare by units


        return compareArrays(x.formatUnits(), y.formatUnits());
      }

      if (typeX === 'boolean') {
        return compareBooleans(x, y);
      }

      if (typeX === 'string') {
        return (0, _javascriptNaturalSort.default)(x, y);
      }

      if (typeX === 'Object') {
        return compareObjects(x, y);
      }

      if (typeX === 'null') {
        return 0;
      }

      if (typeX === 'undefined') {
        return 0;
      } // this should not occur...


      throw new TypeError('Unsupported type of value "' + typeX + '"');
    }
  });
  /**
   * Compare mixed matrix/array types, by converting to same-shaped array.
   * This comparator is non-deterministic regarding input types.
   * @param {Array | SparseMatrix | DenseMatrix | *} x
   * @param {Array | SparseMatrix | DenseMatrix | *} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */

  function compareMatricesAndArrays(x, y) {
    if ((0, _is.isSparseMatrix)(x) && (0, _is.isSparseMatrix)(y)) {
      return compareArrays(x.toJSON().values, y.toJSON().values);
    }

    if ((0, _is.isSparseMatrix)(x)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x.toArray(), y);
    }

    if ((0, _is.isSparseMatrix)(y)) {
      // note: convert to array is expensive
      return compareMatricesAndArrays(x, y.toArray());
    } // convert DenseArray into Array


    if ((0, _is.isDenseMatrix)(x)) {
      return compareMatricesAndArrays(x.toJSON().data, y);
    }

    if ((0, _is.isDenseMatrix)(y)) {
      return compareMatricesAndArrays(x, y.toJSON().data);
    } // convert scalars to array


    if (!Array.isArray(x)) {
      return compareMatricesAndArrays([x], y);
    }

    if (!Array.isArray(y)) {
      return compareMatricesAndArrays(x, [y]);
    }

    return compareArrays(x, y);
  }
  /**
   * Compare two Arrays
   *
   * - First, compares value by value
   * - Next, if all corresponding values are equal,
   *   look at the length: longest array will be considered largest
   *
   * @param {Array} x
   * @param {Array} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareArrays(x, y) {
    // compare each value
    for (let i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
      const v = compareNatural(x[i], y[i]);

      if (v !== 0) {
        return v;
      }
    } // compare the size of the arrays


    if (x.length > y.length) {
      return 1;
    }

    if (x.length < y.length) {
      return -1;
    } // both Arrays have equal size and content


    return 0;
  }
  /**
   * Compare two objects
   *
   * - First, compare sorted property names
   * - Next, compare the property values
   *
   * @param {Object} x
   * @param {Object} y
   * @returns {number} Returns the comparison result: -1, 0, or 1
   */


  function compareObjects(x, y) {
    const keysX = Object.keys(x);
    const keysY = Object.keys(y); // compare keys

    keysX.sort(_javascriptNaturalSort.default);
    keysY.sort(_javascriptNaturalSort.default);
    const c = compareArrays(keysX, keysY);

    if (c !== 0) {
      return c;
    } // compare values


    for (let i = 0; i < keysX.length; i++) {
      const v = compareNatural(x[keysX[i]], y[keysY[i]]);

      if (v !== 0) {
        return v;
      }
    }

    return 0;
  }

  return compareNatural;
});
/**
 * Compare two complex numbers, `x` and `y`:
 *
 * - First, compare the real values of `x` and `y`
 * - If equal, compare the imaginary values of `x` and `y`
 *
 * @params {Complex} x
 * @params {Complex} y
 * @returns {number} Returns the comparison result: -1, 0, or 1
 */

exports.createCompareNatural = createCompareNatural;

function compareComplexNumbers(x, y) {
  if (x.re > y.re) {
    return 1;
  }

  if (x.re < y.re) {
    return -1;
  }

  if (x.im > y.im) {
    return 1;
  }

  if (x.im < y.im) {
    return -1;
  }

  return 0;
}
},{"javascript-natural-sort":"../node_modules/javascript-natural-sort/naturalSort.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/relational/compareText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCompareTextNumber = exports.createCompareText = void 0;

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm14");

var _algorithm2 = require("../../type/matrix/utils/algorithm13");

const name = 'compareText';
const dependencies = ['typed', 'matrix'];
const createCompareText =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  const algorithm13 = (0, _algorithm2.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm.createAlgorithm14)({
    typed
  });
  /**
   * Compare two strings lexically. Comparison is case sensitive.
   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.compareText(x, y)
   *
   * Examples:
   *
   *    math.compareText('B', 'A')     // returns 1
   *    math.compareText('2', '10')    // returns 1
   *    math.compare('2', '10')        // returns -1
   *    math.compareNatural('2', '10') // returns -1
   *
   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
   *
   * See also:
   *
   *    equal, equalText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
   */

  const compareText = typed(name, {
    'any, any': _string.compareText,
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, _string.compareText);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return compareText(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return compareText(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return compareText(x, matrix(y));
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, _string.compareText, false);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, _string.compareText, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _string.compareText, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _string.compareText, true).valueOf();
    }
  });
  return compareText;
});
exports.createCompareText = createCompareText;
const createCompareTextNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed'], ({
  typed
}) => {
  return typed(name, {
    'any, any': _string.compareText
  });
});
exports.createCompareTextNumber = createCompareTextNumber;
},{"../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js"}],"../node_modules/mathjs/src/function/relational/equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEqualNumber = exports.createEqual = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

const name = 'equal';
const dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];
const createEqual =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Test whether two values are equal.
   *
   * The function tests whether the relative difference between x and y is
   * smaller than the configured epsilon. The function cannot be used to
   * compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is only
   * equal to `null` and nothing else, and `undefined` is only equal to
   * `undefined` and nothing else. Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.equal(x, y)
   *
   * Examples:
   *
   *    math.equal(2 + 2, 3)         // returns false
   *    math.equal(2 + 2, 4)         // returns true
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.equal(a, b)             // returns true
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.equal(c, d)             // returns [true, false, true]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.equal("1000", "1e3")    // returns true
   *    math.equal(0, null)          // returns false
   *
   * See also:
   *
   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
   *
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
   */

  const equal = typed(name, {
    'any, any': function (x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, equalScalar);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, equalScalar, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, equalScalar, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, equalScalar);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return equal(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return equal(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return equal(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, equalScalar, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, equalScalar, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, equalScalar, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, equalScalar, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
    }
  });
  return equal;
});
exports.createEqual = createEqual;
const createEqualNumber = (0, _factory.factory)(name, ['typed', 'equalScalar'], ({
  typed,
  equalScalar
}) => {
  return typed(name, {
    'any, any': function (x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y === null;
      }

      if (y === null) {
        return x === null;
      }

      if (x === undefined) {
        return y === undefined;
      }

      if (y === undefined) {
        return x === undefined;
      }

      return equalScalar(x, y);
    }
  });
});
exports.createEqualNumber = createEqualNumber;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/relational/equalText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEqualText = void 0;

var _factory = require("../../utils/factory");

const name = 'equalText';
const dependencies = ['typed', 'compareText', 'isZero'];
const createEqualText =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  compareText,
  isZero
}) => {
  /**
   * Check equality of two strings. Comparison is case sensitive.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.equalText(x, y)
   *
   * Examples:
   *
   *    math.equalText('Hello', 'Hello')     // returns true
   *    math.equalText('a', 'A')             // returns false
   *    math.equal('2e3', '2000')            // returns true
   *    math.equalText('2e3', '2000')        // returns false
   *
   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
   *
   * See also:
   *
   *    equal, compareText, compare, compareNatural
   *
   * @param  {string | Array | DenseMatrix} x First string to compare
   * @param  {string | Array | DenseMatrix} y Second string to compare
   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
   */
  return typed(name, {
    'any, any': function (x, y) {
      return isZero(compareText(x, y));
    }
  });
});
exports.createEqualText = createEqualText;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/relational/smaller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSmallerNumber = exports.createSmaller = void 0;

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

const name = 'smaller';
const dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
const createSmaller =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is smaller than y.
   *
   * The function returns true when x is smaller than y and the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smaller(x, y)
   *
   * Examples:
   *
   *    math.smaller(2, 3)            // returns true
   *    math.smaller(5, 2 * 2)        // returns false
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.smaller(a, b)            // returns true
   *
   * See also:
   *
   *    equal, unequal, smallerEq, smaller, smallerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  const smaller = typed(name, {
    'boolean, boolean': function (x, y) {
      return x < y;
    },
    'number, number': function (x, y) {
      return x < y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.lt(y) && !(0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function (x, y) {
      return x.compare(y) === -1;
    },
    'Complex, Complex': function (x, y) {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return smaller(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, smaller);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, smaller, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, smaller, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, smaller);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return smaller(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return smaller(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return smaller(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, smaller, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, smaller, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, smaller, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, smaller, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smaller, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smaller, true).valueOf();
    }
  });
  return smaller;
});
exports.createSmaller = createSmaller;
const createSmallerNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed', 'config'], ({
  typed,
  config
}) => {
  return typed(name, {
    'number, number': function (x, y) {
      return x < y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createSmallerNumber = createSmallerNumber;
},{"../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js"}],"../node_modules/mathjs/src/function/relational/smallerEq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSmallerEqNumber = exports.createSmallerEq = void 0;

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

const name = 'smallerEq';
const dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
const createSmallerEq =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is smaller or equal to y.
   *
   * The function returns true when x is smaller than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.smallerEq(x, y)
   *
   * Examples:
   *
   *    math.smaller(1 + 2, 3)        // returns false
   *    math.smallerEq(1 + 2, 3)      // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
   */

  const smallerEq = typed(name, {
    'boolean, boolean': function (x, y) {
      return x <= y;
    },
    'number, number': function (x, y) {
      return x <= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.lte(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function (x, y) {
      return x.compare(y) !== 1;
    },
    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return smallerEq(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, smallerEq);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, smallerEq, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, smallerEq, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, smallerEq);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return smallerEq(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return smallerEq(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return smallerEq(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, smallerEq, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, smallerEq, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, smallerEq, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, smallerEq, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, smallerEq, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, smallerEq, true).valueOf();
    }
  });
  return smallerEq;
});
exports.createSmallerEq = createSmallerEq;
const createSmallerEqNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed', 'config'], ({
  typed,
  config
}) => {
  return typed(name, {
    'number, number': function (x, y) {
      return x <= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createSmallerEqNumber = createSmallerEqNumber;
},{"../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js"}],"../node_modules/mathjs/src/function/relational/larger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLargerNumber = exports.createLarger = void 0;

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

const name = 'larger';
const dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
const createLarger =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is larger than y.
   *
   * The function returns true when x is larger than y and the relative
   * difference between x and y is larger than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.larger(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 3)             // returns false
   *    math.larger(5, 2 + 2)         // returns true
   *
   *    const a = math.unit('5 cm')
   *    const b = math.unit('2 inch')
   *    math.larger(a, b)             // returns false
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
   */

  const larger = typed(name, {
    'boolean, boolean': function (x, y) {
      return x > y;
    },
    'number, number': function (x, y) {
      return x > y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.gt(y) && !(0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function (x, y) {
      return x.compare(y) === 1;
    },
    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return larger(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, larger);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, larger, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, larger, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, larger);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return larger(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return larger(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return larger(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, larger, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, larger, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, larger, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, larger, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, larger, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, larger, true).valueOf();
    }
  });
  return larger;
});
exports.createLarger = createLarger;
const createLargerNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed', 'config'], ({
  typed,
  config
}) => {
  return typed(name, {
    'number, number': function (x, y) {
      return x > y && !(0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createLargerNumber = createLargerNumber;
},{"../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js"}],"../node_modules/mathjs/src/function/relational/largerEq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLargerEqNumber = exports.createLargerEq = void 0;

var _nearlyEqual = require("../../utils/bignumber/nearlyEqual");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

const name = 'largerEq';
const dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];
const createLargerEq =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Test whether value x is larger or equal to y.
   *
   * The function returns true when x is larger than y or the relative
   * difference between x and y is smaller than the configured epsilon. The
   * function cannot be used to compare values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.largerEq(x, y)
   *
   * Examples:
   *
   *    math.larger(2, 1 + 1)         // returns false
   *    math.largerEq(2, 1 + 1)       // returns true
   *
   * See also:
   *
   *    equal, unequal, smaller, smallerEq, larger, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
   */

  const largerEq = typed(name, {
    'boolean, boolean': function (x, y) {
      return x >= y;
    },
    'number, number': function (x, y) {
      return x >= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    },
    'BigNumber, BigNumber': function (x, y) {
      return x.gte(y) || (0, _nearlyEqual.nearlyEqual)(x, y, config.epsilon);
    },
    'Fraction, Fraction': function (x, y) {
      return x.compare(y) !== -1;
    },
    'Complex, Complex': function () {
      throw new TypeError('No ordering relation is defined for complex numbers');
    },
    'Unit, Unit': function (x, y) {
      if (!x.equalBase(y)) {
        throw new Error('Cannot compare units with different base');
      }

      return largerEq(x.value, y.value);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, largerEq);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, largerEq, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, largerEq, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, largerEq);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return largerEq(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return largerEq(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return largerEq(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, largerEq, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, largerEq, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, largerEq, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, largerEq, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, largerEq, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, largerEq, true).valueOf();
    }
  });
  return largerEq;
});
exports.createLargerEq = createLargerEq;
const createLargerEqNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed', 'config'], ({
  typed,
  config
}) => {
  return typed(name, {
    'number, number': function (x, y) {
      return x >= y || (0, _number.nearlyEqual)(x, y, config.epsilon);
    }
  });
});
exports.createLargerEqNumber = createLargerEqNumber;
},{"../../utils/bignumber/nearlyEqual":"../node_modules/mathjs/src/utils/bignumber/nearlyEqual.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js"}],"../node_modules/mathjs/src/function/relational/deepEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeepEqual = void 0;

var _factory = require("../../utils/factory");

const name = 'deepEqual';
const dependencies = ['typed', 'equal'];
const createDeepEqual =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  equal
}) => {
  /**
   * Test element wise whether two matrices are equal.
   * The function accepts both matrices and scalar values.
   *
   * Strings are compared by their numerical value.
   *
   * Syntax:
   *
   *    math.deepEqual(x, y)
   *
   * Examples:
   *
   *    math.deepEqual(2, 4)   // returns false
   *
   *    a = [2, 5, 1]
   *    b = [2, 7, 1]
   *
   *    math.deepEqual(a, b)   // returns false
   *    math.equal(a, b)       // returns [true, false, true]
   *
   * See also:
   *
   *    equal, unequal
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
   *            Returns true when the input matrices have the same size and each of their elements is equal.
   */
  return typed(name, {
    'any, any': function (x, y) {
      return _deepEqual(x.valueOf(), y.valueOf());
    }
  });
  /**
   * Test whether two arrays have the same size and all elements are equal
   * @param {Array | *} x
   * @param {Array | *} y
   * @return {boolean} Returns true if both arrays are deep equal
   */

  function _deepEqual(x, y) {
    if (Array.isArray(x)) {
      if (Array.isArray(y)) {
        const len = x.length;

        if (len !== y.length) {
          return false;
        }

        for (let i = 0; i < len; i++) {
          if (!_deepEqual(x[i], y[i])) {
            return false;
          }
        }

        return true;
      } else {
        return false;
      }
    } else {
      if (Array.isArray(y)) {
        return false;
      } else {
        return equal(x, y);
      }
    }
  }
});
exports.createDeepEqual = createDeepEqual;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/relational/unequal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnequalNumber = exports.createUnequal = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm03");

var _algorithm2 = require("../../type/matrix/utils/algorithm07");

var _algorithm3 = require("../../type/matrix/utils/algorithm12");

var _algorithm4 = require("../../type/matrix/utils/algorithm14");

var _algorithm5 = require("../../type/matrix/utils/algorithm13");

const name = 'unequal';
const dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];
const createUnequal =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  equalScalar,
  matrix,
  DenseMatrix
}) => {
  const algorithm03 = (0, _algorithm.createAlgorithm03)({
    typed
  });
  const algorithm07 = (0, _algorithm2.createAlgorithm07)({
    typed,
    DenseMatrix
  });
  const algorithm12 = (0, _algorithm3.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm5.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm4.createAlgorithm14)({
    typed
  });
  /**
   * Test whether two values are unequal.
   *
   * The function tests whether the relative difference between x and y is
   * larger than the configured epsilon. The function cannot be used to compare
   * values smaller than approximately 2.22e-16.
   *
   * For matrices, the function is evaluated element wise.
   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
   * Strings are compared by their numerical value.
   *
   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
   * with everything except `null`, and `undefined` is unequal with everything
   * except `undefined`.
   *
   * Syntax:
   *
   *    math.unequal(x, y)
   *
   * Examples:
   *
   *    math.unequal(2 + 2, 3)       // returns true
   *    math.unequal(2 + 2, 4)       // returns false
   *
   *    const a = math.unit('50 cm')
   *    const b = math.unit('5 m')
   *    math.unequal(a, b)           // returns false
   *
   *    const c = [2, 5, 1]
   *    const d = [2, 7, 1]
   *
   *    math.unequal(c, d)           // returns [false, true, false]
   *    math.deepEqual(c, d)         // returns false
   *
   *    math.unequal(0, null)        // returns true
   * See also:
   *
   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
   *
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
   */

  const unequal = typed('unequal', {
    'any, any': function (x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return _unequal(x, y);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm07(x, y, _unequal);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm03(y, x, _unequal, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, _unequal, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, _unequal);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return unequal(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return unequal(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return unequal(x, matrix(y));
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm12(x, y, _unequal, false);
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, _unequal, false);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm12(y, x, _unequal, true);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, _unequal, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, _unequal, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, _unequal, true).valueOf();
    }
  });

  function _unequal(x, y) {
    return !equalScalar(x, y);
  }

  return unequal;
});
exports.createUnequal = createUnequal;
const createUnequalNumber = (0, _factory.factory)(name, ['typed', 'equalScalar'], ({
  typed,
  equalScalar
}) => {
  return typed(name, {
    'any, any': function (x, y) {
      // strict equality for null and undefined?
      if (x === null) {
        return y !== null;
      }

      if (y === null) {
        return x !== null;
      }

      if (x === undefined) {
        return y !== undefined;
      }

      if (y === undefined) {
        return x !== undefined;
      }

      return !equalScalar(x, y);
    }
  });
});
exports.createUnequalNumber = createUnequalNumber;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm07":"../node_modules/mathjs/src/type/matrix/utils/algorithm07.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js"}],"../node_modules/mathjs/src/function/matrix/partitionSelect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPartitionSelect = void 0;

var _is = require("../../utils/is");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'partitionSelect';
const dependencies = ['typed', 'isNumeric', 'isNaN', 'compare'];
const createPartitionSelect =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  isNumeric,
  isNaN,
  compare
}) => {
  const asc = compare;

  const desc = (a, b) => -compare(a, b);
  /**
   * Partition-based selection of an array or 1D matrix.
   * Will find the kth smallest value, and mutates the input array.
   * Uses Quickselect.
   *
   * Syntax:
   *
   *    math.partitionSelect(x, k)
   *    math.partitionSelect(x, k, compare)
   *
   * Examples:
   *
   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
   *
   * See also:
   *
   *    sort
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Number} k            The kth smallest value to be retrieved zero-based index
   * @param {Function | 'asc' | 'desc'} [compare='asc']
   *        An optional comparator function. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {*} Returns the kth lowest value.
   */


  return typed(name, {
    'Array | Matrix, number': function (x, k) {
      return _partitionSelect(x, k, asc);
    },
    'Array | Matrix, number, string': function (x, k, compare) {
      if (compare === 'asc') {
        return _partitionSelect(x, k, asc);
      } else if (compare === 'desc') {
        return _partitionSelect(x, k, desc);
      } else {
        throw new Error('Compare string must be "asc" or "desc"');
      }
    },
    'Array | Matrix, number, function': _partitionSelect
  });

  function _partitionSelect(x, k, compare) {
    if (!(0, _number.isInteger)(k) || k < 0) {
      throw new Error('k must be a non-negative integer');
    }

    if ((0, _is.isMatrix)(x)) {
      const size = x.size();

      if (size.length > 1) {
        throw new Error('Only one dimensional matrices supported');
      }

      return quickSelect(x.valueOf(), k, compare);
    }

    if (Array.isArray(x)) {
      return quickSelect(x, k, compare);
    }
  }
  /**
   * Quickselect algorithm.
   * Code adapted from:
   * https://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
   *
   * @param {Array} arr
   * @param {Number} k
   * @param {Function} compare
   * @private
   */


  function quickSelect(arr, k, compare) {
    if (k >= arr.length) {
      throw new Error('k out of bounds');
    } // check for NaN values since these can cause an infinite while loop


    for (let i = 0; i < arr.length; i++) {
      if (isNumeric(arr[i]) && isNaN(arr[i])) {
        return arr[i]; // return NaN
      }
    }

    let from = 0;
    let to = arr.length - 1; // if from == to we reached the kth element

    while (from < to) {
      let r = from;
      let w = to;
      const pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

      while (r < w) {
        // arr[r] >= pivot
        if (compare(arr[r], pivot) >= 0) {
          // put the large values at the end
          const tmp = arr[w];
          arr[w] = arr[r];
          arr[r] = tmp;
          --w;
        } else {
          // the value is smaller than the pivot, skip
          ++r;
        }
      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


      if (compare(arr[r], pivot) > 0) {
        --r;
      } // the r pointer is on the end of the first k elements


      if (k <= r) {
        to = r;
      } else {
        from = r + 1;
      }
    }

    return arr[k];
  }
});
exports.createPartitionSelect = createPartitionSelect;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSort = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'sort';
const dependencies = ['typed', 'matrix', 'compare', 'compareNatural'];
const createSort =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  compare,
  compareNatural
}) => {
  const compareAsc = compare;

  const compareDesc = (a, b) => -compare(a, b);
  /**
   * Sort the items in a matrix.
   *
   * Syntax:
   *
   *    math.sort(x)
   *    math.sort(x, compare)
   *
   * Examples:
   *
   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
   *    // returns ['A', 'B', 'C', 'D']
   *
   *    function sortByLength (a, b) {
   *      return a.length - b.length
   *    }
   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
   *    // returns ['Tom', 'Sara', 'Langdon']
   *
   * See also:
   *
   *    filter, forEach, map, compare, compareNatural
   *
   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
   *        An optional _comparator function or name. The function is called as
   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
   *        and 0 when a == b.
   * @return {Matrix | Array} Returns the sorted matrix.
   */


  return typed(name, {
    'Array': function (x) {
      _arrayIsVector(x);

      return x.sort(compareAsc);
    },
    'Matrix': function (x) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(compareAsc), x.storage());
    },
    'Array, function': function (x, _comparator) {
      _arrayIsVector(x);

      return x.sort(_comparator);
    },
    'Matrix, function': function (x, _comparator) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator), x.storage());
    },
    'Array, string': function (x, order) {
      _arrayIsVector(x);

      return x.sort(_comparator(order));
    },
    'Matrix, string': function (x, order) {
      _matrixIsVector(x);

      return matrix(x.toArray().sort(_comparator(order)), x.storage());
    }
  });
  /**
   * Get the comparator for given order ('asc', 'desc', 'natural')
   * @param {'asc' | 'desc' | 'natural'} order
   * @return {Function} Returns a _comparator function
   */

  function _comparator(order) {
    if (order === 'asc') {
      return compareAsc;
    } else if (order === 'desc') {
      return compareDesc;
    } else if (order === 'natural') {
      return compareNatural;
    } else {
      throw new Error('String "asc", "desc", or "natural" expected');
    }
  }
  /**
   * Validate whether an array is one dimensional
   * Throws an error when this is not the case
   * @param {Array} array
   * @private
   */


  function _arrayIsVector(array) {
    if ((0, _array.arraySize)(array).length !== 1) {
      throw new Error('One dimensional array expected');
    }
  }
  /**
   * Validate whether a matrix is one dimensional
   * Throws an error when this is not the case
   * @param {Matrix} matrix
   * @private
   */


  function _matrixIsVector(matrix) {
    if (matrix.size().length !== 1) {
      throw new Error('One dimensional matrix expected');
    }
  }
});
exports.createSort = createSort;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/statistics/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMax = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

const name = 'max';
const dependencies = ['typed', 'larger'];
const createMax =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  larger
}) => {
  /**
   * Compute the maximum value of a matrix or a  list with values.
   * In case of a multi dimensional array, the maximum of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.max(a, b, c, ...)
   *     math.max(A)
   *     math.max(A, dim)
   *
   * Examples:
   *
   *     math.max(2, 1, 4, 3)                  // returns 4
   *     math.max([2, 1, 4, 3])                // returns 4
   *
   *     // maximum over a specified dimension (zero-based)
   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, min, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The maximum value
   */
  return typed(name, {
    // max([a, b, c, d, ...])
    'Array | Matrix': _max,
    // max([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      return (0, _collection.reduce)(array, dim.valueOf(), _largest);
    },
    // max(a, b, c, d, ...)
    '...': function (args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function max');
      }

      return _max(args);
    }
  });
  /**
   * Return the largest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is largest, or y when y is largest
   * @private
   */

  function _largest(x, y) {
    try {
      return larger(x, y) ? x : y;
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', y);
    }
  }
  /**
   * Recursively calculate the maximum value in an n-dimensional array
   * @param {Array} array
   * @return {number} max
   * @private
   */


  function _max(array) {
    let res;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          res = NaN;
        } else if (res === undefined || larger(value, res)) {
          res = value;
        }
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'max', value);
      }
    });

    if (res === undefined) {
      throw new Error('Cannot calculate max of an empty array');
    }

    return res;
  }
});
exports.createMax = createMax;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js"}],"../node_modules/mathjs/src/function/statistics/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMin = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

const name = 'min';
const dependencies = ['typed', 'smaller'];
const createMin =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  smaller
}) => {
  /**
   * Compute the minimum value of a matrix or a  list of values.
   * In case of a multi dimensional array, the minimum of the flattened array
   * will be calculated. When `dim` is provided, the minimum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.min(a, b, c, ...)
   *     math.min(A)
   *     math.min(A, dim)
   *
   * Examples:
   *
   *     math.min(2, 1, 4, 3)                  // returns 1
   *     math.min([2, 1, 4, 3])                // returns 1
   *
   *     // minimum over a specified dimension (zero-based)
   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
   *
   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
   *
   * See also:
   *
   *    mean, median, max, prod, std, sum, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The minimum value
   */
  return typed(name, {
    // min([a, b, c, d, ...])
    'Array | Matrix': _min,
    // min([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      return (0, _collection.reduce)(array, dim.valueOf(), _smallest);
    },
    // min(a, b, c, d, ...)
    '...': function (args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function min');
      }

      return _min(args);
    }
  });
  /**
   * Return the smallest of two values
   * @param {*} x
   * @param {*} y
   * @returns {*} Returns x when x is smallest, or y when y is smallest
   * @private
   */

  function _smallest(x, y) {
    try {
      return smaller(x, y) ? x : y;
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'min', y);
    }
  }
  /**
   * Recursively calculate the minimum value in an n-dimensional array
   * @param {Array} array
   * @return {number} min
   * @private
   */


  function _min(array) {
    let min;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        if (isNaN(value) && typeof value === 'number') {
          min = NaN;
        } else if (min === undefined || smaller(value, min)) {
          min = value;
        }
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'min', value);
      }
    });

    if (min === undefined) {
      throw new Error('Cannot calculate min of an empty array');
    }

    return min;
  }
});
exports.createMin = createMin;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js"}],"../node_modules/mathjs/src/type/matrix/ImmutableDenseMatrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createImmutableDenseMatrixClass = void 0;

var _is = require("../../utils/is");

var _object = require("../../utils/object");

var _factory = require("../../utils/factory");

const name = 'ImmutableDenseMatrix';
const dependencies = ['smaller', 'DenseMatrix'];
const createImmutableDenseMatrixClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  smaller,
  DenseMatrix
}) => {
  function ImmutableDenseMatrix(data, datatype) {
    if (!(this instanceof ImmutableDenseMatrix)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (datatype && !(0, _is.isString)(datatype)) {
      throw new Error('Invalid datatype: ' + datatype);
    }

    if ((0, _is.isMatrix)(data) || (0, _is.isArray)(data)) {
      // use DenseMatrix implementation
      const matrix = new DenseMatrix(data, datatype); // internal structures

      this._data = matrix._data;
      this._size = matrix._size;
      this._datatype = matrix._datatype;
      this._min = null;
      this._max = null;
    } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {
      // initialize fields from JSON representation
      this._data = data.data;
      this._size = data.size;
      this._datatype = data.datatype;
      this._min = typeof data.min !== 'undefined' ? data.min : null;
      this._max = typeof data.max !== 'undefined' ? data.max : null;
    } else if (data) {
      // unsupported type
      throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
    } else {
      // nothing provided
      this._data = [];
      this._size = [0];
      this._datatype = datatype;
      this._min = null;
      this._max = null;
    }
  }

  ImmutableDenseMatrix.prototype = new DenseMatrix();
  /**
   * Attach type information
   */

  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
  /**
   * Get a subset of the matrix, or replace a subset of the matrix.
   *
   * Usage:
   *     const subset = matrix.subset(index)               // retrieve subset
   *     const value = matrix.subset(index, replacement)   // replace subset
   *
   * @param {Index} index
   * @param {Array | ImmutableDenseMatrix | *} [replacement]
   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be filled with zeros.
   */

  ImmutableDenseMatrix.prototype.subset = function (index) {
    switch (arguments.length) {
      case 1:
        // use base implementation
        const m = DenseMatrix.prototype.subset.call(this, index); // check result is a matrix

        if ((0, _is.isMatrix)(m)) {
          // return immutable matrix
          return new ImmutableDenseMatrix({
            data: m._data,
            size: m._size,
            datatype: m._datatype
          });
        }

        return m;
      // intentional fall through

      case 2:
      case 3:
        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

      default:
        throw new SyntaxError('Wrong number of arguments');
    }
  };
  /**
   * Replace a single element in the matrix.
   * @param {Number[]} index   Zero-based index
   * @param {*} value
   * @param {*} [defaultValue]        Default value, filled in on new entries when
   *                                  the matrix is resized. If not provided,
   *                                  new matrix elements will be left undefined.
   * @return {ImmutableDenseMatrix} self
   */


  ImmutableDenseMatrix.prototype.set = function () {
    throw new Error('Cannot invoke set on an Immutable Matrix instance');
  };
  /**
   * Resize the matrix to the given size. Returns a copy of the matrix when
   * `copy=true`, otherwise return the matrix itself (resize in place).
   *
   * @param {Number[]} size           The new size the matrix should have.
   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
   *                                  If not provided, the matrix elements will
   *                                  be filled with zeros.
   * @param {boolean} [copy]          Return a resized copy of the matrix
   *
   * @return {Matrix}                 The resized matrix
   */


  ImmutableDenseMatrix.prototype.resize = function () {
    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
  };
  /**
   * Disallows reshaping in favor of immutability.
   *
   * @throws {Error} Operation not allowed
   */


  ImmutableDenseMatrix.prototype.reshape = function () {
    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
  };
  /**
   * Create a clone of the matrix
   * @return {ImmutableDenseMatrix} clone
   */


  ImmutableDenseMatrix.prototype.clone = function () {
    return new ImmutableDenseMatrix({
      data: (0, _object.clone)(this._data),
      size: (0, _object.clone)(this._size),
      datatype: this._datatype
    });
  };
  /**
   * Get a JSON representation of the matrix
   * @returns {Object}
   */


  ImmutableDenseMatrix.prototype.toJSON = function () {
    return {
      mathjs: 'ImmutableDenseMatrix',
      data: this._data,
      size: this._size,
      datatype: this._datatype
    };
  };
  /**
   * Generate a matrix from a JSON object
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
   *                       where mathjs is optional
   * @returns {ImmutableDenseMatrix}
   */


  ImmutableDenseMatrix.fromJSON = function (json) {
    return new ImmutableDenseMatrix(json);
  };
  /**
   * Swap rows i and j in Matrix.
   *
   * @param {Number} i       Matrix row index 1
   * @param {Number} j       Matrix row index 2
   *
   * @return {Matrix}        The matrix reference
   */


  ImmutableDenseMatrix.prototype.swapRows = function () {
    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
  };
  /**
   * Calculate the minimum value in the set
   * @return {Number | undefined} min
   */


  ImmutableDenseMatrix.prototype.min = function () {
    // check min has been calculated before
    if (this._min === null) {
      // minimum
      let m = null; // compute min

      this.forEach(function (v) {
        if (m === null || smaller(v, m)) {
          m = v;
        }
      });
      this._min = m !== null ? m : undefined;
    }

    return this._min;
  };
  /**
   * Calculate the maximum value in the set
   * @return {Number | undefined} max
   */


  ImmutableDenseMatrix.prototype.max = function () {
    // check max has been calculated before
    if (this._max === null) {
      // maximum
      let m = null; // compute max

      this.forEach(function (v) {
        if (m === null || smaller(m, v)) {
          m = v;
        }
      });
      this._max = m !== null ? m : undefined;
    }

    return this._max;
  };

  return ImmutableDenseMatrix;
}, {
  isClass: true
});
exports.createImmutableDenseMatrixClass = createImmutableDenseMatrixClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/MatrixIndex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndexClass = void 0;

var _is = require("../../utils/is");

var _object = require("../../utils/object");

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

const name = 'Index';
const dependencies = ['ImmutableDenseMatrix'];
const createIndexClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  ImmutableDenseMatrix
}) => {
  /**
   * Create an index. An Index can store ranges and sets for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Usage:
   *     const index = new Index(range1, range2, matrix1, array1, ...)
   *
   * Where each parameter can be any of:
   *     A number
   *     A string (containing a name of an object property)
   *     An instance of Range
   *     An Array with the Set values
   *     A Matrix with the Set values
   *
   * The parameters start, end, and step must be integer numbers.
   *
   * @class Index
   * @Constructor Index
   * @param {...*} ranges
   */
  function Index(ranges) {
    if (!(this instanceof Index)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this._dimensions = [];
    this._isScalar = true;

    for (let i = 0, ii = arguments.length; i < ii; i++) {
      const arg = arguments[i];

      if ((0, _is.isRange)(arg)) {
        this._dimensions.push(arg);

        this._isScalar = false;
      } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {
        // create matrix
        const m = _createImmutableMatrix(arg.valueOf());

        this._dimensions.push(m); // size


        const size = m.size(); // scalar

        if (size.length !== 1 || size[0] !== 1) {
          this._isScalar = false;
        }
      } else if (typeof arg === 'number') {
        this._dimensions.push(_createImmutableMatrix([arg]));
      } else if (typeof arg === 'string') {
        // object property (arguments.count should be 1)
        this._dimensions.push(arg);
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      } // TODO: implement support for wildcard '*'

    }
  }
  /**
   * Attach type information
   */


  Index.prototype.type = 'Index';
  Index.prototype.isIndex = true;

  function _createImmutableMatrix(arg) {
    // loop array elements
    for (let i = 0, l = arg.length; i < l; i++) {
      if (typeof arg[i] !== 'number' || !(0, _number.isInteger)(arg[i])) {
        throw new TypeError('Index parameters must be positive integer numbers');
      }
    } // create matrix


    return new ImmutableDenseMatrix(arg);
  }
  /**
   * Create a clone of the index
   * @memberof Index
   * @return {Index} clone
   */


  Index.prototype.clone = function () {
    const index = new Index();
    index._dimensions = (0, _object.clone)(this._dimensions);
    index._isScalar = this._isScalar;
    return index;
  };
  /**
   * Create an index from an array with ranges/numbers
   * @memberof Index
   * @param {Array.<Array | number>} ranges
   * @return {Index} index
   * @private
   */


  Index.create = function (ranges) {
    const index = new Index();
    Index.apply(index, ranges);
    return index;
  };
  /**
   * Retrieve the size of the index, the number of elements for each dimension.
   * @memberof Index
   * @returns {number[]} size
   */


  Index.prototype.size = function () {
    const size = [];

    for (let i = 0, ii = this._dimensions.length; i < ii; i++) {
      const d = this._dimensions[i];
      size[i] = typeof d === 'string' ? 1 : d.size()[0];
    }

    return size;
  };
  /**
   * Get the maximum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} max
   */


  Index.prototype.max = function () {
    const values = [];

    for (let i = 0, ii = this._dimensions.length; i < ii; i++) {
      const range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.max();
    }

    return values;
  };
  /**
   * Get the minimum value for each of the indexes ranges.
   * @memberof Index
   * @returns {number[]} min
   */


  Index.prototype.min = function () {
    const values = [];

    for (let i = 0, ii = this._dimensions.length; i < ii; i++) {
      const range = this._dimensions[i];
      values[i] = typeof range === 'string' ? range : range.min();
    }

    return values;
  };
  /**
   * Loop over each of the ranges of the index
   * @memberof Index
   * @param {Function} callback   Called for each range with a Range as first
   *                              argument, the dimension as second, and the
   *                              index object as third.
   */


  Index.prototype.forEach = function (callback) {
    for (let i = 0, ii = this._dimensions.length; i < ii; i++) {
      callback(this._dimensions[i], i, this);
    }
  };
  /**
   * Retrieve the dimension for the given index
   * @memberof Index
   * @param {Number} dim                  Number of the dimension
   * @returns {Range | null} range
   */


  Index.prototype.dimension = function (dim) {
    return this._dimensions[dim] || null;
  };
  /**
   * Test whether this index contains an object property
   * @returns {boolean} Returns true if the index is an object property
   */


  Index.prototype.isObjectProperty = function () {
    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
  };
  /**
   * Returns the object property name when the Index holds a single object property,
   * else returns null
   * @returns {string | null}
   */


  Index.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this._dimensions[0] : null;
  };
  /**
   * Test whether this index contains only a single value.
   *
   * This is the case when the index is created with only scalar values as ranges,
   * not for ranges resolving into a single value.
   * @memberof Index
   * @return {boolean} isScalar
   */


  Index.prototype.isScalar = function () {
    return this._isScalar;
  };
  /**
   * Expand the Index into an array.
   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.toArray = function () {
    const array = [];

    for (let i = 0, ii = this._dimensions.length; i < ii; i++) {
      const dimension = this._dimensions[i];
      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
    }

    return array;
  };
  /**
   * Get the primitive value of the Index, a two dimensional array.
   * Equivalent to Index.toArray().
   * @memberof Index
   * @returns {Array} array
   */


  Index.prototype.valueOf = Index.prototype.toArray;
  /**
   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
   * @memberof Index
   * @returns {String} str
   */

  Index.prototype.toString = function () {
    const strings = [];

    for (let i = 0, ii = this._dimensions.length; i < ii; i++) {
      const dimension = this._dimensions[i];

      if (typeof dimension === 'string') {
        strings.push(JSON.stringify(dimension));
      } else {
        strings.push(dimension.toString());
      }
    }

    return '[' + strings.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the Index
   * @memberof Index
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   */


  Index.prototype.toJSON = function () {
    return {
      mathjs: 'Index',
      dimensions: this._dimensions
    };
  };
  /**
   * Instantiate an Index from a JSON object
   * @memberof Index
   * @param {Object} json A JSON object structured as:
   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
   * @return {Index}
   */


  Index.fromJSON = function (json) {
    return Index.create(json.dimensions);
  };

  return Index;
}, {
  isClass: true
});
exports.createIndexClass = createIndexClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/FibonacciHeap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFibonacciHeapClass = void 0;

var _factory = require("../../utils/factory");

const name = 'FibonacciHeap';
const dependencies = ['smaller', 'larger'];
const createFibonacciHeapClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  smaller,
  larger
}) => {
  const oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
  /**
   * Fibonacci Heap implementation, used interally for Matrix math.
   * @class FibonacciHeap
   * @constructor FibonacciHeap
   */

  function FibonacciHeap() {
    if (!(this instanceof FibonacciHeap)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // initialize fields


    this._minimum = null;
    this._size = 0;
  }
  /**
   * Attach type information
   */


  FibonacciHeap.prototype.type = 'FibonacciHeap';
  FibonacciHeap.prototype.isFibonacciHeap = true;
  /**
   * Inserts a new data element into the heap. No heap consolidation is
   * performed at this time, the new node is simply inserted into the root
   * list of this heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */

  FibonacciHeap.prototype.insert = function (key, value) {
    // create node
    const node = {
      key: key,
      value: value,
      degree: 0 // check we have a node in the minimum

    };

    if (this._minimum) {
      // minimum node
      const minimum = this._minimum; // update left & right of node

      node.left = minimum;
      node.right = minimum.right;
      minimum.right = node;
      node.right.left = node; // update minimum node in heap if needed

      if (smaller(key, minimum.key)) {
        // node has a smaller key, use it as minimum
        this._minimum = node;
      }
    } else {
      // set left & right
      node.left = node;
      node.right = node; // this is the first node

      this._minimum = node;
    } // increment number of nodes in heap


    this._size++; // return node

    return node;
  };
  /**
   * Returns the number of nodes in heap. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.size = function () {
    return this._size;
  };
  /**
   * Removes all elements from this heap.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.clear = function () {
    this._minimum = null;
    this._size = 0;
  };
  /**
   * Returns true if the heap is empty, otherwise false.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.isEmpty = function () {
    return this._size === 0;
  };
  /**
   * Extracts the node with minimum key from heap. Amortized running
   * time: O(log n).
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.extractMinimum = function () {
    // node to remove
    const node = this._minimum; // check we have a minimum

    if (node === null) {
      return node;
    } // current minimum


    let minimum = this._minimum; // get number of children

    let numberOfChildren = node.degree; // pointer to the first child

    let x = node.child; // for each child of node do...

    while (numberOfChildren > 0) {
      // store node in right side
      const tempRight = x.right; // remove x from child list

      x.left.right = x.right;
      x.right.left = x.left; // add x to root list of heap

      x.left = minimum;
      x.right = minimum.right;
      minimum.right = x;
      x.right.left = x; // set Parent[x] to null

      x.parent = null;
      x = tempRight;
      numberOfChildren--;
    } // remove node from root list of heap


    node.left.right = node.right;
    node.right.left = node.left; // update minimum

    if (node === node.right) {
      // empty
      minimum = null;
    } else {
      // update minimum
      minimum = node.right; // we need to update the pointer to the root with minimum key

      minimum = _findMinimumNode(minimum, this._size);
    } // decrement size of heap


    this._size--; // update minimum

    this._minimum = minimum; // return node

    return node;
  };
  /**
   * Removes a node from the heap given the reference to the node. The trees
   * in the heap will be consolidated, if necessary. This operation may fail
   * to remove the correct element if there are nodes with key value -Infinity.
   * Running time: O(log n) amortized.
   * @memberof FibonacciHeap
   */


  FibonacciHeap.prototype.remove = function (node) {
    // decrease key value
    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

    this.extractMinimum();
  };
  /**
   * Decreases the key value for a heap node, given the new value to take on.
   * The structure of the heap may be changed and will not be consolidated.
   * Running time: O(1) amortized.
   * @memberof FibonacciHeap
   */


  function _decreaseKey(minimum, node, key) {
    // set node key
    node.key = key; // get parent node

    const parent = node.parent;

    if (parent && smaller(node.key, parent.key)) {
      // remove node from parent
      _cut(minimum, node, parent); // remove all nodes from parent to the root parent


      _cascadingCut(minimum, parent);
    } // update minimum node if needed


    if (smaller(node.key, minimum.key)) {
      minimum = node;
    } // return minimum


    return minimum;
  }
  /**
   * The reverse of the link operation: removes node from the child list of parent.
   * This method assumes that min is non-null. Running time: O(1).
   * @memberof FibonacciHeap
   */


  function _cut(minimum, node, parent) {
    // remove node from parent children and decrement Degree[parent]
    node.left.right = node.right;
    node.right.left = node.left;
    parent.degree--; // reset y.child if necessary

    if (parent.child === node) {
      parent.child = node.right;
    } // remove child if degree is 0


    if (parent.degree === 0) {
      parent.child = null;
    } // add node to root list of heap


    node.left = minimum;
    node.right = minimum.right;
    minimum.right = node;
    node.right.left = node; // set parent[node] to null

    node.parent = null; // set mark[node] to false

    node.mark = false;
  }
  /**
   * Performs a cascading cut operation. This cuts node from its parent and then
   * does the same for its parent, and so on up the tree.
   * Running time: O(log n); O(1) excluding the recursion.
   * @memberof FibonacciHeap
   */


  function _cascadingCut(minimum, node) {
    // store parent node
    const parent = node.parent; // if there's a parent...

    if (!parent) {
      return;
    } // if node is unmarked, set it marked


    if (!node.mark) {
      node.mark = true;
    } else {
      // it's marked, cut it from parent
      _cut(minimum, node, parent); // cut its parent as well


      _cascadingCut(parent);
    }
  }
  /**
   * Make the first node a child of the second one. Running time: O(1) actual.
   * @memberof FibonacciHeap
   */


  const _linkNodes = function (node, parent) {
    // remove node from root list of heap
    node.left.right = node.right;
    node.right.left = node.left; // make node a Child of parent

    node.parent = parent;

    if (!parent.child) {
      parent.child = node;
      node.right = node;
      node.left = node;
    } else {
      node.left = parent.child;
      node.right = parent.child.right;
      parent.child.right = node;
      node.right.left = node;
    } // increase degree[parent]


    parent.degree++; // set mark[node] false

    node.mark = false;
  };

  function _findMinimumNode(minimum, size) {
    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
    const arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

    const array = new Array(arraySize); // find the number of root nodes.

    let numRoots = 0;
    let x = minimum;

    if (x) {
      numRoots++;
      x = x.right;

      while (x !== minimum) {
        numRoots++;
        x = x.right;
      }
    } // vars


    let y; // For each node in root list do...

    while (numRoots > 0) {
      // access this node's degree..
      let d = x.degree; // get next node

      const next = x.right; // check if there is a node already in array with the same degree

      while (true) {
        // get node with the same degree is any
        y = array[d];

        if (!y) {
          break;
        } // make one node with the same degree a child of the other, do this based on the key value.


        if (larger(x.key, y.key)) {
          const temp = y;
          y = x;
          x = temp;
        } // make y a child of x


        _linkNodes(y, x); // we have handled this degree, go to next one.


        array[d] = null;
        d++;
      } // save this node for later when we might encounter another of the same degree.


      array[d] = x; // move forward through list.

      x = next;
      numRoots--;
    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


    minimum = null; // loop nodes in array

    for (let i = 0; i < arraySize; i++) {
      // get current node
      y = array[i];

      if (!y) {
        continue;
      } // check if we have a linked list


      if (minimum) {
        // First remove node from root list.
        y.left.right = y.right;
        y.right.left = y.left; // now add to root list, again.

        y.left = minimum;
        y.right = minimum.right;
        minimum.right = y;
        y.right.left = y; // check if this is a new min.

        if (smaller(y.key, minimum.key)) {
          minimum = y;
        }
      } else {
        minimum = y;
      }
    }

    return minimum;
  }

  return FibonacciHeap;
}, {
  isClass: true
});
exports.createFibonacciHeapClass = createFibonacciHeapClass;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/Spa.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSpaClass = void 0;

var _factory = require("../../utils/factory");

const name = 'Spa';
const dependencies = ['addScalar', 'equalScalar', 'FibonacciHeap'];
const createSpaClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  addScalar,
  equalScalar,
  FibonacciHeap
}) => {
  /**
   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
   * of the vector elements and an ordered list of non-zero elements.
   */
  function Spa() {
    if (!(this instanceof Spa)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // allocate vector, TODO use typed arrays


    this._values = [];
    this._heap = new FibonacciHeap();
  }
  /**
   * Attach type information
   */


  Spa.prototype.type = 'Spa';
  Spa.prototype.isSpa = true;
  /**
   * Set the value for index i.
   *
   * @param {number} i                       The index
   * @param {number | BigNumber | Complex}   The value at index i
   */

  Spa.prototype.set = function (i, v) {
    // check we have a value @ i
    if (!this._values[i]) {
      // insert in heap
      const node = this._heap.insert(i, v); // set the value @ i


      this._values[i] = node;
    } else {
      // update the value @ i
      this._values[i].value = v;
    }
  };

  Spa.prototype.get = function (i) {
    const node = this._values[i];

    if (node) {
      return node.value;
    }

    return 0;
  };

  Spa.prototype.accumulate = function (i, v) {
    // node @ i
    let node = this._values[i];

    if (!node) {
      // insert in heap
      node = this._heap.insert(i, v); // initialize value

      this._values[i] = node;
    } else {
      // accumulate value
      node.value = addScalar(node.value, v);
    }
  };

  Spa.prototype.forEach = function (from, to, callback) {
    // references
    const heap = this._heap;
    const values = this._values; // nodes

    const nodes = []; // node with minimum key, save it

    let node = heap.extractMinimum();

    if (node) {
      nodes.push(node);
    } // extract nodes from heap (ordered)


    while (node && node.key <= to) {
      // check it is in range
      if (node.key >= from) {
        // check value is not zero
        if (!equalScalar(node.value, 0)) {
          // invoke callback
          callback(node.key, node.value, this);
        }
      } // extract next node, save it


      node = heap.extractMinimum();

      if (node) {
        nodes.push(node);
      }
    } // reinsert all nodes in heap


    for (let i = 0; i < nodes.length; i++) {
      // current node
      const n = nodes[i]; // insert node in heap

      node = heap.insert(n.key, n.value); // update values

      values[node.key] = node;
    }
  };

  Spa.prototype.swap = function (i, j) {
    // node @ i and j
    let nodei = this._values[i];
    let nodej = this._values[j]; // check we need to insert indeces

    if (!nodei && nodej) {
      // insert in heap
      nodei = this._heap.insert(i, nodej.value); // remove from heap

      this._heap.remove(nodej); // set values


      this._values[i] = nodei;
      this._values[j] = undefined;
    } else if (nodei && !nodej) {
      // insert in heap
      nodej = this._heap.insert(j, nodei.value); // remove from heap

      this._heap.remove(nodei); // set values


      this._values[j] = nodej;
      this._values[i] = undefined;
    } else if (nodei && nodej) {
      // swap values
      const v = nodei.value;
      nodei.value = nodej.value;
      nodej.value = v;
    }
  };

  return Spa;
}, {
  isClass: true
});
exports.createSpaClass = createSpaClass;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/utils/bignumber/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBigNumberTau = exports.createBigNumberPi = exports.createBigNumberPhi = exports.createBigNumberE = void 0;

var _function = require("../function");

/**
 * Calculate BigNumber e
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns e
 */
const createBigNumberE = (0, _function.memoize)(function (BigNumber) {
  return new BigNumber(1).exp();
}, hasher);
/**
 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns phi
 */

exports.createBigNumberE = createBigNumberE;
const createBigNumberPhi = (0, _function.memoize)(function (BigNumber) {
  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
}, hasher);
/**
 * Calculate BigNumber pi.
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns pi
 */

exports.createBigNumberPhi = createBigNumberPhi;
const createBigNumberPi = (0, _function.memoize)(function (BigNumber) {
  return BigNumber.acos(-1);
}, hasher);
/**
 * Calculate BigNumber tau, tau = 2 * pi
 * @param {function} BigNumber   BigNumber constructor
 * @returns {BigNumber} Returns tau
 */

exports.createBigNumberPi = createBigNumberPi;
const createBigNumberTau = (0, _function.memoize)(function (BigNumber) {
  return createBigNumberPi(BigNumber).times(2);
}, hasher);
/**
 * Create a hash for a BigNumber constructor function. The created has is
 * the configured precision
 * @param {Array} args         Supposed to contain a single entry with
 *                             a BigNumber constructor
 * @return {number} precision
 * @private
 */

exports.createBigNumberTau = createBigNumberTau;

function hasher(args) {
  return args[0].precision;
}
},{"../function":"../node_modules/mathjs/src/utils/function.js"}],"../node_modules/mathjs/src/type/unit/Unit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnitClass = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _string = require("../../utils/string");

var _object = require("../../utils/object");

var _constants = require("../../utils/bignumber/constants");

const name = 'Unit';
const dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];
const createUnitClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  on,
  config,
  addScalar,
  subtract,
  multiplyScalar,
  divideScalar,
  pow,
  abs,
  fix,
  round,
  equal,
  isNumeric,
  format,
  number,
  Complex,
  BigNumber,
  Fraction
}) => {
  const toNumber = number;
  /**
   * A unit can be constructed in the following ways:
   *
   *     const a = new Unit(value, name)
   *     const b = new Unit(null, name)
   *     const c = Unit.parse(str)
   *
   * Example usage:
   *
   *     const a = new Unit(5, 'cm')               // 50 mm
   *     const b = Unit.parse('23 kg')             // 23 kg
   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
   *
   * @class Unit
   * @constructor Unit
   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
   */

  function Unit(value, name) {
    if (!(this instanceof Unit)) {
      throw new Error('Constructor must be called with the new operator');
    }

    if (!(value === null || value === undefined || isNumeric(value) || (0, _is.isComplex)(value))) {
      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
    }

    if (name !== undefined && (typeof name !== 'string' || name === '')) {
      throw new TypeError('Second parameter in Unit constructor must be a string');
    }

    if (name !== undefined) {
      const u = Unit.parse(name);
      this.units = u.units;
      this.dimensions = u.dimensions;
    } else {
      this.units = [{
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE,
        // link to a list with supported prefixes
        power: 0
      }];
      this.dimensions = [];

      for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
        this.dimensions[i] = 0;
      }
    }

    this.value = value !== undefined && value !== null ? this._normalize(value) : null;
    this.fixPrefix = false; // if true, function format will not search for the
    // best prefix but leave it as initially provided.
    // fixPrefix is set true by the method Unit.to
    // The justification behind this is that if the constructor is explicitly called,
    // the caller wishes the units to be returned exactly as he supplied.

    this.skipAutomaticSimplification = true;
  }
  /**
   * Attach type information
   */


  Unit.prototype.type = 'Unit';
  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

  let text, index, c;

  function skipWhitespace() {
    while (c === ' ' || c === '\t') {
      next();
    }
  }

  function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  }

  function isDigit(c) {
    return c >= '0' && c <= '9';
  }

  function next() {
    index++;
    c = text.charAt(index);
  }

  function revert(oldIndex) {
    index = oldIndex;
    c = text.charAt(index);
  }

  function parseNumber() {
    let number = '';
    let oldIndex;
    oldIndex = index;

    if (c === '+') {
      next();
    } else if (c === '-') {
      number += c;
      next();
    }

    if (!isDigitDot(c)) {
      // a + or - must be followed by a digit
      revert(oldIndex);
      return null;
    } // get number, can have a single dot


    if (c === '.') {
      number += c;
      next();

      if (!isDigit(c)) {
        // this is no legal number, it is just a dot
        revert(oldIndex);
        return null;
      }
    } else {
      while (isDigit(c)) {
        number += c;
        next();
      }

      if (c === '.') {
        number += c;
        next();
      }
    }

    while (isDigit(c)) {
      number += c;
      next();
    } // check for exponential notation like "2.3e-4" or "1.23e50"


    if (c === 'E' || c === 'e') {
      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
      let tentativeNumber = '';
      const tentativeIndex = index;
      tentativeNumber += c;
      next();

      if (c === '+' || c === '-') {
        tentativeNumber += c;
        next();
      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


      if (!isDigit(c)) {
        // The e or E must belong to something else, so return the number without the e or E.
        revert(tentativeIndex);
        return number;
      } // We can now safely say that this is scientific notation.


      number = number + tentativeNumber;

      while (isDigit(c)) {
        number += c;
        next();
      }
    }

    return number;
  }

  function parseUnit() {
    let unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

    let code = text.charCodeAt(index);

    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
      unitName += c;
      next();
      code = text.charCodeAt(index);
    } // Must begin with [a-zA-Z]


    code = unitName.charCodeAt(0);

    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
      return unitName || null;
    } else {
      return null;
    }
  }

  function parseCharacter(toFind) {
    if (c === toFind) {
      next();
      return toFind;
    } else {
      return null;
    }
  }
  /**
   * Parse a string into a unit. The value of the unit is parsed as number,
   * BigNumber, or Fraction depending on the math.js config setting `number`.
   *
   * Throws an exception if the provided string does not contain a valid unit or
   * cannot be parsed.
   * @memberof Unit
   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
   * @return {Unit} unit
   */


  Unit.parse = function (str, options) {
    options = options || {};
    text = str;
    index = -1;
    c = '';

    if (typeof text !== 'string') {
      throw new TypeError('Invalid argument in Unit.parse, string expected');
    }

    const unit = new Unit();
    unit.units = [];
    let powerMultiplierCurrent = 1;
    let expectingUnit = false; // A unit should follow this pattern:
    // [number] ...[ [*/] unit[^number] ]
    // unit[^number] ... [ [*/] unit[^number] ]
    // Rules:
    // number is any floating point number.
    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
    // The string may optionally begin with a number.
    // Each unit may optionally be followed by ^number.
    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
    //   2m^2kg/s^2
    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
    //   4erg

    next();
    skipWhitespace(); // Optional number at the start of the string

    const valueStr = parseNumber();
    let value = null;

    if (valueStr) {
      if (config.number === 'BigNumber') {
        value = new BigNumber(valueStr);
      } else if (config.number === 'Fraction') {
        try {
          // not all numbers can be turned in Fractions, for example very small numbers not
          value = new Fraction(valueStr);
        } catch (err) {
          value = parseFloat(valueStr);
        }
      } else {
        // number
        value = parseFloat(valueStr);
      }

      skipWhitespace(); // Whitespace is not required here
      // handle multiplication or division right after the value, like '1/s'

      if (parseCharacter('*')) {
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      }
    } // Stack to keep track of powerMultipliers applied to each parentheses group


    const powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

    let powerMultiplierStackProduct = 1;

    while (true) {
      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
      // A '(' will always appear directly before a unit.

      while (c === '(') {
        powerMultiplierStack.push(powerMultiplierCurrent);
        powerMultiplierStackProduct *= powerMultiplierCurrent;
        powerMultiplierCurrent = 1;
        next();
        skipWhitespace();
      } // Is there something here?


      let uStr;

      if (c) {
        const oldC = c;
        uStr = parseUnit();

        if (uStr === null) {
          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
        }
      } else {
        // End of input.
        break;
      } // Verify the unit exists and get the prefix (if any)


      const res = _findUnit(uStr);

      if (res === null) {
        // Unit not found.
        throw new SyntaxError('Unit "' + uStr + '" not found.');
      }

      let power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

      skipWhitespace();

      if (parseCharacter('^')) {
        skipWhitespace();
        const p = parseNumber();

        if (p === null) {
          // No valid number found for the power!
          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
        }

        power *= p;
      } // Add the unit to the list


      unit.units.push({
        unit: res.unit,
        prefix: res.prefix,
        power: power
      });

      for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
      } // Check for and consume closing parentheses, popping from the stack.
      // A ')' will always follow a unit.


      skipWhitespace();

      while (c === ')') {
        if (powerMultiplierStack.length === 0) {
          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
        }

        powerMultiplierStackProduct /= powerMultiplierStack.pop();
        next();
        skipWhitespace();
      } // "*" and "/" should mean we are expecting something to come next.
      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


      expectingUnit = false;

      if (parseCharacter('*')) {
        // explicit multiplication
        powerMultiplierCurrent = 1;
        expectingUnit = true;
      } else if (parseCharacter('/')) {
        // division
        powerMultiplierCurrent = -1;
        expectingUnit = true;
      } else {
        // implicit multiplication
        powerMultiplierCurrent = 1;
      } // Replace the unit into the auto unit system


      if (res.unit.base) {
        const baseDim = res.unit.base.key;
        UNIT_SYSTEMS.auto[baseDim] = {
          unit: res.unit,
          prefix: res.prefix
        };
      }
    } // Has the string been entirely consumed?


    skipWhitespace();

    if (c) {
      throw new SyntaxError('Could not parse: "' + str + '"');
    } // Is there a trailing slash?


    if (expectingUnit) {
      throw new SyntaxError('Trailing characters: "' + str + '"');
    } // Is the parentheses stack empty?


    if (powerMultiplierStack.length !== 0) {
      throw new SyntaxError('Unmatched "(" in "' + text + '"');
    } // Are there any units at all?


    if (unit.units.length === 0 && !options.allowNoUnits) {
      throw new SyntaxError('"' + str + '" contains no units');
    }

    unit.value = value !== undefined ? unit._normalize(value) : null;
    return unit;
  };
  /**
   * create a copy of this unit
   * @memberof Unit
   * @return {Unit} Returns a cloned version of the unit
   */


  Unit.prototype.clone = function () {
    const unit = new Unit();
    unit.fixPrefix = this.fixPrefix;
    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
    unit.value = (0, _object.clone)(this.value);
    unit.dimensions = this.dimensions.slice(0);
    unit.units = [];

    for (let i = 0; i < this.units.length; i++) {
      unit.units[i] = {};

      for (const p in this.units[i]) {
        if (this.units[i].hasOwnProperty(p)) {
          unit.units[i][p] = this.units[i][p];
        }
      }
    }

    return unit;
  };
  /**
   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
   * @memberof Unit
   * @return {boolean} True if the unit is derived
   */


  Unit.prototype._isDerived = function () {
    if (this.units.length === 0) {
      return false;
    }

    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
  };
  /**
   * Normalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number | BigNumber | Fraction | boolean} value
   * @return {number | BigNumber | Fraction | boolean} normalized value
   * @private
   */


  Unit.prototype._normalize = function (value) {
    let unitValue, unitOffset, unitPower, unitPrefixValue;
    let convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      let res = value;
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      for (let i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitOffset = convert(this.units[0].unit.offset);
      unitPrefixValue = convert(this.units[0].prefix.value);
      return multiplyScalar(addScalar(value, unitOffset), multiplyScalar(unitValue, unitPrefixValue));
    }
  };
  /**
   * Denormalize a value, based on its currently set unit(s)
   * @memberof Unit
   * @param {number} value
   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
   * @return {number} denormalized value
   * @private
   */


  Unit.prototype._denormalize = function (value, prefixValue) {
    let unitValue, unitOffset, unitPower, unitPrefixValue;
    let convert;

    if (value === null || value === undefined || this.units.length === 0) {
      return value;
    } else if (this._isDerived()) {
      // This is a derived unit, so do not apply offsets.
      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
      let res = value;
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      for (let i = 0; i < this.units.length; i++) {
        unitValue = convert(this.units[i].unit.value);
        unitPrefixValue = convert(this.units[i].prefix.value);
        unitPower = convert(this.units[i].power);
        res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));
      }

      return res;
    } else {
      // This is a single unit of power 1, like kg or degC
      convert = Unit._getNumberConverter((0, _is.typeOf)(value)); // convert to Fraction or BigNumber if needed

      unitValue = convert(this.units[0].unit.value);
      unitPrefixValue = convert(this.units[0].prefix.value);
      unitOffset = convert(this.units[0].unit.offset);

      if (prefixValue === undefined || prefixValue === null) {
        return subtract(divideScalar(divideScalar(value, unitValue), unitPrefixValue), unitOffset);
      } else {
        return subtract(divideScalar(divideScalar(value, unitValue), prefixValue), unitOffset);
      }
    }
  };
  /**
   * Find a unit from a string
   * @memberof Unit
   * @param {string} str              A string like 'cm' or 'inch'
   * @returns {Object | null} result  When found, an object with fields unit and
   *                                  prefix is returned. Else, null is returned.
   * @private
   */


  function _findUnit(str) {
    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
    if (UNITS.hasOwnProperty(str)) {
      const unit = UNITS[str];
      const prefix = unit.prefixes[''];
      return {
        unit,
        prefix
      };
    }

    for (const name in UNITS) {
      if (UNITS.hasOwnProperty(name)) {
        if ((0, _string.endsWith)(str, name)) {
          const unit = UNITS[name];
          const prefixLen = str.length - name.length;
          const prefixName = str.substring(0, prefixLen);
          const prefix = unit.prefixes.hasOwnProperty(prefixName) ? unit.prefixes[prefixName] : undefined;

          if (prefix !== undefined) {
            // store unit, prefix, and value
            return {
              unit,
              prefix
            };
          }
        }
      }
    }

    return null;
  }
  /**
   * Test if the given expression is a unit.
   * The unit can have a prefix but cannot have a value.
   * @memberof Unit
   * @param {string} name   A string to be tested whether it is a value less unit.
   *                        The unit can have prefix, like "cm"
   * @return {boolean}      true if the given string is a unit
   */


  Unit.isValuelessUnit = function (name) {
    return _findUnit(name) !== null;
  };
  /**
   * check if this unit has given base unit
   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
   * @memberof Unit
   * @param {BASE_UNITS | string | undefined} base
   */


  Unit.prototype.hasBase = function (base) {
    if (typeof base === 'string') {
      base = BASE_UNITS[base];
    }

    if (!base) {
      return false;
    } // All dimensions must be the same


    for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit has a base or bases equal to another base or bases
   * For derived units, the exponent on each base also must match
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if equal base
   */


  Unit.prototype.equalBase = function (other) {
    // All dimensions must be the same
    for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
        return false;
      }
    }

    return true;
  };
  /**
   * Check if this unit equals another unit
   * @memberof Unit
   * @param {Unit} other
   * @return {boolean} true if both units are equal
   */


  Unit.prototype.equals = function (other) {
    return this.equalBase(other) && equal(this.value, other.value);
  };
  /**
   * Multiply this unit with another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} product of this unit and the other unit
   */


  Unit.prototype.multiply = function (other) {
    const res = this.clone();

    for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
    } // Append other's units list onto res


    for (let i = 0; i < other.units.length; i++) {
      // Make a deep copy
      const inverted = {};

      for (const key in other.units[i]) {
        inverted[key] = other.units[i][key];
      }

      res.units.push(inverted);
    } // If at least one operand has a value, then the result should also have a value


    if (this.value !== null || other.value !== null) {
      const valThis = this.value === null ? this._normalize(1) : this.value;
      const valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = multiplyScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Divide this unit by another one
   * @memberof Unit
   * @param {Unit} other
   * @return {Unit} result of dividing this unit by the other unit
   */


  Unit.prototype.divide = function (other) {
    const res = this.clone();

    for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
    } // Invert and append other's units list onto res


    for (let i = 0; i < other.units.length; i++) {
      // Make a deep copy
      const inverted = {};

      for (const key in other.units[i]) {
        inverted[key] = other.units[i][key];
      }

      inverted.power = -inverted.power;
      res.units.push(inverted);
    } // If at least one operand has a value, the result should have a value


    if (this.value !== null || other.value !== null) {
      const valThis = this.value === null ? this._normalize(1) : this.value;
      const valOther = other.value === null ? other._normalize(1) : other.value;
      res.value = divideScalar(valThis, valOther);
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Calculate the power of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} p
   * @returns {Unit}      The result: this^p
   */


  Unit.prototype.pow = function (p) {
    const res = this.clone();

    for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
      // Dimensions arrays may be of different lengths. Default to 0.
      res.dimensions[i] = (this.dimensions[i] || 0) * p;
    } // Adjust the power of each unit in the list


    for (let i = 0; i < res.units.length; i++) {
      res.units[i].power *= p;
    }

    if (res.value !== null) {
      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
      // if (!isNumeric(res.value)) {
      //  res.value = NaN
      // }
      // Update: Complex supported now
    } else {
      res.value = null;
    }

    res.skipAutomaticSimplification = false;
    return getNumericIfUnitless(res);
  };
  /**
   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
   * @param {Unit} unit
   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
   */


  function getNumericIfUnitless(unit) {
    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
      return unit.value;
    } else {
      return unit;
    }
  }
  /**
   * Calculate the absolute value of a unit
   * @memberof Unit
   * @param {number | Fraction | BigNumber} x
   * @returns {Unit}      The result: |x|, absolute value of x
   */


  Unit.prototype.abs = function () {
    // This gives correct, but unexpected, results for units with an offset.
    // For example, abs(-283.15 degC) = -263.15 degC !!!
    const ret = this.clone();
    ret.value = ret.value !== null ? abs(ret.value) : null;

    for (const i in ret.units) {
      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
        ret.units[i].unit = UNITS['W'];
      }
    }

    return ret;
  };
  /**
   * Convert the unit to a specific unit name.
   * @memberof Unit
   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
   */


  Unit.prototype.to = function (valuelessUnit) {
    let other;
    const value = this.value === null ? this._normalize(1) : this.value;

    if (typeof valuelessUnit === 'string') {
      // other = new Unit(null, valuelessUnit)
      other = Unit.parse(valuelessUnit);

      if (!this.equalBase(other)) {
        throw new Error(`Units do not match ('${other.toString()}' != '${this.toString()}')`);
      }

      if (other.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other.value = (0, _object.clone)(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else if ((0, _is.isUnit)(valuelessUnit)) {
      if (!this.equalBase(valuelessUnit)) {
        throw new Error(`Units do not match ('${valuelessUnit.toString()}' != '${this.toString()}')`);
      }

      if (valuelessUnit.value !== null) {
        throw new Error('Cannot convert to a unit with a value');
      }

      other = valuelessUnit.clone();
      other.value = (0, _object.clone)(value);
      other.fixPrefix = true;
      other.skipAutomaticSimplification = true;
      return other;
    } else {
      throw new Error('String or Unit expected as parameter');
    }
  };
  /**
   * Return the value of the unit when represented with given valueless unit
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number} Returns the unit value as number.
   */
  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


  Unit.prototype.toNumber = function (valuelessUnit) {
    return toNumber(this.toNumeric(valuelessUnit));
  };
  /**
   * Return the value of the unit in the original numeric type
   * @memberof Unit
   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
   * @return {number | BigNumber | Fraction} Returns the unit value
   */


  Unit.prototype.toNumeric = function (valuelessUnit) {
    let other;

    if (valuelessUnit) {
      // Allow getting the numeric value without converting to a different unit
      other = this.to(valuelessUnit);
    } else {
      other = this.clone();
    }

    if (other._isDerived()) {
      return other._denormalize(other.value);
    } else {
      return other._denormalize(other.value, other.units[0].prefix.value);
    }
  };
  /**
   * Get a string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.toString = function () {
    return this.format();
  };
  /**
   * Get a JSON representation of the unit
   * @memberof Unit
   * @returns {Object} Returns a JSON object structured as:
   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   */


  Unit.prototype.toJSON = function () {
    return {
      mathjs: 'Unit',
      value: this._denormalize(this.value),
      unit: this.formatUnits(),
      fixPrefix: this.fixPrefix
    };
  };
  /**
   * Instantiate a Unit from a JSON object
   * @memberof Unit
   * @param {Object} json  A JSON object structured as:
   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
   * @return {Unit}
   */


  Unit.fromJSON = function (json) {
    const unit = new Unit(json.value, json.unit);
    unit.fixPrefix = json.fixPrefix || false;
    return unit;
  };
  /**
   * Returns the string representation of the unit.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.valueOf = Unit.prototype.toString;
  /**
   * Simplify this Unit's unit list and return a new Unit with the simplified list.
   * The returned Unit will contain a list of the "best" units for formatting.
   */

  Unit.prototype.simplify = function () {
    const ret = this.clone();
    const proposedUnitList = []; // Search for a matching base

    let matchingBase;

    for (const key in currentUnitSystem) {
      if (ret.hasBase(BASE_UNITS[key])) {
        matchingBase = key;
        break;
      }
    }

    if (matchingBase === 'NONE') {
      ret.units = [];
    } else {
      let matchingUnit;

      if (matchingBase) {
        // Does the unit system have a matching unit?
        if (currentUnitSystem.hasOwnProperty(matchingBase)) {
          matchingUnit = currentUnitSystem[matchingBase];
        }
      }

      if (matchingUnit) {
        ret.units = [{
          unit: matchingUnit.unit,
          prefix: matchingUnit.prefix,
          power: 1.0
        }];
      } else {
        // Multiple units or units with powers are formatted like this:
        // 5 (kg m^2) / (s^3 mol)
        // Build an representation from the base units of the current unit system
        let missingBaseDim = false;

        for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
          const baseDim = BASE_DIMENSIONS[i];

          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
            if (currentUnitSystem.hasOwnProperty(baseDim)) {
              proposedUnitList.push({
                unit: currentUnitSystem[baseDim].unit,
                prefix: currentUnitSystem[baseDim].prefix,
                power: ret.dimensions[i] || 0
              });
            } else {
              missingBaseDim = true;
            }
          }
        } // Is the proposed unit list "simpler" than the existing one?


        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
          // Replace this unit list with the proposed list
          ret.units = proposedUnitList;
        }
      }
    }

    return ret;
  };
  /**
   * Returns a new Unit in the SI system with the same value as this one
   */


  Unit.prototype.toSI = function () {
    const ret = this.clone();
    const proposedUnitList = []; // Multiple units or units with powers are formatted like this:
    // 5 (kg m^2) / (s^3 mol)
    // Build an representation from the base units of the SI unit system

    for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
      const baseDim = BASE_DIMENSIONS[i];

      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
        if (UNIT_SYSTEMS['si'].hasOwnProperty(baseDim)) {
          proposedUnitList.push({
            unit: UNIT_SYSTEMS['si'][baseDim].unit,
            prefix: UNIT_SYSTEMS['si'][baseDim].prefix,
            power: ret.dimensions[i] || 0
          });
        } else {
          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
        }
      }
    } // Replace this unit list with the proposed list


    ret.units = proposedUnitList;
    ret.fixPrefix = true;
    ret.skipAutomaticSimplification = true;
    return ret;
  };
  /**
   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
   * @memberof Unit
   * @return {string}
   */


  Unit.prototype.formatUnits = function () {
    let strNum = '';
    let strDen = '';
    let nNum = 0;
    let nDen = 0;

    for (let i = 0; i < this.units.length; i++) {
      if (this.units[i].power > 0) {
        nNum++;
        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
          strNum += '^' + this.units[i].power;
        }
      } else if (this.units[i].power < 0) {
        nDen++;
      }
    }

    if (nDen > 0) {
      for (let i = 0; i < this.units.length; i++) {
        if (this.units[i].power < 0) {
          if (nNum > 0) {
            strDen += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

            if (Math.abs(this.units[i].power + 1.0) > 1e-15) {
              strDen += '^' + -this.units[i].power;
            }
          } else {
            strDen += ' ' + this.units[i].prefix.name + this.units[i].unit.name;
            strDen += '^' + this.units[i].power;
          }
        }
      }
    } // Remove leading " "


    strNum = strNum.substr(1);
    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting

    if (nNum > 1 && nDen > 0) {
      strNum = '(' + strNum + ')';
    }

    if (nDen > 1 && nNum > 0) {
      strDen = '(' + strDen + ')';
    }

    let str = strNum;

    if (nNum > 0 && nDen > 0) {
      str += ' / ';
    }

    str += strDen;
    return str;
  };
  /**
   * Get a string representation of the Unit, with optional formatting options.
   * @memberof Unit
   * @param {Object | number | Function} [options]  Formatting options. See
   *                                                lib/utils/number:format for a
   *                                                description of the available
   *                                                options.
   * @return {string}
   */


  Unit.prototype.format = function (options) {
    // Simplfy the unit list, unless it is valueless or was created directly in the
    // constructor or as the result of to or toSI
    const simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

    let isImaginary = false;

    if (typeof simp.value !== 'undefined' && simp.value !== null && (0, _is.isComplex)(simp.value)) {
      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
      isImaginary = Math.abs(simp.value.re) < 1e-14;
    }

    for (const i in simp.units) {
      if (simp.units[i].unit) {
        if (simp.units[i].unit.name === 'VA' && isImaginary) {
          simp.units[i].unit = UNITS['VAR'];
        } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
          simp.units[i].unit = UNITS['VA'];
        }
      }
    } // Now apply the best prefix
    // Units must have only one unit and not have the fixPrefix flag set


    if (simp.units.length === 1 && !simp.fixPrefix) {
      // Units must have integer powers, otherwise the prefix will change the
      // outputted value by not-an-integer-power-of-ten
      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
        // Apply the best prefix
        simp.units[0].prefix = simp._bestPrefix();
      }
    }

    const value = simp._denormalize(simp.value);

    let str = simp.value !== null ? format(value, options || {}) : '';
    const unitStr = simp.formatUnits();

    if (simp.value && (0, _is.isComplex)(simp.value)) {
      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
    }

    if (unitStr.length > 0 && str.length > 0) {
      str += ' ';
    }

    str += unitStr;
    return str;
  };
  /**
   * Calculate the best prefix using current value.
   * @memberof Unit
   * @returns {Object} prefix
   * @private
   */


  Unit.prototype._bestPrefix = function () {
    if (this.units.length !== 1) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    }

    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
    } // find the best prefix value (resulting in the value of which
    // the absolute value of the log10 is closest to zero,
    // though with a little offset of 1.2 for nicer values: you get a
    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
    // Note: the units value can be any numeric type, but to find the best
    // prefix it's enough to work with limited precision of a regular number
    // Update: using mathjs abs since we also allow complex numbers


    const absValue = this.value !== null ? abs(this.value) : 0;
    const absUnitValue = abs(this.units[0].unit.value);
    let bestPrefix = this.units[0].prefix;

    if (absValue === 0) {
      return bestPrefix;
    }

    const power = this.units[0].power;
    let bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

    bestDiff = Math.abs(bestDiff);
    const prefixes = this.units[0].unit.prefixes;

    for (const p in prefixes) {
      if (prefixes.hasOwnProperty(p)) {
        const prefix = prefixes[p];

        if (prefix.scientific) {
          const diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
            // choose the prefix with the smallest diff, or if equal, choose the one
            // with the shortest name (can happen with SHORTLONG for example)
            bestPrefix = prefix;
            bestDiff = diff;
          }
        }
      }
    }

    return bestPrefix;
  };
  /**
   * Returns an array of units whose sum is equal to this unit
   * @memberof Unit
   * @param {Array} [parts] An array of strings or valueless units.
   *
   *   Example:
   *
   *   const u = new Unit(1, 'm')
   *   u.splitUnit(['feet', 'inch'])
   *     [ 3 feet, 3.3700787401575 inch ]
   *
   * @return {Array} An array of units.
   */


  Unit.prototype.splitUnit = function (parts) {
    let x = this.clone();
    const ret = [];

    for (let i = 0; i < parts.length; i++) {
      // Convert x to the requested unit
      x = x.to(parts[i]);
      if (i === parts.length - 1) break; // Get the numeric value of this unit

      const xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
      // since fix can incorrectly round down if there is round-off error

      const xRounded = round(xNumeric);
      let xFixed;
      const isNearlyEqual = equal(xRounded, xNumeric);

      if (isNearlyEqual) {
        xFixed = xRounded;
      } else {
        xFixed = fix(x.toNumeric());
      }

      const y = new Unit(xFixed, parts[i].toString());
      ret.push(y);
      x = subtract(x, y);
    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
    // But instead of comparing x, the remainder, with zero--we will compare the sum of
    // all the parts so far with the original value. If they are nearly equal,
    // we set the remainder to 0.


    let testSum = 0;

    for (let i = 0; i < ret.length; i++) {
      testSum = addScalar(testSum, ret[i].value);
    }

    if (equal(testSum, this.value)) {
      x.value = 0;
    }

    ret.push(x);
    return ret;
  };

  const PREFIXES = {
    NONE: {
      '': {
        name: '',
        value: 1,
        scientific: true
      }
    },
    SHORT: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'da': {
        name: 'da',
        value: 1e1,
        scientific: false
      },
      'h': {
        name: 'h',
        value: 1e2,
        scientific: false
      },
      'k': {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      'M': {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      'G': {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      'T': {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      'P': {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      'E': {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      'Z': {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      'Y': {
        name: 'Y',
        value: 1e24,
        scientific: true
      },
      'd': {
        name: 'd',
        value: 1e-1,
        scientific: false
      },
      'c': {
        name: 'c',
        value: 1e-2,
        scientific: false
      },
      'm': {
        name: 'm',
        value: 1e-3,
        scientific: true
      },
      'u': {
        name: 'u',
        value: 1e-6,
        scientific: true
      },
      'n': {
        name: 'n',
        value: 1e-9,
        scientific: true
      },
      'p': {
        name: 'p',
        value: 1e-12,
        scientific: true
      },
      'f': {
        name: 'f',
        value: 1e-15,
        scientific: true
      },
      'a': {
        name: 'a',
        value: 1e-18,
        scientific: true
      },
      'z': {
        name: 'z',
        value: 1e-21,
        scientific: true
      },
      'y': {
        name: 'y',
        value: 1e-24,
        scientific: true
      }
    },
    LONG: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'deca': {
        name: 'deca',
        value: 1e1,
        scientific: false
      },
      'hecto': {
        name: 'hecto',
        value: 1e2,
        scientific: false
      },
      'kilo': {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      'mega': {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      'giga': {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      'tera': {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      'peta': {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      'exa': {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      'zetta': {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      'yotta': {
        name: 'yotta',
        value: 1e24,
        scientific: true
      },
      'deci': {
        name: 'deci',
        value: 1e-1,
        scientific: false
      },
      'centi': {
        name: 'centi',
        value: 1e-2,
        scientific: false
      },
      'milli': {
        name: 'milli',
        value: 1e-3,
        scientific: true
      },
      'micro': {
        name: 'micro',
        value: 1e-6,
        scientific: true
      },
      'nano': {
        name: 'nano',
        value: 1e-9,
        scientific: true
      },
      'pico': {
        name: 'pico',
        value: 1e-12,
        scientific: true
      },
      'femto': {
        name: 'femto',
        value: 1e-15,
        scientific: true
      },
      'atto': {
        name: 'atto',
        value: 1e-18,
        scientific: true
      },
      'zepto': {
        name: 'zepto',
        value: 1e-21,
        scientific: true
      },
      'yocto': {
        name: 'yocto',
        value: 1e-24,
        scientific: true
      }
    },
    SQUARED: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'da': {
        name: 'da',
        value: 1e2,
        scientific: false
      },
      'h': {
        name: 'h',
        value: 1e4,
        scientific: false
      },
      'k': {
        name: 'k',
        value: 1e6,
        scientific: true
      },
      'M': {
        name: 'M',
        value: 1e12,
        scientific: true
      },
      'G': {
        name: 'G',
        value: 1e18,
        scientific: true
      },
      'T': {
        name: 'T',
        value: 1e24,
        scientific: true
      },
      'P': {
        name: 'P',
        value: 1e30,
        scientific: true
      },
      'E': {
        name: 'E',
        value: 1e36,
        scientific: true
      },
      'Z': {
        name: 'Z',
        value: 1e42,
        scientific: true
      },
      'Y': {
        name: 'Y',
        value: 1e48,
        scientific: true
      },
      'd': {
        name: 'd',
        value: 1e-2,
        scientific: false
      },
      'c': {
        name: 'c',
        value: 1e-4,
        scientific: false
      },
      'm': {
        name: 'm',
        value: 1e-6,
        scientific: true
      },
      'u': {
        name: 'u',
        value: 1e-12,
        scientific: true
      },
      'n': {
        name: 'n',
        value: 1e-18,
        scientific: true
      },
      'p': {
        name: 'p',
        value: 1e-24,
        scientific: true
      },
      'f': {
        name: 'f',
        value: 1e-30,
        scientific: true
      },
      'a': {
        name: 'a',
        value: 1e-36,
        scientific: true
      },
      'z': {
        name: 'z',
        value: 1e-42,
        scientific: true
      },
      'y': {
        name: 'y',
        value: 1e-48,
        scientific: true
      }
    },
    CUBIC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'da': {
        name: 'da',
        value: 1e3,
        scientific: false
      },
      'h': {
        name: 'h',
        value: 1e6,
        scientific: false
      },
      'k': {
        name: 'k',
        value: 1e9,
        scientific: true
      },
      'M': {
        name: 'M',
        value: 1e18,
        scientific: true
      },
      'G': {
        name: 'G',
        value: 1e27,
        scientific: true
      },
      'T': {
        name: 'T',
        value: 1e36,
        scientific: true
      },
      'P': {
        name: 'P',
        value: 1e45,
        scientific: true
      },
      'E': {
        name: 'E',
        value: 1e54,
        scientific: true
      },
      'Z': {
        name: 'Z',
        value: 1e63,
        scientific: true
      },
      'Y': {
        name: 'Y',
        value: 1e72,
        scientific: true
      },
      'd': {
        name: 'd',
        value: 1e-3,
        scientific: false
      },
      'c': {
        name: 'c',
        value: 1e-6,
        scientific: false
      },
      'm': {
        name: 'm',
        value: 1e-9,
        scientific: true
      },
      'u': {
        name: 'u',
        value: 1e-18,
        scientific: true
      },
      'n': {
        name: 'n',
        value: 1e-27,
        scientific: true
      },
      'p': {
        name: 'p',
        value: 1e-36,
        scientific: true
      },
      'f': {
        name: 'f',
        value: 1e-45,
        scientific: true
      },
      'a': {
        name: 'a',
        value: 1e-54,
        scientific: true
      },
      'z': {
        name: 'z',
        value: 1e-63,
        scientific: true
      },
      'y': {
        name: 'y',
        value: 1e-72,
        scientific: true
      }
    },
    BINARY_SHORT_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'k': {
        name: 'k',
        value: 1e3,
        scientific: true
      },
      'M': {
        name: 'M',
        value: 1e6,
        scientific: true
      },
      'G': {
        name: 'G',
        value: 1e9,
        scientific: true
      },
      'T': {
        name: 'T',
        value: 1e12,
        scientific: true
      },
      'P': {
        name: 'P',
        value: 1e15,
        scientific: true
      },
      'E': {
        name: 'E',
        value: 1e18,
        scientific: true
      },
      'Z': {
        name: 'Z',
        value: 1e21,
        scientific: true
      },
      'Y': {
        name: 'Y',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_SHORT_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'Ki': {
        name: 'Ki',
        value: 1024,
        scientific: true
      },
      'Mi': {
        name: 'Mi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      'Gi': {
        name: 'Gi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      'Ti': {
        name: 'Ti',
        value: Math.pow(1024, 4),
        scientific: true
      },
      'Pi': {
        name: 'Pi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      'Ei': {
        name: 'Ei',
        value: Math.pow(1024, 6),
        scientific: true
      },
      'Zi': {
        name: 'Zi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      'Yi': {
        name: 'Yi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BINARY_LONG_SI: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'kilo': {
        name: 'kilo',
        value: 1e3,
        scientific: true
      },
      'mega': {
        name: 'mega',
        value: 1e6,
        scientific: true
      },
      'giga': {
        name: 'giga',
        value: 1e9,
        scientific: true
      },
      'tera': {
        name: 'tera',
        value: 1e12,
        scientific: true
      },
      'peta': {
        name: 'peta',
        value: 1e15,
        scientific: true
      },
      'exa': {
        name: 'exa',
        value: 1e18,
        scientific: true
      },
      'zetta': {
        name: 'zetta',
        value: 1e21,
        scientific: true
      },
      'yotta': {
        name: 'yotta',
        value: 1e24,
        scientific: true
      }
    },
    BINARY_LONG_IEC: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'kibi': {
        name: 'kibi',
        value: 1024,
        scientific: true
      },
      'mebi': {
        name: 'mebi',
        value: Math.pow(1024, 2),
        scientific: true
      },
      'gibi': {
        name: 'gibi',
        value: Math.pow(1024, 3),
        scientific: true
      },
      'tebi': {
        name: 'tebi',
        value: Math.pow(1024, 4),
        scientific: true
      },
      'pebi': {
        name: 'pebi',
        value: Math.pow(1024, 5),
        scientific: true
      },
      'exi': {
        name: 'exi',
        value: Math.pow(1024, 6),
        scientific: true
      },
      'zebi': {
        name: 'zebi',
        value: Math.pow(1024, 7),
        scientific: true
      },
      'yobi': {
        name: 'yobi',
        value: Math.pow(1024, 8),
        scientific: true
      }
    },
    BTU: {
      '': {
        name: '',
        value: 1,
        scientific: true
      },
      'MM': {
        name: 'MM',
        value: 1e6,
        scientific: true
      }
    }
  };
  PREFIXES.SHORTLONG = Object.assign(PREFIXES.SHORT, PREFIXES.LONG);
  PREFIXES.BINARY_SHORT = Object.assign(PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);
  PREFIXES.BINARY_LONG = Object.assign(PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);
  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
   * Index  Dimension
   * -----  ---------
   *   0    Length
   *   1    Mass
   *   2    Time
   *   3    Current
   *   4    Temperature
   *   5    Luminous intensity
   *   6    Amount of substance
   *   7    Angle
   *   8    Bit (digital)
   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
   *
   */

  const BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
  const BASE_UNITS = {
    NONE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    MASS: {
      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    LENGTH: {
      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
    },
    TIME: {
      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
    },
    CURRENT: {
      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
    },
    TEMPERATURE: {
      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
    },
    LUMINOUS_INTENSITY: {
      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
    },
    AMOUNT_OF_SUBSTANCE: {
      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
    },
    FORCE: {
      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
    },
    SURFACE: {
      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
    },
    VOLUME: {
      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
    },
    ENERGY: {
      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
    },
    POWER: {
      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
    },
    PRESSURE: {
      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CHARGE: {
      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CAPACITANCE: {
      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_POTENTIAL: {
      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
    },
    ELECTRIC_RESISTANCE: {
      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_INDUCTANCE: {
      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
    },
    ELECTRIC_CONDUCTANCE: {
      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX: {
      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
    },
    MAGNETIC_FLUX_DENSITY: {
      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
    },
    FREQUENCY: {
      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
    },
    ANGLE: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
    },
    BIT: {
      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
    }
  };

  for (let key in BASE_UNITS) {
    BASE_UNITS[key].key = key;
  }

  const BASE_UNIT_NONE = {};
  const UNIT_NONE = {
    name: '',
    base: BASE_UNIT_NONE,
    value: 1,
    offset: 0,
    dimensions: BASE_DIMENSIONS.map(x => 0)
  };
  const UNITS = {
    // length
    meter: {
      name: 'meter',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    inch: {
      name: 'inch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    foot: {
      name: 'foot',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yard: {
      name: 'yard',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mile: {
      name: 'mile',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    link: {
      name: 'link',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rod: {
      name: 'rod',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.0292,
      offset: 0
    },
    chain: {
      name: 'chain',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    angstrom: {
      name: 'angstrom',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1e-10,
      offset: 0
    },
    m: {
      name: 'm',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    'in': {
      name: 'in',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0254,
      offset: 0
    },
    ft: {
      name: 'ft',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.3048,
      offset: 0
    },
    yd: {
      name: 'yd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.9144,
      offset: 0
    },
    mi: {
      name: 'mi',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 1609.344,
      offset: 0
    },
    li: {
      name: 'li',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.201168,
      offset: 0
    },
    rd: {
      name: 'rd',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 5.029210,
      offset: 0
    },
    ch: {
      name: 'ch',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 20.1168,
      offset: 0
    },
    mil: {
      name: 'mil',
      base: BASE_UNITS.LENGTH,
      prefixes: PREFIXES.NONE,
      value: 0.0000254,
      offset: 0
    },
    // 1/1000 inch
    // Surface
    m2: {
      name: 'm2',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.SQUARED,
      value: 1,
      offset: 0
    },
    sqin: {
      name: 'sqin',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.00064516,
      offset: 0
    },
    // 645.16 mm2
    sqft: {
      name: 'sqft',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.09290304,
      offset: 0
    },
    // 0.09290304 m2
    sqyd: {
      name: 'sqyd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 0.83612736,
      offset: 0
    },
    // 0.83612736 m2
    sqmi: {
      name: 'sqmi',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 2589988.110336,
      offset: 0
    },
    // 2.589988110336 km2
    sqrd: {
      name: 'sqrd',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 25.29295,
      offset: 0
    },
    // 25.29295 m2
    sqch: {
      name: 'sqch',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 404.6873,
      offset: 0
    },
    // 404.6873 m2
    sqmil: {
      name: 'sqmil',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 6.4516e-10,
      offset: 0
    },
    // 6.4516 * 10^-10 m2
    acre: {
      name: 'acre',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 4046.86,
      offset: 0
    },
    // 4046.86 m2
    hectare: {
      name: 'hectare',
      base: BASE_UNITS.SURFACE,
      prefixes: PREFIXES.NONE,
      value: 10000,
      offset: 0
    },
    // 10000 m2
    // Volume
    m3: {
      name: 'm3',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.CUBIC,
      value: 1,
      offset: 0
    },
    L: {
      name: 'L',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    l: {
      name: 'l',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    // litre
    litre: {
      name: 'litre',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    cuin: {
      name: 'cuin',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1.6387064e-5,
      offset: 0
    },
    // 1.6387064e-5 m3
    cuft: {
      name: 'cuft',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.028316846592,
      offset: 0
    },
    // 28.316 846 592 L
    cuyd: {
      name: 'cuyd',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.764554857984,
      offset: 0
    },
    // 764.554 857 984 L
    teaspoon: {
      name: 'teaspoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000005,
      offset: 0
    },
    // 5 mL
    tablespoon: {
      name: 'tablespoon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.000015,
      offset: 0
    },
    // 15 mL
    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
    drop: {
      name: 'drop',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    gtt: {
      name: 'gtt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 5e-8,
      offset: 0
    },
    // 0.05 mL = 5e-8 m3
    // Liquid volume
    minim: {
      name: 'minim',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00000006161152,
      offset: 0
    },
    // 0.06161152 mL
    fluiddram: {
      name: 'fluiddram',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    fluidounce: {
      name: 'fluidounce',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gill: {
      name: 'gill',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cc: {
      name: 'cc',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 1e-6,
      offset: 0
    },
    // 1e-6 L
    cup: {
      name: 'cup',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pint: {
      name: 'pint',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    quart: {
      name: 'quart',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gallon: {
      name: 'gallon',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    beerbarrel: {
      name: 'beerbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    oilbarrel: {
      name: 'oilbarrel',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    hogshead: {
      name: 'hogshead',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.2384810,
      offset: 0
    },
    // 238.4810 L
    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
    fldr: {
      name: 'fldr',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0000036966911,
      offset: 0
    },
    // 3.696691 mL
    floz: {
      name: 'floz',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.00002957353,
      offset: 0
    },
    // 29.57353 mL
    gi: {
      name: 'gi',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0001182941,
      offset: 0
    },
    // 118.2941 mL
    cp: {
      name: 'cp',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0002365882,
      offset: 0
    },
    // 236.5882 mL
    pt: {
      name: 'pt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0004731765,
      offset: 0
    },
    // 473.1765 mL
    qt: {
      name: 'qt',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.0009463529,
      offset: 0
    },
    // 946.3529 mL
    gal: {
      name: 'gal',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.003785412,
      offset: 0
    },
    // 3.785412 L
    bbl: {
      name: 'bbl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1173478,
      offset: 0
    },
    // 117.3478 L
    obl: {
      name: 'obl',
      base: BASE_UNITS.VOLUME,
      prefixes: PREFIXES.NONE,
      value: 0.1589873,
      offset: 0
    },
    // 158.9873 L
    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
    // Mass
    g: {
      name: 'g',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 0.001,
      offset: 0
    },
    gram: {
      name: 'gram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 0.001,
      offset: 0
    },
    ton: {
      name: 'ton',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 907.18474,
      offset: 0
    },
    t: {
      name: 't',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.SHORT,
      value: 1000,
      offset: 0
    },
    tonne: {
      name: 'tonne',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.LONG,
      value: 1000,
      offset: 0
    },
    grain: {
      name: 'grain',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dram: {
      name: 'dram',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    ounce: {
      name: 'ounce',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    poundmass: {
      name: 'poundmass',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    hundredweight: {
      name: 'hundredweight',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    stick: {
      name: 'stick',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 115e-3,
      offset: 0
    },
    stone: {
      name: 'stone',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 6.35029318,
      offset: 0
    },
    gr: {
      name: 'gr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 64.79891e-6,
      offset: 0
    },
    dr: {
      name: 'dr',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 1.7718451953125e-3,
      offset: 0
    },
    oz: {
      name: 'oz',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 28.349523125e-3,
      offset: 0
    },
    lbm: {
      name: 'lbm',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 453.59237e-3,
      offset: 0
    },
    cwt: {
      name: 'cwt',
      base: BASE_UNITS.MASS,
      prefixes: PREFIXES.NONE,
      value: 45.359237,
      offset: 0
    },
    // Time
    s: {
      name: 's',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    min: {
      name: 'min',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    h: {
      name: 'h',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    second: {
      name: 'second',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    sec: {
      name: 'sec',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    minute: {
      name: 'minute',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 60,
      offset: 0
    },
    hour: {
      name: 'hour',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3600,
      offset: 0
    },
    day: {
      name: 'day',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 86400,
      offset: 0
    },
    week: {
      name: 'week',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 7 * 86400,
      offset: 0
    },
    month: {
      name: 'month',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 2629800,
      // 1/12th of Julian year
      offset: 0
    },
    year: {
      name: 'year',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600,
      // Julian year
      offset: 0
    },
    decade: {
      name: 'decade',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 315576000,
      // Julian decade
      offset: 0
    },
    century: {
      name: 'century',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 3155760000,
      // Julian century
      offset: 0
    },
    millennium: {
      name: 'millennium',
      base: BASE_UNITS.TIME,
      prefixes: PREFIXES.NONE,
      value: 31557600000,
      // Julian millennium
      offset: 0
    },
    // Frequency
    hertz: {
      name: 'Hertz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    Hz: {
      name: 'Hz',
      base: BASE_UNITS.FREQUENCY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0,
      reciprocal: true
    },
    // Angle
    rad: {
      name: 'rad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    radian: {
      name: 'radian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
    deg: {
      name: 'deg',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    degree: {
      name: 'degree',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
    grad: {
      name: 'grad',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.SHORT,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    gradian: {
      name: 'gradian',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.LONG,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
    cycle: {
      name: 'cycle',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
    arcsec: {
      name: 'arcsec',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
    arcmin: {
      name: 'arcmin',
      base: BASE_UNITS.ANGLE,
      prefixes: PREFIXES.NONE,
      value: null,
      // will be filled in by calculateAngleValues()
      offset: 0
    },
    // Electric current
    A: {
      name: 'A',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    ampere: {
      name: 'ampere',
      base: BASE_UNITS.CURRENT,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // Temperature
    // K(C) = °C + 273.15
    // K(F) = (°F + 459.67) / 1.8
    // K(R) = °R / 1.8
    K: {
      name: 'K',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    degC: {
      name: 'degC',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    degF: {
      name: 'degF',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    degR: {
      name: 'degR',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    kelvin: {
      name: 'kelvin',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 0
    },
    celsius: {
      name: 'celsius',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1,
      offset: 273.15
    },
    fahrenheit: {
      name: 'fahrenheit',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 459.67
    },
    rankine: {
      name: 'rankine',
      base: BASE_UNITS.TEMPERATURE,
      prefixes: PREFIXES.NONE,
      value: 1 / 1.8,
      offset: 0
    },
    // amount of substance
    mol: {
      name: 'mol',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    mole: {
      name: 'mole',
      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // luminous intensity
    cd: {
      name: 'cd',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    candela: {
      name: 'candela',
      base: BASE_UNITS.LUMINOUS_INTENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    // TODO: units STERADIAN
    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
    // Force
    N: {
      name: 'N',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    newton: {
      name: 'newton',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    dyn: {
      name: 'dyn',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.SHORT,
      value: 0.00001,
      offset: 0
    },
    dyne: {
      name: 'dyne',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 0.00001,
      offset: 0
    },
    lbf: {
      name: 'lbf',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    poundforce: {
      name: 'poundforce',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.NONE,
      value: 4.4482216152605,
      offset: 0
    },
    kip: {
      name: 'kip',
      base: BASE_UNITS.FORCE,
      prefixes: PREFIXES.LONG,
      value: 4448.2216,
      offset: 0
    },
    // Energy
    J: {
      name: 'J',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    joule: {
      name: 'joule',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    erg: {
      name: 'erg',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.NONE,
      value: 1e-7,
      offset: 0
    },
    Wh: {
      name: 'Wh',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 3600,
      offset: 0
    },
    BTU: {
      name: 'BTU',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.BTU,
      value: 1055.05585262,
      offset: 0
    },
    eV: {
      name: 'eV',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.SHORT,
      value: 1.602176565e-19,
      offset: 0
    },
    electronvolt: {
      name: 'electronvolt',
      base: BASE_UNITS.ENERGY,
      prefixes: PREFIXES.LONG,
      value: 1.602176565e-19,
      offset: 0
    },
    // Power
    W: {
      name: 'W',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    watt: {
      name: 'watt',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    hp: {
      name: 'hp',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.NONE,
      value: 745.6998715386,
      offset: 0
    },
    // Electrical power units
    VAR: {
      name: 'VAR',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: Complex.I,
      offset: 0
    },
    VA: {
      name: 'VA',
      base: BASE_UNITS.POWER,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Pressure
    Pa: {
      name: 'Pa',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    psi: {
      name: 'psi',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 6894.75729276459,
      offset: 0
    },
    atm: {
      name: 'atm',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 101325,
      offset: 0
    },
    bar: {
      name: 'bar',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.SHORTLONG,
      value: 100000,
      offset: 0
    },
    torr: {
      name: 'torr',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmHg: {
      name: 'mmHg',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 133.322,
      offset: 0
    },
    mmH2O: {
      name: 'mmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 9.80665,
      offset: 0
    },
    cmH2O: {
      name: 'cmH2O',
      base: BASE_UNITS.PRESSURE,
      prefixes: PREFIXES.NONE,
      value: 98.0665,
      offset: 0
    },
    // Electric charge
    coulomb: {
      name: 'coulomb',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    C: {
      name: 'C',
      base: BASE_UNITS.ELECTRIC_CHARGE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric capacitance
    farad: {
      name: 'farad',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    F: {
      name: 'F',
      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric potential
    volt: {
      name: 'volt',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    V: {
      name: 'V',
      base: BASE_UNITS.ELECTRIC_POTENTIAL,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric resistance
    ohm: {
      name: 'ohm',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORTLONG,
      // Both Mohm and megaohm are acceptable
      value: 1,
      offset: 0
    },

    /*
     * Unicode breaks in browsers if charset is not specified
    Ω: {
      name: 'Ω',
      base: BASE_UNITS.ELECTRIC_RESISTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    */
    // Electric inductance
    henry: {
      name: 'henry',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    H: {
      name: 'H',
      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Electric conductance
    siemens: {
      name: 'siemens',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    S: {
      name: 'S',
      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux
    weber: {
      name: 'weber',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    Wb: {
      name: 'Wb',
      base: BASE_UNITS.MAGNETIC_FLUX,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Magnetic flux density
    tesla: {
      name: 'tesla',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.LONG,
      value: 1,
      offset: 0
    },
    T: {
      name: 'T',
      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
      prefixes: PREFIXES.SHORT,
      value: 1,
      offset: 0
    },
    // Binary
    b: {
      name: 'b',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 1,
      offset: 0
    },
    bits: {
      name: 'bits',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 1,
      offset: 0
    },
    B: {
      name: 'B',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_SHORT,
      value: 8,
      offset: 0
    },
    bytes: {
      name: 'bytes',
      base: BASE_UNITS.BIT,
      prefixes: PREFIXES.BINARY_LONG,
      value: 8,
      offset: 0
    } // aliases (formerly plurals)

  };
  const ALIASES = {
    meters: 'meter',
    inches: 'inch',
    feet: 'foot',
    yards: 'yard',
    miles: 'mile',
    links: 'link',
    rods: 'rod',
    chains: 'chain',
    angstroms: 'angstrom',
    lt: 'l',
    litres: 'litre',
    liter: 'litre',
    liters: 'litre',
    teaspoons: 'teaspoon',
    tablespoons: 'tablespoon',
    minims: 'minim',
    fluiddrams: 'fluiddram',
    fluidounces: 'fluidounce',
    gills: 'gill',
    cups: 'cup',
    pints: 'pint',
    quarts: 'quart',
    gallons: 'gallon',
    beerbarrels: 'beerbarrel',
    oilbarrels: 'oilbarrel',
    hogsheads: 'hogshead',
    gtts: 'gtt',
    grams: 'gram',
    tons: 'ton',
    tonnes: 'tonne',
    grains: 'grain',
    drams: 'dram',
    ounces: 'ounce',
    poundmasses: 'poundmass',
    hundredweights: 'hundredweight',
    sticks: 'stick',
    lb: 'lbm',
    lbs: 'lbm',
    kips: 'kip',
    acres: 'acre',
    hectares: 'hectare',
    sqfeet: 'sqft',
    sqyard: 'sqyd',
    sqmile: 'sqmi',
    sqmiles: 'sqmi',
    mmhg: 'mmHg',
    mmh2o: 'mmH2O',
    cmh2o: 'cmH2O',
    seconds: 'second',
    secs: 'second',
    minutes: 'minute',
    mins: 'minute',
    hours: 'hour',
    hr: 'hour',
    hrs: 'hour',
    days: 'day',
    weeks: 'week',
    months: 'month',
    years: 'year',
    decades: 'decade',
    centuries: 'century',
    millennia: 'millennium',
    hertz: 'hertz',
    radians: 'radian',
    degrees: 'degree',
    gradians: 'gradian',
    cycles: 'cycle',
    arcsecond: 'arcsec',
    arcseconds: 'arcsec',
    arcminute: 'arcmin',
    arcminutes: 'arcmin',
    BTUs: 'BTU',
    watts: 'watt',
    joules: 'joule',
    amperes: 'ampere',
    coulombs: 'coulomb',
    volts: 'volt',
    ohms: 'ohm',
    farads: 'farad',
    webers: 'weber',
    teslas: 'tesla',
    electronvolts: 'electronvolt',
    moles: 'mole'
    /**
     * Calculate the values for the angle units.
     * Value is calculated as number or BigNumber depending on the configuration
     * @param {{number: 'number' | 'BigNumber'}} config
     */

  };

  function calculateAngleValues(config) {
    if (config.number === 'BigNumber') {
      const pi = (0, _constants.createBigNumberPi)(BigNumber);
      UNITS.rad.value = new BigNumber(1);
      UNITS.deg.value = pi.div(180); // 2 * pi / 360

      UNITS.grad.value = pi.div(200); // 2 * pi / 400

      UNITS.cycle.value = pi.times(2); // 2 * pi

      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
    } else {
      // number
      UNITS.rad.value = 1;
      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

      UNITS.cycle.value = Math.PI * 2; // 2 * pi

      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
    } // copy to the full names of the angles


    UNITS.radian.value = UNITS.rad.value;
    UNITS.degree.value = UNITS.deg.value;
    UNITS.gradian.value = UNITS.grad.value;
  } // apply the angle values now


  calculateAngleValues(config);

  if (on) {
    // recalculate the values on change of configuration
    on('config', function (curr, prev) {
      if (curr.number !== prev.number) {
        calculateAngleValues(curr);
      }
    });
  }
  /**
   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
   */


  const UNIT_SYSTEMS = {
    si: {
      // Base units
      NONE: {
        unit: UNIT_NONE,
        prefix: PREFIXES.NONE['']
      },
      LENGTH: {
        unit: UNITS.m,
        prefix: PREFIXES.SHORT['']
      },
      MASS: {
        unit: UNITS.g,
        prefix: PREFIXES.SHORT['k']
      },
      TIME: {
        unit: UNITS.s,
        prefix: PREFIXES.SHORT['']
      },
      CURRENT: {
        unit: UNITS.A,
        prefix: PREFIXES.SHORT['']
      },
      TEMPERATURE: {
        unit: UNITS.K,
        prefix: PREFIXES.SHORT['']
      },
      LUMINOUS_INTENSITY: {
        unit: UNITS.cd,
        prefix: PREFIXES.SHORT['']
      },
      AMOUNT_OF_SUBSTANCE: {
        unit: UNITS.mol,
        prefix: PREFIXES.SHORT['']
      },
      ANGLE: {
        unit: UNITS.rad,
        prefix: PREFIXES.SHORT['']
      },
      BIT: {
        unit: UNITS.bit,
        prefix: PREFIXES.SHORT['']
      },
      // Derived units
      FORCE: {
        unit: UNITS.N,
        prefix: PREFIXES.SHORT['']
      },
      ENERGY: {
        unit: UNITS.J,
        prefix: PREFIXES.SHORT['']
      },
      POWER: {
        unit: UNITS.W,
        prefix: PREFIXES.SHORT['']
      },
      PRESSURE: {
        unit: UNITS.Pa,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CHARGE: {
        unit: UNITS.C,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CAPACITANCE: {
        unit: UNITS.F,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_POTENTIAL: {
        unit: UNITS.V,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_RESISTANCE: {
        unit: UNITS.ohm,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_INDUCTANCE: {
        unit: UNITS.H,
        prefix: PREFIXES.SHORT['']
      },
      ELECTRIC_CONDUCTANCE: {
        unit: UNITS.S,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX: {
        unit: UNITS.Wb,
        prefix: PREFIXES.SHORT['']
      },
      MAGNETIC_FLUX_DENSITY: {
        unit: UNITS.T,
        prefix: PREFIXES.SHORT['']
      },
      FREQUENCY: {
        unit: UNITS.Hz,
        prefix: PREFIXES.SHORT['']
      }
    } // Clone to create the other unit systems

  };
  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.cgs.LENGTH = {
    unit: UNITS.m,
    prefix: PREFIXES.SHORT['c']
  };
  UNIT_SYSTEMS.cgs.MASS = {
    unit: UNITS.g,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.FORCE = {
    unit: UNITS.dyn,
    prefix: PREFIXES.SHORT['']
  };
  UNIT_SYSTEMS.cgs.ENERGY = {
    unit: UNITS.erg,
    prefix: PREFIXES.NONE[''] // there are wholly 4 unique cgs systems for electricity and magnetism,
    // so let's not worry about it unless somebody complains

  };
  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
  UNIT_SYSTEMS.us.LENGTH = {
    unit: UNITS.ft,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.MASS = {
    unit: UNITS.lbm,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.TEMPERATURE = {
    unit: UNITS.degF,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.FORCE = {
    unit: UNITS.lbf,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.ENERGY = {
    unit: UNITS.BTU,
    prefix: PREFIXES.BTU['']
  };
  UNIT_SYSTEMS.us.POWER = {
    unit: UNITS.hp,
    prefix: PREFIXES.NONE['']
  };
  UNIT_SYSTEMS.us.PRESSURE = {
    unit: UNITS.psi,
    prefix: PREFIXES.NONE[''] // Add additional unit systems here.
    // Choose a unit system to seed the auto unit system.

  };
  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

  let currentUnitSystem = UNIT_SYSTEMS.auto;
  /**
   * Set a unit system for formatting derived units.
   * @param {string} [name] The name of the unit system.
   */

  Unit.setUnitSystem = function (name) {
    if (UNIT_SYSTEMS.hasOwnProperty(name)) {
      currentUnitSystem = UNIT_SYSTEMS[name];
    } else {
      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
    }
  };
  /**
   * Return the current unit system.
   * @return {string} The current unit system.
   */


  Unit.getUnitSystem = function () {
    for (const key in UNIT_SYSTEMS) {
      if (UNIT_SYSTEMS[key] === currentUnitSystem) {
        return key;
      }
    }
  };
  /**
   * Converters to convert from number to an other numeric type like BigNumber
   * or Fraction
   */


  Unit.typeConverters = {
    BigNumber: function (x) {
      return new BigNumber(x + ''); // stringify to prevent constructor error
    },
    Fraction: function (x) {
      return new Fraction(x);
    },
    Complex: function (x) {
      return x;
    },
    number: function (x) {
      return x;
    }
    /**
     * Retrieve the right convertor function corresponding with the type
     * of provided exampleValue.
     *
     * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
     *                        In case of an unknown type,
     * @return {Function}
     */

  };

  Unit._getNumberConverter = function (type) {
    if (!Unit.typeConverters[type]) {
      throw new TypeError('Unsupported type "' + type + '"');
    }

    return Unit.typeConverters[type];
  }; // Add dimensions to each built-in unit


  for (let key in UNITS) {
    const unit = UNITS[key];
    unit.dimensions = unit.base.dimensions;
  } // Create aliases


  for (const name in ALIASES) {
    if (ALIASES.hasOwnProperty(name)) {
      const unit = UNITS[ALIASES[name]];
      const alias = {};

      for (let key in unit) {
        if (unit.hasOwnProperty(key)) {
          alias[key] = unit[key];
        }
      }

      alias.name = name;
      UNITS[name] = alias;
    }
  }

  function assertUnitNameIsValid(name) {
    for (let i = 0; i < name.length; i++) {
      const c = name.charAt(i);

      const isValidAlpha = function (p) {
        return /^[a-zA-Z]$/.test(p);
      };

      const isDigit = function (c) {
        return c >= '0' && c <= '9';
      };

      if (i === 0 && !isValidAlpha(c)) {
        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
      }

      if (i > 0 && !(isValidAlpha(c) || isDigit(c))) {
        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
      }
    }
  }
  /**
   * Wrapper around createUnitSingle.
   * Example:
   *  createUnit({
   *    foo: { },
   *    bar: {
   *      definition: 'kg/foo',
   *      aliases: ['ba', 'barr', 'bars'],
   *      offset: 200
   *    },
   *    baz: '4 bar'
   *  },
   *  {
   *    override: true
   *  })
   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
   * @param {object} options
   */


  Unit.createUnit = function (obj, options) {
    if (typeof obj !== 'object') {
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    } // Remove all units and aliases we are overriding


    if (options && options.override) {
      for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
          Unit.deleteUnit(key);
        }

        if (obj[key].aliases) {
          for (let i = 0; i < obj[key].aliases.length; i++) {
            Unit.deleteUnit(obj[key].aliases[i]);
          }
        }
      }
    } // TODO: traverse multiple times until all units have been added


    let lastUnit;

    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        lastUnit = Unit.createUnitSingle(key, obj[key]);
      }
    }

    return lastUnit;
  };
  /**
   * Create a user-defined unit and register it with the Unit type.
   * Example:
   *  createUnitSingle('knot', '0.514444444 m/s')
   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
   *
   * @return {Unit}
   */


  Unit.createUnitSingle = function (name, obj, options) {
    if (typeof obj === 'undefined' || obj === null) {
      obj = {};
    }

    if (typeof name !== 'string') {
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    } // Check collisions with existing units


    if (UNITS.hasOwnProperty(name)) {
      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


    assertUnitNameIsValid(name);
    let defUnit = null; // The Unit from which the new unit will be created.

    let aliases = [];
    let offset = 0;
    let definition;
    let prefixes;

    if (obj && obj.type === 'Unit') {
      defUnit = obj.clone();
    } else if (typeof obj === 'string') {
      if (obj !== '') {
        definition = obj;
      }
    } else if (typeof obj === 'object') {
      definition = obj.definition;
      prefixes = obj.prefixes;
      offset = obj.offset;

      if (obj.aliases) {
        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
      }
    } else {
      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
    }

    if (aliases) {
      for (let i = 0; i < aliases.length; i++) {
        if (UNITS.hasOwnProperty(aliases[i])) {
          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
        }
      }
    }

    if (definition && typeof definition === 'string' && !defUnit) {
      try {
        defUnit = Unit.parse(definition, {
          allowNoUnits: true
        });
      } catch (ex) {
        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
        throw ex;
      }
    } else if (definition && definition.type === 'Unit') {
      defUnit = definition.clone();
    }

    aliases = aliases || [];
    offset = offset || 0;

    if (prefixes && prefixes.toUpperCase) {
      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
    } else {
      prefixes = PREFIXES.NONE;
    } // If defUnit is null, it is because the user did not
    // specify a defintion. So create a new base dimension.


    let newUnit = {};

    if (!defUnit) {
      // Add a new base dimension
      const baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
      }

      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

      for (const b in BASE_UNITS) {
        if (BASE_UNITS.hasOwnProperty(b)) {
          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
        }
      } // Add the new base unit


      let newBaseUnit = {
        dimensions: []
      };

      for (let i = 0; i < BASE_DIMENSIONS.length; i++) {
        newBaseUnit.dimensions[i] = 0;
      }

      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
      newBaseUnit.key = baseName;
      BASE_UNITS[baseName] = newBaseUnit;
      newUnit = {
        name: name,
        value: 1,
        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
        prefixes: prefixes,
        offset: offset,
        base: BASE_UNITS[baseName]
      };
      currentUnitSystem[baseName] = {
        unit: newUnit,
        prefix: PREFIXES.NONE['']
      };
    } else {
      newUnit = {
        name: name,
        value: defUnit.value,
        dimensions: defUnit.dimensions.slice(0),
        prefixes: prefixes,
        offset: offset // Create a new base if no matching base exists

      };
      let anyMatch = false;

      for (let i in BASE_UNITS) {
        if (BASE_UNITS.hasOwnProperty(i)) {
          let match = true;

          for (let j = 0; j < BASE_DIMENSIONS.length; j++) {
            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
              match = false;
              break;
            }
          }

          if (match) {
            anyMatch = true;
            newUnit.base = BASE_UNITS[i];
            break;
          }
        }
      }

      if (!anyMatch) {
        const baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
        // Add the new base unit

        let newBaseUnit = {
          dimensions: defUnit.dimensions.slice(0)
        };
        newBaseUnit.key = baseName;
        BASE_UNITS[baseName] = newBaseUnit;
        currentUnitSystem[baseName] = {
          unit: newUnit,
          prefix: PREFIXES.NONE['']
        };
        newUnit.base = BASE_UNITS[baseName];
      }
    }

    Unit.UNITS[name] = newUnit;

    for (let i = 0; i < aliases.length; i++) {
      const aliasName = aliases[i];
      const alias = {};

      for (const key in newUnit) {
        if (newUnit.hasOwnProperty(key)) {
          alias[key] = newUnit[key];
        }
      }

      alias.name = aliasName;
      Unit.UNITS[aliasName] = alias;
    }

    return new Unit(null, name);
  };

  Unit.deleteUnit = function (name) {
    delete Unit.UNITS[name];
  }; // expose arrays with prefixes, dimensions, units, systems


  Unit.PREFIXES = PREFIXES;
  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
  Unit.BASE_UNITS = BASE_UNITS;
  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
  Unit.UNITS = UNITS;
  return Unit;
}, {
  isClass: true
});
exports.createUnitClass = createUnitClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/bignumber/constants":"../node_modules/mathjs/src/utils/bignumber/constants.js"}],"../node_modules/mathjs/src/type/unit/function/unit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnitFunction = void 0;

var _factory = require("../../../utils/factory");

var _collection = require("../../../utils/collection");

const name = 'unit';
const dependencies = ['typed', 'Unit']; // This function is named createUnitFunction to prevent a naming conflict with createUnit

const createUnitFunction =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Unit
}) => {
  /**
   * Create a unit. Depending on the passed arguments, the function
   * will create and return a new math.Unit object.
   * When a matrix is provided, all elements will be converted to units.
   *
   * Syntax:
   *
   *     math.unit(unit : string)
   *     math.unit(value : number, unit : string)
   *
   * Examples:
   *
   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
   *    const b = math.unit('23 kg')    // returns Unit 23 kg
   *    a.to('m')                       // returns Unit 0.05 m
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
   *
   * @param {* | Array | Matrix} args   A number and unit.
   * @return {Unit | Array | Matrix}    The created unit
   */
  const unit = typed(name, {
    'Unit': function (x) {
      return x.clone();
    },
    'string': function (x) {
      if (Unit.isValuelessUnit(x)) {
        return new Unit(null, x); // a pure unit
      }

      return Unit.parse(x, {
        allowNoUnits: true
      }); // a unit with value, like '5cm'
    },
    'number | BigNumber | Fraction | Complex, string': function (value, unit) {
      return new Unit(value, unit);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, unit);
    }
  });
  return unit;
});
exports.createUnitFunction = createUnitFunction;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/type/matrix/function/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSparse = void 0;

var _factory = require("../../../utils/factory");

const name = 'sparse';
const dependencies = ['typed', 'SparseMatrix'];
const createSparse =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  SparseMatrix
}) => {
  /**
   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from
   * an `Array`. A Matrix has utility functions to manipulate the data in the
   * matrix, like getting the size and getting or setting values in the matrix.
   *
   * Syntax:
   *
   *    math.sparse()               // creates an empty sparse matrix.
   *    math.sparse(data)           // creates a sparse matrix with initial data.
   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
   *
   * Examples:
   *
   *    let m = math.sparse([[1, 2], [3, 4]])
   *    m.size()                        // Array [2, 2]
   *    m.resize([3, 2], 5)
   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
   *    m.get([1, 0])                    // number 3
   *
   * See also:
   *
   *    bignumber, boolean, complex, index, number, string, unit, matrix
   *
   * @param {Array | Matrix} [data]    A two dimensional array
   *
   * @return {Matrix} The created matrix
   */
  return typed(name, {
    '': function () {
      return new SparseMatrix([]);
    },
    'string': function (datatype) {
      return new SparseMatrix([], datatype);
    },
    'Array | Matrix': function (data) {
      return new SparseMatrix(data);
    },
    'Array | Matrix, string': function (data, datatype) {
      return new SparseMatrix(data, datatype);
    }
  });
});
exports.createSparse = createSparse;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/unit/function/createUnit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCreateUnit = void 0;

var _factory = require("../../../utils/factory");

const name = 'createUnit';
const dependencies = ['typed', 'Unit'];
const createCreateUnit =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Unit
}) => {
  /**
   * Create a user-defined unit and register it with the Unit type.
   *
   * Syntax:
   *
   *     math.createUnit({
   *       baseUnit1: {
   *         aliases: [string, ...]
   *         prefixes: object
   *       },
   *       unit2: {
   *         definition: string,
   *         aliases: [string, ...]
   *         prefixes: object,
   *         offset: number
   *       },
   *       unit3: string    // Shortcut
   *     })
   *
   *     // Another shortcut:
   *     math.createUnit(string, unit : string, [object])
   *
   * Examples:
   *
   *     math.createUnit('foo')
   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
   *     math.createUnit('mph', '1 mile/hour')
   *
   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
   * @param {Object} options   (optional) An object containing any of the following properties:
   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
   *
   * See also:
   *
   *     unit
   *
   * @return {Unit} The new unit
   */
  return typed(name, {
    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
    'Object, Object': function (obj, options) {
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    'Object': function (obj) {
      return Unit.createUnit(obj, {});
    },
    // Shortcut method for creating one unit.
    'string, Unit | string | Object, Object': function (name, def, options) {
      const obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, options);
    },
    // Same as above but without the options.
    'string, Unit | string | Object': function (name, def) {
      const obj = {};
      obj[name] = def;
      return Unit.createUnit(obj, {});
    },
    // Without a definition, creates a base unit.
    'string': function (name) {
      const obj = {};
      obj[name] = {};
      return Unit.createUnit(obj, {});
    }
  });
});
exports.createCreateUnit = createCreateUnit;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/trigonometry/acos.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAcos = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'acos';
const dependencies = ['typed', 'config', 'Complex'];
const createAcos =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex
}) => {
  /**
   * Calculate the inverse cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acos(x)
   *
   * Examples:
   *
   *    math.acos(0.5)           // returns number 1.0471975511965979
   *    math.acos(math.cos(1.5)) // returns number 1.5
   *
   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    cos, atan, asin
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
   */
  const acos = typed(name, {
    'number': function (x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.acos(x);
      } else {
        return new Complex(x, 0).acos();
      }
    },
    'Complex': function (x) {
      return x.acos();
    },
    'BigNumber': function (x) {
      return x.acos();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, acos);
    }
  });
  return acos;
});
exports.createAcos = createAcos;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/trigonometry/acosh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAcosh = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'acosh';
const dependencies = ['typed', 'config', 'Complex'];
const createAcosh =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex
}) => {
  /**
   * Calculate the hyperbolic arccos of a value,
   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acosh(x)
   *
   * Examples:
   *
   *    math.acosh(1.5)       // returns 0.9624236501192069
   *
   * See also:
   *
   *    cosh, asinh, atanh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
   */
  const acosh = typed(name, {
    'number': function (x) {
      if (x >= 1 || config.predictable) {
        return (0, _number.acoshNumber)(x);
      }

      if (x <= -1) {
        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
      }

      return new Complex(x, 0).acosh();
    },
    'Complex': function (x) {
      return x.acosh();
    },
    'BigNumber': function (x) {
      return x.acosh();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, acosh);
    }
  });
  return acosh;
});
exports.createAcosh = createAcosh;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/acot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAcot = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'acot';
const dependencies = ['typed', 'BigNumber'];
const createAcot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acot(x)
   *
   * Examples:
   *
   *    math.acot(0.5)           // returns number 0.4636476090008061
   *    math.acot(math.cot(1.5)) // returns number 1.5
   *
   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    cot, atan
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cotangent of x
   */
  const acot = typed(name, {
    'number': _number.acotNumber,
    'Complex': function (x) {
      return x.acot();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x).atan();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, acot);
    }
  });
  return acot;
});
exports.createAcot = createAcot;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/acoth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAcoth = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'acoth';
const dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
const createAcoth =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex,
  BigNumber
}) => {
  /**
   * Calculate the hyperbolic arccotangent of a value,
   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acoth(x)
   *
   * Examples:
   *
   *    math.acoth(0.5)       // returns 0.8047189562170503
   *
   * See also:
   *
   *    acsch, asech
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
   */
  const acoth = typed(name, {
    'number': function (x) {
      if (x >= 1 || x <= -1 || config.predictable) {
        return (0, _number.acothNumber)(x);
      }

      return new Complex(x, 0).acoth();
    },
    'Complex': function (x) {
      return x.acoth();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x).atanh();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, acoth);
    }
  });
  return acoth;
});
exports.createAcoth = createAcoth;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/acsc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAcsc = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'acsc';
const dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
const createAcsc =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex,
  BigNumber
}) => {
  /**
   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsc(x)
   *
   * Examples:
   *
   *    math.acsc(0.5)           // returns number 0.5235987755982989
   *    math.acsc(math.csc(1.5)) // returns number ~1.5
   *
   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    csc, asin, asec
   *
   * @param {number | Complex | Array | Matrix} x   Function input
   * @return {number | Complex | Array | Matrix} The arc cosecant of x
   */
  const acsc = typed(name, {
    'number': function (x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return (0, _number.acscNumber)(x);
      }

      return new Complex(x, 0).acsc();
    },
    'Complex': function (x) {
      return x.acsc();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x).asin();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, acsc);
    }
  });
  return acsc;
});
exports.createAcsc = createAcsc;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/acsch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAcsch = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'acsch';
const dependencies = ['typed', 'BigNumber'];
const createAcsch =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the hyperbolic arccosecant of a value,
   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.acsch(x)
   *
   * Examples:
   *
   *    math.acsch(0.5)       // returns 1.4436354751788103
   *
   * See also:
   *
   *    asech, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
   */
  const acsch = typed(name, {
    'number': _number.acschNumber,
    'Complex': function (x) {
      return x.acsch();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x).asinh();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, acsch);
    }
  });
  return acsch;
});
exports.createAcsch = createAcsch;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/asec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAsec = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'asec';
const dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
const createAsec =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex,
  BigNumber
}) => {
  /**
   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asec(x)
   *
   * Examples:
   *
   *    math.asec(0.5)           // returns 1.0471975511965979
   *    math.asec(math.sec(1.5)) // returns 1.5
   *
   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
   *
   * See also:
   *
   *    acos, acot, acsc
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} The arc secant of x
   */
  const asec = typed(name, {
    'number': function (x) {
      if (x <= -1 || x >= 1 || config.predictable) {
        return (0, _number.asecNumber)(x);
      }

      return new Complex(x, 0).asec();
    },
    'Complex': function (x) {
      return x.asec();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x).acos();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, asec);
    }
  });
  return asec;
});
exports.createAsec = createAsec;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/asech.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAsech = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'asech';
const dependencies = ['typed', 'config', 'Complex', 'BigNumber'];
const createAsech =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex,
  BigNumber
}) => {
  /**
   * Calculate the hyperbolic arcsecant of a value,
   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asech(x)
   *
   * Examples:
   *
   *    math.asech(0.5)       // returns 1.3169578969248166
   *
   * See also:
   *
   *    acsch, acoth
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
   */
  const asech = typed(name, {
    'number': function (x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        const xInv = 1 / x;

        if (xInv > 0 || config.predictable) {
          return (0, _number.asechNumber)(x);
        }

        const ret = Math.sqrt(xInv * xInv - 1);
        return new Complex(Math.log(ret - xInv), Math.PI);
      }

      return new Complex(x, 0).asech();
    },
    'Complex': function (x) {
      return x.asech();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x).acosh();
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, asech);
    }
  });
  return asech;
});
exports.createAsech = createAsech;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/asin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAsin = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'asin';
const dependencies = ['typed', 'config', 'Complex'];
const createAsin =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex
}) => {
  /**
   * Calculate the inverse sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asin(x)
   *
   * Examples:
   *
   *    math.asin(0.5)           // returns number 0.5235987755982989
   *    math.asin(math.sin(1.5)) // returns number ~1.5
   *
   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    sin, atan, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
   */
  const asin = typed(name, {
    'number': function (x) {
      if (x >= -1 && x <= 1 || config.predictable) {
        return Math.asin(x);
      } else {
        return new Complex(x, 0).asin();
      }
    },
    'Complex': function (x) {
      return x.asin();
    },
    'BigNumber': function (x) {
      return x.asin();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since asin(0) = 0
      return (0, _collection.deepMap)(x, asin, true);
    }
  });
  return asin;
});
exports.createAsin = createAsin;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/trigonometry/asinh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAsinh = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'asinh';
const dependencies = ['typed'];
const createAsinh =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the hyperbolic arcsine of a value,
   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.asinh(x)
   *
   * Examples:
   *
   *    math.asinh(0.5)       // returns 0.48121182505960347
   *
   * See also:
   *
   *    acosh, atanh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
   */
  const asinh = typed('asinh', {
    'number': _number.asinhNumber,
    'Complex': function (x) {
      return x.asinh();
    },
    'BigNumber': function (x) {
      return x.asinh();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since asinh(0) = 0
      return (0, _collection.deepMap)(x, asinh, true);
    }
  });
  return asinh;
});
exports.createAsinh = createAsinh;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/atan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAtan = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'atan';
const dependencies = ['typed'];
const createAtan =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the inverse tangent of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan(x)
   *
   * Examples:
   *
   *    math.atan(0.5)           // returns number 0.4636476090008061
   *    math.atan(math.tan(1.5)) // returns number 1.5
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, asin, acos
   *
   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
   */
  const atan = typed('atan', {
    'number': function (x) {
      return Math.atan(x);
    },
    'Complex': function (x) {
      return x.atan();
    },
    'BigNumber': function (x) {
      return x.atan();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since atan(0) = 0
      return (0, _collection.deepMap)(x, atan, true);
    }
  });
  return atan;
});
exports.createAtan = createAtan;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/trigonometry/atan2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAtan2 = void 0;

var _factory = require("../../utils/factory");

var _algorithm = require("../../type/matrix/utils/algorithm02");

var _algorithm2 = require("../../type/matrix/utils/algorithm03");

var _algorithm3 = require("../../type/matrix/utils/algorithm09");

var _algorithm4 = require("../../type/matrix/utils/algorithm11");

var _algorithm5 = require("../../type/matrix/utils/algorithm12");

var _algorithm6 = require("../../type/matrix/utils/algorithm13");

var _algorithm7 = require("../../type/matrix/utils/algorithm14");

const name = 'atan2';
const dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];
const createAtan2 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  equalScalar,
  BigNumber,
  DenseMatrix
}) => {
  const algorithm02 = (0, _algorithm.createAlgorithm02)({
    typed,
    equalScalar
  });
  const algorithm03 = (0, _algorithm2.createAlgorithm03)({
    typed
  });
  const algorithm09 = (0, _algorithm3.createAlgorithm09)({
    typed,
    equalScalar
  });
  const algorithm11 = (0, _algorithm4.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm12 = (0, _algorithm5.createAlgorithm12)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm6.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm7.createAlgorithm14)({
    typed
  });
  /**
   * Calculate the inverse tangent function with two arguments, y/x.
   * By providing two arguments, the right quadrant of the computed angle can be
   * determined.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atan2(y, x)
   *
   * Examples:
   *
   *    math.atan2(2, 2) / math.pi       // returns number 0.25
   *
   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
   *    const x = math.cos(angle)
   *    const y = math.sin(angle)
   *
   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
   *
   * See also:
   *
   *    tan, atan, sin, cos
   *
   * @param {number | Array | Matrix} y  Second dimension
   * @param {number | Array | Matrix} x  First dimension
   * @return {number | Array | Matrix} Four-quadrant inverse tangent
   */

  const atan2 = typed(name, {
    'number, number': Math.atan2,
    // Complex numbers doesn't seem to have a reasonable implementation of
    // atan2(). Even Matlab removed the support, after they only calculated
    // the atan only on base of the real part of the numbers and ignored the imaginary.
    'BigNumber, BigNumber': function (y, x) {
      return BigNumber.atan2(y, x);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm09(x, y, atan2, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      // mind the order of y and x!
      return algorithm02(y, x, atan2, true);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm03(x, y, atan2, false);
    },
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, atan2);
    },
    'Array, Array': function (x, y) {
      return atan2(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      return atan2(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      return atan2(x, matrix(y));
    },
    'SparseMatrix, number | BigNumber': function (x, y) {
      return algorithm11(x, y, atan2, false);
    },
    'DenseMatrix, number | BigNumber': function (x, y) {
      return algorithm14(x, y, atan2, false);
    },
    'number | BigNumber, SparseMatrix': function (x, y) {
      // mind the order of y and x
      return algorithm12(y, x, atan2, true);
    },
    'number | BigNumber, DenseMatrix': function (x, y) {
      // mind the order of y and x
      return algorithm14(y, x, atan2, true);
    },
    'Array, number | BigNumber': function (x, y) {
      return algorithm14(matrix(x), y, atan2, false).valueOf();
    },
    'number | BigNumber, Array': function (x, y) {
      return algorithm14(matrix(y), x, atan2, true).valueOf();
    }
  });
  return atan2;
});
exports.createAtan2 = createAtan2;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../type/matrix/utils/algorithm02":"../node_modules/mathjs/src/type/matrix/utils/algorithm02.js","../../type/matrix/utils/algorithm03":"../node_modules/mathjs/src/type/matrix/utils/algorithm03.js","../../type/matrix/utils/algorithm09":"../node_modules/mathjs/src/type/matrix/utils/algorithm09.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm12":"../node_modules/mathjs/src/type/matrix/utils/algorithm12.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/trigonometry/atanh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAtanh = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'atanh';
const dependencies = ['typed', 'config', 'Complex'];
const createAtanh =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  Complex
}) => {
  /**
   * Calculate the hyperbolic arctangent of a value,
   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.atanh(x)
   *
   * Examples:
   *
   *    math.atanh(0.5)       // returns 0.5493061443340549
   *
   * See also:
   *
   *    acosh, asinh
   *
   * @param {number | Complex | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
   */
  const atanh = typed(name, {
    'number': function (x) {
      if (x <= 1 && x >= -1 || config.predictable) {
        return (0, _number.atanhNumber)(x);
      }

      return new Complex(x, 0).atanh();
    },
    'Complex': function (x) {
      return x.atanh();
    },
    'BigNumber': function (x) {
      return x.atanh();
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since atanh(0) = 0
      return (0, _collection.deepMap)(x, atanh, true);
    }
  });
  return atanh;
});
exports.createAtanh = createAtanh;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/cos.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCos = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'cos';
const dependencies = ['typed'];
const createCos =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the cosine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cos(x)
   *
   * Examples:
   *
   *    math.cos(2)                      // returns number -0.4161468365471422
   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
   *    math.cos(math.unit(180, 'deg'))  // returns number -1
   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
   */
  const cos = typed(name, {
    'number': Math.cos,
    'Complex': function (x) {
      return x.cos();
    },
    'BigNumber': function (x) {
      return x.cos();
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cos is no angle');
      }

      return cos(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, cos);
    }
  });
  return cos;
});
exports.createCos = createCos;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/trigonometry/cosh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCosh = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

const name = 'cosh';
const dependencies = ['typed'];
const createCosh =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the hyperbolic cosine of a value,
   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cosh(x)
   *
   * Examples:
   *
   *    math.cosh(0.5)       // returns number 1.1276259652063807
   *
   * See also:
   *
   *    sinh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
   */
  const cosh = typed(name, {
    'number': _number.cosh,
    'Complex': function (x) {
      return x.cosh();
    },
    'BigNumber': function (x) {
      return x.cosh();
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cosh is no angle');
      }

      return cosh(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, cosh);
    }
  });
  return cosh;
});
exports.createCosh = createCosh;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/function/trigonometry/cot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCot = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'cot';
const dependencies = ['typed', 'BigNumber'];
const createCot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.cot(x)
   *
   * Examples:
   *
   *    math.cot(2)      // returns number -0.45765755436028577
   *    1 / math.tan(2)  // returns number -0.45765755436028577
   *
   * See also:
   *
   *    tan, sec, csc
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cotangent of x
   */
  const cot = typed(name, {
    'number': _number.cotNumber,
    'Complex': function (x) {
      return x.cot();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x.tan());
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function cot is no angle');
      }

      return cot(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, cot);
    }
  });
  return cot;
});
exports.createCot = createCot;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/coth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCoth = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'coth';
const dependencies = ['typed', 'BigNumber'];
const createCoth =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the hyperbolic cotangent of a value,
   * defined as `coth(x) = 1 / tanh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.coth(x)
   *
   * Examples:
   *
   *    // coth(x) = 1 / tanh(x)
   *    math.coth(2)         // returns 1.0373147207275482
   *    1 / math.tanh(2)     // returns 1.0373147207275482
   *
   * See also:
   *
   *    sinh, tanh, cosh
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
   */
  const coth = typed(name, {
    'number': _number.cothNumber,
    'Complex': function (x) {
      return x.coth();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x.tanh());
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function coth is no angle');
      }

      return coth(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, coth);
    }
  });
  return coth;
});
exports.createCoth = createCoth;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/csc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsc = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'csc';
const dependencies = ['typed', 'BigNumber'];
const createCsc =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csc(x)
   *
   * Examples:
   *
   *    math.csc(2)      // returns number 1.099750170294617
   *    1 / math.sin(2)  // returns number 1.099750170294617
   *
   * See also:
   *
   *    sin, sec, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Cosecant of x
   */
  const csc = typed(name, {
    'number': _number.cscNumber,
    'Complex': function (x) {
      return x.csc();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x.sin());
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csc is no angle');
      }

      return csc(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, csc);
    }
  });
  return csc;
});
exports.createCsc = createCsc;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/csch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsch = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'csch';
const dependencies = ['typed', 'BigNumber'];
const createCsch =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the hyperbolic cosecant of a value,
   * defined as `csch(x) = 1 / sinh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.csch(x)
   *
   * Examples:
   *
   *    // csch(x) = 1/ sinh(x)
   *    math.csch(0.5)       // returns 1.9190347513349437
   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
   *
   * See also:
   *
   *    sinh, sech, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
   */
  const csch = typed(name, {
    'number': _number.cschNumber,
    'Complex': function (x) {
      return x.csch();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x.sinh());
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function csch is no angle');
      }

      return csch(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, csch);
    }
  });
  return csch;
});
exports.createCsch = createCsch;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/sec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSec = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'sec';
const dependencies = ['typed', 'BigNumber'];
const createSec =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sec(x)
   *
   * Examples:
   *
   *    math.sec(2)      // returns number -2.4029979617223822
   *    1 / math.cos(2)  // returns number -2.4029979617223822
   *
   * See also:
   *
   *    cos, csc, cot
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Secant of x
   */
  const sec = typed(name, {
    'number': _number.secNumber,
    'Complex': function (x) {
      return x.sec();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x.cos());
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sec is no angle');
      }

      return sec(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, sec);
    }
  });
  return sec;
});
exports.createSec = createSec;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/sech.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSech = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'sech';
const dependencies = ['typed', 'BigNumber'];
const createSech =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  BigNumber
}) => {
  /**
   * Calculate the hyperbolic secant of a value,
   * defined as `sech(x) = 1 / cosh(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sech(x)
   *
   * Examples:
   *
   *    // sech(x) = 1/ cosh(x)
   *    math.sech(0.5)       // returns 0.886818883970074
   *    1 / math.cosh(0.5)   // returns 0.886818883970074
   *
   * See also:
   *
   *    cosh, csch, coth
   *
   * @param {number | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
   */
  const sech = typed(name, {
    'number': _number.sechNumber,
    'Complex': function (x) {
      return x.sech();
    },
    'BigNumber': function (x) {
      return new BigNumber(1).div(x.cosh());
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sech is no angle');
      }

      return sech(x.value);
    },
    'Array | Matrix': function (x) {
      return (0, _collection.deepMap)(x, sech);
    }
  });
  return sech;
});
exports.createSech = createSech;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSin = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'sin';
const dependencies = ['typed'];
const createSin =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the sine of a value.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sin(x)
   *
   * Examples:
   *
   *    math.sin(2)                      // returns number 0.9092974268256813
   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
   *    math.sin(math.unit(90, 'deg'))   // returns number 1
   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
   *
   *    const angle = 0.2
   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
   *
   * See also:
   *
   *    cos, tan
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
   */
  const sin = typed(name, {
    'number': Math.sin,
    'Complex': function (x) {
      return x.sin();
    },
    'BigNumber': function (x) {
      return x.sin();
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sin is no angle');
      }

      return sin(x.value);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sin(0) = 0
      return (0, _collection.deepMap)(x, sin, true);
    }
  });
  return sin;
});
exports.createSin = createSin;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/trigonometry/sinh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSinh = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../plain/number");

const name = 'sinh';
const dependencies = ['typed'];
const createSinh =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the hyperbolic sine of a value,
   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.sinh(x)
   *
   * Examples:
   *
   *    math.sinh(0.5)       // returns number 0.5210953054937474
   *
   * See also:
   *
   *    cosh, tanh
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
   */
  const sinh = typed(name, {
    'number': _number.sinhNumber,
    'Complex': function (x) {
      return x.sinh();
    },
    'BigNumber': function (x) {
      return x.sinh();
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function sinh is no angle');
      }

      return sinh(x.value);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since sinh(0) = 0
      return (0, _collection.deepMap)(x, sinh, true);
    }
  });
  return sinh;
});
exports.createSinh = createSinh;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/trigonometry/tan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTan = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

const name = 'tan';
const dependencies = ['typed'];
const createTan =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tan(x)
   *
   * Examples:
   *
   *    math.tan(0.5)                    // returns number 0.5463024898437905
   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
   *    math.tan(math.pi / 4)            // returns number 1
   *    math.tan(math.unit(45, 'deg'))   // returns number 1
   *
   * See also:
   *
   *    atan, sin, cos
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
   */
  const tan = typed(name, {
    'number': Math.tan,
    'Complex': function (x) {
      return x.tan();
    },
    'BigNumber': function (x) {
      return x.tan();
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tan is no angle');
      }

      return tan(x.value);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since tan(0) = 0
      return (0, _collection.deepMap)(x, tan, true);
    }
  });
  return tan;
});
exports.createTan = createTan;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/function/trigonometry/tanh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTanh = void 0;

var _factory = require("../../utils/factory");

var _collection = require("../../utils/collection");

var _number = require("../../utils/number");

const name = 'tanh';
const dependencies = ['typed'];
const createTanh =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Calculate the hyperbolic tangent of a value,
   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.tanh(x)
   *
   * Examples:
   *
   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
   *    math.tanh(0.5)                   // returns 0.46211715726000974
   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
   *    1 / math.coth(0.5)               // returns 0.46211715726000974
   *
   * See also:
   *
   *    sinh, cosh, coth
   *
   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
   */
  const tanh = typed('tanh', {
    'number': _number.tanh,
    'Complex': function (x) {
      return x.tanh();
    },
    'BigNumber': function (x) {
      return x.tanh();
    },
    'Unit': function (x) {
      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {
        throw new TypeError('Unit in function tanh is no angle');
      }

      return tanh(x.value);
    },
    'Array | Matrix': function (x) {
      // deep map collection, skip zeros since tanh(0) = 0
      return (0, _collection.deepMap)(x, tanh, true);
    }
  });
  return tanh;
});
exports.createTanh = createTanh;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js"}],"../node_modules/mathjs/src/function/set/setCartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetCartesian = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setCartesian';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
const createSetCartesian =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index,
  DenseMatrix
}) => {
  /**
   * Create the cartesian product of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setCartesian(set1, set2)
   *
   * Examples:
   *
   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference, setPowerset
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The cartesian product of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      let result = [];

      if (subset(size(a1), new Index(0)) !== 0 && subset(size(a2), new Index(0)) !== 0) {
        // if any of them is empty, return empty
        const b1 = (0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural);
        const b2 = (0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural);
        result = [];

        for (let i = 0; i < b1.length; i++) {
          for (let j = 0; j < b2.length; j++) {
            result.push([b1[i], b2[j]]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});
exports.createSetCartesian = createSetCartesian;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setDifference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetDifference = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setDifference';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
const createSetDifference =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index,
  DenseMatrix
}) => {
  /**
   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
   *
   * See also:
   *
   *    setUnion, setIntersect, setSymDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The difference of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      let result;

      if (subset(size(a1), new Index(0)) === 0) {
        // empty-anything=empty
        result = [];
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything-empty=anything
        return (0, _array.flatten)(a1.toArray());
      } else {
        const b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        const b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];
        let inb2;

        for (let i = 0; i < b1.length; i++) {
          inb2 = false;

          for (let j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              inb2 = true;
              break;
            }
          }

          if (!inb2) {
            result.push(b1[i]);
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return (0, _array.generalize)(result);
      } // return a matrix otherwise


      return new DenseMatrix((0, _array.generalize)(result));
    }
  });
});
exports.createSetDifference = createSetDifference;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setDistinct.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetDistinct = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setDistinct';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
const createSetDistinct =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index,
  DenseMatrix
}) => {
  /**
   * Collect the distinct elements of a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setDistinct(set)
   *
   * Examples:
   *
   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
   *
   * See also:
   *
   *    setMultiplicity
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
   */
  return typed(name, {
    'Array | Matrix': function (a) {
      let result;

      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        result = [];
      } else {
        const b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        result = [];
        result.push(b[0]);

        for (let i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            result.push(b[i]);
          }
        }
      } // return an array, if the input was an array


      if (Array.isArray(a)) {
        return result;
      } // return a matrix otherwise


      return new DenseMatrix(result);
    }
  });
});
exports.createSetDistinct = createSetDistinct;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setIntersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetIntersect = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setIntersect';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index', 'DenseMatrix'];
const createSetIntersect =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index,
  DenseMatrix
}) => {
  /**
   * Create the intersection of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIntersect(set1, set2)
   *
   * Examples:
   *
   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
   *
   * See also:
   *
   *    setUnion, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The intersection of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      let result;

      if (subset(size(a1), new Index(0)) === 0 || subset(size(a2), new Index(0)) === 0) {
        // of any of them is empty, return empty
        result = [];
      } else {
        const b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
        const b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
        result = [];

        for (let i = 0; i < b1.length; i++) {
          for (let j = 0; j < b2.length; j++) {
            if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
              // the identifier is always a decimal int
              result.push(b1[i]);
              break;
            }
          }
        }
      } // return an array, if both inputs were arrays


      if (Array.isArray(a1) && Array.isArray(a2)) {
        return (0, _array.generalize)(result);
      } // return a matrix otherwise


      return new DenseMatrix((0, _array.generalize)(result));
    }
  });
});
exports.createSetIntersect = createSetIntersect;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setIsSubset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetIsSubset = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setIsSubset';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
const createSetIsSubset =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index
}) => {
  /**
   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setIsSubset(set1, set2)
   *
   * Examples:
   *
   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {boolean}            true | false
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // empty is a subset of anything
        return true;
      } else if (subset(size(a2), new Index(0)) === 0) {
        // anything is not a subset of empty
        return false;
      }

      const b1 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));
      const b2 = (0, _array.identify)((0, _array.flatten)(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));
      let inb2;

      for (let i = 0; i < b1.length; i++) {
        inb2 = false;

        for (let j = 0; j < b2.length; j++) {
          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
            // the identifier is always a decimal int
            inb2 = true;
            break;
          }
        }

        if (inb2 === false) {
          return false;
        }
      }

      return true;
    }
  });
});
exports.createSetIsSubset = createSetIsSubset;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setMultiplicity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetMultiplicity = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setMultiplicity';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
const createSetMultiplicity =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index
}) => {
  /**
   * Count the multiplicity of an element in a multiset.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setMultiplicity(element, set)
   *
   * Examples:
   *
   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
   *
   * See also:
   *
   *    setDistinct, setSize
   *
   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
   * @param {Array | Matrix}     a  A multiset
   * @return {number}            The number of how many times the multiset contains the element
   */
  return typed(name, {
    'number | BigNumber | Fraction | Complex, Array | Matrix': function (e, a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return 0
        return 0;
      }

      const b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray());
      let count = 0;

      for (let i = 0; i < b.length; i++) {
        if (compareNatural(b[i], e) === 0) {
          count++;
        }
      }

      return count;
    }
  });
});
exports.createSetMultiplicity = createSetMultiplicity;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setPowerset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetPowerset = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setPowerset';
const dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];
const createSetPowerset =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  subset,
  compareNatural,
  Index
}) => {
  /**
   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setPowerset(set)
   *
   * Examples:
   *
   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
   *
   * See also:
   *
   *    setCartesian
   *
   * @param {Array | Matrix}    a  A (multi)set
   * @return {Array}    The powerset of the (multi)set
   */
  return typed(name, {
    'Array | Matrix': function (a) {
      if (subset(size(a), new Index(0)) === 0) {
        // if empty, return empty
        return [];
      }

      const b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
      const result = [];
      let number = 0;

      while (number.toString(2).length <= b.length) {
        result.push(_subset(b, number.toString(2).split('').reverse()));
        number++;
      } // can not return a matrix, because of the different size of the subarrays


      return _sort(result);
    }
  }); // create subset

  function _subset(array, bitarray) {
    const result = [];

    for (let i = 0; i < bitarray.length; i++) {
      if (bitarray[i] === '1') {
        result.push(array[i]);
      }
    }

    return result;
  } // sort subsests by length


  function _sort(array) {
    let temp = [];

    for (let i = array.length - 1; i > 0; i--) {
      for (let j = 0; j < i; j++) {
        if (array[j].length > array[j + 1].length) {
          temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
      }
    }

    return array;
  }
});
exports.createSetPowerset = createSetPowerset;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetSize = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setSize';
const dependencies = ['typed', 'compareNatural'];
const createSetSize =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  compareNatural
}) => {
  /**
   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
   * A multi-dimension array will be converted to a single-dimension array before the operation.
   *
   * Syntax:
   *
   *    math.setSize(set)
   *    math.setSize(set, unique)
   *
   * Examples:
   *
   *    math.setSize([1, 2, 2, 4])          // returns 4
   *    math.setSize([1, 2, 2, 4], true)    // returns 3
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a  A multiset
   * @return {number}            The number of elements of the (multi)set
   */
  return typed(name, {
    'Array | Matrix': function (a) {
      return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;
    },
    'Array | Matrix, boolean': function (a, unique) {
      if (unique === false || a.length === 0) {
        return Array.isArray(a) ? (0, _array.flatten)(a).length : (0, _array.flatten)(a.toArray()).length;
      } else {
        const b = (0, _array.flatten)(Array.isArray(a) ? a : a.toArray()).sort(compareNatural);
        let count = 1;

        for (let i = 1; i < b.length; i++) {
          if (compareNatural(b[i], b[i - 1]) !== 0) {
            count++;
          }
        }

        return count;
      }
    }
  });
});
exports.createSetSize = createSetSize;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setSymDifference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetSymDifference = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setSymDifference';
const dependencies = ['typed', 'size', 'concat', 'subset', 'setDifference', 'Index'];
const createSetSymDifference =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  concat,
  subset,
  setDifference,
  Index
}) => {
  /**
   * Create the symmetric difference of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setSymDifference(set1, set2)
   *
   * Examples:
   *
   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
   *
   * See also:
   *
   *    setUnion, setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return (0, _array.flatten)(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return (0, _array.flatten)(a1);
      }

      const b1 = (0, _array.flatten)(a1);
      const b2 = (0, _array.flatten)(a2);
      return concat(setDifference(b1, b2), setDifference(b2, b1));
    }
  });
});
exports.createSetSymDifference = createSetSymDifference;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/set/setUnion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSetUnion = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'setUnion';
const dependencies = ['typed', 'size', 'concat', 'subset', 'setIntersect', 'setSymDifference', 'Index'];
const createSetUnion =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  size,
  concat,
  subset,
  setIntersect,
  setSymDifference,
  Index
}) => {
  /**
   * Create the union of two (multi)sets.
   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
   *
   * Syntax:
   *
   *    math.setUnion(set1, set2)
   *
   * Examples:
   *
   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
   *
   * See also:
   *
   *    setIntersect, setDifference
   *
   * @param {Array | Matrix}    a1  A (multi)set
   * @param {Array | Matrix}    a2  A (multi)set
   * @return {Array | Matrix}    The union of two (multi)sets
   */
  return typed(name, {
    'Array | Matrix, Array | Matrix': function (a1, a2) {
      if (subset(size(a1), new Index(0)) === 0) {
        // if any of them is empty, return the other one
        return (0, _array.flatten)(a2);
      } else if (subset(size(a2), new Index(0)) === 0) {
        return (0, _array.flatten)(a1);
      }

      const b1 = (0, _array.flatten)(a1);
      const b2 = (0, _array.flatten)(a2);
      return concat(setSymDifference(b1, b2), setIntersect(b1, b2));
    }
  });
});
exports.createSetUnion = createSetUnion;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/arithmetic/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAdd = void 0;

var _factory = require("../../utils/factory");

var _object = require("../../utils/object");

var _algorithm = require("../../type/matrix/utils/algorithm01");

var _algorithm2 = require("../../type/matrix/utils/algorithm04");

var _algorithm3 = require("../../type/matrix/utils/algorithm10");

var _algorithm4 = require("../../type/matrix/utils/algorithm13");

var _algorithm5 = require("../../type/matrix/utils/algorithm14");

const name = 'add';
const dependencies = ['typed', 'matrix', 'addScalar', 'equalScalar', 'DenseMatrix', 'SparseMatrix'];
const createAdd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  addScalar,
  equalScalar,
  DenseMatrix,
  SparseMatrix
}) => {
  const algorithm01 = (0, _algorithm.createAlgorithm01)({
    typed
  });
  const algorithm04 = (0, _algorithm2.createAlgorithm04)({
    typed,
    equalScalar
  });
  const algorithm10 = (0, _algorithm3.createAlgorithm10)({
    typed,
    DenseMatrix
  });
  const algorithm13 = (0, _algorithm4.createAlgorithm13)({
    typed
  });
  const algorithm14 = (0, _algorithm5.createAlgorithm14)({
    typed
  });
  /**
   * Add two or more values, `x + y`.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.add(x, y)
   *    math.add(x, y, z, ...)
   *
   * Examples:
   *
   *    math.add(2, 3)               // returns number 5
   *    math.add(2, 3, 4)            // returns number 9
   *
   *    const a = math.complex(2, 3)
   *    const b = math.complex(-4, 1)
   *    math.add(a, b)               // returns Complex -2 + 4i
   *
   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
   *
   *    const c = math.unit('5 cm')
   *    const d = math.unit('2.1 mm')
   *    math.add(c, d)               // returns Unit 52.1 mm
   *
   *    math.add("2.3", "4")         // returns number 6.3
   *
   * See also:
   *
   *    subtract, sum
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
   */

  const add = typed(name, (0, _object.extend)({
    // we extend the signatures of addScalar with signatures dealing with matrices
    'DenseMatrix, DenseMatrix': function (x, y) {
      return algorithm13(x, y, addScalar);
    },
    'DenseMatrix, SparseMatrix': function (x, y) {
      return algorithm01(x, y, addScalar, false);
    },
    'SparseMatrix, DenseMatrix': function (x, y) {
      return algorithm01(y, x, addScalar, true);
    },
    'SparseMatrix, SparseMatrix': function (x, y) {
      return algorithm04(x, y, addScalar);
    },
    'Array, Array': function (x, y) {
      // use matrix implementation
      return add(matrix(x), matrix(y)).valueOf();
    },
    'Array, Matrix': function (x, y) {
      // use matrix implementation
      return add(matrix(x), y);
    },
    'Matrix, Array': function (x, y) {
      // use matrix implementation
      return add(x, matrix(y));
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, addScalar, false);
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm10(x, y, addScalar, false);
    },
    'any, DenseMatrix': function (x, y) {
      return algorithm14(y, x, addScalar, true);
    },
    'any, SparseMatrix': function (x, y) {
      return algorithm10(y, x, addScalar, true);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, addScalar, false).valueOf();
    },
    'any, Array': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(y), x, addScalar, true).valueOf();
    },
    'any, any': addScalar,
    'any, any, ...any': function (x, y, rest) {
      let result = add(x, y);

      for (let i = 0; i < rest.length; i++) {
        result = add(result, rest[i]);
      }

      return result;
    }
  }, addScalar.signatures));
  return add;
});
exports.createAdd = createAdd;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../type/matrix/utils/algorithm01":"../node_modules/mathjs/src/type/matrix/utils/algorithm01.js","../../type/matrix/utils/algorithm04":"../node_modules/mathjs/src/type/matrix/utils/algorithm04.js","../../type/matrix/utils/algorithm10":"../node_modules/mathjs/src/type/matrix/utils/algorithm10.js","../../type/matrix/utils/algorithm13":"../node_modules/mathjs/src/type/matrix/utils/algorithm13.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/arithmetic/hypot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHypot = void 0;

var _factory = require("../../utils/factory");

var _array = require("../../utils/array");

const name = 'hypot';
const dependencies = ['typed', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'sqrt', 'smaller', 'isPositive'];
const createHypot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  abs,
  addScalar,
  divideScalar,
  multiplyScalar,
  sqrt,
  smaller,
  isPositive
}) => {
  /**
   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
   *
   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
   *
   * For matrix input, the hypotenusa is calculated for all values in the matrix.
   *
   * Syntax:
   *
   *     math.hypot(a, b, ...)
   *     math.hypot([a, b, c, ...])
   *
   * Examples:
   *
   *     math.hypot(3, 4)      // 5
   *     math.hypot(3, 4, 5)   // 7.0710678118654755
   *     math.hypot([3, 4, 5]) // 7.0710678118654755
   *     math.hypot(-2)        // 2
   *
   * See also:
   *
   *     abs, norm
   *
   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
   *                                                          Matrix and Array input is flattened and returns a
   *                                                          single number for the whole matrix.
   * @return {number | BigNumber} Returns the hypothenusa of the input values.
   */
  const hypot = typed(name, {
    '... number | BigNumber': _hypot,
    'Array': function (x) {
      return hypot.apply(hypot, (0, _array.flatten)(x));
    },
    'Matrix': function (x) {
      return hypot.apply(hypot, (0, _array.flatten)(x.toArray()));
    }
  });
  /**
   * Calculate the hypotenusa for an Array with values
   * @param {Array.<number | BigNumber>} args
   * @return {number | BigNumber} Returns the result
   * @private
   */

  function _hypot(args) {
    // code based on `hypot` from es6-shim:
    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
    let result = 0;
    let largest = 0;

    for (let i = 0; i < args.length; i++) {
      const value = abs(args[i]);

      if (smaller(largest, value)) {
        result = multiplyScalar(result, multiplyScalar(divideScalar(largest, value), divideScalar(largest, value)));
        result = addScalar(result, 1);
        largest = value;
      } else {
        result = addScalar(result, isPositive(value) ? multiplyScalar(divideScalar(value, largest), divideScalar(value, largest)) : value);
      }
    }

    return multiplyScalar(largest, sqrt(result));
  }

  return hypot;
});
exports.createHypot = createHypot;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js"}],"../node_modules/mathjs/src/function/arithmetic/norm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNorm = void 0;

var _factory = require("../../utils/factory");

const name = 'norm';
const dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix'];
const createNorm =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  abs,
  add,
  pow,
  conj,
  sqrt,
  multiply,
  equalScalar,
  larger,
  smaller,
  matrix
}) => {
  /**
   * Calculate the norm of a number, vector or matrix.
   *
   * The second parameter p is optional. If not provided, it defaults to 2.
   *
   * Syntax:
   *
   *    math.norm(x)
   *    math.norm(x, p)
   *
   * Examples:
   *
   *    math.abs(-3.5)                         // returns 3.5
   *    math.norm(-3.5)                        // returns 3.5
   *
   *    math.norm(math.complex(3, -4))         // returns 5
   *
   *    math.norm([1, 2, -3], Infinity)        // returns 3
   *    math.norm([1, 2, -3], -Infinity)       // returns 1
   *
   *    math.norm([3, 4], 2)                   // returns 5
   *
   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
   *
   * See also:
   *
   *    abs, hypot
   *
   * @param  {number | BigNumber | Complex | Array | Matrix} x
   *            Value for which to calculate the norm
   * @param  {number | BigNumber | string} [p=2]
   *            Vector space.
   *            Supported numbers include Infinity and -Infinity.
   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
   * @return {number | BigNumber} the p-norm
   */
  const norm = typed(name, {
    'number': Math.abs,
    'Complex': function (x) {
      return x.abs();
    },
    'BigNumber': function (x) {
      // norm(x) = abs(x)
      return x.abs();
    },
    'boolean': function (x) {
      // norm(x) = abs(x)
      return Math.abs(x);
    },
    'Array': function (x) {
      return _norm(matrix(x), 2);
    },
    'Matrix': function (x) {
      return _norm(x, 2);
    },
    'number | Complex | BigNumber | boolean, number | BigNumber | string': function (x) {
      // ignore second parameter, TODO: remove the option of second parameter for these types
      return norm(x);
    },
    'Array, number | BigNumber | string': function (x, p) {
      return _norm(matrix(x), p);
    },
    'Matrix, number | BigNumber | string': function (x, p) {
      return _norm(x, p);
    }
  });
  /**
   * Calculate the norm for an array
   * @param {Matrix} x
   * @param {number | string} p
   * @returns {number} Returns the norm
   * @private
   */

  function _norm(x, p) {
    // size
    const sizeX = x.size(); // check if it is a vector

    if (sizeX.length === 1) {
      // check p
      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x, Infinity) = max(abs(x))
        let pinf = 0; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          const v = abs(value);

          if (larger(v, pinf)) {
            pinf = v;
          }
        }, true);
        return pinf;
      }

      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
        // norm(x, -Infinity) = min(abs(x))
        let ninf; // skip zeros since abs(0) === 0

        x.forEach(function (value) {
          const v = abs(value);

          if (!ninf || smaller(v, ninf)) {
            ninf = v;
          }
        }, true);
        return ninf || 0;
      }

      if (p === 'fro') {
        return _norm(x, 2);
      }

      if (typeof p === 'number' && !isNaN(p)) {
        // check p != 0
        if (!equalScalar(p, 0)) {
          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
          let n = 0; // skip zeros since abs(0) === 0

          x.forEach(function (value) {
            n = add(pow(abs(value), p), n);
          }, true);
          return pow(n, 1 / p);
        }

        return Number.POSITIVE_INFINITY;
      } // invalid parameter value


      throw new Error('Unsupported parameter value');
    } // MxN matrix


    if (sizeX.length === 2) {
      // check p
      if (p === 1) {
        // norm(x) = the largest column sum
        const c = []; // result

        let maxc = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          const j = index[1];
          const cj = add(c[j] || 0, abs(value));

          if (larger(cj, maxc)) {
            maxc = cj;
          }

          c[j] = cj;
        }, true);
        return maxc;
      }

      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
        // norm(x) = the largest row sum
        const r = []; // result

        let maxr = 0; // skip zeros since abs(0) == 0

        x.forEach(function (value, index) {
          const i = index[0];
          const ri = add(r[i] || 0, abs(value));

          if (larger(ri, maxr)) {
            maxr = ri;
          }

          r[i] = ri;
        }, true);
        return maxr;
      }

      if (p === 'fro') {
        // norm(x) = sqrt(sum(diag(x'x)))
        let fro = 0;
        x.forEach(function (value, index) {
          fro = add(fro, multiply(value, conj(value)));
        });
        return abs(sqrt(fro));
      }

      if (p === 2) {
        // not implemented
        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
      } // invalid parameter value


      throw new Error('Unsupported parameter value');
    }
  }

  return norm;
});
exports.createNorm = createNorm;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/dot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDot = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'dot';
const dependencies = ['typed', 'add', 'multiply'];
const createDot =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  multiply
}) => {
  /**
   * Calculate the dot product of two vectors. The dot product of
   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
   *
   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
   *
   * Syntax:
   *
   *    math.dot(x, y)
   *
   * Examples:
   *
   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
   *
   * See also:
   *
   *    multiply, cross
   *
   * @param  {Array | Matrix} x     First vector
   * @param  {Array | Matrix} y     Second vector
   * @return {number}               Returns the dot product of `x` and `y`
   */
  return typed(name, {
    'Matrix, Matrix': function (x, y) {
      return _dot(x.toArray(), y.toArray());
    },
    'Matrix, Array': function (x, y) {
      return _dot(x.toArray(), y);
    },
    'Array, Matrix': function (x, y) {
      return _dot(x, y.toArray());
    },
    'Array, Array': _dot
  });
  /**
   * Calculate the dot product for two arrays
   * @param {Array} x  First vector
   * @param {Array} y  Second vector
   * @returns {number} Returns the dot product of x and y
   * @private
   */
  // TODO: double code with math.multiply

  function _dot(x, y) {
    const xSize = (0, _array.arraySize)(x);
    const ySize = (0, _array.arraySize)(y);
    const len = xSize[0];
    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message

    if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
    if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
    let prod = 0;

    for (let i = 0; i < len; i++) {
      prod = add(prod, multiply(x[i], y[i]));
    }

    return prod;
  }
});
exports.createDot = createDot;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/trace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTrace = void 0;

var _object = require("../../utils/object");

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

const name = 'trace';
const dependencies = ['typed', 'matrix', 'add'];
const createTrace =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  add
}) => {
  /**
   * Calculate the trace of a matrix: the sum of the elements on the main
   * diagonal of a square matrix.
   *
   * Syntax:
   *
   *    math.trace(x)
   *
   * Examples:
   *
   *    math.trace([[1, 2], [3, 4]]) // returns 5
   *
   *    const A = [
   *      [1, 2, 3],
   *      [-1, 2, 3],
   *      [2, 0, 3]
   *    ]
   *    math.trace(A) // returns 6
   *
   * See also:
   *
   *    diag
   *
   * @param {Array | Matrix} x  A matrix
   *
   * @return {number} The trace of `x`
   */
  return typed('trace', {
    'Array': function _arrayTrace(x) {
      // use dense matrix implementation
      return _denseTrace(matrix(x));
    },
    'SparseMatrix': _sparseTrace,
    'DenseMatrix': _denseTrace,
    'any': _object.clone
  });

  function _denseTrace(m) {
    // matrix size & data
    const size = m._size;
    const data = m._data; // process dimensions

    switch (size.length) {
      case 1:
        // vector
        if (size[0] === 1) {
          // return data[0]
          return (0, _object.clone)(data[0]);
        }

        throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');

      case 2:
        // two dimensional
        const rows = size[0];
        const cols = size[1];

        if (rows === cols) {
          // calulate sum
          let sum = 0; // loop diagonal

          for (let i = 0; i < rows; i++) {
            sum = add(sum, data[i][i]);
          } // return trace


          return sum;
        }

        throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');

      default:
        // multi dimensional
        throw new RangeError('Matrix must be two dimensional (size: ' + (0, _string.format)(size) + ')');
    }
  }

  function _sparseTrace(m) {
    // matrix arrays
    const values = m._values;
    const index = m._index;
    const ptr = m._ptr;
    const size = m._size; // check dimensions

    const rows = size[0];
    const columns = size[1]; // matrix must be square

    if (rows === columns) {
      // calulate sum
      let sum = 0; // check we have data (avoid looping columns)

      if (values.length > 0) {
        // loop columns
        for (let j = 0; j < columns; j++) {
          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
          const k0 = ptr[j];
          const k1 = ptr[j + 1]; // loop k within [k0, k1[

          for (let k = k0; k < k1; k++) {
            // row index
            const i = index[k]; // check row

            if (i === j) {
              // accumulate value
              sum = add(sum, values[k]); // exit loop

              break;
            }

            if (i > j) {
              // exit loop, no value on the diagonal for column j
              break;
            }
          }
        }
      } // return trace


      return sum;
    }

    throw new RangeError('Matrix must be square (size: ' + (0, _string.format)(size) + ')');
  }
});
exports.createTrace = createTrace;
},{"../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/matrix/function/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndex = void 0;

var _factory = require("../../../utils/factory");

var _is = require("../../../utils/is");

const name = 'index';
const dependencies = ['typed', 'Index'];
const createIndex =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Index
}) => {
  /**
   * Create an index. An Index can store ranges having start, step, and end
   * for multiple dimensions.
   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
   *
   * Syntax:
   *
   *     math.index(range1, range2, ...)
   *
   * Where each range can be any of:
   *
   * - A number
   * - A string for getting/setting an object property
   * - An instance of `Range`
   * - A one-dimensional Array or a Matrix with numbers
   *
   * Indexes must be zero-based, integer numbers.
   *
   * Examples:
   *
   *    const b = [1, 2, 3, 4, 5]
   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
   *
   *    const a = math.matrix([[1, 2], [3, 4]])
   *    a.subset(math.index(0, 1))             // returns 2
   *
   * See also:
   *
   *    bignumber, boolean, complex, matrix, number, string, unit
   *
   * @param {...*} ranges   Zero or more ranges or numbers.
   * @return {Index}        Returns the created index
   */
  return typed(name, {
    '...number | string | BigNumber | Range | Array | Matrix': function (args) {
      const ranges = args.map(function (arg) {
        if ((0, _is.isBigNumber)(arg)) {
          return arg.toNumber(); // convert BigNumber to Number
        } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {
          return arg.map(function (elem) {
            // convert BigNumber to Number
            return (0, _is.isBigNumber)(elem) ? elem.toNumber() : elem;
          });
        } else {
          return arg;
        }
      });
      const res = new Index();
      Index.apply(res, ranges);
      return res;
    }
  });
});
exports.createIndex = createIndex;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/expression/keywords.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keywords = void 0;
// Reserved keywords not allowed to use in the parser
const keywords = {
  end: true
};
exports.keywords = keywords;
},{}],"../node_modules/mathjs/src/expression/node/Node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNode = void 0;

var _is = require("../../utils/is");

var _keywords = require("../keywords");

var _object = require("../../utils/object");

var _factory = require("../../utils/factory");

var _log = require("../../utils/log");

const name = 'Node';
const dependencies = ['mathWithTransform'];
const createNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  mathWithTransform
}) => {
  /**
   * Node
   */
  function Node() {
    if (!(this instanceof Node)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }
  }
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */


  Node.prototype.evaluate = function (scope) {
    return this.compile().evaluate(scope);
  };
  /**
   * Evaluate the node
   * @param {Object} [scope]  Scope to read/write variables
   * @return {*}              Returns the result
   */
  // TODO: Deprecated since v6.0.0. Clean up some day


  Node.prototype.eval = function (scope) {
    (0, _log.warnOnce)('Method Node.eval is renamed to Node.evaluate. Please use the new method name.');
    return this.evaluate(scope);
  };

  Node.prototype.type = 'Node';
  Node.prototype.isNode = true;
  Node.prototype.comment = '';
  /**
   * Compile the node into an optimized, evauatable JavaScript function
   * @return {{evaluate: function([Object])}} object
   *                Returns an object with a function 'evaluate',
   *                which can be invoked as expr.evaluate([scope: Object]),
   *                where scope is an optional object with
   *                variables.
   */

  Node.prototype.compile = function () {
    const expr = this._compile(mathWithTransform, {});

    const args = {};
    const context = null;

    function evaluate(scope) {
      const s = scope || {};

      _validateScope(s);

      return expr(s, args, context);
    }

    return {
      evaluate,
      // TODO: Deprecated since v6.0.0. Clean up some day
      eval: function deprecatedEval(scope) {
        (0, _log.warnOnce)('Method eval is renamed to evaluate. Please use the new method.');
        return evaluate(scope);
      }
    };
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  Node.prototype._compile = function (math, argNames) {
    throw new Error('Method _compile should be implemented by type ' + this.type);
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  Node.prototype.forEach = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run forEach on a Node interface');
  };
  /**
   * Create a new Node having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  Node.prototype.map = function (callback) {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot run map on a Node interface');
  };
  /**
   * Validate whether an object is a Node, for use with map
   * @param {Node} node
   * @returns {Node} Returns the input if it's a node, else throws an Error
   * @protected
   */


  Node.prototype._ifNode = function (node) {
    if (!(0, _is.isNode)(node)) {
      throw new TypeError('Callback function must return a Node');
    }

    return node;
  };
  /**
   * Recursively traverse all nodes in a node tree. Executes given callback for
   * this node and each of its child nodes.
   * @param {function(node: Node, path: string, parent: Node)} callback
   *          A callback called for every node in the node tree.
   */


  Node.prototype.traverse = function (callback) {
    // execute callback for itself
    callback(this, null, null); // eslint-disable-line standard/no-callback-literal
    // recursively traverse over all childs of a node

    function _traverse(node, callback) {
      node.forEach(function (child, path, parent) {
        callback(child, path, parent);

        _traverse(child, callback);
      });
    }

    _traverse(this, callback);
  };
  /**
   * Recursively transform a node tree via a transform function.
   *
   * For example, to replace all nodes of type SymbolNode having name 'x' with a
   * ConstantNode with value 2:
   *
   *     const res = Node.transform(function (node, path, parent) {
   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
   *         return new ConstantNode(2)
   *       }
   *       else {
   *         return node
   *       }
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *          A mapping function accepting a node, and returning
   *          a replacement for the node or the original node.
   *          Signature: callback(node: Node, index: string, parent: Node) : Node
   * @return {Node} Returns the original node or its replacement
   */


  Node.prototype.transform = function (callback) {
    function _transform(child, path, parent) {
      const replacement = callback(child, path, parent);

      if (replacement !== child) {
        // stop iterating when the node is replaced
        return replacement;
      }

      return child.map(_transform);
    }

    return _transform(this, null, null);
  };
  /**
   * Find any node in the node tree matching given filter function. For example, to
   * find all nodes of type SymbolNode having name 'x':
   *
   *     const results = Node.filter(function (node) {
   *       return (node && node.isSymbolNode) && (node.name === 'x')
   *     })
   *
   * @param {function(node: Node, path: string, parent: Node) : Node} callback
   *            A test function returning true when a node matches, and false
   *            otherwise. Function signature:
   *            callback(node: Node, index: string, parent: Node) : boolean
   * @return {Node[]} nodes       An array with nodes matching given filter criteria
   */


  Node.prototype.filter = function (callback) {
    const nodes = [];
    this.traverse(function (node, path, parent) {
      if (callback(node, path, parent)) {
        nodes.push(node);
      }
    });
    return nodes;
  }; // TODO: deprecated since version 1.1.0, remove this some day


  Node.prototype.find = function () {
    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
  }; // TODO: deprecated since version 1.1.0, remove this some day


  Node.prototype.match = function () {
    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
  };
  /**
   * Create a shallow clone of this node
   * @return {Node}
   */


  Node.prototype.clone = function () {
    // must be implemented by each of the Node implementations
    throw new Error('Cannot clone a Node interface');
  };
  /**
   * Create a deep clone of this node
   * @return {Node}
   */


  Node.prototype.cloneDeep = function () {
    return this.map(function (node) {
      return node.cloneDeep();
    });
  };
  /**
   * Deep compare this node with another node.
   * @param {Node} other
   * @return {boolean} Returns true when both nodes are of the same type and
   *                   contain the same values (as do their childs)
   */


  Node.prototype.equals = function (other) {
    return other ? (0, _object.deepStrictEqual)(this, other) : false;
  };
  /**
   * Get string representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toString = function (options) {
    let customString;

    if (options && typeof options === 'object') {
      switch (typeof options.handler) {
        case 'object':
        case 'undefined':
          break;

        case 'function':
          customString = options.handler(this, options);
          break;

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this._toString(options);
  };
  /**
   * Get a JSON representation of the node
   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
   * implementations of Node
   * @returns {Object}
   */


  Node.prototype.toJSON = function () {
    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
  };
  /**
   * Get HTML representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)" or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toHTML = function (options) {
    let customString;

    if (options && typeof options === 'object') {
      switch (typeof options.handler) {
        case 'object':
        case 'undefined':
          break;

        case 'function':
          customString = options.handler(this, options);
          break;

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customString !== 'undefined') {
      return customString;
    }

    return this.toHTML(options);
  };
  /**
   * Internal function to generate the string output.
   * This has to be implemented by every Node
   *
   * @throws {Error}
   */


  Node.prototype._toString = function () {
    // must be implemented by each of the Node implementations
    throw new Error('_toString not implemented for ' + this.type);
  };
  /**
   * Get LaTeX representation. (wrapper function)
   *
   * This function can get an object of the following form:
   * {
   *    handler: //This can be a callback function of the form
   *             // "function callback(node, options)"or
   *             // a map that maps function names (used in FunctionNodes)
   *             // to callbacks
   *    parenthesis: "keep" //the parenthesis option (This is optional)
   * }
   *
   * @param {Object} [options]
   * @return {string}
   */


  Node.prototype.toTex = function (options) {
    let customTex;

    if (options && typeof options === 'object') {
      switch (typeof options.handler) {
        case 'object':
        case 'undefined':
          break;

        case 'function':
          customTex = options.handler(this, options);
          break;

        default:
          throw new TypeError('Object or function expected as callback');
      }
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    }

    return this._toTex(options);
  };
  /**
   * Internal function to generate the LaTeX output.
   * This has to be implemented by every Node
   *
   * @param {Object} [options]
   * @throws {Error}
   */


  Node.prototype._toTex = function (options) {
    // must be implemented by each of the Node implementations
    throw new Error('_toTex not implemented for ' + this.type);
  };
  /**
   * Get identifier.
   * @return {string}
   */


  Node.prototype.getIdentifier = function () {
    return this.type;
  };
  /**
   * Get the content of the current Node.
   * @return {Node} node
   **/


  Node.prototype.getContent = function () {
    return this;
  };
  /**
   * Validate the symbol names of a scope.
   * Throws an error when the scope contains an illegal symbol.
   * @param {Object} scope
   */


  function _validateScope(scope) {
    for (const symbol in scope) {
      if ((0, _object.hasOwnProperty)(scope, symbol)) {
        if (symbol in _keywords.keywords) {
          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
        }
      }
    }
  }

  return Node;
}, {
  isClass: true,
  isNode: true
});
exports.createNode = createNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../keywords":"../node_modules/mathjs/src/expression/keywords.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/log":"../node_modules/mathjs/src/utils/log.js"}],"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorTransform = errorTransform;

var _IndexError = require("../../../error/IndexError");

/**
 * Transform zero-based indices to one-based indices in errors
 * @param {Error} err
 * @returns {Error | IndexError} Returns the transformed error
 */
function errorTransform(err) {
  if (err && err.isIndexError) {
    return new _IndexError.IndexError(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
  }

  return err;
}
},{"../../../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js"}],"../node_modules/mathjs/src/expression/node/utils/access.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accessFactory = accessFactory;

var _errorTransform = require("../../transform/utils/errorTransform");

var _customs = require("../../../utils/customs");

function accessFactory({
  subset
}) {
  /**
   * Retrieve part of an object:
   *
   * - Retrieve a property from an object
   * - Retrieve a part of a string
   * - Retrieve a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @return {Object | Array | Matrix | string} Returns the subset
   */
  return function access(object, index) {
    try {
      if (Array.isArray(object)) {
        return subset(object, index);
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index);
      } else if (typeof object === 'string') {
        // TODO: move getStringSubset into a separate util file, use that
        return subset(object, index);
      } else if (typeof object === 'object') {
        if (!index.isObjectProperty()) {
          throw new TypeError('Cannot apply a numeric index as object property');
        }

        return (0, _customs.getSafeProperty)(object, index.getObjectProperty());
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw (0, _errorTransform.errorTransform)(err);
    }
  };
}
},{"../../transform/utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../../utils/customs":"../node_modules/mathjs/src/utils/customs.js"}],"../node_modules/mathjs/src/expression/node/AccessorNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAccessorNode = void 0;

var _is = require("../../utils/is");

var _customs = require("../../utils/customs");

var _factory = require("../../utils/factory");

var _access = require("./utils/access");

const name = 'AccessorNode';
const dependencies = ['subset', 'Node'];
const createAccessorNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  subset,
  Node
}) => {
  const access = (0, _access.accessFactory)({
    subset
  });
  /**
   * @constructor AccessorNode
   * @extends {Node}
   * Access an object property or get a matrix subset
   *
   * @param {Node} object                 The object from which to retrieve
   *                                      a property or subset.
   * @param {IndexNode} index             IndexNode containing ranges
   */

  function AccessorNode(object, index) {
    if (!(this instanceof AccessorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!(0, _is.isNode)(object)) {
      throw new TypeError('Node expected for parameter "object"');
    }

    if (!(0, _is.isIndexNode)(index)) {
      throw new TypeError('IndexNode expected for parameter "index"');
    }

    this.object = object || null;
    this.index = index; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function () {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AccessorNode.prototype = new Node();
  AccessorNode.prototype.type = 'AccessorNode';
  AccessorNode.prototype.isAccessorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AccessorNode.prototype._compile = function (math, argNames) {
    const evalObject = this.object._compile(math, argNames);

    const evalIndex = this.index._compile(math, argNames);

    if (this.index.isObjectProperty()) {
      const prop = this.index.getObjectProperty();
      return function evalAccessorNode(scope, args, context) {
        return (0, _customs.getSafeProperty)(evalObject(scope, args, context), prop);
      };
    } else {
      return function evalAccessorNode(scope, args, context) {
        const object = evalObject(scope, args, context);
        const index = evalIndex(scope, args, object); // we pass object here instead of context

        return access(object, index);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AccessorNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);
    callback(this.index, 'index', this);
  };
  /**
   * Create a new AccessorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AccessorNode} Returns a transformed copy of the node
   */


  AccessorNode.prototype.map = function (callback) {
    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AccessorNode}
   */


  AccessorNode.prototype.clone = function () {
    return new AccessorNode(this.object, this.index);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toString = function (options) {
    let object = this.object.toString(options);

    if (needParenthesis(this.object)) {
      object = '(' + object + ')';
    }

    return object + this.index.toString(options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype.toHTML = function (options) {
    let object = this.object.toHTML(options);

    if (needParenthesis(this.object)) {
      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return object + this.index.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AccessorNode.prototype._toTex = function (options) {
    let object = this.object.toTex(options);

    if (needParenthesis(this.object)) {
      object = `\\left(' + object + '\\right)`;
    }

    return object + this.index.toTex(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AccessorNode.prototype.toJSON = function () {
    return {
      mathjs: 'AccessorNode',
      object: this.object,
      index: this.index
    };
  };
  /**
   * Instantiate an AccessorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
   *                       where mathjs is optional
   * @returns {AccessorNode}
   */


  AccessorNode.fromJSON = function (json) {
    return new AccessorNode(json.object, json.index);
  };
  /**
   * Are parenthesis needed?
   * @private
   */


  function needParenthesis(node) {
    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
    return !((0, _is.isAccessorNode)(node) || (0, _is.isArrayNode)(node) || (0, _is.isConstantNode)(node) || (0, _is.isFunctionNode)(node) || (0, _is.isObjectNode)(node) || (0, _is.isParenthesisNode)(node) || (0, _is.isSymbolNode)(node));
  }

  return AccessorNode;
}, {
  isClass: true,
  isNode: true
});
exports.createAccessorNode = createAccessorNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/access":"../node_modules/mathjs/src/expression/node/utils/access.js"}],"../node_modules/mathjs/src/expression/node/ArrayNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createArrayNode = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'ArrayNode';
const dependencies = ['Node'];
const createArrayNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * @constructor ArrayNode
   * @extends {Node}
   * Holds an 1-dimensional array with items
   * @param {Node[]} [items]   1 dimensional array with items
   */
  function ArrayNode(items) {
    if (!(this instanceof ArrayNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.items = items || []; // validate input

    if (!Array.isArray(this.items) || !this.items.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected');
    } // TODO: deprecated since v3, remove some day


    const deprecated = function () {
      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
    };

    Object.defineProperty(this, 'nodes', {
      get: deprecated,
      set: deprecated
    });
  }

  ArrayNode.prototype = new Node();
  ArrayNode.prototype.type = 'ArrayNode';
  ArrayNode.prototype.isArrayNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ArrayNode.prototype._compile = function (math, argNames) {
    const evalItems = (0, _array.map)(this.items, function (item) {
      return item._compile(math, argNames);
    });
    const asMatrix = math.config.matrix !== 'Array';

    if (asMatrix) {
      const matrix = math.matrix;
      return function evalArrayNode(scope, args, context) {
        return matrix((0, _array.map)(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        }));
      };
    } else {
      return function evalArrayNode(scope, args, context) {
        return (0, _array.map)(evalItems, function (evalItem) {
          return evalItem(scope, args, context);
        });
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ArrayNode.prototype.forEach = function (callback) {
    for (let i = 0; i < this.items.length; i++) {
      const node = this.items[i];
      callback(node, 'items[' + i + ']', this);
    }
  };
  /**
   * Create a new ArrayNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ArrayNode} Returns a transformed copy of the node
   */


  ArrayNode.prototype.map = function (callback) {
    const items = [];

    for (let i = 0; i < this.items.length; i++) {
      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
    }

    return new ArrayNode(items);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ArrayNode}
   */


  ArrayNode.prototype.clone = function () {
    return new ArrayNode(this.items.slice(0));
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype._toString = function (options) {
    const items = this.items.map(function (node) {
      return node.toString(options);
    });
    return '[' + items.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ArrayNode.prototype.toJSON = function () {
    return {
      mathjs: 'ArrayNode',
      items: this.items
    };
  };
  /**
   * Instantiate an ArrayNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ArrayNode", items: [...]}`,
   *                       where mathjs is optional
   * @returns {ArrayNode}
   */


  ArrayNode.fromJSON = function (json) {
    return new ArrayNode(json.items);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ArrayNode.prototype.toHTML = function (options) {
    const items = this.items.map(function (node) {
      return node.toHTML(options);
    });
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ArrayNode.prototype._toTex = function (options) {
    let s = '\\begin{bmatrix}';
    this.items.forEach(function (node) {
      if (node.items) {
        s += node.items.map(function (childNode) {
          return childNode.toTex(options);
        }).join('&');
      } else {
        s += node.toTex(options);
      } // new line


      s += '\\\\';
    });
    s += '\\end{bmatrix}';
    return s;
  };

  return ArrayNode;
}, {
  isClass: true,
  isNode: true
});
exports.createArrayNode = createArrayNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/utils/assign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignFactory = assignFactory;

var _errorTransform = require("../../transform/utils/errorTransform");

var _customs = require("../../../utils/customs");

function assignFactory({
  subset,
  matrix
}) {
  /**
   * Replace part of an object:
   *
   * - Assign a property to an object
   * - Replace a part of a string
   * - Replace a matrix subset
   *
   * @param {Object | Array | Matrix | string} object
   * @param {Index} index
   * @param {*} value
   * @return {Object | Array | Matrix | string} Returns the original object
   *                                            except in case of a string
   */
  // TODO: change assign to return the value instead of the object
  return function assign(object, index, value) {
    try {
      if (Array.isArray(object)) {
        // we use matrix.subset here instead of the function subset because we must not clone the contents
        return matrix(object).subset(index, value).valueOf();
      } else if (object && typeof object.subset === 'function') {
        // Matrix
        return object.subset(index, value);
      } else if (typeof object === 'string') {
        // TODO: move setStringSubset into a separate util file, use that
        return subset(object, index, value);
      } else if (typeof object === 'object') {
        if (!index.isObjectProperty()) {
          throw TypeError('Cannot apply a numeric index as object property');
        }

        (0, _customs.setSafeProperty)(object, index.getObjectProperty(), value);
        return object;
      } else {
        throw new TypeError('Cannot apply index: unsupported type of object');
      }
    } catch (err) {
      throw (0, _errorTransform.errorTransform)(err);
    }
  };
}
},{"../../transform/utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../../utils/customs":"../node_modules/mathjs/src/utils/customs.js"}],"../node_modules/mathjs/src/expression/operators.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPrecedence = getPrecedence;
exports.getAssociativity = getAssociativity;
exports.isAssociativeWith = isAssociativeWith;
exports.properties = void 0;
// list of identifiers of nodes in order of their precedence
// also contains information about left/right associativity
// and which other operator the operator is associative with
// Example:
// addition is associative with addition and subtraction, because:
// (a+b)+c=a+(b+c)
// (a+b)-c=a+(b-c)
//
// postfix operators are left associative, prefix operators
// are right associative
//
// It's also possible to set the following properties:
// latexParens: if set to false, this node doesn't need to be enclosed
//              in parentheses when using LaTeX
// latexLeftParens: if set to false, this !OperatorNode's!
//                  left argument doesn't need to be enclosed
//                  in parentheses
// latexRightParens: the same for the right argument
const properties = [{
  // assignment
  'AssignmentNode': {},
  'FunctionAssignmentNode': {}
}, {
  // conditional expression
  'ConditionalNode': {
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // conditionals don't need parentheses in LaTeX because
    // they are 2 dimensional

  }
}, {
  // logical or
  'OperatorNode:or': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical xor
  'OperatorNode:xor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // logical and
  'OperatorNode:and': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise or
  'OperatorNode:bitOr': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise xor
  'OperatorNode:bitXor': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitwise and
  'OperatorNode:bitAnd': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // relational operators
  'OperatorNode:equal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:unequal': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smaller': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:larger': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:smallerEq': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:largerEq': {
    associativity: 'left',
    associativeWith: []
  },
  'RelationalNode': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // bitshift operators
  'OperatorNode:leftShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightArithShift': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:rightLogShift': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unit conversion
  'OperatorNode:to': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // range
  'RangeNode': {}
}, {
  // addition, subtraction
  'OperatorNode:add': {
    associativity: 'left',
    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
  },
  'OperatorNode:subtract': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // multiply, divide, modulus
  'OperatorNode:multiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
  },
  'OperatorNode:divide': {
    associativity: 'left',
    associativeWith: [],
    latexLeftParens: false,
    latexRightParens: false,
    latexParens: false // fractions don't require parentheses because
    // they're 2 dimensional, so parens aren't needed
    // in LaTeX

  },
  'OperatorNode:dotMultiply': {
    associativity: 'left',
    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
  },
  'OperatorNode:dotDivide': {
    associativity: 'left',
    associativeWith: []
  },
  'OperatorNode:mod': {
    associativity: 'left',
    associativeWith: []
  }
}, {
  // unary prefix operators
  'OperatorNode:unaryPlus': {
    associativity: 'right'
  },
  'OperatorNode:unaryMinus': {
    associativity: 'right'
  },
  'OperatorNode:bitNot': {
    associativity: 'right'
  },
  'OperatorNode:not': {
    associativity: 'right'
  }
}, {
  // exponentiation
  'OperatorNode:pow': {
    associativity: 'right',
    associativeWith: [],
    latexRightParens: false // the exponent doesn't need parentheses in
    // LaTeX because it's 2 dimensional
    // (it's on top)

  },
  'OperatorNode:dotPow': {
    associativity: 'right',
    associativeWith: []
  }
}, {
  // factorial
  'OperatorNode:factorial': {
    associativity: 'left'
  }
}, {
  // matrix transpose
  'OperatorNode:transpose': {
    associativity: 'left'
  }
}];
/**
 * Get the precedence of a Node.
 * Higher number for higher precedence, starting with 0.
 * Returns null if the precedence is undefined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {number|null}
 */

exports.properties = properties;

function getPrecedence(_node, parenthesis) {
  let node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  const identifier = node.getIdentifier();

  for (let i = 0; i < properties.length; i++) {
    if (identifier in properties[i]) {
      return i;
    }
  }

  return null;
}
/**
 * Get the associativity of an operator (left or right).
 * Returns a string containing 'left' or 'right' or null if
 * the associativity is not defined.
 *
 * @param {Node}
 * @param {string} parenthesis
 * @return {string|null}
 * @throws {Error}
 */


function getAssociativity(_node, parenthesis) {
  let node = _node;

  if (parenthesis !== 'keep') {
    // ParenthesisNodes are only ignored when not in 'keep' mode
    node = _node.getContent();
  }

  const identifier = node.getIdentifier();
  const index = getPrecedence(node, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  const property = properties[index][identifier];

  if (property.hasOwnProperty('associativity')) {
    if (property.associativity === 'left') {
      return 'left';
    }

    if (property.associativity === 'right') {
      return 'right';
    } // associativity is invalid


    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
  } // associativity is undefined


  return null;
}
/**
 * Check if an operator is associative with another operator.
 * Returns either true or false or null if not defined.
 *
 * @param {Node} nodeA
 * @param {Node} nodeB
 * @param {string} parenthesis
 * @return {bool|null}
 */


function isAssociativeWith(nodeA, nodeB, parenthesis) {
  // ParenthesisNodes are only ignored when not in 'keep' mode
  const a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
  const b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
  const identifierA = a.getIdentifier();
  const identifierB = b.getIdentifier();
  const index = getPrecedence(a, parenthesis);

  if (index === null) {
    // node isn't in the list
    return null;
  }

  const property = properties[index][identifierA];

  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {
    for (let i = 0; i < property.associativeWith.length; i++) {
      if (property.associativeWith[i] === identifierB) {
        return true;
      }
    }

    return false;
  } // associativeWith is not defined


  return null;
}
},{}],"../node_modules/mathjs/src/expression/node/AssignmentNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAssignmentNode = void 0;

var _is = require("../../utils/is");

var _customs = require("../../utils/customs");

var _factory = require("../../utils/factory");

var _access = require("./utils/access");

var _assign = require("./utils/assign");

var _operators = require("../operators");

const name = 'AssignmentNode';
const dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset
'Node'];
const createAssignmentNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  subset,
  matrix,
  Node
}) => {
  const access = (0, _access.accessFactory)({
    subset
  });
  const assign = (0, _assign.assignFactory)({
    subset,
    matrix
  });
  /**
   * @constructor AssignmentNode
   * @extends {Node}
   *
   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
   * replace a subset of a matrix like `A[2,2]=42`.
   *
   * Syntax:
   *
   *     new AssignmentNode(symbol, value)
   *     new AssignmentNode(object, index, value)
   *
   * Usage:
   *
   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
   *
   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
   * @param {IndexNode} [index=null]            Index, property name or matrix
   *                                            index. Optional. If not provided
   *                                            and `object` is a SymbolNode,
   *                                            the property is assigned to the
   *                                            global scope.
   * @param {Node} value                        The value to be assigned
   */

  function AssignmentNode(object, index, value) {
    if (!(this instanceof AssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.object = object;
    this.index = value ? index : null;
    this.value = value || index; // validate input

    if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    }

    if ((0, _is.isSymbolNode)(object) && object.name === 'end') {
      throw new Error('Cannot assign to symbol "end"');
    }

    if (this.index && !(0, _is.isIndexNode)(this.index)) {
      // index is optional
      throw new TypeError('IndexNode expected as "index"');
    }

    if (!(0, _is.isNode)(this.value)) {
      throw new TypeError('Node expected as "value"');
    } // readonly property name


    Object.defineProperty(this, 'name', {
      get: function () {
        if (this.index) {
          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
        } else {
          return this.object.name || '';
        }
      }.bind(this),
      set: function () {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    });
  }

  AssignmentNode.prototype = new Node();
  AssignmentNode.prototype.type = 'AssignmentNode';
  AssignmentNode.prototype.isAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  AssignmentNode.prototype._compile = function (math, argNames) {
    const evalObject = this.object._compile(math, argNames);

    const evalIndex = this.index ? this.index._compile(math, argNames) : null;

    const evalValue = this.value._compile(math, argNames);

    const name = this.object.name;

    if (!this.index) {
      // apply a variable to the scope, for example `a=2`
      if (!(0, _is.isSymbolNode)(this.object)) {
        throw new TypeError('SymbolNode expected as object');
      }

      return function evalAssignmentNode(scope, args, context) {
        return (0, _customs.setSafeProperty)(scope, name, evalValue(scope, args, context));
      };
    } else if (this.index.isObjectProperty()) {
      // apply an object property for example `a.b=2`
      const prop = this.index.getObjectProperty();
      return function evalAssignmentNode(scope, args, context) {
        const object = evalObject(scope, args, context);
        const value = evalValue(scope, args, context);
        return (0, _customs.setSafeProperty)(object, prop, value);
      };
    } else if ((0, _is.isSymbolNode)(this.object)) {
      // update a matrix subset, for example `a[2]=3`
      return function evalAssignmentNode(scope, args, context) {
        const childObject = evalObject(scope, args, context);
        const value = evalValue(scope, args, context);
        const index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

        (0, _customs.setSafeProperty)(scope, name, assign(childObject, index, value));
        return value;
      };
    } else {
      // isAccessorNode(node.object) === true
      // update a matrix subset, for example `a.b[2]=3`
      // we will not use the compile function of the AccessorNode, but compile it
      // ourselves here as we need the parent object of the AccessorNode:
      // wee need to apply the updated object to parent object
      const evalParentObject = this.object.object._compile(math, argNames);

      if (this.object.index.isObjectProperty()) {
        const parentProp = this.object.index.getObjectProperty();
        return function evalAssignmentNode(scope, args, context) {
          const parent = evalParentObject(scope, args, context);
          const childObject = (0, _customs.getSafeProperty)(parent, parentProp);
          const index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

          const value = evalValue(scope, args, context);
          (0, _customs.setSafeProperty)(parent, parentProp, assign(childObject, index, value));
          return value;
        };
      } else {
        // if some parameters use the 'end' parameter, we need to calculate the size
        const evalParentIndex = this.object.index._compile(math, argNames);

        return function evalAssignmentNode(scope, args, context) {
          const parent = evalParentObject(scope, args, context);
          const parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

          const childObject = access(parent, parentIndex);
          const index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

          const value = evalValue(scope, args, context);
          assign(parent, parentIndex, assign(childObject, index, value));
          return value;
        };
      }
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  AssignmentNode.prototype.forEach = function (callback) {
    callback(this.object, 'object', this);

    if (this.index) {
      callback(this.index, 'index', this);
    }

    callback(this.value, 'value', this);
  };
  /**
   * Create a new AssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {AssignmentNode} Returns a transformed copy of the node
   */


  AssignmentNode.prototype.map = function (callback) {
    const object = this._ifNode(callback(this.object, 'object', this));

    const index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

    const value = this._ifNode(callback(this.value, 'value', this));

    return new AssignmentNode(object, index, value);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {AssignmentNode}
   */


  AssignmentNode.prototype.clone = function () {
    return new AssignmentNode(this.object, this.index, this.value);
  };
  /*
   * Is parenthesis needed?
   * @param {node} node
   * @param {string} [parenthesis='keep']
   * @private
   */


  function needParenthesis(node, parenthesis) {
    if (!parenthesis) {
      parenthesis = 'keep';
    }

    const precedence = (0, _operators.getPrecedence)(node, parenthesis);
    const exprPrecedence = (0, _operators.getPrecedence)(node.value, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toString = function (options) {
    const object = this.object.toString(options);
    const index = this.index ? this.index.toString(options) : '';
    let value = this.value.toString(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '(' + value + ')';
    }

    return object + index + ' = ' + value;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  AssignmentNode.prototype.toJSON = function () {
    return {
      mathjs: 'AssignmentNode',
      object: this.object,
      index: this.index,
      value: this.value
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
   *                       where mathjs is optional
   * @returns {AssignmentNode}
   */


  AssignmentNode.fromJSON = function (json) {
    return new AssignmentNode(json.object, json.index, json.value);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype.toHTML = function (options) {
    const object = this.object.toHTML(options);
    const index = this.index ? this.index.toHTML(options) : '';
    let value = this.value.toHTML(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
    }

    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string}
   */


  AssignmentNode.prototype._toTex = function (options) {
    const object = this.object.toTex(options);
    const index = this.index ? this.index.toTex(options) : '';
    let value = this.value.toTex(options);

    if (needParenthesis(this, options && options.parenthesis)) {
      value = `\\left(${value}\\right)`;
    }

    return object + index + ':=' + value;
  };

  return AssignmentNode;
}, {
  isClass: true,
  isNode: true
});
exports.createAssignmentNode = createAssignmentNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/access":"../node_modules/mathjs/src/expression/node/utils/access.js","./utils/assign":"../node_modules/mathjs/src/expression/node/utils/assign.js","../operators":"../node_modules/mathjs/src/expression/operators.js"}],"../node_modules/mathjs/src/expression/node/BlockNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBlockNode = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'BlockNode';
const dependencies = ['ResultSet', 'Node'];
const createBlockNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  ResultSet,
  Node
}) => {
  /**
   * @constructor BlockNode
   * @extends {Node}
   * Holds a set with blocks
   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
   *            An array with blocks, where a block is constructed as an Object
   *            with properties block, which is a Node, and visible, which is
   *            a boolean. The property visible is optional and is true by default
   */
  function BlockNode(blocks) {
    if (!(this instanceof BlockNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input, copy blocks


    if (!Array.isArray(blocks)) throw new Error('Array expected');
    this.blocks = blocks.map(function (block) {
      const node = block && block.node;
      const visible = block && block.visible !== undefined ? block.visible : true;
      if (!(0, _is.isNode)(node)) throw new TypeError('Property "node" must be a Node');
      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
      return {
        node: node,
        visible: visible
      };
    });
  }

  BlockNode.prototype = new Node();
  BlockNode.prototype.type = 'BlockNode';
  BlockNode.prototype.isBlockNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  BlockNode.prototype._compile = function (math, argNames) {
    const evalBlocks = (0, _array.map)(this.blocks, function (block) {
      return {
        evaluate: block.node._compile(math, argNames),
        visible: block.visible
      };
    });
    return function evalBlockNodes(scope, args, context) {
      const results = [];
      (0, _array.forEach)(evalBlocks, function evalBlockNode(block) {
        const result = block.evaluate(scope, args, context);

        if (block.visible) {
          results.push(result);
        }
      });
      return new ResultSet(results);
    };
  };
  /**
   * Execute a callback for each of the child blocks of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  BlockNode.prototype.forEach = function (callback) {
    for (let i = 0; i < this.blocks.length; i++) {
      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
    }
  };
  /**
   * Create a new BlockNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {BlockNode} Returns a transformed copy of the node
   */


  BlockNode.prototype.map = function (callback) {
    const blocks = [];

    for (let i = 0; i < this.blocks.length; i++) {
      const block = this.blocks[i];

      const node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

      blocks[i] = {
        node: node,
        visible: block.visible
      };
    }

    return new BlockNode(blocks);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {BlockNode}
   */


  BlockNode.prototype.clone = function () {
    const blocks = this.blocks.map(function (block) {
      return {
        node: block.node,
        visible: block.visible
      };
    });
    return new BlockNode(blocks);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype._toString = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toString(options) + (param.visible ? '' : ';');
    }).join('\n');
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  BlockNode.prototype.toJSON = function () {
    return {
      mathjs: 'BlockNode',
      blocks: this.blocks
    };
  };
  /**
   * Instantiate an BlockNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
   *                       where mathjs is optional
   * @returns {BlockNode}
   */


  BlockNode.fromJSON = function (json) {
    return new BlockNode(json.blocks);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  BlockNode.prototype.toHTML = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  BlockNode.prototype._toTex = function (options) {
    return this.blocks.map(function (param) {
      return param.node.toTex(options) + (param.visible ? '' : ';');
    }).join('\\;\\;\n');
  };

  return BlockNode;
}, {
  isClass: true,
  isNode: true
});
exports.createBlockNode = createBlockNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/ConditionalNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConditionalNode = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _operators = require("../operators");

const name = 'ConditionalNode';
const dependencies = ['Node'];
const createConditionalNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
   *
   * @param {Node} condition   Condition, must result in a boolean
   * @param {Node} trueExpr    Expression evaluated when condition is true
   * @param {Node} falseExpr   Expression evaluated when condition is true
   *
   * @constructor ConditionalNode
   * @extends {Node}
   */
  function ConditionalNode(condition, trueExpr, falseExpr) {
    if (!(this instanceof ConditionalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!(0, _is.isNode)(condition)) throw new TypeError('Parameter condition must be a Node');
    if (!(0, _is.isNode)(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
    if (!(0, _is.isNode)(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }

  ConditionalNode.prototype = new Node();
  ConditionalNode.prototype.type = 'ConditionalNode';
  ConditionalNode.prototype.isConditionalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConditionalNode.prototype._compile = function (math, argNames) {
    const evalCondition = this.condition._compile(math, argNames);

    const evalTrueExpr = this.trueExpr._compile(math, argNames);

    const evalFalseExpr = this.falseExpr._compile(math, argNames);

    return function evalConditionalNode(scope, args, context) {
      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConditionalNode.prototype.forEach = function (callback) {
    callback(this.condition, 'condition', this);
    callback(this.trueExpr, 'trueExpr', this);
    callback(this.falseExpr, 'falseExpr', this);
  };
  /**
   * Create a new ConditionalNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ConditionalNode} Returns a transformed copy of the node
   */


  ConditionalNode.prototype.map = function (callback) {
    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConditionalNode}
   */


  ConditionalNode.prototype.clone = function () {
    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toString = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const precedence = (0, _operators.getPrecedence)(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    let condition = this.condition.toString(options);
    const conditionPrecedence = (0, _operators.getPrecedence)(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '(' + condition + ')';
    }

    let trueExpr = this.trueExpr.toString(options);
    const truePrecedence = (0, _operators.getPrecedence)(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '(' + trueExpr + ')';
    }

    let falseExpr = this.falseExpr.toString(options);
    const falsePrecedence = (0, _operators.getPrecedence)(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '(' + falseExpr + ')';
    }

    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConditionalNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConditionalNode',
      condition: this.condition,
      trueExpr: this.trueExpr,
      falseExpr: this.falseExpr
    };
  };
  /**
   * Instantiate an ConditionalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {ConditionalNode}
   */


  ConditionalNode.fromJSON = function (json) {
    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype.toHTML = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const precedence = (0, _operators.getPrecedence)(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
    // or have lower or equal precedence
    // NOTE: enclosing all OperatorNodes in parentheses is a decision
    // purely based on aesthetics and readability

    let condition = this.condition.toHTML(options);
    const conditionPrecedence = (0, _operators.getPrecedence)(this.condition, parenthesis);

    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    let trueExpr = this.trueExpr.toHTML(options);
    const truePrecedence = (0, _operators.getPrecedence)(this.trueExpr, parenthesis);

    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    let falseExpr = this.falseExpr.toHTML(options);
    const falsePrecedence = (0, _operators.getPrecedence)(this.falseExpr, parenthesis);

    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConditionalNode.prototype._toTex = function (options) {
    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
  };
  /**
   * Test whether a condition is met
   * @param {*} condition
   * @returns {boolean} true if condition is true or non-zero, else false
   */


  function testCondition(condition) {
    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
      return !!condition;
    }

    if (condition) {
      if ((0, _is.isBigNumber)(condition)) {
        return !condition.isZero();
      }

      if ((0, _is.isComplex)(condition)) {
        return !!(condition.re || condition.im);
      }

      if ((0, _is.isUnit)(condition)) {
        return !!condition.value;
      }
    }

    if (condition === null || condition === undefined) {
      return false;
    }

    throw new TypeError('Unsupported type of condition "' + (0, _is.typeOf)(condition) + '"');
  }

  return ConditionalNode;
}, {
  isClass: true,
  isNode: true
});
exports.createConditionalNode = createConditionalNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../operators":"../node_modules/mathjs/src/expression/operators.js"}],"../node_modules/escape-latex/dist/index.js":[function(require,module,exports) {
"use strict";

// Map the characters to escape to their escaped values. The list is derived
// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var defaultEscapes = {
  "{": "\\{",
  "}": "\\}",
  "\\": "\\textbackslash{}",
  "#": "\\#",
  $: "\\$",
  "%": "\\%",
  "&": "\\&",
  "^": "\\textasciicircum{}",
  _: "\\_",
  "~": "\\textasciitilde{}"
};
var formatEscapes = {
  "\u2013": "\\--",
  "\u2014": "\\---",
  " ": "~",
  "\t": "\\qquad{}",
  "\r\n": "\\newline{}",
  "\n": "\\newline{}"
};

var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
  return _extends({}, defaultEscapes, formatEscapes);
};

/**
 * Escape a string to be used in LaTeX documents.
 * @param {string} str the string to be escaped.
 * @param {boolean} params.preserveFormatting whether formatting escapes should
 *  be performed (default: false).
 * @param {function} params.escapeMapFn the function to modify the escape maps.
 * @return {string} the escaped string, ready to be used in LaTeX.
 */
module.exports = function (str) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$preserveFormatti = _ref.preserveFormatting,
      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
      _ref$escapeMapFn = _ref.escapeMapFn,
      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

  var runningStr = String(str);
  var result = "";

  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
  var escapeKeys = Object.keys(escapes); // as it is reused later on

  // Algorithm: Go through the string character by character, if it matches
  // with one of the special characters then we'll replace it with the escaped
  // version.

  var _loop = function _loop() {
    var specialCharFound = false;
    escapeKeys.forEach(function (key, index) {
      if (specialCharFound) {
        return;
      }
      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
        result += escapes[escapeKeys[index]];
        runningStr = runningStr.slice(key.length, runningStr.length);
        specialCharFound = true;
      }
    });
    if (!specialCharFound) {
      result += runningStr.slice(0, 1);
      runningStr = runningStr.slice(1, runningStr.length);
    }
  };

  while (runningStr) {
    _loop();
  }
  return result;
};
},{}],"../node_modules/mathjs/src/utils/latex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeLatex = escapeLatex;
exports.toSymbol = toSymbol;
exports.defaultTemplate = exports.latexFunctions = exports.latexOperators = exports.latexSymbols = void 0;

var _escapeLatex = _interopRequireDefault(require("escape-latex"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const latexSymbols = {
  // GREEK LETTERS
  Alpha: 'A',
  alpha: '\\alpha',
  Beta: 'B',
  beta: '\\beta',
  Gamma: '\\Gamma',
  gamma: '\\gamma',
  Delta: '\\Delta',
  delta: '\\delta',
  Epsilon: 'E',
  epsilon: '\\epsilon',
  varepsilon: '\\varepsilon',
  Zeta: 'Z',
  zeta: '\\zeta',
  Eta: 'H',
  eta: '\\eta',
  Theta: '\\Theta',
  theta: '\\theta',
  vartheta: '\\vartheta',
  Iota: 'I',
  iota: '\\iota',
  Kappa: 'K',
  kappa: '\\kappa',
  varkappa: '\\varkappa',
  Lambda: '\\Lambda',
  lambda: '\\lambda',
  Mu: 'M',
  mu: '\\mu',
  Nu: 'N',
  nu: '\\nu',
  Xi: '\\Xi',
  xi: '\\xi',
  Omicron: 'O',
  omicron: 'o',
  Pi: '\\Pi',
  pi: '\\pi',
  varpi: '\\varpi',
  Rho: 'P',
  rho: '\\rho',
  varrho: '\\varrho',
  Sigma: '\\Sigma',
  sigma: '\\sigma',
  varsigma: '\\varsigma',
  Tau: 'T',
  tau: '\\tau',
  Upsilon: '\\Upsilon',
  upsilon: '\\upsilon',
  Phi: '\\Phi',
  phi: '\\phi',
  varphi: '\\varphi',
  Chi: 'X',
  chi: '\\chi',
  Psi: '\\Psi',
  psi: '\\psi',
  Omega: '\\Omega',
  omega: '\\omega',
  // logic
  'true': '\\mathrm{True}',
  'false': '\\mathrm{False}',
  // other
  i: 'i',
  // TODO use \i ??
  inf: '\\infty',
  Inf: '\\infty',
  infinity: '\\infty',
  Infinity: '\\infty',
  oo: '\\infty',
  lim: '\\lim',
  'undefined': '\\mathbf{?}'
};
exports.latexSymbols = latexSymbols;
const latexOperators = {
  'transpose': '^\\top',
  'ctranspose': '^H',
  'factorial': '!',
  'pow': '^',
  'dotPow': '.^\\wedge',
  // TODO find ideal solution
  'unaryPlus': '+',
  'unaryMinus': '-',
  'bitNot': '\\~',
  // TODO find ideal solution
  'not': '\\neg',
  'multiply': '\\cdot',
  'divide': '\\frac',
  // TODO how to handle that properly?
  'dotMultiply': '.\\cdot',
  // TODO find ideal solution
  'dotDivide': '.:',
  // TODO find ideal solution
  'mod': '\\mod',
  'add': '+',
  'subtract': '-',
  'to': '\\rightarrow',
  'leftShift': '<<',
  'rightArithShift': '>>',
  'rightLogShift': '>>>',
  'equal': '=',
  'unequal': '\\neq',
  'smaller': '<',
  'larger': '>',
  'smallerEq': '\\leq',
  'largerEq': '\\geq',
  'bitAnd': '\\&',
  'bitXor': '\\underline{|}',
  'bitOr': '|',
  'and': '\\wedge',
  'xor': '\\veebar',
  'or': '\\vee'
};
exports.latexOperators = latexOperators;
const latexFunctions = {
  // arithmetic
  abs: {
    1: `\\left|\${args[0]}\\right|`
  },
  add: {
    2: `\\left(\${args[0]}${latexOperators['add']}\${args[1]}\\right)`
  },
  cbrt: {
    1: `\\sqrt[3]{\${args[0]}}`
  },
  ceil: {
    1: `\\left\\lceil\${args[0]}\\right\\rceil`
  },
  cube: {
    1: `\\left(\${args[0]}\\right)^3`
  },
  divide: {
    2: `\\frac{\${args[0]}}{\${args[1]}}`
  },
  dotDivide: {
    2: `\\left(\${args[0]}${latexOperators['dotDivide']}\${args[1]}\\right)`
  },
  dotMultiply: {
    2: `\\left(\${args[0]}${latexOperators['dotMultiply']}\${args[1]}\\right)`
  },
  dotPow: {
    2: `\\left(\${args[0]}${latexOperators['dotPow']}\${args[1]}\\right)`
  },
  exp: {
    1: `\\exp\\left(\${args[0]}\\right)`
  },
  expm1: `\\left(e${latexOperators['pow']}{\${args[0]}}-1\\right)`,
  fix: {
    1: `\\mathrm{\${name}}\\left(\${args[0]}\\right)`
  },
  floor: {
    1: `\\left\\lfloor\${args[0]}\\right\\rfloor`
  },
  gcd: `\\gcd\\left(\${args}\\right)`,
  hypot: `\\hypot\\left(\${args}\\right)`,
  log: {
    1: `\\ln\\left(\${args[0]}\\right)`,
    2: `\\log_{\${args[1]}}\\left(\${args[0]}\\right)`
  },
  log10: {
    1: `\\log_{10}\\left(\${args[0]}\\right)`
  },
  log1p: {
    1: `\\ln\\left(\${args[0]}+1\\right)`,
    2: `\\log_{\${args[1]}}\\left(\${args[0]}+1\\right)`
  },
  log2: `\\log_{2}\\left(\${args[0]}\\right)`,
  mod: {
    2: `\\left(\${args[0]}${latexOperators['mod']}\${args[1]}\\right)`
  },
  multiply: {
    2: `\\left(\${args[0]}${latexOperators['multiply']}\${args[1]}\\right)`
  },
  norm: {
    1: `\\left\\|\${args[0]}\\right\\|`,
    2: undefined // use default template

  },
  nthRoot: {
    2: `\\sqrt[\${args[1]}]{\${args[0]}}`
  },
  nthRoots: {
    2: `\\{y : $y^{args[1]} = {\${args[0]}}\\}`
  },
  pow: {
    2: `\\left(\${args[0]}\\right)${latexOperators['pow']}{\${args[1]}}`
  },
  round: {
    1: `\\left\\lfloor\${args[0]}\\right\\rceil`,
    2: undefined // use default template

  },
  sign: {
    1: `\\mathrm{\${name}}\\left(\${args[0]}\\right)`
  },
  sqrt: {
    1: `\\sqrt{\${args[0]}}`
  },
  square: {
    1: `\\left(\${args[0]}\\right)^2`
  },
  subtract: {
    2: `\\left(\${args[0]}${latexOperators['subtract']}\${args[1]}\\right)`
  },
  unaryMinus: {
    1: `${latexOperators['unaryMinus']}\\left(\${args[0]}\\right)`
  },
  unaryPlus: {
    1: `${latexOperators['unaryPlus']}\\left(\${args[0]}\\right)`
  },
  // bitwise
  bitAnd: {
    2: `\\left(\${args[0]}${latexOperators['bitAnd']}\${args[1]}\\right)`
  },
  bitNot: {
    1: latexOperators['bitNot'] + `\\left(\${args[0]}\\right)`
  },
  bitOr: {
    2: `\\left(\${args[0]}${latexOperators['bitOr']}\${args[1]}\\right)`
  },
  bitXor: {
    2: `\\left(\${args[0]}${latexOperators['bitXor']}\${args[1]}\\right)`
  },
  leftShift: {
    2: `\\left(\${args[0]}${latexOperators['leftShift']}\${args[1]}\\right)`
  },
  rightArithShift: {
    2: `\\left(\${args[0]}${latexOperators['rightArithShift']}\${args[1]}\\right)`
  },
  rightLogShift: {
    2: `\\left(\${args[0]}${latexOperators['rightLogShift']}\${args[1]}\\right)`
  },
  // combinatorics
  bellNumbers: {
    1: `\\mathrm{B}_{\${args[0]}}`
  },
  catalan: {
    1: `\\mathrm{C}_{\${args[0]}}`
  },
  stirlingS2: {
    2: `\\mathrm{S}\\left(\${args}\\right)`
  },
  // complex
  arg: {
    1: `\\arg\\left(\${args[0]}\\right)`
  },
  conj: {
    1: `\\left(\${args[0]}\\right)^*`
  },
  im: {
    1: `\\Im\\left\\lbrace\${args[0]}\\right\\rbrace`
  },
  re: {
    1: `\\Re\\left\\lbrace\${args[0]}\\right\\rbrace`
  },
  // logical
  and: {
    2: `\\left(\${args[0]}${latexOperators['and']}\${args[1]}\\right)`
  },
  not: {
    1: latexOperators['not'] + `\\left(\${args[0]}\\right)`
  },
  or: {
    2: `\\left(\${args[0]}${latexOperators['or']}\${args[1]}\\right)`
  },
  xor: {
    2: `\\left(\${args[0]}${latexOperators['xor']}\${args[1]}\\right)`
  },
  // matrix
  cross: {
    2: `\\left(\${args[0]}\\right)\\times\\left(\${args[1]}\\right)`
  },
  ctranspose: {
    1: `\\left(\${args[0]}\\right)${latexOperators['ctranspose']}`
  },
  det: {
    1: `\\det\\left(\${args[0]}\\right)`
  },
  dot: {
    2: `\\left(\${args[0]}\\cdot\${args[1]}\\right)`
  },
  expm: {
    1: `\\exp\\left(\${args[0]}\\right)`
  },
  inv: {
    1: `\\left(\${args[0]}\\right)^{-1}`
  },
  sqrtm: {
    1: `{\${args[0]}}${latexOperators['pow']}{\\frac{1}{2}}`
  },
  trace: {
    1: `\\mathrm{tr}\\left(\${args[0]}\\right)`
  },
  transpose: {
    1: `\\left(\${args[0]}\\right)${latexOperators['transpose']}`
  },
  // probability
  combinations: {
    2: `\\binom{\${args[0]}}{\${args[1]}}`
  },
  factorial: {
    1: `\\left(\${args[0]}\\right)${latexOperators['factorial']}`
  },
  gamma: {
    1: `\\Gamma\\left(\${args[0]}\\right)`
  },
  // relational
  equal: {
    2: `\\left(\${args[0]}${latexOperators['equal']}\${args[1]}\\right)`
  },
  larger: {
    2: `\\left(\${args[0]}${latexOperators['larger']}\${args[1]}\\right)`
  },
  largerEq: {
    2: `\\left(\${args[0]}${latexOperators['largerEq']}\${args[1]}\\right)`
  },
  smaller: {
    2: `\\left(\${args[0]}${latexOperators['smaller']}\${args[1]}\\right)`
  },
  smallerEq: {
    2: `\\left(\${args[0]}${latexOperators['smallerEq']}\${args[1]}\\right)`
  },
  unequal: {
    2: `\\left(\${args[0]}${latexOperators['unequal']}\${args[1]}\\right)`
  },
  // special
  erf: {
    1: `erf\\left(\${args[0]}\\right)`
  },
  // statistics
  max: `\\max\\left(\${args}\\right)`,
  min: `\\min\\left(\${args}\\right)`,
  variance: `\\mathrm{Var}\\left(\${args}\\right)`,
  // trigonometry
  acos: {
    1: `\\cos^{-1}\\left(\${args[0]}\\right)`
  },
  acosh: {
    1: `\\cosh^{-1}\\left(\${args[0]}\\right)`
  },
  acot: {
    1: `\\cot^{-1}\\left(\${args[0]}\\right)`
  },
  acoth: {
    1: `\\coth^{-1}\\left(\${args[0]}\\right)`
  },
  acsc: {
    1: `\\csc^{-1}\\left(\${args[0]}\\right)`
  },
  acsch: {
    1: `\\mathrm{csch}^{-1}\\left(\${args[0]}\\right)`
  },
  asec: {
    1: `\\sec^{-1}\\left(\${args[0]}\\right)`
  },
  asech: {
    1: `\\mathrm{sech}^{-1}\\left(\${args[0]}\\right)`
  },
  asin: {
    1: `\\sin^{-1}\\left(\${args[0]}\\right)`
  },
  asinh: {
    1: `\\sinh^{-1}\\left(\${args[0]}\\right)`
  },
  atan: {
    1: `\\tan^{-1}\\left(\${args[0]}\\right)`
  },
  atan2: {
    2: `\\mathrm{atan2}\\left(\${args}\\right)`
  },
  atanh: {
    1: `\\tanh^{-1}\\left(\${args[0]}\\right)`
  },
  cos: {
    1: `\\cos\\left(\${args[0]}\\right)`
  },
  cosh: {
    1: `\\cosh\\left(\${args[0]}\\right)`
  },
  cot: {
    1: `\\cot\\left(\${args[0]}\\right)`
  },
  coth: {
    1: `\\coth\\left(\${args[0]}\\right)`
  },
  csc: {
    1: `\\csc\\left(\${args[0]}\\right)`
  },
  csch: {
    1: `\\mathrm{csch}\\left(\${args[0]}\\right)`
  },
  sec: {
    1: `\\sec\\left(\${args[0]}\\right)`
  },
  sech: {
    1: `\\mathrm{sech}\\left(\${args[0]}\\right)`
  },
  sin: {
    1: `\\sin\\left(\${args[0]}\\right)`
  },
  sinh: {
    1: `\\sinh\\left(\${args[0]}\\right)`
  },
  tan: {
    1: `\\tan\\left(\${args[0]}\\right)`
  },
  tanh: {
    1: `\\tanh\\left(\${args[0]}\\right)`
  },
  // unit
  to: {
    2: `\\left(\${args[0]}${latexOperators['to']}\${args[1]}\\right)`
  },
  // utils
  numeric: function (node, options) {
    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
    return node.args[0].toTex();
  },
  // type
  number: {
    0: `0`,
    1: `\\left(\${args[0]}\\right)`,
    2: `\\left(\\left(\${args[0]}\\right)\${args[1]}\\right)`
  },
  string: {
    0: '\\mathtt{""}',
    1: `\\mathrm{string}\\left(\${args[0]}\\right)`
  },
  bignumber: {
    0: '0',
    1: `\\left(\${args[0]}\\right)`
  },
  complex: {
    0: '0',
    1: `\\left(\${args[0]}\\right)`,
    2: `\\left(\\left(\${args[0]}\\right)+${latexSymbols['i']}\\cdot\\left(\${args[1]}\\right)\\right)`
  },
  matrix: {
    0: '\\begin{bmatrix}\\end{bmatrix}',
    1: `\\left(\${args[0]}\\right)`,
    2: `\\left(\${args[0]}\\right)`
  },
  sparse: {
    0: '\\begin{bsparse}\\end{bsparse}',
    1: `\\left(\${args[0]}\\right)`
  },
  unit: {
    1: `\\left(\${args[0]}\\right)`,
    2: `\\left(\\left(\${args[0]}\\right)\${args[1]}\\right)`
  }
};
exports.latexFunctions = latexFunctions;
const defaultTemplate = `\\mathrm{\${name}}\\left(\${args}\\right)`;
exports.defaultTemplate = defaultTemplate;
const latexUnits = {
  deg: '^\\circ'
};

function escapeLatex(string) {
  return (0, _escapeLatex.default)(string, {
    'preserveFormatting': true
  });
} // @param {string} name
// @param {boolean} isUnit


function toSymbol(name, isUnit) {
  isUnit = typeof isUnit === 'undefined' ? false : isUnit;

  if (isUnit) {
    if (latexUnits.hasOwnProperty(name)) {
      return latexUnits[name];
    }

    return '\\mathrm{' + escapeLatex(name) + '}';
  }

  if (latexSymbols.hasOwnProperty(name)) {
    return latexSymbols[name];
  }

  return escapeLatex(name);
}
},{"escape-latex":"../node_modules/escape-latex/dist/index.js"}],"../node_modules/mathjs/src/expression/node/ConstantNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConstantNode = void 0;

var _string = require("../../utils/string");

var _is = require("../../utils/is");

var _latex = require("../../utils/latex");

var _factory = require("../../utils/factory");

const name = 'ConstantNode';
const dependencies = ['Node'];
const createConstantNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * A ConstantNode holds a constant value like a number or string.
   *
   * Usage:
   *
   *     new ConstantNode(2.3)
   *     new ConstantNode('hello')
   *
   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
   * @constructor ConstantNode
   * @extends {Node}
   */
  function ConstantNode(value) {
    if (!(this instanceof ConstantNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (arguments.length === 2) {
      // TODO: remove deprecation error some day (created 2018-01-23)
      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');
    }

    this.value = value;
  }

  ConstantNode.prototype = new Node();
  ConstantNode.prototype.type = 'ConstantNode';
  ConstantNode.prototype.isConstantNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ConstantNode.prototype._compile = function (math, argNames) {
    const value = this.value;
    return function evalConstantNode() {
      return value;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

  /**
   * Create a new ConstantNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ConstantNode} Returns a clone of the node
   */
  ;

  ConstantNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ConstantNode}
   */


  ConstantNode.prototype.clone = function () {
    return new ConstantNode(this.value);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toString = function (options) {
    return (0, _string.format)(this.value, options);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype.toHTML = function (options) {
    const value = this._toString(options);

    switch ((0, _is.typeOf)(this.value)) {
      case 'number':
      case 'BigNumber':
      case 'Fraction':
        return '<span class="math-number">' + value + '</span>';

      case 'string':
        return '<span class="math-string">' + value + '</span>';

      case 'boolean':
        return '<span class="math-boolean">' + value + '</span>';

      case 'null':
        return '<span class="math-null-symbol">' + value + '</span>';

      case 'undefined':
        return '<span class="math-undefined">' + value + '</span>';

      default:
        return '<span class="math-symbol">' + value + '</span>';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ConstantNode.prototype.toJSON = function () {
    return {
      mathjs: 'ConstantNode',
      value: this.value
    };
  };
  /**
   * Instantiate a ConstantNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
   *                       where mathjs is optional
   * @returns {ConstantNode}
   */


  ConstantNode.fromJSON = function (json) {
    return new ConstantNode(json.value);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ConstantNode.prototype._toTex = function (options) {
    const value = this._toString(options);

    switch ((0, _is.typeOf)(this.value)) {
      case 'string':
        return '\\mathtt{' + (0, _latex.escapeLatex)(value) + '}';

      case 'number':
      case 'BigNumber':
        const index = value.toLowerCase().indexOf('e');

        if (index !== -1) {
          return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
        }

        return value;

      case 'Fraction':
        return this.value.toLatex();

      default:
        return value;
    }
  };

  return ConstantNode;
}, {
  isClass: true,
  isNode: true
});
exports.createConstantNode = createConstantNode;
},{"../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/latex":"../node_modules/mathjs/src/utils/latex.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/FunctionAssignmentNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFunctionAssignmentNode = void 0;

var _is = require("../../utils/is");

var _keywords = require("../keywords");

var _string = require("../../utils/string");

var _array = require("../../utils/array");

var _latex = require("../../utils/latex");

var _operators = require("../operators");

var _customs = require("../../utils/customs");

var _factory = require("../../utils/factory");

const name = 'FunctionAssignmentNode';
const dependencies = ['typed', 'Node'];
const createFunctionAssignmentNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Node
}) => {
  /**
   * @constructor FunctionAssignmentNode
   * @extends {Node}
   * Function assignment
   *
   * @param {string} name           Function name
   * @param {string[] | Array.<{name: string, type: string}>} params
   *                                Array with function parameter names, or an
   *                                array with objects containing the name
   *                                and type of the parameter
   * @param {Node} expr             The function expression
   */
  function FunctionAssignmentNode(name, params, expr) {
    if (!(this instanceof FunctionAssignmentNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!(0, _is.isNode)(expr)) throw new TypeError('Node expected for parameter "expr"');
    if (name in _keywords.keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
    this.name = name;
    this.params = params.map(function (param) {
      return param && param.name || param;
    });
    this.types = params.map(function (param) {
      return param && param.type || 'any';
    });
    this.expr = expr;
  }

  FunctionAssignmentNode.prototype = new Node();
  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
    const childArgNames = Object.create(argNames);
    (0, _array.forEach)(this.params, function (param) {
      childArgNames[param] = true;
    }); // compile the function expression with the child args

    const evalExpr = this.expr._compile(math, childArgNames);

    const name = this.name;
    const params = this.params;
    const signature = (0, _array.join)(this.types, ',');
    const syntax = name + '(' + (0, _array.join)(this.params, ', ') + ')';
    return function evalFunctionAssignmentNode(scope, args, context) {
      const signatures = {};

      signatures[signature] = function () {
        const childArgs = Object.create(args);

        for (let i = 0; i < params.length; i++) {
          childArgs[params[i]] = arguments[i];
        }

        return evalExpr(scope, childArgs, context);
      };

      const fn = typed(name, signatures);
      fn.syntax = syntax;
      (0, _customs.setSafeProperty)(scope, name, fn);
      return fn;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionAssignmentNode.prototype.forEach = function (callback) {
    callback(this.expr, 'expr', this);
  };
  /**
   * Create a new FunctionAssignmentNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
   */


  FunctionAssignmentNode.prototype.map = function (callback) {
    const expr = this._ifNode(callback(this.expr, 'expr', this));

    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.prototype.clone = function () {
    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
  };
  /**
   * Is parenthesis needed?
   * @param {Node} node
   * @param {Object} parenthesis
   * @private
   */


  function needParenthesis(node, parenthesis) {
    const precedence = (0, _operators.getPrecedence)(node, parenthesis);
    const exprPrecedence = (0, _operators.getPrecedence)(node.expr, parenthesis);
    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
  }
  /**
   * get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toString = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    let expr = this.expr.toString(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '(' + expr + ')';
    }

    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionAssignmentNode.prototype.toJSON = function () {
    const types = this.types;
    return {
      mathjs: 'FunctionAssignmentNode',
      name: this.name,
      params: this.params.map(function (param, index) {
        return {
          name: param,
          type: types[index]
        };
      }),
      expr: this.expr
    };
  };
  /**
   * Instantiate an FunctionAssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionAssignmentNode}
   */


  FunctionAssignmentNode.fromJSON = function (json) {
    return new FunctionAssignmentNode(json.name, json.params, json.expr);
  };
  /**
   * get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype.toHTML = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const params = [];

    for (let i = 0; i < this.params.length; i++) {
      params.push('<span class="math-symbol math-parameter">' + (0, _string.escape)(this.params[i]) + '</span>');
    }

    let expr = this.expr.toHTML(options);

    if (needParenthesis(this, parenthesis)) {
      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return '<span class="math-function">' + (0, _string.escape)(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
  };
  /**
   * get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionAssignmentNode.prototype._toTex = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    let expr = this.expr.toTex(options);

    if (needParenthesis(this, parenthesis)) {
      expr = `\\left(${expr}\\right)`;
    }

    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(_latex.toSymbol).join(',') + '\\right):=' + expr;
  };

  return FunctionAssignmentNode;
}, {
  isClass: true,
  isNode: true
});
exports.createFunctionAssignmentNode = createFunctionAssignmentNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../keywords":"../node_modules/mathjs/src/expression/keywords.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/latex":"../node_modules/mathjs/src/utils/latex.js","../operators":"../node_modules/mathjs/src/expression/operators.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/transform/index.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndexTransform = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

const name = 'index';
const dependencies = ['Index'];
const createIndexTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Index
}) => {
  /**
   * Attach a transform function to math.index
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  return function indexTransform() {
    const args = [];

    for (let i = 0, ii = arguments.length; i < ii; i++) {
      let arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

      if ((0, _is.isRange)(arg)) {
        arg.start--;
        arg.end -= arg.step > 0 ? 0 : 2;
      } else if (arg && arg.isSet === true) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if ((0, _is.isArray)(arg) || (0, _is.isMatrix)(arg)) {
        arg = arg.map(function (v) {
          return v - 1;
        });
      } else if ((0, _is.isNumber)(arg)) {
        arg--;
      } else if ((0, _is.isBigNumber)(arg)) {
        arg = arg.toNumber() - 1;
      } else if (typeof arg === 'string') {// leave as is
      } else {
        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
      }

      args[i] = arg;
    }

    const res = new Index();
    Index.apply(res, args);
    return res;
  };
}, {
  isTransformFunction: true
});
exports.createIndexTransform = createIndexTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/IndexNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndexNode = void 0;

var _is = require("../../utils/is");

var _index = require("../transform/index.transform");

var _array = require("../../utils/array");

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

const name = 'IndexNode';
const dependencies = ['Range', 'Node', 'Index', 'size'];
const createIndexNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Range,
  Node,
  Index,
  size
}) => {
  const index = (0, _index.createIndexTransform)({
    Index
  });
  /**
   * @constructor IndexNode
   * @extends Node
   *
   * Describes a subset of a matrix or an object property.
   * Cannot be used on its own, needs to be used within an AccessorNode or
   * AssignmentNode.
   *
   * @param {Node[]} dimensions
   * @param {boolean} [dotNotation=false]  Optional property describing whether
   *                                       this index was written using dot
   *                                       notation like `a.b`, or using bracket
   *                                       notation like `a["b"]` (default).
   *                                       Used to stringify an IndexNode.
   */

  function IndexNode(dimensions, dotNotation) {
    if (!(this instanceof IndexNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.dimensions = dimensions;
    this.dotNotation = dotNotation || false; // validate input

    if (!Array.isArray(dimensions) || !dimensions.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    }

    if (this.dotNotation && !this.isObjectProperty()) {
      throw new Error('dotNotation only applicable for object properties');
    } // TODO: deprecated since v3, remove some day


    const deprecated = function () {
      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
    };

    Object.defineProperty(this, 'object', {
      get: deprecated,
      set: deprecated
    });
  }

  IndexNode.prototype = new Node();
  IndexNode.prototype.type = 'IndexNode';
  IndexNode.prototype.isIndexNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  IndexNode.prototype._compile = function (math, argNames) {
    // TODO: implement support for bignumber (currently bignumbers are silently
    //       reduced to numbers when changing the value to zero-based)
    // TODO: Optimization: when the range values are ConstantNodes,
    //       we can beforehand resolve the zero-based value
    // optimization for a simple object property
    const evalDimensions = (0, _array.map)(this.dimensions, function (range, i) {
      if ((0, _is.isRangeNode)(range)) {
        if (range.needsEnd()) {
          // create a range containing end (like '4:end')
          const childArgNames = Object.create(argNames);
          childArgNames['end'] = true;

          const evalStart = range.start._compile(math, childArgNames);

          const evalEnd = range.end._compile(math, childArgNames);

          const evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            const s = size(context).valueOf();
            const childArgs = Object.create(args);
            childArgs['end'] = s[i];
            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
          };
        } else {
          // create range
          const evalStart = range.start._compile(math, argNames);

          const evalEnd = range.end._compile(math, argNames);

          const evalStep = range.step ? range.step._compile(math, argNames) : function () {
            return 1;
          };
          return function evalDimension(scope, args, context) {
            return createRange(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
          };
        }
      } else if ((0, _is.isSymbolNode)(range) && range.name === 'end') {
        // SymbolNode 'end'
        const childArgNames = Object.create(argNames);
        childArgNames['end'] = true;

        const evalRange = range._compile(math, childArgNames);

        return function evalDimension(scope, args, context) {
          const s = size(context).valueOf();
          const childArgs = Object.create(args);
          childArgs['end'] = s[i];
          return evalRange(scope, childArgs, context);
        };
      } else {
        // ConstantNode
        const evalRange = range._compile(math, argNames);

        return function evalDimension(scope, args, context) {
          return evalRange(scope, args, context);
        };
      }
    });
    return function evalIndexNode(scope, args, context) {
      const dimensions = (0, _array.map)(evalDimensions, function (evalDimension) {
        return evalDimension(scope, args, context);
      });
      return index(...dimensions);
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  IndexNode.prototype.forEach = function (callback) {
    for (let i = 0; i < this.dimensions.length; i++) {
      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
    }
  };
  /**
   * Create a new IndexNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {IndexNode} Returns a transformed copy of the node
   */


  IndexNode.prototype.map = function (callback) {
    const dimensions = [];

    for (let i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
    }

    return new IndexNode(dimensions);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {IndexNode}
   */


  IndexNode.prototype.clone = function () {
    return new IndexNode(this.dimensions.slice(0));
  };
  /**
   * Test whether this IndexNode contains a single property name
   * @return {boolean}
   */


  IndexNode.prototype.isObjectProperty = function () {
    return this.dimensions.length === 1 && (0, _is.isConstantNode)(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
  };
  /**
   * Returns the property name if IndexNode contains a property.
   * If not, returns null.
   * @return {string | null}
   */


  IndexNode.prototype.getObjectProperty = function () {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toString = function (options) {
    // format the parameters like "[1, 0:5]"
    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  IndexNode.prototype.toJSON = function () {
    return {
      mathjs: 'IndexNode',
      dimensions: this.dimensions,
      dotNotation: this.dotNotation
    };
  };
  /**
   * Instantiate an IndexNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
   *                       where mathjs is optional
   * @returns {IndexNode}
   */


  IndexNode.fromJSON = function (json) {
    return new IndexNode(json.dimensions, json.dotNotation);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype.toHTML = function (options) {
    // format the parameters like "[1, 0:5]"
    const dimensions = [];

    for (let i = 0; i < this.dimensions.length; i++) {
      dimensions[i] = this.dimensions[i].toHTML();
    }

    if (this.dotNotation) {
      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + (0, _string.escape)(this.getObjectProperty()) + '</span>';
    } else {
      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  IndexNode.prototype._toTex = function (options) {
    const dimensions = this.dimensions.map(function (range) {
      return range.toTex(options);
    });
    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
  }; // helper function to create a Range from start, step and end


  function createRange(start, end, step) {
    return new Range((0, _is.isBigNumber)(start) ? start.toNumber() : start, (0, _is.isBigNumber)(end) ? end.toNumber() : end, (0, _is.isBigNumber)(step) ? step.toNumber() : step);
  }

  return IndexNode;
}, {
  isClass: true,
  isNode: true
});
exports.createIndexNode = createIndexNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../transform/index.transform":"../node_modules/mathjs/src/expression/transform/index.transform.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/ObjectNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createObjectNode = void 0;

var _is = require("../../utils/is");

var _string = require("../../utils/string");

var _customs = require("../../utils/customs");

var _object = require("../../utils/object");

var _factory = require("../../utils/factory");

const name = 'ObjectNode';
const dependencies = ['Node'];
const createObjectNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * @constructor ObjectNode
   * @extends {Node}
   * Holds an object with keys/values
   * @param {Object.<string, Node>} [properties]   object with key/value pairs
   */
  function ObjectNode(properties) {
    if (!(this instanceof ObjectNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.properties = properties || {}; // validate input

    if (properties) {
      if (!(typeof properties === 'object') || !Object.keys(properties).every(function (key) {
        return (0, _is.isNode)(properties[key]);
      })) {
        throw new TypeError('Object containing Nodes expected');
      }
    }
  }

  ObjectNode.prototype = new Node();
  ObjectNode.prototype.type = 'ObjectNode';
  ObjectNode.prototype.isObjectNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ObjectNode.prototype._compile = function (math, argNames) {
    const evalEntries = {};

    for (const key in this.properties) {
      if ((0, _object.hasOwnProperty)(this.properties, key)) {
        // we stringify/parse the key here to resolve unicode characters,
        // so you cannot create a key like {"co\\u006Estructor": null}
        const stringifiedKey = (0, _string.stringify)(key);
        const parsedKey = JSON.parse(stringifiedKey);

        if (!(0, _customs.isSafeProperty)(this.properties, parsedKey)) {
          throw new Error('No access to property "' + parsedKey + '"');
        }

        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
      }
    }

    return function evalObjectNode(scope, args, context) {
      const obj = {};

      for (const key in evalEntries) {
        if ((0, _object.hasOwnProperty)(evalEntries, key)) {
          obj[key] = evalEntries[key](scope, args, context);
        }
      }

      return obj;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ObjectNode.prototype.forEach = function (callback) {
    for (const key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this);
      }
    }
  };
  /**
   * Create a new ObjectNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {ObjectNode} Returns a transformed copy of the node
   */


  ObjectNode.prototype.map = function (callback) {
    const properties = {};

    for (const key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + (0, _string.stringify)(key) + ']', this));
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ObjectNode}
   */


  ObjectNode.prototype.clone = function () {
    const properties = {};

    for (const key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        properties[key] = this.properties[key];
      }
    }

    return new ObjectNode(properties);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype._toString = function (options) {
    const entries = [];

    for (const key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        entries.push((0, _string.stringify)(key) + ': ' + this.properties[key].toString(options));
      }
    }

    return '{' + entries.join(', ') + '}';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ObjectNode.prototype.toJSON = function () {
    return {
      mathjs: 'ObjectNode',
      properties: this.properties
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
   *                       where mathjs is optional
   * @returns {ObjectNode}
   */


  ObjectNode.fromJSON = function (json) {
    return new ObjectNode(json.properties);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ObjectNode.prototype.toHTML = function (options) {
    const entries = [];

    for (const key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        entries.push('<span class="math-symbol math-property">' + (0, _string.escape)(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
      }
    }

    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  ObjectNode.prototype._toTex = function (options) {
    const entries = [];

    for (const key in this.properties) {
      if (this.properties.hasOwnProperty(key)) {
        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
      }
    }

    return `\\left\\{\\begin{array}{ll}${entries.join('\n')}\\end{array}\\right\\}`;
  };

  return ObjectNode;
}, {
  isClass: true,
  isNode: true
});
exports.createObjectNode = createObjectNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/OperatorNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOperatorNode = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _string = require("../../utils/string");

var _customs = require("../../utils/customs");

var _operators = require("../operators");

var _latex = require("../../utils/latex");

var _factory = require("../../utils/factory");

const name = 'OperatorNode';
const dependencies = ['Node'];
const createOperatorNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * @constructor OperatorNode
   * @extends {Node}
   * An operator with two arguments, like 2+3
   *
   * @param {string} op           Operator name, for example '+'
   * @param {string} fn           Function name, for example 'add'
   * @param {Node[]} args         Operator arguments
   * @param {boolean} [implicit]  Is this an implicit multiplication?
   */
  function OperatorNode(op, fn, args, implicit) {
    if (!(this instanceof OperatorNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof op !== 'string') {
      throw new TypeError('string expected for parameter "op"');
    }

    if (typeof fn !== 'string') {
      throw new TypeError('string expected for parameter "fn"');
    }

    if (!Array.isArray(args) || !args.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.implicit = implicit === true;
    this.op = op;
    this.fn = fn;
    this.args = args || [];
  }

  OperatorNode.prototype = new Node();
  OperatorNode.prototype.type = 'OperatorNode';
  OperatorNode.prototype.isOperatorNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  OperatorNode.prototype._compile = function (math, argNames) {
    // validate fn
    if (typeof this.fn !== 'string' || !(0, _customs.isSafeMethod)(math, this.fn)) {
      if (!math[this.fn]) {
        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
      } else {
        throw new Error('No access to function "' + this.fn + '"');
      }
    }

    const fn = (0, _customs.getSafeProperty)(math, this.fn);
    const evalArgs = (0, _array.map)(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if (evalArgs.length === 1) {
      const evalArg0 = evalArgs[0];
      return function evalOperatorNode(scope, args, context) {
        return fn(evalArg0(scope, args, context));
      };
    } else if (evalArgs.length === 2) {
      const evalArg0 = evalArgs[0];
      const evalArg1 = evalArgs[1];
      return function evalOperatorNode(scope, args, context) {
        return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));
      };
    } else {
      return function evalOperatorNode(scope, args, context) {
        return fn.apply(null, (0, _array.map)(evalArgs, function (evalArg) {
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  OperatorNode.prototype.forEach = function (callback) {
    for (let i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new OperatorNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {OperatorNode} Returns a transformed copy of the node
   */


  OperatorNode.prototype.map = function (callback) {
    const args = [];

    for (let i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new OperatorNode(this.op, this.fn, args, this.implicit);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {OperatorNode}
   */


  OperatorNode.prototype.clone = function () {
    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
  };
  /**
   * Check whether this is an unary OperatorNode:
   * has exactly one argument, like `-a`.
   * @return {boolean} Returns true when an unary operator node, false otherwise.
   */


  OperatorNode.prototype.isUnary = function () {
    return this.args.length === 1;
  };
  /**
   * Check whether this is a binary OperatorNode:
   * has exactly two arguments, like `a + b`.
   * @return {boolean} Returns true when a binary operator node, false otherwise.
   */


  OperatorNode.prototype.isBinary = function () {
    return this.args.length === 2;
  };
  /**
   * Calculate which parentheses are necessary. Gets an OperatorNode
   * (which is the root of the tree) and an Array of Nodes
   * (this.args) and returns an array where 'true' means that an argument
   * has to be enclosed in parentheses whereas 'false' means the opposite.
   *
   * @param {OperatorNode} root
   * @param {string} parenthesis
   * @param {Node[]} args
   * @param {boolean} latex
   * @return {boolean[]}
   * @private
   */


  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
    // precedence of the root OperatorNode
    const precedence = (0, _operators.getPrecedence)(root, parenthesis);
    const associativity = (0, _operators.getAssociativity)(root, parenthesis);

    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
      return args.map(function (arg) {
        switch (arg.getContent().type) {
          // Nodes that don't need extra parentheses
          case 'ArrayNode':
          case 'ConstantNode':
          case 'SymbolNode':
          case 'ParenthesisNode':
            return false;

          default:
            return true;
        }
      });
    }

    let result;

    switch (args.length) {
      case 0:
        result = [];
        break;

      case 1:
        // unary operators
        // precedence of the operand
        const operandPrecedence = (0, _operators.getPrecedence)(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

        if (latex && operandPrecedence !== null) {
          let operandIdentifier;
          let rootIdentifier;

          if (parenthesis === 'keep') {
            operandIdentifier = args[0].getIdentifier();
            rootIdentifier = root.getIdentifier();
          } else {
            // Ignore Parenthesis Nodes when not in 'keep' mode
            operandIdentifier = args[0].getContent().getIdentifier();
            rootIdentifier = root.getContent().getIdentifier();
          }

          if (_operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
            result = [false];
            break;
          }

          if (_operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
            result = [false];
            break;
          }
        }

        if (operandPrecedence === null) {
          // if the operand has no defined precedence, no parens are needed
          result = [false];
          break;
        }

        if (operandPrecedence <= precedence) {
          // if the operands precedence is lower, parens are needed
          result = [true];
          break;
        } // otherwise, no parens needed


        result = [false];
        break;

      case 2:
        // binary operators
        let lhsParens; // left hand side needs parenthesis?
        // precedence of the left hand side

        const lhsPrecedence = (0, _operators.getPrecedence)(args[0], parenthesis); // is the root node associative with the left hand side

        const assocWithLhs = (0, _operators.isAssociativeWith)(root, args[0], parenthesis);

        if (lhsPrecedence === null) {
          // if the left hand side has no defined precedence, no parens are needed
          // FunctionNode for example
          lhsParens = false;
        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
          // In case of equal precedence, if the root node is left associative
          // parens are **never** necessary for the left hand side.
          // If it is right associative however, parens are necessary
          // if the root node isn't associative with the left hand side
          lhsParens = true;
        } else if (lhsPrecedence < precedence) {
          lhsParens = true;
        } else {
          lhsParens = false;
        }

        let rhsParens; // right hand side needs parenthesis?
        // precedence of the right hand side

        const rhsPrecedence = (0, _operators.getPrecedence)(args[1], parenthesis); // is the root node associative with the right hand side?

        const assocWithRhs = (0, _operators.isAssociativeWith)(root, args[1], parenthesis);

        if (rhsPrecedence === null) {
          // if the right hand side has no defined precedence, no parens are needed
          // FunctionNode for example
          rhsParens = false;
        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
          // In case of equal precedence, if the root node is right associative
          // parens are **never** necessary for the right hand side.
          // If it is left associative however, parens are necessary
          // if the root node isn't associative with the right hand side
          rhsParens = true;
        } else if (rhsPrecedence < precedence) {
          rhsParens = true;
        } else {
          rhsParens = false;
        } // handle special cases for LaTeX, where some of the parentheses aren't needed


        if (latex) {
          let rootIdentifier;
          let lhsIdentifier;
          let rhsIdentifier;

          if (parenthesis === 'keep') {
            rootIdentifier = root.getIdentifier();
            lhsIdentifier = root.args[0].getIdentifier();
            rhsIdentifier = root.args[1].getIdentifier();
          } else {
            // Ignore ParenthesisNodes when not in 'keep' mode
            rootIdentifier = root.getContent().getIdentifier();
            lhsIdentifier = root.args[0].getContent().getIdentifier();
            rhsIdentifier = root.args[1].getContent().getIdentifier();
          }

          if (lhsPrecedence !== null) {
            if (_operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
              lhsParens = false;
            }

            if (_operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
              lhsParens = false;
            }
          }

          if (rhsPrecedence !== null) {
            if (_operators.properties[precedence][rootIdentifier].latexRightParens === false) {
              rhsParens = false;
            }

            if (_operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
              rhsParens = false;
            }
          }
        }

        result = [lhsParens, rhsParens];
        break;

      default:
        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
          result = args.map(function (arg) {
            const argPrecedence = (0, _operators.getPrecedence)(arg, parenthesis);
            const assocWithArg = (0, _operators.isAssociativeWith)(root, arg, parenthesis);
            const argAssociativity = (0, _operators.getAssociativity)(arg, parenthesis);

            if (argPrecedence === null) {
              // if the argument has no defined precedence, no parens are needed
              return false;
            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
              return true;
            } else if (argPrecedence < precedence) {
              return true;
            }

            return false;
          });
        }

        break;
    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
    // printed.


    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
      result = args.map(function (arg, index) {
        const isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

        if (result[index] || isParenthesisNode) {
          // put in parenthesis?
          return true;
        }

        return false;
      });
    }

    return result;
  }
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toString = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const implicit = options && options.implicit ? options.implicit : 'hide';
    const args = this.args;
    const parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      const assoc = (0, _operators.getAssociativity)(this, parenthesis);
      let operand = args[0].toString(options);

      if (parens[0]) {
        operand = '(' + operand + ')';
      } // for example for "not", we want a space between operand and argument


      const opIsNamed = /[a-zA-Z]+/.test(this.op);

      if (assoc === 'right') {
        // prefix operator
        return this.op + (opIsNamed ? ' ' : '') + operand;
      } else if (assoc === 'left') {
        // postfix
        return operand + (opIsNamed ? ' ' : '') + this.op;
      } // fall back to postfix


      return operand + this.op;
    } else if (args.length === 2) {
      let lhs = args[0].toString(options); // left hand side

      let rhs = args[1].toString(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '(' + lhs + ')';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '(' + rhs + ')';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + ' ' + rhs;
      }

      return lhs + ' ' + this.op + ' ' + rhs;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      const stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toString(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '(' + arg + ')';
        }

        return arg;
      });

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return stringifiedArgs.join(' ');
      }

      return stringifiedArgs.join(' ' + this.op + ' ');
    } else {
      // fallback to formatting as a function call
      return this.fn + '(' + this.args.join(', ') + ')';
    }
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  OperatorNode.prototype.toJSON = function () {
    return {
      mathjs: 'OperatorNode',
      op: this.op,
      fn: this.fn,
      args: this.args,
      implicit: this.implicit
    };
  };
  /**
   * Instantiate an OperatorNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
   *                       where mathjs is optional
   * @returns {OperatorNode}
   */


  OperatorNode.fromJSON = function (json) {
    return new OperatorNode(json.op, json.fn, json.args, json.implicit);
  };
  /**
   * Get HTML representation.
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype.toHTML = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const implicit = options && options.implicit ? options.implicit : 'hide';
    const args = this.args;
    const parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

    if (args.length === 1) {
      // unary operators
      const assoc = (0, _operators.getAssociativity)(this, parenthesis);
      let operand = args[0].toHTML(options);

      if (parens[0]) {
        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (assoc === 'right') {
        // prefix operator
        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + (0, _string.escape)(this.op) + '</span>' + operand;
      } else {
        // postfix when assoc === 'left' or undefined
        return operand + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + (0, _string.escape)(this.op) + '</span>';
      }
    } else if (args.length === 2) {
      // binary operatoes
      let lhs = args[0].toHTML(options); // left hand side

      let rhs = args[1].toHTML(options); // right hand side

      if (parens[0]) {
        // left hand side in parenthesis?
        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (parens[1]) {
        // right hand side in parenthesis?
        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
      }

      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0, _string.escape)(this.op) + '</span>' + rhs;
    } else {
      const stringifiedArgs = args.map(function (arg, index) {
        arg = arg.toHTML(options);

        if (parens[index]) {
          // put in parenthesis?
          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
        }

        return arg;
      });

      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
        }

        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0, _string.escape)(this.op) + '</span>');
      } else {
        // fallback to formatting as a function call
        return '<span class="math-function">' + (0, _string.escape)(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
      }
    }
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  OperatorNode.prototype._toTex = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const implicit = options && options.implicit ? options.implicit : 'hide';
    const args = this.args;
    const parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
    let op = _latex.latexOperators[this.fn];
    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

    if (args.length === 1) {
      // unary operators
      const assoc = (0, _operators.getAssociativity)(this, parenthesis);
      let operand = args[0].toTex(options);

      if (parens[0]) {
        operand = `\\left(${operand}\\right)`;
      }

      if (assoc === 'right') {
        // prefix operator
        return op + operand;
      } else if (assoc === 'left') {
        // postfix operator
        return operand + op;
      } // fall back to postfix


      return operand + op;
    } else if (args.length === 2) {
      // binary operators
      const lhs = args[0]; // left hand side

      let lhsTex = lhs.toTex(options);

      if (parens[0]) {
        lhsTex = `\\left(${lhsTex}\\right)`;
      }

      const rhs = args[1]; // right hand side

      let rhsTex = rhs.toTex(options);

      if (parens[1]) {
        rhsTex = `\\left(${rhsTex}\\right)`;
      } // handle some exceptions (due to the way LaTeX works)


      let lhsIdentifier;

      if (parenthesis === 'keep') {
        lhsIdentifier = lhs.getIdentifier();
      } else {
        // Ignore ParenthesisNodes if in 'keep' mode
        lhsIdentifier = lhs.getContent().getIdentifier();
      }

      switch (this.getIdentifier()) {
        case 'OperatorNode:divide':
          // op contains '\\frac' at this point
          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

        case 'OperatorNode:pow':
          lhsTex = '{' + lhsTex + '}';
          rhsTex = '{' + rhsTex + '}';

          switch (lhsIdentifier) {
            case 'ConditionalNode': //

            case 'OperatorNode:divide':
              lhsTex = `\\left(${lhsTex}\\right)`;
          }

          break;

        case 'OperatorNode:multiply':
          if (this.implicit && implicit === 'hide') {
            return lhsTex + '~' + rhsTex;
          }

      }

      return lhsTex + op + rhsTex;
    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
      const texifiedArgs = args.map(function (arg, index) {
        arg = arg.toTex(options);

        if (parens[index]) {
          arg = `\\left(${arg}\\right)`;
        }

        return arg;
      });

      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
        return texifiedArgs.join('~');
      }

      return texifiedArgs.join(op);
    } else {
      // fall back to formatting as a function call
      // as this is a fallback, it doesn't use
      // fancy function names
      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
        return arg.toTex(options);
      }).join(',') + '\\right)';
    }
  };
  /**
   * Get identifier.
   * @return {string}
   */


  OperatorNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.fn;
  };

  return OperatorNode;
}, {
  isClass: true,
  isNode: true
});
exports.createOperatorNode = createOperatorNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../operators":"../node_modules/mathjs/src/expression/operators.js","../../utils/latex":"../node_modules/mathjs/src/utils/latex.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/ParenthesisNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createParenthesisNode = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

const name = 'ParenthesisNode';
const dependencies = ['Node'];
const createParenthesisNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * @constructor ParenthesisNode
   * @extends {Node}
   * A parenthesis node describes manual parenthesis from the user input
   * @param {Node} content
   * @extends {Node}
   */
  function ParenthesisNode(content) {
    if (!(this instanceof ParenthesisNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (!(0, _is.isNode)(content)) {
      throw new TypeError('Node expected for parameter "content"');
    }

    this.content = content;
  }

  ParenthesisNode.prototype = new Node();
  ParenthesisNode.prototype.type = 'ParenthesisNode';
  ParenthesisNode.prototype.isParenthesisNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  ParenthesisNode.prototype._compile = function (math, argNames) {
    return this.content._compile(math, argNames);
  };
  /**
   * Get the content of the current Node.
   * @return {Node} content
   * @override
   **/


  ParenthesisNode.prototype.getContent = function () {
    return this.content.getContent();
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  ParenthesisNode.prototype.forEach = function (callback) {
    callback(this.content, 'content', this);
  };
  /**
   * Create a new ParenthesisNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {ParenthesisNode} Returns a clone of the node
   */


  ParenthesisNode.prototype.map = function (callback) {
    const content = callback(this.content, 'content', this);
    return new ParenthesisNode(content);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {ParenthesisNode}
   */


  ParenthesisNode.prototype.clone = function () {
    return new ParenthesisNode(this.content);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toString = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '(' + this.content.toString(options) + ')';
    }

    return this.content.toString(options);
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  ParenthesisNode.prototype.toJSON = function () {
    return {
      mathjs: 'ParenthesisNode',
      content: this.content
    };
  };
  /**
   * Instantiate an ParenthesisNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
   *                       where mathjs is optional
   * @returns {ParenthesisNode}
   */


  ParenthesisNode.fromJSON = function (json) {
    return new ParenthesisNode(json.content);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype.toHTML = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    return this.content.toHTML(options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  ParenthesisNode.prototype._toTex = function (options) {
    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
      return `\\left(${this.content.toTex(options)}\\right)`;
    }

    return this.content.toTex(options);
  };

  return ParenthesisNode;
}, {
  isClass: true,
  isNode: true
});
exports.createParenthesisNode = createParenthesisNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/RangeNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRangeNode = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _operators = require("../operators");

const name = 'RangeNode';
const dependencies = ['Node'];
const createRangeNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * @constructor RangeNode
   * @extends {Node}
   * create a range
   * @param {Node} start  included lower-bound
   * @param {Node} end    included upper-bound
   * @param {Node} [step] optional step
   */
  function RangeNode(start, end, step) {
    if (!(this instanceof RangeNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate inputs


    if (!(0, _is.isNode)(start)) throw new TypeError('Node expected');
    if (!(0, _is.isNode)(end)) throw new TypeError('Node expected');
    if (step && !(0, _is.isNode)(step)) throw new TypeError('Node expected');
    if (arguments.length > 3) throw new Error('Too many arguments');
    this.start = start; // included lower-bound

    this.end = end; // included upper-bound

    this.step = step || null; // optional step
  }

  RangeNode.prototype = new Node();
  RangeNode.prototype.type = 'RangeNode';
  RangeNode.prototype.isRangeNode = true;
  /**
   * Check whether the RangeNode needs the `end` symbol to be defined.
   * This end is the size of the Matrix in current dimension.
   * @return {boolean}
   */

  RangeNode.prototype.needsEnd = function () {
    // find all `end` symbols in this RangeNode
    const endSymbols = this.filter(function (node) {
      return (0, _is.isSymbolNode)(node) && node.name === 'end';
    });
    return endSymbols.length > 0;
  };
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */


  RangeNode.prototype._compile = function (math, argNames) {
    const range = math.range;

    const evalStart = this.start._compile(math, argNames);

    const evalEnd = this.end._compile(math, argNames);

    if (this.step) {
      const evalStep = this.step._compile(math, argNames);

      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
      };
    } else {
      return function evalRangeNode(scope, args, context) {
        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RangeNode.prototype.forEach = function (callback) {
    callback(this.start, 'start', this);
    callback(this.end, 'end', this);

    if (this.step) {
      callback(this.step, 'step', this);
    }
  };
  /**
   * Create a new RangeNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RangeNode} Returns a transformed copy of the node
   */


  RangeNode.prototype.map = function (callback) {
    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RangeNode}
   */


  RangeNode.prototype.clone = function () {
    return new RangeNode(this.start, this.end, this.step && this.step);
  };
  /**
   * Calculate the necessary parentheses
   * @param {Node} node
   * @param {string} parenthesis
   * @return {Object} parentheses
   * @private
   */


  function calculateNecessaryParentheses(node, parenthesis) {
    const precedence = (0, _operators.getPrecedence)(node, parenthesis);
    const parens = {};
    const startPrecedence = (0, _operators.getPrecedence)(node.start, parenthesis);
    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

    if (node.step) {
      const stepPrecedence = (0, _operators.getPrecedence)(node.step, parenthesis);
      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
    }

    const endPrecedence = (0, _operators.getPrecedence)(node.end, parenthesis);
    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
    return parens;
  }
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toString = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    let str;
    let start = this.start.toString(options);

    if (parens.start) {
      start = '(' + start + ')';
    }

    str = start;

    if (this.step) {
      let step = this.step.toString(options);

      if (parens.step) {
        step = '(' + step + ')';
      }

      str += ':' + step;
    }

    let end = this.end.toString(options);

    if (parens.end) {
      end = '(' + end + ')';
    }

    str += ':' + end;
    return str;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RangeNode.prototype.toJSON = function () {
    return {
      mathjs: 'RangeNode',
      start: this.start,
      end: this.end,
      step: this.step
    };
  };
  /**
   * Instantiate an RangeNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
   *                       where mathjs is optional
   * @returns {RangeNode}
   */


  RangeNode.fromJSON = function (json) {
    return new RangeNode(json.start, json.end, json.step);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RangeNode.prototype.toHTML = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

    let str;
    let start = this.start.toHTML(options);

    if (parens.start) {
      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str = start;

    if (this.step) {
      let step = this.step.toHTML(options);

      if (parens.step) {
        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
      }

      str += '<span class="math-operator math-range-operator">:</span>' + step;
    }

    let end = this.end.toHTML(options);

    if (parens.end) {
      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
    }

    str += '<span class="math-operator math-range-operator">:</span>' + end;
    return str;
  };
  /**
   * Get LaTeX representation
   * @params {Object} options
   * @return {string} str
   */


  RangeNode.prototype._toTex = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const parens = calculateNecessaryParentheses(this, parenthesis);
    let str = this.start.toTex(options);

    if (parens.start) {
      str = `\\left(${str}\\right)`;
    }

    if (this.step) {
      let step = this.step.toTex(options);

      if (parens.step) {
        step = `\\left(${step}\\right)`;
      }

      str += ':' + step;
    }

    let end = this.end.toTex(options);

    if (parens.end) {
      end = `\\left(${end}\\right)`;
    }

    str += ':' + end;
    return str;
  };

  return RangeNode;
}, {
  isClass: true,
  isNode: true
});
exports.createRangeNode = createRangeNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../operators":"../node_modules/mathjs/src/expression/operators.js"}],"../node_modules/mathjs/src/expression/node/RelationalNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRelationalNode = void 0;

var _operators = require("../operators");

var _string = require("../../utils/string");

var _customs = require("../../utils/customs");

var _latex = require("../../utils/latex");

var _factory = require("../../utils/factory");

const name = 'RelationalNode';
const dependencies = ['Node'];
const createRelationalNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  Node
}) => {
  /**
   * A node representing a chained conditional expression, such as 'x > y > z'
   *
   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
   * @param {Node[]} params   The parameters that will be compared
   *
   * @constructor RelationalNode
   * @extends {Node}
   */
  function RelationalNode(conditionals, params) {
    if (!(this instanceof RelationalNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
    this.conditionals = conditionals;
    this.params = params;
  }

  RelationalNode.prototype = new Node();
  RelationalNode.prototype.type = 'RelationalNode';
  RelationalNode.prototype.isRelationalNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  RelationalNode.prototype._compile = function (math, argNames) {
    const self = this;
    const compiled = this.params.map(p => p._compile(math, argNames));
    return function evalRelationalNode(scope, args, context) {
      let evalLhs;
      let evalRhs = compiled[0](scope, args, context);

      for (let i = 0; i < self.conditionals.length; i++) {
        evalLhs = evalRhs;
        evalRhs = compiled[i + 1](scope, args, context);
        const condFn = (0, _customs.getSafeProperty)(math, self.conditionals[i]);

        if (!condFn(evalLhs, evalRhs)) {
          return false;
        }
      }

      return true;
    };
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  RelationalNode.prototype.forEach = function (callback) {
    this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);
  };
  /**
   * Create a new RelationalNode having its childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {RelationalNode} Returns a transformed copy of the node
   */


  RelationalNode.prototype.map = function (callback) {
    return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {RelationalNode}
   */


  RelationalNode.prototype.clone = function () {
    return new RelationalNode(this.conditionals, this.params);
  };
  /**
   * Get string representation.
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toString = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const precedence = (0, _operators.getPrecedence)(this, parenthesis);
    const paramStrings = this.params.map(function (p, index) {
      const paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
    });
    const operatorMap = {
      'equal': '==',
      'unequal': '!=',
      'smaller': '<',
      'larger': '>',
      'smallerEq': '<=',
      'largerEq': '>='
    };
    let ret = paramStrings[0];

    for (let i = 0; i < this.conditionals.length; i++) {
      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  RelationalNode.prototype.toJSON = function () {
    return {
      mathjs: 'RelationalNode',
      conditionals: this.conditionals,
      params: this.params
    };
  };
  /**
   * Instantiate a RelationalNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
   *                       where mathjs is optional
   * @returns {RelationalNode}
   */


  RelationalNode.fromJSON = function (json) {
    return new RelationalNode(json.conditionals, json.params);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype.toHTML = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const precedence = (0, _operators.getPrecedence)(this, parenthesis);
    const paramStrings = this.params.map(function (p, index) {
      const paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
    });
    const operatorMap = {
      'equal': '==',
      'unequal': '!=',
      'smaller': '<',
      'larger': '>',
      'smallerEq': '<=',
      'largerEq': '>='
    };
    let ret = paramStrings[0];

    for (let i = 0; i < this.conditionals.length; i++) {
      ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + (0, _string.escape)(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
    }

    return ret;
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  RelationalNode.prototype._toTex = function (options) {
    const parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
    const precedence = (0, _operators.getPrecedence)(this, parenthesis);
    const paramStrings = this.params.map(function (p, index) {
      const paramPrecedence = (0, _operators.getPrecedence)(p, parenthesis);
      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
    });
    let ret = paramStrings[0];

    for (let i = 0; i < this.conditionals.length; i++) {
      ret += _latex.latexOperators[this.conditionals[i]] + paramStrings[i + 1];
    }

    return ret;
  };

  return RelationalNode;
}, {
  isClass: true,
  isNode: true
});
exports.createRelationalNode = createRelationalNode;
},{"../operators":"../node_modules/mathjs/src/expression/operators.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/latex":"../node_modules/mathjs/src/utils/latex.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/node/SymbolNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSymbolNode = void 0;

var _string = require("../../utils/string");

var _object = require("../../utils/object");

var _customs = require("../../utils/customs");

var _factory = require("../../utils/factory");

var _latex = require("../../utils/latex");

const name = 'SymbolNode';
const dependencies = ['math', '?Unit', 'Node'];
const createSymbolNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  math,
  Unit,
  Node
}) => {
  /**
   * Check whether some name is a valueless unit like "inch".
   * @param {string} name
   * @return {boolean}
   */
  function isValuelessUnit(name) {
    return Unit ? Unit.isValuelessUnit(name) : false;
  }
  /**
   * @constructor SymbolNode
   * @extends {Node}
   * A symbol node can hold and resolve a symbol
   * @param {string} name
   * @extends {Node}
   */


  function SymbolNode(name) {
    if (!(this instanceof SymbolNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    } // validate input


    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
    this.name = name;
  }

  SymbolNode.prototype = new Node();
  SymbolNode.prototype.type = 'SymbolNode';
  SymbolNode.prototype.isSymbolNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  SymbolNode.prototype._compile = function (math, argNames) {
    const name = this.name;

    if ((0, _object.hasOwnProperty)(argNames, name)) {
      // this is a FunctionAssignment argument
      // (like an x when inside the expression of a function assignment `f(x) = ...`)
      return function (scope, args, context) {
        return args[name];
      };
    } else if (name in math) {
      return function (scope, args, context) {
        return name in scope ? (0, _customs.getSafeProperty)(scope, name) : (0, _customs.getSafeProperty)(math, name);
      };
    } else {
      const isUnit = isValuelessUnit(name);
      return function (scope, args, context) {
        return name in scope ? (0, _customs.getSafeProperty)(scope, name) : isUnit ? new Unit(null, name) : undef(name);
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

  /**
   * Create a new SymbolNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node) : Node} callback
   * @returns {SymbolNode} Returns a clone of the node
   */
  ;

  SymbolNode.prototype.map = function (callback) {
    return this.clone();
  };
  /**
   * Throws an error 'Undefined symbol {name}'
   * @param {string} name
   */


  function undef(name) {
    throw new Error('Undefined symbol ' + name);
  }
  /**
   * Create a clone of this node, a shallow copy
   * @return {SymbolNode}
   */


  SymbolNode.prototype.clone = function () {
    return new SymbolNode(this.name);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toString = function (options) {
    return this.name;
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype.toHTML = function (options) {
    const name = (0, _string.escape)(this.name);

    if (name === 'true' || name === 'false') {
      return '<span class="math-symbol math-boolean">' + name + '</span>';
    } else if (name === 'i') {
      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
    } else if (name === 'Infinity') {
      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
    } else if (name === 'NaN') {
      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
    } else if (name === 'null') {
      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
    } else if (name === 'undefined') {
      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
    }

    return '<span class="math-symbol">' + name + '</span>';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  SymbolNode.prototype.toJSON = function () {
    return {
      mathjs: 'SymbolNode',
      name: this.name
    };
  };
  /**
   * Instantiate a SymbolNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "SymbolNode", name: "x"}`,
   *                       where mathjs is optional
   * @returns {SymbolNode}
   */


  SymbolNode.fromJSON = function (json) {
    return new SymbolNode(json.name);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   * @override
   */


  SymbolNode.prototype._toTex = function (options) {
    let isUnit = false;

    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
      isUnit = true;
    }

    const symbol = (0, _latex.toSymbol)(this.name, isUnit);

    if (symbol[0] === '\\') {
      // no space needed if the symbol starts with '\'
      return symbol;
    } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


    return ' ' + symbol;
  };

  return SymbolNode;
}, {
  isClass: true,
  isNode: true
});
exports.createSymbolNode = createSymbolNode;
},{"../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/latex":"../node_modules/mathjs/src/utils/latex.js"}],"../node_modules/mathjs/src/expression/node/FunctionNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFunctionNode = void 0;

var _is = require("../../utils/is");

var _string = require("../../utils/string");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _customs = require("../../utils/customs");

var _factory = require("../../utils/factory");

var _latex = require("../../utils/latex");

const name = 'FunctionNode';
const dependencies = ['math', 'Node', 'SymbolNode'];
const createFunctionNode =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  math,
  Node,
  SymbolNode
}) => {
  /**
   * @constructor FunctionNode
   * @extends {./Node}
   * invoke a list with arguments on a node
   * @param {./Node | string} fn Node resolving with a function on which to invoke
   *                             the arguments, typically a SymboNode or AccessorNode
   * @param {./Node[]} args
   */
  function FunctionNode(fn, args) {
    if (!(this instanceof FunctionNode)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (typeof fn === 'string') {
      fn = new SymbolNode(fn);
    } // validate input


    if (!(0, _is.isNode)(fn)) throw new TypeError('Node expected as parameter "fn"');

    if (!Array.isArray(args) || !args.every(_is.isNode)) {
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    }

    this.fn = fn;
    this.args = args || []; // readonly property name

    Object.defineProperty(this, 'name', {
      get: function () {
        return this.fn.name || '';
      }.bind(this),
      set: function () {
        throw new Error('Cannot assign a new name, name is read-only');
      }
    }); // TODO: deprecated since v3, remove some day

    const deprecated = function () {
      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
    };

    Object.defineProperty(this, 'object', {
      get: deprecated,
      set: deprecated
    });
  }

  FunctionNode.prototype = new Node();
  FunctionNode.prototype.type = 'FunctionNode';
  FunctionNode.prototype.isFunctionNode = true;
  /**
   * Compile a node into a JavaScript function.
   * This basically pre-calculates as much as possible and only leaves open
   * calculations which depend on a dynamic scope with variables.
   * @param {Object} math     Math.js namespace with functions and constants.
   * @param {Object} argNames An object with argument names as key and `true`
   *                          as value. Used in the SymbolNode to optimize
   *                          for arguments from user assigned functions
   *                          (see FunctionAssignmentNode) or special symbols
   *                          like `end` (see IndexNode).
   * @return {function} Returns a function which can be called like:
   *                        evalNode(scope: Object, args: Object, context: *)
   */

  FunctionNode.prototype._compile = function (math, argNames) {
    if (!(this instanceof FunctionNode)) {
      throw new TypeError('No valid FunctionNode');
    } // compile arguments


    const evalArgs = (0, _array.map)(this.args, function (arg) {
      return arg._compile(math, argNames);
    });

    if ((0, _is.isSymbolNode)(this.fn)) {
      // we can statically determine whether the function has an rawArgs property
      const name = this.fn.name;
      const fn = name in math ? (0, _customs.getSafeProperty)(math, name) : undefined;
      const isRaw = typeof fn === 'function' && fn.rawArgs === true;

      if (isRaw) {
        // pass unevaluated parameters (nodes) to the function
        // "raw" evaluation
        const rawArgs = this.args;
        return function evalFunctionNode(scope, args, context) {
          return (name in scope ? (0, _customs.getSafeProperty)(scope, name) : fn)(rawArgs, math, Object.assign({}, scope, args));
        };
      } else {
        // "regular" evaluation
        if (evalArgs.length === 1) {
          const evalArg0 = evalArgs[0];
          return function evalFunctionNode(scope, args, context) {
            return (name in scope ? (0, _customs.getSafeProperty)(scope, name) : fn)(evalArg0(scope, args, context));
          };
        } else if (evalArgs.length === 2) {
          const evalArg0 = evalArgs[0];
          const evalArg1 = evalArgs[1];
          return function evalFunctionNode(scope, args, context) {
            return (name in scope ? (0, _customs.getSafeProperty)(scope, name) : fn)(evalArg0(scope, args, context), evalArg1(scope, args, context));
          };
        } else {
          return function evalFunctionNode(scope, args, context) {
            return (name in scope ? (0, _customs.getSafeProperty)(scope, name) : fn).apply(null, (0, _array.map)(evalArgs, function (evalArg) {
              return evalArg(scope, args, context);
            }));
          };
        }
      }
    } else if ((0, _is.isAccessorNode)(this.fn) && (0, _is.isIndexNode)(this.fn.index) && this.fn.index.isObjectProperty()) {
      // execute the function with the right context: the object of the AccessorNode
      const evalObject = this.fn.object._compile(math, argNames);

      const prop = this.fn.index.getObjectProperty();
      const rawArgs = this.args;
      return function evalFunctionNode(scope, args, context) {
        const object = evalObject(scope, args, context);
        (0, _customs.validateSafeMethod)(object, prop);
        const isRaw = object[prop] && object[prop].rawArgs;
        return isRaw ? object[prop](rawArgs, math, Object.assign({}, scope, args)) // "raw" evaluation
        : object[prop].apply(object, (0, _array.map)(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    } else {
      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
      // we have to dynamically determine whether the function has a rawArgs property
      const evalFn = this.fn._compile(math, argNames);

      const rawArgs = this.args;
      return function evalFunctionNode(scope, args, context) {
        const fn = evalFn(scope, args, context);
        const isRaw = fn && fn.rawArgs;
        return isRaw ? fn(rawArgs, math, Object.assign({}, scope, args)) // "raw" evaluation
        : fn.apply(fn, (0, _array.map)(evalArgs, function (evalArg) {
          // "regular" evaluation
          return evalArg(scope, args, context);
        }));
      };
    }
  };
  /**
   * Execute a callback for each of the child nodes of this node
   * @param {function(child: Node, path: string, parent: Node)} callback
   */


  FunctionNode.prototype.forEach = function (callback) {
    callback(this.fn, 'fn', this);

    for (let i = 0; i < this.args.length; i++) {
      callback(this.args[i], 'args[' + i + ']', this);
    }
  };
  /**
   * Create a new FunctionNode having it's childs be the results of calling
   * the provided callback function for each of the childs of the original node.
   * @param {function(child: Node, path: string, parent: Node): Node} callback
   * @returns {FunctionNode} Returns a transformed copy of the node
   */


  FunctionNode.prototype.map = function (callback) {
    const fn = this._ifNode(callback(this.fn, 'fn', this));

    const args = [];

    for (let i = 0; i < this.args.length; i++) {
      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
    }

    return new FunctionNode(fn, args);
  };
  /**
   * Create a clone of this node, a shallow copy
   * @return {FunctionNode}
   */


  FunctionNode.prototype.clone = function () {
    return new FunctionNode(this.fn, this.args.slice(0));
  }; // backup Node's toString function
  // @private


  const nodeToString = FunctionNode.prototype.toString;
  /**
   * Get string representation. (wrapper function)
   * This overrides parts of Node's toString function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toString
   * function.
   *
   * @param {Object} options
   * @return {string} str
   * @override
   */

  FunctionNode.prototype.toString = function (options) {
    let customString;
    const name = this.fn.toString(options);

    if (options && typeof options.handler === 'object' && (0, _object.hasOwnProperty)(options.handler, name)) {
      // callback is a map of callback functions
      customString = options.handler[name](this, options);
    }

    if (typeof customString !== 'undefined') {
      return customString;
    } // fall back to Node's toString


    return nodeToString.call(this, options);
  };
  /**
   * Get string representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toString = function (options) {
    const args = this.args.map(function (arg) {
      return arg.toString(options);
    });
    const fn = (0, _is.isFunctionAssignmentNode)(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

    return fn + '(' + args.join(', ') + ')';
  };
  /**
   * Get a JSON representation of the node
   * @returns {Object}
   */


  FunctionNode.prototype.toJSON = function () {
    return {
      mathjs: 'FunctionNode',
      fn: this.fn,
      args: this.args
    };
  };
  /**
   * Instantiate an AssignmentNode from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
   *                       where mathjs is optional
   * @returns {FunctionNode}
   */


  FunctionNode.fromJSON = function (json) {
    return new FunctionNode(json.fn, json.args);
  };
  /**
   * Get HTML representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype.toHTML = function (options) {
    const args = this.args.map(function (arg) {
      return arg.toHTML(options);
    }); // format the arguments like "add(2, 4.2)"

    return '<span class="math-function">' + (0, _string.escape)(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };
  /*
   * Expand a LaTeX template
   *
   * @param {string} template
   * @param {Node} node
   * @param {Object} options
   * @private
   **/


  function expandTemplate(template, node, options) {
    let latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
    // while submatching identifier and 2 (in the second case)

    const regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
    let inputPos = 0; // position in the input string

    let match;

    while ((match = regex.exec(template)) !== null) {
      // go through all matches
      // add everything in front of the match to the LaTeX string
      latex += template.substring(inputPos, match.index);
      inputPos = match.index;

      if (match[0] === '$$') {
        // escaped dollar sign
        latex += '$';
        inputPos++;
      } else {
        // template parameter
        inputPos += match[0].length;
        const property = node[match[1]];

        if (!property) {
          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
        }

        if (match[2] === undefined) {
          // no square brackets
          switch (typeof property) {
            case 'string':
              latex += property;
              break;

            case 'object':
              if ((0, _is.isNode)(property)) {
                latex += property.toTex(options);
              } else if (Array.isArray(property)) {
                // make array of Nodes into comma separated list
                latex += property.map(function (arg, index) {
                  if ((0, _is.isNode)(arg)) {
                    return arg.toTex(options);
                  }

                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
                }).join(',');
              } else {
                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
              }

              break;

            default:
              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
          }
        } else {
          // with square brackets
          if ((0, _is.isNode)(property[match[2]] && property[match[2]])) {
            latex += property[match[2]].toTex(options);
          } else {
            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
          }
        }
      }
    }

    latex += template.slice(inputPos); // append rest of the template

    return latex;
  } // backup Node's toTex function
  // @private


  const nodeToTex = FunctionNode.prototype.toTex;
  /**
   * Get LaTeX representation. (wrapper function)
   * This overrides parts of Node's toTex function.
   * If callback is an object containing callbacks, it
   * calls the correct callback for the current node,
   * otherwise it falls back to calling Node's toTex
   * function.
   *
   * @param {Object} options
   * @return {string}
   */

  FunctionNode.prototype.toTex = function (options) {
    let customTex;

    if (options && typeof options.handler === 'object' && (0, _object.hasOwnProperty)(options.handler, this.name)) {
      // callback is a map of callback functions
      customTex = options.handler[this.name](this, options);
    }

    if (typeof customTex !== 'undefined') {
      return customTex;
    } // fall back to Node's toTex


    return nodeToTex.call(this, options);
  };
  /**
   * Get LaTeX representation
   * @param {Object} options
   * @return {string} str
   */


  FunctionNode.prototype._toTex = function (options) {
    const args = this.args.map(function (arg) {
      // get LaTeX of the arguments
      return arg.toTex(options);
    });
    let latexConverter;

    if (_latex.latexFunctions[this.name]) {
      latexConverter = _latex.latexFunctions[this.name];
    } // toTex property on the function itself


    if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {
      // .toTex is a callback function
      latexConverter = math[this.name].toTex;
    }

    let customToTex;

    switch (typeof latexConverter) {
      case 'function':
        // a callback function
        customToTex = latexConverter(this, options);
        break;

      case 'string':
        // a template string
        customToTex = expandTemplate(latexConverter, this, options);
        break;

      case 'object':
        // an object with different "converters" for different numbers of arguments
        switch (typeof latexConverter[args.length]) {
          case 'function':
            customToTex = latexConverter[args.length](this, options);
            break;

          case 'string':
            customToTex = expandTemplate(latexConverter[args.length], this, options);
            break;
        }

    }

    if (typeof customToTex !== 'undefined') {
      return customToTex;
    }

    return expandTemplate(_latex.defaultTemplate, this, options);
  };
  /**
   * Get identifier.
   * @return {string}
   */


  FunctionNode.prototype.getIdentifier = function () {
    return this.type + ':' + this.name;
  };

  return FunctionNode;
}, {
  isClass: true,
  isNode: true
});
exports.createFunctionNode = createFunctionNode;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/latex":"../node_modules/mathjs/src/utils/latex.js"}],"../node_modules/mathjs/src/expression/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createParse = void 0;

var _factory = require("../utils/factory");

var _is = require("../utils/is");

var _collection = require("../utils/collection");

const name = 'parse';
const dependencies = ['typed', 'numeric', 'config', 'AccessorNode', 'ArrayNode', 'AssignmentNode', 'BlockNode', 'ConditionalNode', 'ConstantNode', 'FunctionAssignmentNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'RangeNode', 'RelationalNode', 'SymbolNode'];
const createParse =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  numeric,
  config,
  AccessorNode,
  ArrayNode,
  AssignmentNode,
  BlockNode,
  ConditionalNode,
  ConstantNode,
  FunctionAssignmentNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  RangeNode,
  RelationalNode,
  SymbolNode
}) => {
  /**
   * Parse an expression. Returns a node tree, which can be evaluated by
   * invoking node.evaluate().
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.parse(expr)
   *     math.parse(expr, options)
   *     math.parse([expr1, expr2, expr3, ...])
   *     math.parse([expr1, expr2, expr3, ...], options)
   *
   * Example:
   *
   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
   *     node1.compile().evaluate() // 5
   *
   *     let scope = {a:3, b:4}
   *     const node2 = math.parse('a * b') // 12
   *     const code2 = node2.compile()
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].compile().evaluate() // 12
   *
   * See also:
   *
   *     evaluate, compile
   *
   * @param {string | string[] | Matrix} expr          Expression to be parsed
   * @param {{nodes: Object<string, Node>}} [options]  Available options:
   *                                                   - `nodes` a set of custom nodes
   * @return {Node | Node[]} node
   * @throws {Error}
   */
  const parse = typed(name, {
    'string': function (expression) {
      return parseStart(expression, {});
    },
    'Array | Matrix': function (expressions) {
      return parseMultiple(expressions, {});
    },
    'string, Object': function (expression, options) {
      const extraNodes = options.nodes !== undefined ? options.nodes : {};
      return parseStart(expression, extraNodes);
    },
    'Array | Matrix, Object': parseMultiple
  });

  function parseMultiple(expressions, options = {}) {
    const extraNodes = options.nodes !== undefined ? options.nodes : {}; // parse an array or matrix with expressions

    return (0, _collection.deepMap)(expressions, function (elem) {
      if (typeof elem !== 'string') throw new TypeError('String expected');
      return parseStart(elem, extraNodes);
    });
  } // token types enumeration


  const TOKENTYPE = {
    NULL: 0,
    DELIMITER: 1,
    NUMBER: 2,
    SYMBOL: 3,
    UNKNOWN: 4 // map with all delimiters

  };
  const DELIMITERS = {
    ',': true,
    '(': true,
    ')': true,
    '[': true,
    ']': true,
    '{': true,
    '}': true,
    '"': true,
    '\'': true,
    ';': true,
    '+': true,
    '-': true,
    '*': true,
    '.*': true,
    '/': true,
    './': true,
    '%': true,
    '^': true,
    '.^': true,
    '~': true,
    '!': true,
    '&': true,
    '|': true,
    '^|': true,
    '=': true,
    ':': true,
    '?': true,
    '==': true,
    '!=': true,
    '<': true,
    '>': true,
    '<=': true,
    '>=': true,
    '<<': true,
    '>>': true,
    '>>>': true // map with all named delimiters

  };
  const NAMED_DELIMITERS = {
    'mod': true,
    'to': true,
    'in': true,
    'and': true,
    'xor': true,
    'or': true,
    'not': true
  };
  const CONSTANTS = {
    'true': true,
    'false': false,
    'null': null,
    'undefined': undefined
  };
  const NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

  function initialState() {
    return {
      extraNodes: {},
      // current extra nodes, must be careful not to mutate
      expression: '',
      // current expression
      comment: '',
      // last parsed comment
      index: 0,
      // current index in expr
      token: '',
      // current token
      tokenType: TOKENTYPE.NULL,
      // type of the token
      nestingLevel: 0,
      // level of nesting inside parameters, used to ignore newline characters
      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

    };
  }
  /**
   * View upto `length` characters of the expression starting at the current character.
   *
   * @param {State} state
   * @param {number} [length=1] Number of characters to view
   * @returns {string}
   * @private
   */


  function currentString(state, length) {
    return state.expression.substr(state.index, length);
  }
  /**
   * View the current character. Returns '' if end of expression is reached.
   *
   * @param {State} state
   * @returns {string}
   * @private
   */


  function currentCharacter(state) {
    return currentString(state, 1);
  }
  /**
   * Get the next character from the expression.
   * The character is stored into the char c. If the end of the expression is
   * reached, the function puts an empty string in c.
   * @private
   */


  function next(state) {
    state.index++;
  }
  /**
   * Preview the previous character from the expression.
   * @return {string} cNext
   * @private
   */


  function prevCharacter(state) {
    return state.expression.charAt(state.index - 1);
  }
  /**
   * Preview the next character from the expression.
   * @return {string} cNext
   * @private
   */


  function nextCharacter(state) {
    return state.expression.charAt(state.index + 1);
  }
  /**
   * Get next token in the current string expr.
   * The token and token type are available as token and tokenType
   * @private
   */


  function getToken(state) {
    state.tokenType = TOKENTYPE.NULL;
    state.token = '';
    state.comment = ''; // skip over whitespaces
    // space, tab, and newline when inside parameters

    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
      next(state);
    } // skip comment


    if (currentCharacter(state) === '#') {
      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
        state.comment += currentCharacter(state);
        next(state);
      }
    } // check for end of expression


    if (currentCharacter(state) === '') {
      // token is still empty
      state.tokenType = TOKENTYPE.DELIMITER;
      return;
    } // check for new line character


    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = currentCharacter(state);
      next(state);
      return;
    }

    const c1 = currentCharacter(state);
    const c2 = currentString(state, 2);
    const c3 = currentString(state, 3);

    if (c3.length === 3 && DELIMITERS[c3]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c3;
      next(state);
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 2 characters


    if (c2.length === 2 && DELIMITERS[c2]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c2;
      next(state);
      next(state);
      return;
    } // check for delimiters consisting of 1 character


    if (DELIMITERS[c1]) {
      state.tokenType = TOKENTYPE.DELIMITER;
      state.token = c1;
      next(state);
      return;
    } // check for a number


    if (parse.isDigitDot(c1)) {
      state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot

      if (currentCharacter(state) === '.') {
        state.token += currentCharacter(state);
        next(state);

        if (!parse.isDigit(currentCharacter(state))) {
          // this is no number, it is just a dot (can be dot notation)
          state.tokenType = TOKENTYPE.DELIMITER;
        }
      } else {
        while (parse.isDigit(currentCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }

        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
          state.token += currentCharacter(state);
          next(state);
        }
      }

      while (parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
          state.token += currentCharacter(state);
          next(state);

          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
            state.token += currentCharacter(state);
            next(state);
          } // Scientific notation MUST be followed by an exponent


          if (!parse.isDigit(currentCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }

          while (parse.isDigit(currentCharacter(state))) {
            state.token += currentCharacter(state);
            next(state);
          }

          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
          }
        } else if (nextCharacter(state) === '.') {
          next(state);
          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
        }
      }

      return;
    } // check for variables, functions, named operators


    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
        state.token += currentCharacter(state);
        next(state);
      }

      if (NAMED_DELIMITERS.hasOwnProperty(state.token)) {
        state.tokenType = TOKENTYPE.DELIMITER;
      } else {
        state.tokenType = TOKENTYPE.SYMBOL;
      }

      return;
    } // something unknown is found, wrong characters -> a syntax error


    state.tokenType = TOKENTYPE.UNKNOWN;

    while (currentCharacter(state) !== '') {
      state.token += currentCharacter(state);
      next(state);
    }

    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
  }
  /**
   * Get next token and skip newline tokens
   */


  function getTokenSkipNewline(state) {
    do {
      getToken(state);
    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

  }
  /**
   * Open parameters.
   * New line characters will be ignored until closeParams(state) is called
   */


  function openParams(state) {
    state.nestingLevel++;
  }
  /**
   * Close parameters.
   * New line characters will no longer be ignored
   */


  function closeParams(state) {
    state.nestingLevel--;
  }
  /**
   * Checks whether the current character `c` is a valid alpha character:
   *
   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
   * - An underscore                        Ascii: _
   * - A dollar sign                        Ascii: $
   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
   * - A greek letter                       Unicode: \u0370 - \u03FF
   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
   *
   * The previous and next characters are needed to determine whether
   * this character is part of a unicode surrogate pair.
   *
   * @param {string} c      Current character in the expression
   * @param {string} cPrev  Previous character
   * @param {string} cNext  Next character
   * @return {boolean}
   */


  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
  };
  /**
   * Test whether a character is a valid latin, greek, or letter-like character
   * @param {string} c
   * @return {boolean}
   */


  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
  };
  /**
   * Test whether two given 16 bit characters form a surrogate pair of a
   * unicode math symbol.
   *
   * https://unicode-table.com/en/
   * https://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
   *
   * Note: In ES6 will be unicode aware:
   * https://stackoverflow.com/questions/280712/javascript-unicode-regexes
   * https://mathiasbynens.be/notes/es6-unicode-regex
   *
   * @param {string} high
   * @param {string} low
   * @return {boolean}
   */


  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
    return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
  };
  /**
   * Check whether given character c is a white space character: space, tab, or enter
   * @param {string} c
   * @param {number} nestingLevel
   * @return {boolean}
   */


  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
  };
  /**
   * Test whether the character c is a decimal mark (dot).
   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
   * @param {string} c
   * @param {string} cNext
   * @return {boolean}
   */


  parse.isDecimalMark = function isDecimalMark(c, cNext) {
    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
  };
  /**
   * checks if the given char c is a digit or dot
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigitDot = function isDigitDot(c) {
    return c >= '0' && c <= '9' || c === '.';
  };
  /**
   * checks if the given char c is a digit
   * @param {string} c   a string with one character
   * @return {boolean}
   */


  parse.isDigit = function isDigit(c) {
    return c >= '0' && c <= '9';
  };
  /**
   * Start of the parse levels below, in order of precedence
   * @return {Node} node
   * @private
   */


  function parseStart(expression, extraNodes) {
    const state = initialState();
    Object.assign(state, {
      expression,
      extraNodes
    });
    getToken(state);
    const node = parseBlock(state); // check for garbage at the end of the expression
    // an expression ends with a empty character '' and tokenType DELIMITER

    if (state.token !== '') {
      if (state.tokenType === TOKENTYPE.DELIMITER) {
        // user entered a not existing operator like "//"
        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
        throw createError(state, 'Unexpected operator ' + state.token);
      } else {
        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
      }
    }

    return node;
  }
  /**
   * Parse a block with expressions. Expressions can be separated by a newline
   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
   * of the preceding line is returned.
   * @return {Node} node
   * @private
   */


  function parseBlock(state) {
    let node;
    const blocks = [];
    let visible;

    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
      node = parseAssignment(state);
      node.comment = state.comment;
    } // TODO: simplify this loop


    while (state.token === '\n' || state.token === ';') {
      // eslint-disable-line no-unmodified-loop-condition
      if (blocks.length === 0 && node) {
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }

      getToken(state);

      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
        node = parseAssignment(state);
        node.comment = state.comment;
        visible = state.token !== ';';
        blocks.push({
          node: node,
          visible: visible
        });
      }
    }

    if (blocks.length > 0) {
      return new BlockNode(blocks);
    } else {
      if (!node) {
        node = new ConstantNode(undefined);
        node.comment = state.comment;
      }

      return node;
    }
  }
  /**
   * Assignment of a function or variable,
   * - can be a variable like 'a=2.3'
   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
   * - defining a function like 'f(x) = x^2'
   * @return {Node} node
   * @private
   */


  function parseAssignment(state) {
    let name, args, value, valid;
    const node = parseConditional(state);

    if (state.token === '=') {
      if ((0, _is.isSymbolNode)(node)) {
        // parse a variable assignment like 'a = 2/3'
        name = node.name;
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(new SymbolNode(name), value);
      } else if ((0, _is.isAccessorNode)(node)) {
        // parse a matrix subset assignment like 'A[1,2] = 4'
        getTokenSkipNewline(state);
        value = parseAssignment(state);
        return new AssignmentNode(node.object, node.index, value);
      } else if ((0, _is.isFunctionNode)(node) && (0, _is.isSymbolNode)(node.fn)) {
        // parse function assignment like 'f(x) = x^2'
        valid = true;
        args = [];
        name = node.name;
        node.args.forEach(function (arg, index) {
          if ((0, _is.isSymbolNode)(arg)) {
            args[index] = arg.name;
          } else {
            valid = false;
          }
        });

        if (valid) {
          getTokenSkipNewline(state);
          value = parseAssignment(state);
          return new FunctionAssignmentNode(name, args, value);
        }
      }

      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
    }

    return node;
  }
  /**
   * conditional operation
   *
   *     condition ? truePart : falsePart
   *
   * Note: conditional operator is right-associative
   *
   * @return {Node} node
   * @private
   */


  function parseConditional(state) {
    let node = parseLogicalOr(state);

    while (state.token === '?') {
      // eslint-disable-line no-unmodified-loop-condition
      // set a conditional level, the range operator will be ignored as long
      // as conditionalLevel === state.nestingLevel.
      const prev = state.conditionalLevel;
      state.conditionalLevel = state.nestingLevel;
      getTokenSkipNewline(state);
      const condition = node;
      const trueExpr = parseAssignment(state);
      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
      state.conditionalLevel = null;
      getTokenSkipNewline(state);
      const falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

      node = new ConditionalNode(condition, trueExpr, falseExpr); // restore the previous conditional level

      state.conditionalLevel = prev;
    }

    return node;
  }
  /**
   * logical or, 'x or y'
   * @return {Node} node
   * @private
   */


  function parseLogicalOr(state) {
    let node = parseLogicalXor(state);

    while (state.token === 'or') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('or', 'or', [node, parseLogicalXor(state)]);
    }

    return node;
  }
  /**
   * logical exclusive or, 'x xor y'
   * @return {Node} node
   * @private
   */


  function parseLogicalXor(state) {
    let node = parseLogicalAnd(state);

    while (state.token === 'xor') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd(state)]);
    }

    return node;
  }
  /**
   * logical and, 'x and y'
   * @return {Node} node
   * @private
   */


  function parseLogicalAnd(state) {
    let node = parseBitwiseOr(state);

    while (state.token === 'and') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('and', 'and', [node, parseBitwiseOr(state)]);
    }

    return node;
  }
  /**
   * bitwise or, 'x | y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseOr(state) {
    let node = parseBitwiseXor(state);

    while (state.token === '|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor(state)]);
    }

    return node;
  }
  /**
   * bitwise exclusive or (xor), 'x ^| y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseXor(state) {
    let node = parseBitwiseAnd(state);

    while (state.token === '^|') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
    }

    return node;
  }
  /**
   * bitwise and, 'x & y'
   * @return {Node} node
   * @private
   */


  function parseBitwiseAnd(state) {
    let node = parseRelational(state);

    while (state.token === '&') {
      // eslint-disable-line no-unmodified-loop-condition
      getTokenSkipNewline(state);
      node = new OperatorNode('&', 'bitAnd', [node, parseRelational(state)]);
    }

    return node;
  }
  /**
   * Parse a chained conditional, like 'a > b >= c'
   * @return {Node} node
   */


  function parseRelational(state) {
    const params = [parseShift(state)];
    const conditionals = [];
    const operators = {
      '==': 'equal',
      '!=': 'unequal',
      '<': 'smaller',
      '>': 'larger',
      '<=': 'smallerEq',
      '>=': 'largerEq'
    };

    while (operators.hasOwnProperty(state.token)) {
      // eslint-disable-line no-unmodified-loop-condition
      const cond = {
        name: state.token,
        fn: operators[state.token]
      };
      conditionals.push(cond);
      getTokenSkipNewline(state);
      params.push(parseShift(state));
    }

    if (params.length === 1) {
      return params[0];
    } else if (params.length === 2) {
      return new OperatorNode(conditionals[0].name, conditionals[0].fn, params);
    } else {
      return new RelationalNode(conditionals.map(c => c.fn), params);
    }
  }
  /**
   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
   * @return {Node} node
   * @private
   */


  function parseShift(state) {
    let node, operators, name, fn, params;
    node = parseConversion(state);
    operators = {
      '<<': 'leftShift',
      '>>': 'rightArithShift',
      '>>>': 'rightLogShift'
    };

    while (operators.hasOwnProperty(state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseConversion(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * conversion operators 'to' and 'in'
   * @return {Node} node
   * @private
   */


  function parseConversion(state) {
    let node, operators, name, fn, params;
    node = parseRange(state);
    operators = {
      'to': 'to',
      'in': 'to' // alias of 'to'

    };

    while (operators.hasOwnProperty(state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);

      if (name === 'in' && state.token === '') {
        // end of expression -> this is the unit 'in' ('inch')
        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
      } else {
        // operator 'a to b' or 'a in b'
        params = [node, parseRange(state)];
        node = new OperatorNode(name, fn, params);
      }
    }

    return node;
  }
  /**
   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
   * @return {Node} node
   * @private
   */


  function parseRange(state) {
    let node;
    const params = [];

    if (state.token === ':') {
      // implicit start=1 (one-based)
      node = new ConstantNode(1);
    } else {
      // explicit start
      node = parseAddSubtract(state);
    }

    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
      // we ignore the range operator when a conditional operator is being processed on the same level
      params.push(node); // parse step and end

      while (state.token === ':' && params.length < 3) {
        // eslint-disable-line no-unmodified-loop-condition
        getTokenSkipNewline(state);

        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
          // implicit end
          params.push(new SymbolNode('end'));
        } else {
          // explicit end
          params.push(parseAddSubtract(state));
        }
      }

      if (params.length === 3) {
        // params = [start, step, end]
        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
      } else {
        // length === 2
        // params = [start, end]
        node = new RangeNode(params[0], params[1]); // start, end
      }
    }

    return node;
  }
  /**
   * add or subtract
   * @return {Node} node
   * @private
   */


  function parseAddSubtract(state) {
    let node, operators, name, fn, params;
    node = parseMultiplyDivide(state);
    operators = {
      '+': 'add',
      '-': 'subtract'
    };

    while (operators.hasOwnProperty(state.token)) {
      name = state.token;
      fn = operators[name];
      getTokenSkipNewline(state);
      params = [node, parseMultiplyDivide(state)];
      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * multiply, divide, modulus
   * @return {Node} node
   * @private
   */


  function parseMultiplyDivide(state) {
    let node, last, operators, name, fn;
    node = parseImplicitMultiplication(state);
    last = node;
    operators = {
      '*': 'multiply',
      '.*': 'dotMultiply',
      '/': 'divide',
      './': 'dotDivide',
      '%': 'mod',
      'mod': 'mod'
    };

    while (true) {
      if (operators.hasOwnProperty(state.token)) {
        // explicit operators
        name = state.token;
        fn = operators[name];
        getTokenSkipNewline(state);
        last = parseImplicitMultiplication(state);
        node = new OperatorNode(name, fn, [node, last]);
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * implicit multiplication
   * @return {Node} node
   * @private
   */


  function parseImplicitMultiplication(state) {
    let node, last;
    node = parseRule2(state);
    last = node;

    while (true) {
      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && (0, _is.isConstantNode)(node) || state.tokenType === TOKENTYPE.NUMBER && !(0, _is.isConstantNode)(last) && (!(0, _is.isOperatorNode)(last) || last.op === '!') || state.token === '(') {
        // parse implicit multiplication
        //
        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
        // number:      implicit multiplication like '(2+3)2'
        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
        last = parseRule2(state);
        node = new OperatorNode('*', 'multiply', [node, last], true
        /* implicit */
        );
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
   * Explicit division gets higher precedence than implicit multiplication
   * when the division matches this pattern: [number] / [number] [symbol]
   * @return {Node} node
   * @private
   */


  function parseRule2(state) {
    let node = parseUnary(state);
    let last = node;
    let tokenStates = [];

    while (true) {
      // Match the "number /" part of the pattern "number / number symbol"
      if (state.token === '/' && (0, _is.isConstantNode)(last)) {
        // Look ahead to see if the next token is a number
        tokenStates.push(Object.assign({}, state));
        getTokenSkipNewline(state); // Match the "number / number" part of the pattern

        if (state.tokenType === TOKENTYPE.NUMBER) {
          // Look ahead again
          tokenStates.push(Object.assign({}, state));
          getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
            // We've matched the pattern "number / number symbol".
            // Rewind once and build the "number / number" node; the symbol will be consumed later
            Object.assign(state, tokenStates.pop());
            tokenStates.pop();
            last = parseUnary(state);
            node = new OperatorNode('/', 'divide', [node, last]);
          } else {
            // Not a match, so rewind
            tokenStates.pop();
            Object.assign(state, tokenStates.pop());
            break;
          }
        } else {
          // Not a match, so rewind
          Object.assign(state, tokenStates.pop());
          break;
        }
      } else {
        break;
      }
    }

    return node;
  }
  /**
   * Unary plus and minus, and logical and bitwise not
   * @return {Node} node
   * @private
   */


  function parseUnary(state) {
    let name, params, fn;
    const operators = {
      '-': 'unaryMinus',
      '+': 'unaryPlus',
      '~': 'bitNot',
      'not': 'not'
    };

    if (operators.hasOwnProperty(state.token)) {
      fn = operators[state.token];
      name = state.token;
      getTokenSkipNewline(state);
      params = [parseUnary(state)];
      return new OperatorNode(name, fn, params);
    }

    return parsePow(state);
  }
  /**
   * power
   * Note: power operator is right associative
   * @return {Node} node
   * @private
   */


  function parsePow(state) {
    let node, name, fn, params;
    node = parseLeftHandOperators(state);

    if (state.token === '^' || state.token === '.^') {
      name = state.token;
      fn = name === '^' ? 'pow' : 'dotPow';
      getTokenSkipNewline(state);
      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

      node = new OperatorNode(name, fn, params);
    }

    return node;
  }
  /**
   * Left hand operators: factorial x!, ctranspose x'
   * @return {Node} node
   * @private
   */


  function parseLeftHandOperators(state) {
    let node, operators, name, fn, params;
    node = parseCustomNodes(state);
    operators = {
      '!': 'factorial',
      '\'': 'ctranspose'
    };

    while (operators.hasOwnProperty(state.token)) {
      name = state.token;
      fn = operators[name];
      getToken(state);
      params = [node];
      node = new OperatorNode(name, fn, params);
      node = parseAccessors(state, node);
    }

    return node;
  }
  /**
   * Parse a custom node handler. A node handler can be used to process
   * nodes in a custom way, for example for handling a plot.
   *
   * A handler must be passed as second argument of the parse function.
   * - must extend math.expression.node.Node
   * - must contain a function _compile(defs: Object) : string
   * - must contain a function find(filter: Object) : Node[]
   * - must contain a function toString() : string
   * - the constructor is called with a single argument containing all parameters
   *
   * For example:
   *
   *     nodes = {
   *       'plot': PlotHandler
   *     }
   *
   * The constructor of the handler is called as:
   *
   *     node = new PlotHandler(params)
   *
   * The handler will be invoked when evaluating an expression like:
   *
   *     node = math.parse('plot(sin(x), x)', nodes)
   *
   * @return {Node} node
   * @private
   */


  function parseCustomNodes(state) {
    let params = [];

    if (state.tokenType === TOKENTYPE.SYMBOL && state.extraNodes.hasOwnProperty(state.token)) {
      const CustomNode = state.extraNodes[state.token];
      getToken(state); // parse parameters

      if (state.token === '(') {
        params = [];
        openParams(state);
        getToken(state);

        if (state.token !== ')') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ')') {
          throw createSyntaxError(state, 'Parenthesis ) expected');
        }

        closeParams(state);
        getToken(state);
      } // create a new custom node
      // noinspection JSValidateTypes


      return new CustomNode(params);
    }

    return parseSymbol(state);
  }
  /**
   * parse symbols: functions, variables, constants, units
   * @return {Node} node
   * @private
   */


  function parseSymbol(state) {
    let node, name;

    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
      name = state.token;
      getToken(state);

      if (CONSTANTS.hasOwnProperty(name)) {
        // true, false, null, ...
        node = new ConstantNode(CONSTANTS[name]);
      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
        // NaN, Infinity
        node = new ConstantNode(numeric(name, 'number'));
      } else {
        node = new SymbolNode(name);
      } // parse function parameters and matrix index


      node = parseAccessors(state, node);
      return node;
    }

    return parseDoubleQuotesString(state);
  }
  /**
   * parse accessors:
   * - function invocation in round brackets (...), for example sqrt(2)
   * - index enclosed in square brackets [...], for example A[2,3]
   * - dot notation for properties, like foo.bar
   * @param {Node} node    Node on which to apply the parameters. If there
   *                       are no parameters in the expression, the node
   *                       itself is returned
   * @param {string[]} [types]  Filter the types of notations
   *                            can be ['(', '[', '.']
   * @return {Node} node
   * @private
   */


  function parseAccessors(state, node, types) {
    let params;

    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
      // eslint-disable-line no-unmodified-loop-condition
      params = [];

      if (state.token === '(') {
        if ((0, _is.isSymbolNode)(node) || (0, _is.isAccessorNode)(node)) {
          // function invocation like fn(2, 3) or obj.fn(2, 3)
          openParams(state);
          getToken(state);

          if (state.token !== ')') {
            params.push(parseAssignment(state)); // parse a list with parameters

            while (state.token === ',') {
              // eslint-disable-line no-unmodified-loop-condition
              getToken(state);
              params.push(parseAssignment(state));
            }
          }

          if (state.token !== ')') {
            throw createSyntaxError(state, 'Parenthesis ) expected');
          }

          closeParams(state);
          getToken(state);
          node = new FunctionNode(node, params);
        } else {
          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
          // don't parse it here but let it be handled by parseImplicitMultiplication
          // with correct precedence
          return node;
        }
      } else if (state.token === '[') {
        // index notation like variable[2, 3]
        openParams(state);
        getToken(state);

        if (state.token !== ']') {
          params.push(parseAssignment(state)); // parse a list with parameters

          while (state.token === ',') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params.push(parseAssignment(state));
          }
        }

        if (state.token !== ']') {
          throw createSyntaxError(state, 'Parenthesis ] expected');
        }

        closeParams(state);
        getToken(state);
        node = new AccessorNode(node, new IndexNode(params));
      } else {
        // dot notation like variable.prop
        getToken(state);

        if (state.tokenType !== TOKENTYPE.SYMBOL) {
          throw createSyntaxError(state, 'Property name expected after dot');
        }

        params.push(new ConstantNode(state.token));
        getToken(state);
        const dotNotation = true;
        node = new AccessorNode(node, new IndexNode(params, dotNotation));
      }
    }

    return node;
  }
  /**
   * Parse a double quotes string.
   * @return {Node} node
   * @private
   */


  function parseDoubleQuotesString(state) {
    let node, str;

    if (state.token === '"') {
      str = parseDoubleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseSingleQuotesString(state);
  }
  /**
   * Parse a string surrounded by double quotes "..."
   * @return {string}
   */


  function parseDoubleQuotesStringToken(state) {
    let str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\"'
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '"') {
      throw createSyntaxError(state, 'End of string " expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * Parse a single quotes string.
   * @return {Node} node
   * @private
   */


  function parseSingleQuotesString(state) {
    let node, str;

    if (state.token === '\'') {
      str = parseSingleQuotesStringToken(state); // create constant

      node = new ConstantNode(str); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseMatrix(state);
  }
  /**
   * Parse a string surrounded by single quotes '...'
   * @return {string}
   */


  function parseSingleQuotesStringToken(state) {
    let str = '';

    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
      if (currentCharacter(state) === '\\') {
        // escape character, immediately process the next
        // character to prevent stopping at a next '\''
        str += currentCharacter(state);
        next(state);
      }

      str += currentCharacter(state);
      next(state);
    }

    getToken(state);

    if (state.token !== '\'') {
      throw createSyntaxError(state, 'End of string \' expected');
    }

    getToken(state);
    return JSON.parse('"' + str + '"'); // unescape escaped characters
  }
  /**
   * parse the matrix
   * @return {Node} node
   * @private
   */


  function parseMatrix(state) {
    let array, params, rows, cols;

    if (state.token === '[') {
      // matrix [...]
      openParams(state);
      getToken(state);

      if (state.token !== ']') {
        // this is a non-empty matrix
        const row = parseRow(state);

        if (state.token === ';') {
          // 2 dimensional array
          rows = 1;
          params = [row]; // the rows of the matrix are separated by dot-comma's

          while (state.token === ';') {
            // eslint-disable-line no-unmodified-loop-condition
            getToken(state);
            params[rows] = parseRow(state);
            rows++;
          }

          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state); // check if the number of columns matches in all rows

          cols = params[0].items.length;

          for (let r = 1; r < rows; r++) {
            if (params[r].items.length !== cols) {
              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
            }
          }

          array = new ArrayNode(params);
        } else {
          // 1 dimensional vector
          if (state.token !== ']') {
            throw createSyntaxError(state, 'End of matrix ] expected');
          }

          closeParams(state);
          getToken(state);
          array = row;
        }
      } else {
        // this is an empty matrix "[ ]"
        closeParams(state);
        getToken(state);
        array = new ArrayNode([]);
      }

      return parseAccessors(state, array);
    }

    return parseObject(state);
  }
  /**
   * Parse a single comma-separated row from a matrix, like 'a, b, c'
   * @return {ArrayNode} node
   */


  function parseRow(state) {
    const params = [parseAssignment(state)];
    let len = 1;

    while (state.token === ',') {
      // eslint-disable-line no-unmodified-loop-condition
      getToken(state); // parse expression

      params[len] = parseAssignment(state);
      len++;
    }

    return new ArrayNode(params);
  }
  /**
   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
   * @return {Node} node
   * @private
   */


  function parseObject(state) {
    if (state.token === '{') {
      openParams(state);
      let key;
      const properties = {};

      do {
        getToken(state);

        if (state.token !== '}') {
          // parse key
          if (state.token === '"') {
            key = parseDoubleQuotesStringToken(state);
          } else if (state.token === '\'') {
            key = parseSingleQuotesStringToken(state);
          } else if (state.tokenType === TOKENTYPE.SYMBOL) {
            key = state.token;
            getToken(state);
          } else {
            throw createSyntaxError(state, 'Symbol or string expected as object key');
          } // parse key/value separator


          if (state.token !== ':') {
            throw createSyntaxError(state, 'Colon : expected after object key');
          }

          getToken(state); // parse key

          properties[key] = parseAssignment(state);
        }
      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


      if (state.token !== '}') {
        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
      }

      closeParams(state);
      getToken(state);
      let node = new ObjectNode(properties); // parse index parameters

      node = parseAccessors(state, node);
      return node;
    }

    return parseNumber(state);
  }
  /**
   * parse a number
   * @return {Node} node
   * @private
   */


  function parseNumber(state) {
    let numberStr;

    if (state.tokenType === TOKENTYPE.NUMBER) {
      // this is a number
      numberStr = state.token;
      getToken(state);
      return new ConstantNode(numeric(numberStr, config.number));
    }

    return parseParentheses(state);
  }
  /**
   * parentheses
   * @return {Node} node
   * @private
   */


  function parseParentheses(state) {
    let node; // check if it is a parenthesized expression

    if (state.token === '(') {
      // parentheses (...)
      openParams(state);
      getToken(state);
      node = parseAssignment(state); // start again

      if (state.token !== ')') {
        throw createSyntaxError(state, 'Parenthesis ) expected');
      }

      closeParams(state);
      getToken(state);
      node = new ParenthesisNode(node);
      node = parseAccessors(state, node);
      return node;
    }

    return parseEnd(state);
  }
  /**
   * Evaluated when the expression is not yet ended but expected to end
   * @return {Node} res
   * @private
   */


  function parseEnd(state) {
    if (state.token === '') {
      // syntax error or unexpected end of expression
      throw createSyntaxError(state, 'Unexpected end of expression');
    } else {
      throw createSyntaxError(state, 'Value expected');
    }
  }
  /**
   * Shortcut for getting the current row value (one based)
   * Returns the line of the currently handled expression
   * @private
   */

  /* TODO: implement keeping track on the row number
  function row () {
    return null
  }
  */

  /**
   * Shortcut for getting the current col value (one based)
   * Returns the column (position) where the last state.token starts
   * @private
   */


  function col(state) {
    return state.index - state.token.length + 1;
  }
  /**
   * Create an error
   * @param {string} message
   * @return {SyntaxError} instantiated error
   * @private
   */


  function createSyntaxError(state, message) {
    const c = col(state);
    const error = new SyntaxError(message + ' (char ' + c + ')');
    error['char'] = c;
    return error;
  }
  /**
   * Create an error
   * @param {string} message
   * @return {Error} instantiated error
   * @private
   */


  function createError(state, message) {
    const c = col(state);
    const error = new SyntaxError(message + ' (char ' + c + ')');
    error['char'] = c;
    return error;
  }

  return parse;
});
exports.createParse = createParse;
},{"../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../utils/is":"../node_modules/mathjs/src/utils/is.js","../utils/collection":"../node_modules/mathjs/src/utils/collection.js"}],"../node_modules/mathjs/src/expression/function/compile.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCompile = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

const name = 'compile';
const dependencies = ['typed', 'parse'];
const createCompile =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  parse
}) => {
  /**
   * Parse and compile an expression.
   * Returns a an object with a function `evaluate([scope])` to evaluate the
   * compiled expression.
   *
   * Syntax:
   *
   *     math.compile(expr)                       // returns one node
   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
   *
   * Examples:
   *
   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
   *     code1.evaluate() // 5
   *
   *     let scope = {a: 3, b: 4}
   *     const code2 = math.compile('a * b') // 12
   *     code2.evaluate(scope) // 12
   *     scope.a = 5
   *     code2.evaluate(scope) // 20
   *
   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
   *     nodes[2].evaluate() // 12
   *
   * See also:
   *
   *    parse, evaluate
   *
   * @param {string | string[] | Array | Matrix} expr
   *            The expression to be compiled
   * @return {{evaluate: Function} | Array.<{evaluate: Function}>} code
   *            An object with the compiled expression
   * @throws {Error}
   */
  return typed(name, {
    'string': function (expr) {
      return parse(expr).compile();
    },
    'Array | Matrix': function (expr) {
      return (0, _collection.deepMap)(expr, function (entry) {
        return parse(entry).compile();
      });
    }
  });
});
exports.createCompile = createCompile;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/function/evaluate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEvaluate = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

const name = 'evaluate';
const dependencies = ['typed', 'parse'];
const createEvaluate =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  parse
}) => {
  /**
   * Evaluate an expression.
   *
   * Note the evaluating arbitrary expressions may involve security risks,
   * see [https://mathjs.org/docs/expressions/security.html](https://mathjs.org/docs/expressions/security.html) for more information.
   *
   * Syntax:
   *
   *     math.evaluate(expr)
   *     math.evaluate(expr, scope)
   *     math.evaluate([expr1, expr2, expr3, ...])
   *     math.evaluate([expr1, expr2, expr3, ...], scope)
   *
   * Example:
   *
   *     math.evaluate('(2+3)/4')                // 1.25
   *     math.evaluate('sqrt(3^2 + 4^2)')        // 5
   *     math.evaluate('sqrt(-4)')               // 2i
   *     math.evaluate(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
   *
   *     let scope = {a:3, b:4}
   *     math.evaluate('a * b', scope)           // 12
   *
   * See also:
   *
   *    parse, compile
   *
   * @param {string | string[] | Matrix} expr   The expression to be evaluated
   * @param {Object} [scope]                    Scope to read/write variables
   * @return {*} The result of the expression
   * @throws {Error}
   */
  return typed(name, {
    'string': function (expr) {
      let scope = {};
      return parse(expr).compile().evaluate(scope);
    },
    'string, Object': function (expr, scope) {
      return parse(expr).compile().evaluate(scope);
    },
    'Array | Matrix': function (expr) {
      let scope = {};
      return (0, _collection.deepMap)(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    },
    'Array | Matrix, Object': function (expr, scope) {
      return (0, _collection.deepMap)(expr, function (entry) {
        return parse(entry).compile().evaluate(scope);
      });
    }
  });
});
exports.createEvaluate = createEvaluate;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/function/eval.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeprecatedEval = void 0;

var _factory = require("../../utils/factory");

var _log = require("../../utils/log");

// For backward compatibility, deprecated since version 6.0.0. Date: 2018-12-05
const createDeprecatedEval =
/* #__PURE__ */
(0, _factory.factory)('eval', ['evaluate'], ({
  evaluate
}) => {
  return function (...args) {
    (0, _log.warnOnce)('Function "eval" has been renamed to "evaluate" in v6.0.0, please use the new function instead.');
    return evaluate.apply(evaluate, args);
  };
});
exports.createDeprecatedEval = createDeprecatedEval;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/log":"../node_modules/mathjs/src/utils/log.js"}],"../node_modules/mathjs/src/expression/Parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createParserClass = void 0;

var _factory = require("../utils/factory");

var _object = require("../utils/object");

var _customs = require("../utils/customs");

var _log = require("../utils/log");

const name = 'Parser';
const dependencies = ['parse'];
const createParserClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  parse
}) => {
  /**
   * @constructor Parser
   * Parser contains methods to evaluate or parse expressions, and has a number
   * of convenience methods to get, set, and remove variables from memory. Parser
   * keeps a scope containing variables in memory, which is used for all
   * evaluations.
   *
   * Methods:
   *    const result = parser.evaluate(expr)  // evaluate an expression
   *    const value = parser.get(name)        // retrieve a variable from the parser
   *    const values = parser.getAll()        // retrieve all defined variables
   *    parser.set(name, value)               // set a variable in the parser
   *    parser.remove(name)                   // clear a variable from the
   *                                          // parsers scope
   *    parser.clear()                        // clear the parsers scope
   *
   * Example usage:
   *    const parser = new Parser()
   *    // Note: there is a convenience method which can be used instead:
   *    // const parser = new math.parser()
   *
   *    // evaluate expressions
   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5
   *    parser.evaluate('sqrt(-4)')               // 2i
   *    parser.evaluate('2 inch in cm')           // 5.08 cm
   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476
   *
   *    // define variables and functions
   *    parser.evaluate('x = 7 / 2')              // 3.5
   *    parser.evaluate('x + 3')                  // 6.5
   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)
   *    parser.evaluate('f(2, 3)')                // 8
   *
   *    // get and set variables and functions
   *    const x = parser.get('x')                 // 7
   *    const f = parser.get('f')                 // function
   *    const g = f(3, 2)                         // 9
   *    parser.set('h', 500)
   *    const i = parser.evaluate('h / 2')        // 250
   *    parser.set('hello', function (name) {
   *        return 'hello, ' + name + '!'
   *    })
   *    parser.evaluate('hello("user")')          // "hello, user!"
   *
   *    // clear defined functions and variables
   *    parser.clear()
   *
   */
  function Parser() {
    if (!(this instanceof Parser)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    this.scope = {};
  }
  /**
   * Attach type information
   */


  Parser.prototype.type = 'Parser';
  Parser.prototype.isParser = true;
  /**
   * Parse an expression and return the parsed function node.
   * The node tree can be compiled via `code = node.compile(math)`,
   * and the compiled code can be executed as `code.evaluate([scope])`
   * @param {string} expr
   * @return {Node} node
   * @throws {Error}
   */

  Parser.prototype.parse = function (expr) {
    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
  };
  /**
   * Parse and compile an expression, return the compiled javascript code.
   * The node can be evaluated via code.evaluate([scope])
   * @param {string} expr
   * @return {{evaluate: function}} code
   * @throws {Error}
   */


  Parser.prototype.compile = function (expr) {
    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
  };
  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */


  Parser.prototype.evaluate = function (expr) {
    // TODO: validate arguments
    return parse(expr).compile().evaluate(this.scope);
  };
  /**
   * Parse and evaluate the given expression
   * @param {string} expr   A string containing an expression, for example "2+3"
   * @return {*} result     The result, or undefined when the expression was empty
   * @throws {Error}
   */
  // TODO: Deprecated since v6.0.0. Clean up some day


  Parser.prototype.eval = function (expr) {
    (0, _log.warnOnce)('Method Parser.eval is renamed to Parser.evaluate. Please use the new method name.');
    return this.evaluate(expr);
  };
  /**
   * Get a variable (a function or variable) by name from the parsers scope.
   * Returns undefined when not found
   * @param {string} name
   * @return {* | undefined} value
   */


  Parser.prototype.get = function (name) {
    // TODO: validate arguments
    return name in this.scope ? (0, _customs.getSafeProperty)(this.scope, name) : undefined;
  };
  /**
   * Get a map with all defined variables
   * @return {Object} values
   */


  Parser.prototype.getAll = function () {
    return (0, _object.extend)({}, this.scope);
  };
  /**
   * Set a symbol (a function or variable) by name from the parsers scope.
   * @param {string} name
   * @param {* | undefined} value
   */


  Parser.prototype.set = function (name, value) {
    // TODO: validate arguments
    return (0, _customs.setSafeProperty)(this.scope, name, value);
  };
  /**
   * Remove a variable from the parsers scope
   * @param {string} name
   */


  Parser.prototype.remove = function (name) {
    // TODO: validate arguments
    delete this.scope[name];
  };
  /**
   * Clear the scope with variables and functions
   */


  Parser.prototype.clear = function () {
    for (const name in this.scope) {
      if (this.scope.hasOwnProperty(name)) {
        delete this.scope[name];
      }
    }
  };

  return Parser;
}, {
  isClass: true
});
exports.createParserClass = createParserClass;
},{"../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../utils/object":"../node_modules/mathjs/src/utils/object.js","../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../utils/log":"../node_modules/mathjs/src/utils/log.js"}],"../node_modules/mathjs/src/expression/function/parser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createParser = void 0;

var _factory = require("../../utils/factory");

const name = 'parser';
const dependencies = ['typed', 'Parser'];
const createParser =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Parser
}) => {
  /**
   * Create a parser. The function creates a new `math.Parser` object.
   *
   * Syntax:
   *
   *    math.parser()
   *
   * Examples:
   *
   *     const parser = new math.parser()
   *
   *     // evaluate expressions
   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5
   *     const b = parser.evaluate('sqrt(-4)')        // 2i
   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm
   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476
   *
   *     // define variables and functions
   *     parser.evaluate('x = 7 / 2')                 // 3.5
   *     parser.evaluate('x + 3')                     // 6.5
   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)
   *     parser.evaluate('f(2, 3)')                   // 8
   *
   *     // get and set variables and functions
   *     const x = parser.get('x')                // 7
   *     const f = parser.get('f')                // function
   *     const g = f(3, 2)                        // 9
   *     parser.set('h', 500)
   *     const i = parser.evaluate('h / 2')       // 250
   *     parser.set('hello', function (name) {
   *       return 'hello, ' + name + '!'
   *     })
   *     parser.evaluate('hello("user")')         // "hello, user!"
   *
   *     // clear defined functions and variables
   *     parser.clear()
   *
   * See also:
   *
   *    evaluate, compile, parse
   *
   * @return {Parser} Parser
   */
  return typed(name, {
    '': function () {
      return new Parser();
    }
  });
});
exports.createParser = createParser;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/decomposition/lup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLup = void 0;

var _object = require("../../../utils/object");

var _factory = require("../../../utils/factory");

const name = 'lup';
const dependencies = ['typed', 'matrix', 'abs', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract', 'larger', 'equalScalar', 'unaryMinus', 'DenseMatrix', 'SparseMatrix', 'Spa'];
const createLup =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  abs,
  addScalar,
  divideScalar,
  multiplyScalar,
  subtract,
  larger,
  equalScalar,
  unaryMinus,
  DenseMatrix,
  SparseMatrix,
  Spa
}) => {
  /**
   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
   * row permutation vector `p` where `A[p,:] = L * U`
   *
   * Syntax:
   *
   *    math.lup(A)
   *
   * Example:
   *
   *    const m = [[2, 1], [1, 4]]
   *    const r = math.lup(m)
   *    // r = {
   *    //   L: [[1, 0], [0.5, 1]],
   *    //   U: [[2, 1], [0, 3.5]],
   *    //   P: [0, 1]
   *    // }
   *
   * See also:
   *
   *    slu, lsolve, lusolve, usolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
   *
   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
   */
  return typed(name, {
    'DenseMatrix': function (m) {
      return _denseLUP(m);
    },
    'SparseMatrix': function (m) {
      return _sparseLUP(m);
    },
    'Array': function (a) {
      // create dense matrix from array
      const m = matrix(a); // lup, use matrix implementation

      const r = _denseLUP(m); // result


      return {
        L: r.L.valueOf(),
        U: r.U.valueOf(),
        p: r.p
      };
    }
  });

  function _denseLUP(m) {
    // rows & columns
    const rows = m._size[0];
    const columns = m._size[1]; // minimum rows and columns

    let n = Math.min(rows, columns); // matrix array, clone original data

    const data = (0, _object.clone)(m._data); // l matrix arrays

    const ldata = [];
    const lsize = [rows, n]; // u matrix arrays

    const udata = [];
    const usize = [n, columns]; // vars

    let i, j, k; // permutation vector

    const p = [];

    for (i = 0; i < rows; i++) {
      p[i] = i;
    } // loop columns


    for (j = 0; j < columns; j++) {
      // skip first column in upper triangular matrix
      if (j > 0) {
        // loop rows
        for (i = 0; i < rows; i++) {
          // min i,j
          const min = Math.min(i, j); // v[i, j]

          let s = 0; // loop up to min

          for (k = 0; k < min; k++) {
            // s = l[i, k] - data[k, j]
            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
          }

          data[i][j] = subtract(data[i][j], s);
        }
      } // row with larger value in cvector, row >= j


      let pi = j;
      let pabsv = 0;
      let vjj = 0; // loop rows

      for (i = j; i < rows; i++) {
        // data @ i, j
        const v = data[i][j]; // absolute value

        const absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = i; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      } // swap rows (j <-> pi)


      if (j !== pi) {
        // swap values j <-> pi in p
        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

        DenseMatrix._swapRows(j, pi, data);
      } // check column is in lower triangular matrix


      if (j < rows) {
        // loop rows (lower triangular matrix)
        for (i = j + 1; i < rows; i++) {
          // value @ i, j
          const vij = data[i][j];

          if (!equalScalar(vij, 0)) {
            // update data
            data[i][j] = divideScalar(data[i][j], vjj);
          }
        }
      }
    } // loop columns


    for (j = 0; j < columns; j++) {
      // loop rows
      for (i = 0; i < rows; i++) {
        // initialize row in arrays
        if (j === 0) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i] = [];
          } // L


          ldata[i] = [];
        } // check we are in the upper triangular matrix


        if (i < j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 0;
          }

          continue;
        } // diagonal value


        if (i === j) {
          // check row exists in upper triangular matrix
          if (i < columns) {
            // U
            udata[i][j] = data[i][j];
          } // check column exists in lower triangular matrix


          if (j < rows) {
            // L
            ldata[i][j] = 1;
          }

          continue;
        } // check row exists in upper triangular matrix


        if (i < columns) {
          // U
          udata[i][j] = 0;
        } // check column exists in lower triangular matrix


        if (j < rows) {
          // L
          ldata[i][j] = data[i][j];
        }
      }
    } // l matrix


    const l = new DenseMatrix({
      data: ldata,
      size: lsize
    }); // u matrix

    const u = new DenseMatrix({
      data: udata,
      size: usize
    }); // p vector

    const pv = [];

    for (i = 0, n = p.length; i < n; i++) {
      pv[p[i]] = i;
    } // return matrices


    return {
      L: l,
      U: u,
      p: pv,
      toString: function () {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }

  function _sparseLUP(m) {
    // rows & columns
    const rows = m._size[0];
    const columns = m._size[1]; // minimum rows and columns

    const n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

    const values = m._values;
    const index = m._index;
    const ptr = m._ptr; // l matrix arrays

    const lvalues = [];
    const lindex = [];
    const lptr = [];
    const lsize = [rows, n]; // u matrix arrays

    const uvalues = [];
    const uindex = [];
    const uptr = [];
    const usize = [n, columns]; // vars

    let i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

    const pvCo = [];
    const pvOc = [];

    for (i = 0; i < rows; i++) {
      pvCo[i] = i;
      pvOc[i] = i;
    } // swap indices in permutation vectors (condition x < y)!


    const swapIndeces = function (x, y) {
      // find pv indeces getting data from x and y
      const kx = pvOc[x];
      const ky = pvOc[y]; // update permutation vector current -> original

      pvCo[kx] = y;
      pvCo[ky] = x; // update permutation vector original -> current

      pvOc[x] = ky;
      pvOc[y] = kx;
    }; // loop columns


    for (j = 0; j < columns; j++) {
      // sparse accumulator
      const spa = new Spa(); // check lower triangular matrix has a value @ column j

      if (j < rows) {
        // update ptr
        lptr.push(lvalues.length); // first value in j column for lower triangular matrix

        lvalues.push(1);
        lindex.push(j);
      } // update ptr


      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

      const k0 = ptr[j];
      const k1 = ptr[j + 1]; // copy column j into sparse accumulator

      for (k = k0; k < k1; k++) {
        // row
        i = index[k]; // copy column values into sparse accumulator (use permutation vector)

        spa.set(pvCo[i], values[k]);
      } // skip first column in upper triangular matrix


      if (j > 0) {
        // loop rows in column j (above diagonal)
        spa.forEach(0, j - 1, function (k, vkj) {
          // loop rows in column k (L)
          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
            // check row is below k
            if (i > k) {
              // update spa value
              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
            }
          });
        });
      } // row with larger value in spa, row >= j


      let pi = j;
      let vjj = spa.get(j);
      let pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

      spa.forEach(j + 1, rows - 1, function (x, v) {
        // absolute value
        const absv = abs(v); // value is greater than pivote value

        if (larger(absv, pabsv)) {
          // store row
          pi = x; // update max value

          pabsv = absv; // value @ [j, j]

          vjj = v;
        }
      }); // swap rows (j <-> pi)

      if (j !== pi) {
        // swap values j <-> pi in L
        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

        swapIndeces(j, pi);
      } // loop values in spa (order by row)


      spa.forEach(0, rows - 1, function (x, v) {
        // check we are above diagonal
        if (x <= j) {
          // update upper triangular matrix
          uvalues.push(v);
          uindex.push(x);
        } else {
          // update value
          v = divideScalar(v, vjj); // check value is non zero

          if (!equalScalar(v, 0)) {
            // update lower triangular matrix
            lvalues.push(v);
            lindex.push(x);
          }
        }
      });
    } // update ptrs


    uptr.push(uvalues.length);
    lptr.push(lvalues.length); // return matrices

    return {
      L: new SparseMatrix({
        values: lvalues,
        index: lindex,
        ptr: lptr,
        size: lsize
      }),
      U: new SparseMatrix({
        values: uvalues,
        index: uindex,
        ptr: uptr,
        size: usize
      }),
      p: pvCo,
      toString: function () {
        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
      }
    };
  }
});
exports.createLup = createLup;
},{"../../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/decomposition/qr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createQr = void 0;

var _factory = require("../../../utils/factory");

const name = 'qr';
const dependencies = ['typed', 'matrix', 'zeros', 'identity', 'isZero', 'unequal', 'sign', 'sqrt', 'conj', 'unaryMinus', 'addScalar', 'divideScalar', 'multiplyScalar', 'subtract'];
const createQr =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  zeros,
  identity,
  isZero,
  unequal,
  sign,
  sqrt,
  conj,
  unaryMinus,
  addScalar,
  divideScalar,
  multiplyScalar,
  subtract
}) => {
  /**
   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
   * two matrices (`Q`, `R`) where `Q` is an
   * orthogonal matrix and `R` is an upper triangular matrix.
   *
   * Syntax:
   *
   *    math.qr(A)
   *
   * Example:
   *
   *    const m = [
   *      [1, -1,  4],
   *      [1,  4, -2],
   *      [1,  4,  2],
   *      [1,  -1, 0]
   *    ]
   *    const result = math.qr(m)
   *    // r = {
   *    //   Q: [
   *    //     [0.5, -0.5,   0.5],
   *    //     [0.5,  0.5,  -0.5],
   *    //     [0.5,  0.5,   0.5],
   *    //     [0.5, -0.5,  -0.5],
   *    //   ],
   *    //   R: [
   *    //     [2, 3,  2],
   *    //     [0, 5, -2],
   *    //     [0, 0,  4],
   *    //     [0, 0,  0]
   *    //   ]
   *    // }
   *
   * See also:
   *
   *    lup, lusolve
   *
   * @param {Matrix | Array} A    A two dimensional matrix or array
   * for which to get the QR decomposition.
   *
   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
   * matrix and R: the upper triangular matrix
   */
  return typed(name, {
    'DenseMatrix': function (m) {
      return _denseQR(m);
    },
    'SparseMatrix': function (m) {
      return _sparseQR(m);
    },
    'Array': function (a) {
      // create dense matrix from array
      const m = matrix(a); // lup, use matrix implementation

      const r = _denseQR(m); // result


      return {
        Q: r.Q.valueOf(),
        R: r.R.valueOf()
      };
    }
  });

  function _denseQR(m) {
    // rows & columns (m x n)
    const rows = m._size[0]; // m

    const cols = m._size[1]; // n

    const Q = identity([rows], 'dense');
    const Qdata = Q._data;
    const R = m.clone();
    const Rdata = R._data; // vars

    let i, j, k;
    const w = zeros([rows], '');

    for (k = 0; k < Math.min(cols, rows); ++k) {
      /*
       * **k-th Household matrix**
       *
       * The matrix I - 2*v*transpose(v)
       * x     = first column of A
       * x1    = first element of x
       * alpha = x1 / |x1| * |x|
       * e1    = tranpose([1, 0, 0, ...])
       * u     = x - alpha * e1
       * v     = u / |u|
       *
       * Household matrix = I - 2 * v * tranpose(v)
       *
       *  * Initially Q = I and R = A.
       *  * Household matrix is a reflection in a plane normal to v which
       *    will zero out all but the top right element in R.
       *  * Appplying reflection to both Q and R will not change product.
       *  * Repeat this process on the (1,1) minor to get R as an upper
       *    triangular matrix.
       *  * Reflections leave the magnitude of the columns of Q unchanged
       *    so Q remains othoganal.
       *
       */
      const pivot = Rdata[k][k];
      const sgn = unaryMinus(sign(pivot));
      const conjSgn = conj(sgn);
      let alphaSquared = 0;

      for (i = k; i < rows; i++) {
        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));
      }

      const alpha = multiplyScalar(sgn, sqrt(alphaSquared));

      if (!isZero(alpha)) {
        // first element in vector u
        const u1 = subtract(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

        w[k] = 1;

        for (i = k + 1; i < rows; i++) {
          w[i] = divideScalar(Rdata[i][k], u1);
        } // tau = - conj(u1 / alpha)


        const tau = unaryMinus(conj(divideScalar(u1, alpha)));
        let s;
        /*
         * tau and w have been choosen so that
         *
         * 2 * v * tranpose(v) = tau * w * tranpose(w)
         */

        /*
         * -- calculate R = R - tau * w * tranpose(w) * R --
         * Only do calculation with rows k to (rows-1)
         * Additionally columns 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */

        for (j = k; j < cols; j++) {
          s = 0.0; // calculate jth element of [tranpose(w) * R]

          for (i = k; i < rows; i++) {
            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
          } // calculate the jth element of [tau * transpose(w) * R]


          s = multiplyScalar(s, tau);

          for (i = k; i < rows; i++) {
            Rdata[i][j] = multiplyScalar(subtract(Rdata[i][j], multiplyScalar(w[i], s)), conjSgn);
          }
        }
        /*
         * -- calculate Q = Q - tau * Q * w * transpose(w) --
         * Q is a square matrix (rows x rows)
         * Only do calculation with columns k to (rows-1)
         * Additionally rows 0 to (k-1) will not be changed by this
         *   multiplication so do not bother recalculating them
         */


        for (i = 0; i < rows; i++) {
          s = 0.0; // calculate ith element of [Q * w]

          for (j = k; j < rows; j++) {
            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
          } // calculate the ith element of [tau * Q * w]


          s = multiplyScalar(s, tau);

          for (j = k; j < rows; ++j) {
            Qdata[i][j] = divideScalar(subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), conjSgn);
          }
        }
      }
    } // coerse almost zero elements to zero
    // TODO I feel uneasy just zeroing these values


    for (i = 0; i < rows; ++i) {
      for (j = 0; j < i && j < cols; ++j) {
        if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {
          throw new Error('math.qr(): unknown error - ' + 'R is not lower triangular (element (' + i + ', ' + j + ')  = ' + Rdata[i][j] + ')');
        }

        Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);
      }
    } // return matrices


    return {
      Q: Q,
      R: R,
      toString: function () {
        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
      }
    };
  }

  function _sparseQR(m) {
    throw new Error('qr not implemented for sparse matrices yet');
  }
});
exports.createQr = createQr;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csPermute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csPermute = csPermute;

/**
 * Permutes a sparse matrix C = P * A * Q
 *
 * @param {SparseMatrix}  a         The Matrix A
 * @param {Array}   pinv            The row permutation vector
 * @param {Array}   q               The column permutation vector
 * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
 *
 * @return {Matrix}                 C = P * A * Q, null on error
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPermute(a, pinv, q, values) {
  // a arrays
  const avalues = a._values;
  const aindex = a._index;
  const aptr = a._ptr;
  const asize = a._size;
  const adt = a._datatype; // rows & columns

  const m = asize[0];
  const n = asize[1]; // c arrays

  const cvalues = values && a._values ? [] : null;
  const cindex = []; // (aptr[n])

  const cptr = []; // (n + 1)
  // initialize vars

  let nz = 0; // loop columns

  for (let k = 0; k < n; k++) {
    // column k of C is column q[k] of A
    cptr[k] = nz; // apply column permutation

    const j = q ? q[k] : k; // loop values in column j of A

    for (let t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
      // row i of A is row pinv[i] of C
      const r = pinv ? pinv[aindex[t]] : aindex[t]; // index

      cindex[nz] = r; // check we need to populate values

      if (cvalues) {
        cvalues[nz] = avalues[t];
      } // increment number of nonzero elements


      nz++;
    }
  } // finalize the last column of C


  cptr[n] = nz; // return C matrix

  return a.createSparseMatrix({
    values: cvalues,
    index: cindex,
    ptr: cptr,
    size: [m, n],
    datatype: adt
  });
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csTdfs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csTdfs = csTdfs;

/**
 * Depth-first search and postorder of a tree rooted at node j
 *
 * @param {Number}  j               The tree node
 * @param {Number}  k
 * @param {Array}   w               The workspace array
 * @param {Number}  head            The index offset within the workspace for the head array
 * @param {Number}  next            The index offset within the workspace for the next array
 * @param {Array}   post            The post ordering array
 * @param {Number}  stack           The index offset within the workspace for the stack array
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csTdfs(j, k, w, head, next, post, stack) {
  // variables
  let top = 0; // place j on the stack

  w[stack] = j; // while (stack is not empty)

  while (top >= 0) {
    // p = top of stack
    const p = w[stack + top]; // i = youngest child of p

    const i = w[head + p];

    if (i === -1) {
      // p has no unordered children left
      top--; // node p is the kth postordered node

      post[k++] = p;
    } else {
      // remove i from children of p
      w[head + p] = w[next + i]; // increment top

      ++top; // start dfs on child node i

      w[stack + top] = i;
    }
  }

  return k;
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csPost.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csPost = csPost;

var _csTdfs = require("./csTdfs");

/**
 * Post order a tree of forest
 *
 * @param {Array}   parent          The tree or forest
 * @param {Number}  n               Number of columns
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csPost(parent, n) {
  // check inputs
  if (!parent) {
    return null;
  } // vars


  let k = 0;
  let j; // allocate result

  const post = []; // (n)
  // workspace, head: first n entries, next: next n entries, stack: last n entries

  const w = []; // (3 * n)

  const head = 0;
  const next = n;
  const stack = 2 * n; // initialize workspace

  for (j = 0; j < n; j++) {
    // empty linked lists
    w[head + j] = -1;
  } // traverse nodes in reverse order


  for (j = n - 1; j >= 0; j--) {
    // check j is a root
    if (parent[j] === -1) {
      continue;
    } // add j to list of its parent


    w[next + j] = w[head + parent[j]];
    w[head + parent[j]] = j;
  } // loop nodes


  for (j = 0; j < n; j++) {
    // skip j if it is not a root
    if (parent[j] !== -1) {
      continue;
    } // depth-first search


    k = (0, _csTdfs.csTdfs)(j, k, w, head, next, post, stack);
  }

  return post;
}
},{"./csTdfs":"../node_modules/mathjs/src/function/algebra/sparse/csTdfs.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csEtree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csEtree = csEtree;

/**
 * Computes the elimination tree of Matrix A (using triu(A)) or the
 * elimination tree of A'A without forming A'A.
 *
 * @param {Matrix}  a               The A Matrix
 * @param {boolean} ata             A value of true the function computes the etree of A'A
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csEtree(a, ata) {
  // check inputs
  if (!a) {
    return null;
  } // a arrays


  const aindex = a._index;
  const aptr = a._ptr;
  const asize = a._size; // rows & columns

  const m = asize[0];
  const n = asize[1]; // allocate result

  const parent = []; // (n)
  // allocate workspace

  const w = []; // (n + (ata ? m : 0))

  const ancestor = 0; // first n entries in w

  const prev = n; // last m entries (ata = true)

  let i, inext; // check we are calculating A'A

  if (ata) {
    // initialize workspace
    for (i = 0; i < m; i++) {
      w[prev + i] = -1;
    }
  } // loop columns


  for (let k = 0; k < n; k++) {
    // node k has no parent yet
    parent[k] = -1; // nor does k have an ancestor

    w[ancestor + k] = -1; // values in column k

    for (let p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
      // row
      const r = aindex[p]; // node

      i = ata ? w[prev + r] : r; // traverse from i to k

      for (; i !== -1 && i < k; i = inext) {
        // inext = ancestor of i
        inext = w[ancestor + i]; // path compression

        w[ancestor + i] = k; // check no anc., parent is k

        if (inext === -1) {
          parent[i] = k;
        }
      }

      if (ata) {
        w[prev + r] = k;
      }
    }
  }

  return parent;
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csFkeep.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csFkeep = csFkeep;

/**
 * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
 *
 * @param {Matrix}   a              The sparse matrix
 * @param {function} callback       The callback function, function will be invoked with the following args:
 *                                    - The entry row
 *                                    - The entry column
 *                                    - The entry value
 *                                    - The state parameter
 * @param {any}      other          The state
 *
 * @return                          The number of nonzero elements in the matrix
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFkeep(a, callback, other) {
  // a arrays
  const avalues = a._values;
  const aindex = a._index;
  const aptr = a._ptr;
  const asize = a._size; // columns

  const n = asize[1]; // nonzero items

  let nz = 0; // loop columns

  for (let j = 0; j < n; j++) {
    // get current location of col j
    let p = aptr[j]; // record new location of col j

    aptr[j] = nz;

    for (; p < aptr[j + 1]; p++) {
      // check we need to keep this item
      if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
        // keep A(i,j)
        aindex[nz] = aindex[p]; // check we need to process values (pattern only)

        if (avalues) {
          avalues[nz] = avalues[p];
        } // increment nonzero items


        nz++;
      }
    }
  } // finalize A


  aptr[n] = nz; // trim arrays

  aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

  if (avalues) {
    avalues.splice(nz, avalues.length - nz);
  } // return number of nonzero items


  return nz;
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csFlip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csFlip = csFlip;

/**
 * This function "flips" its input about the integer -1.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csFlip(i) {
  // flip the value
  return -i - 2;
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csAmd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsAmd = void 0;

var _factory = require("../../../utils/factory");

var _csFkeep = require("./csFkeep");

var _csFlip = require("./csFlip");

var _csTdfs = require("./csTdfs");

const name = 'csAmd';
const dependencies = ['add', 'multiply', 'transpose'];
const createCsAmd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  add,
  multiply,
  transpose
}) => {
  /**
   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
   * than A. It is a gready method that selects the sparsest pivot row and column during the course
   * of a right looking sparse Cholesky factorization.
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   *
   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
   * @param {Matrix} m        Sparse Matrix
   */
  return function csAmd(order, a) {
    // check input parameters
    if (!a || order <= 0 || order > 3) {
      return null;
    } // a matrix arrays


    const asize = a._size; // rows and columns

    const m = asize[0];
    const n = asize[1]; // initialize vars

    let lemax = 0; // dense threshold

    let dense = Math.max(16, 10 * Math.sqrt(n));
    dense = Math.min(n - 2, dense); // create target matrix C

    const cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


    (0, _csFkeep.csFkeep)(cm, _diag, null); // C matrix arrays

    const cindex = cm._index;
    const cptr = cm._ptr; // number of nonzero elements in C

    let cnz = cptr[n]; // allocate result (n+1)

    const P = []; // create workspace (8 * (n + 1))

    const W = [];
    const len = 0; // first n + 1 entries

    const nv = n + 1; // next n + 1 entries

    const next = 2 * (n + 1); // next n + 1 entries

    const head = 3 * (n + 1); // next n + 1 entries

    const elen = 4 * (n + 1); // next n + 1 entries

    const degree = 5 * (n + 1); // next n + 1 entries

    const w = 6 * (n + 1); // next n + 1 entries

    const hhead = 7 * (n + 1); // last n + 1 entries
    // use P as workspace for last

    const last = P; // initialize quotient graph

    let mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


    let nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


    let mindeg = 0; // vars

    let i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

    while (nel < n) {
      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
      // many nodes have been eliminated.
      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++);

      if (W[next + k] !== -1) {
        last[W[next + k]] = -1;
      } // remove k from degree list


      W[head + mindeg] = W[next + k]; // elenk = |Ek|

      const elenk = W[elen + k]; // # of nodes k represents

      let nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
      // degree lists. All elements e in Ek are absorved into element k.

      let dk = 0; // flag k as in Lk

      W[nv + k] = -nvk;
      let p = cptr[k]; // do in place if W[elen + k] === 0

      const pk1 = elenk === 0 ? p : cnz;
      let pk2 = pk1;

      for (k1 = 1; k1 <= elenk + 1; k1++) {
        if (k1 > elenk) {
          // search the nodes in k
          e = k; // list of nodes starts at cindex[pj]

          pj = p; // length of list of nodes in k

          ln = W[len + k] - elenk;
        } else {
          // search the nodes in e
          e = cindex[p++];
          pj = cptr[e]; // length of list of nodes in e

          ln = W[len + e];
        }

        for (k2 = 1; k2 <= ln; k2++) {
          i = cindex[pj++]; // check  node i dead, or seen

          if ((nvi = W[nv + i]) <= 0) {
            continue;
          } // W[degree + Lk] += size of node i


          dk += nvi; // negate W[nv + i] to denote i in Lk

          W[nv + i] = -nvi; // place i in Lk

          cindex[pk2++] = i;

          if (W[next + i] !== -1) {
            last[W[next + i]] = last[i];
          } // check we need to remove i from degree list


          if (last[i] !== -1) {
            W[next + last[i]] = W[next + i];
          } else {
            W[head + W[degree + i]] = W[next + i];
          }
        }

        if (e !== k) {
          // absorb e into k
          cptr[e] = (0, _csFlip.csFlip)(k); // e is now a dead element

          W[w + e] = 0;
        }
      } // cindex[cnz...nzmax] is free


      if (elenk !== 0) {
        cnz = pk2;
      } // external degree of k - |Lk\i|


      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

      cptr[k] = pk1;
      W[len + k] = pk2 - pk1; // k is now an element

      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
      // scan, no entry in the w array is greater than or equal to mark.
      // clear w if necessary

      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check if W[elen + i] empty, skip it

        if ((eln = W[elen + i]) <= 0) {
          continue;
        } // W[nv + i] was negated


        nvi = -W[nv + i];
        const wnvi = mark - nvi; // scan Ei

        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
          e = cindex[p];

          if (W[w + e] >= mark) {
            // decrement |Le\Lk|
            W[w + e] -= nvi;
          } else if (W[w + e] !== 0) {
            // ensure e is a live element, 1st time e seen in scan 1
            W[w + e] = W[degree + e] + wnvi;
          }
        }
      } // degree update
      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
      // function h(i) for all nodes in Lk.
      // scan2: degree update


      for (pk = pk1; pk < pk2; pk++) {
        // consider node i in Lk
        i = cindex[pk];
        p1 = cptr[i];
        p2 = p1 + W[elen + i] - 1;
        pn = p1; // scan Ei

        for (h = 0, d = 0, p = p1; p <= p2; p++) {
          e = cindex[p]; // check e is an unabsorbed element

          if (W[w + e] !== 0) {
            // dext = |Le\Lk|
            const dext = W[w + e] - mark;

            if (dext > 0) {
              // sum up the set differences
              d += dext; // keep e in Ei

              cindex[pn++] = e; // compute the hash of node i

              h += e;
            } else {
              // aggressive absorb. e->k
              cptr[e] = (0, _csFlip.csFlip)(k); // e is a dead element

              W[w + e] = 0;
            }
          }
        } // W[elen + i] = |Ei|


        W[elen + i] = pn - p1 + 1;
        const p3 = pn;
        const p4 = p1 + W[len + i]; // prune edges in Ai

        for (p = p2 + 1; p < p4; p++) {
          j = cindex[p]; // check node j dead or in Lk

          const nvj = W[nv + j];

          if (nvj <= 0) {
            continue;
          } // degree(i) += |j|


          d += nvj; // place j in node list of i

          cindex[pn++] = j; // compute hash for node i

          h += j;
        } // check for mass elimination


        if (d === 0) {
          // absorb i into k
          cptr[i] = (0, _csFlip.csFlip)(k);
          nvi = -W[nv + i]; // |Lk| -= |i|

          dk -= nvi; // |k| += W[nv + i]

          nvk += nvi;
          nel += nvi;
          W[nv + i] = 0; // node i is dead

          W[elen + i] = -1;
        } else {
          // update degree(i)
          W[degree + i] = Math.min(W[degree + i], d); // move first node to end

          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

          cindex[p1] = k; // new len of adj. list of node i

          W[len + i] = pn - p1 + 1; // finalize hash of i

          h = (h < 0 ? -h : h) % n; // place i in hash bucket

          W[next + i] = W[hhead + h];
          W[hhead + h] = i; // save hash of i in last[i]

          last[i] = h;
        }
      } // finalize |Lk|


      W[degree + k] = dk;
      lemax = Math.max(lemax, dk); // clear w

      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
      // If two nodes have identical adjacency lists, their hash functions wil be identical.

      for (pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check i is dead, skip it

        if (W[nv + i] >= 0) {
          continue;
        } // scan hash bucket of node i


        h = last[i];
        i = W[hhead + h]; // hash bucket will be empty

        W[hhead + h] = -1;

        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
          ln = W[len + i];
          eln = W[elen + i];

          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
            W[w + cindex[p]] = mark;
          }

          let jlast = i; // compare i with all j

          for (j = W[next + i]; j !== -1;) {
            let ok = W[len + j] === ln && W[elen + j] === eln;

            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
              // compare i and j
              if (W[w + cindex[p]] !== mark) {
                ok = 0;
              }
            } // check i and j are identical


            if (ok) {
              // absorb j into i
              cptr[j] = (0, _csFlip.csFlip)(i);
              W[nv + i] += W[nv + j];
              W[nv + j] = 0; // node j is dead

              W[elen + j] = -1; // delete j from hash bucket

              j = W[next + j];
              W[next + jlast] = j;
            } else {
              // j and i are different
              jlast = j;
              j = W[next + j];
            }
          }
        }
      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


      for (p = pk1, pk = pk1; pk < pk2; pk++) {
        i = cindex[pk]; // check  i is dead, skip it

        if ((nvi = -W[nv + i]) <= 0) {
          continue;
        } // restore W[nv + i]


        W[nv + i] = nvi; // compute external degree(i)

        d = W[degree + i] + dk - nvi;
        d = Math.min(d, n - nel - nvi);

        if (W[head + d] !== -1) {
          last[W[head + d]] = i;
        } // put i back in degree list


        W[next + i] = W[head + d];
        last[i] = -1;
        W[head + d] = i; // find new minimum degree

        mindeg = Math.min(mindeg, d);
        W[degree + i] = d; // place i in Lk

        cindex[p++] = i;
      } // # nodes absorbed into k


      W[nv + k] = nvk; // length of adj list of element k

      if ((W[len + k] = p - pk1) === 0) {
        // k is a root of the tree
        cptr[k] = -1; // k is now a dead element

        W[w + k] = 0;
      }

      if (elenk !== 0) {
        // free unused space in Lk
        cnz = p;
      }
    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
    // is computed. The tree is restored by unflipping all of ptr.
    // fix assembly tree


    for (i = 0; i < n; i++) {
      cptr[i] = (0, _csFlip.csFlip)(cptr[i]);
    }

    for (j = 0; j <= n; j++) {
      W[head + j] = -1;
    } // place unordered nodes in lists


    for (j = n; j >= 0; j--) {
      // skip if j is an element
      if (W[nv + j] > 0) {
        continue;
      } // place j in list of its parent


      W[next + j] = W[head + cptr[j]];
      W[head + cptr[j]] = j;
    } // place elements in lists


    for (e = n; e >= 0; e--) {
      // skip unless e is an element
      if (W[nv + e] <= 0) {
        continue;
      }

      if (cptr[e] !== -1) {
        // place e in list of its parent
        W[next + e] = W[head + cptr[e]];
        W[head + cptr[e]] = e;
      }
    } // postorder the assembly tree


    for (k = 0, i = 0; i <= n; i++) {
      if (cptr[i] === -1) {
        k = (0, _csTdfs.csTdfs)(i, k, W, head, next, P, w);
      }
    } // remove last item in array


    P.splice(P.length - 1, 1); // return P

    return P;
  };
  /**
   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
   *
   * Order: 0
   *   A natural ordering P=null matrix is returned.
   *
   * Order: 1
   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
   *   P = M + M'
   *
   * Order: 2
   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
   *   P = M' * M
   *
   * Order: 3
   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
   *   P = M' * M
   */

  function _createTargetMatrix(order, a, m, n, dense) {
    // compute A'
    const at = transpose(a); // check order = 1, matrix must be square

    if (order === 1 && n === m) {
      // C = A + A'
      return add(a, at);
    } // check order = 2, drop dense columns from M'


    if (order === 2) {
      // transpose arrays
      const tindex = at._index;
      const tptr = at._ptr; // new column index

      let p2 = 0; // loop A' columns (rows)

      for (let j = 0; j < m; j++) {
        // column j of AT starts here
        let p = tptr[j]; // new column j starts here

        tptr[j] = p2; // skip dense col j

        if (tptr[j + 1] - p > dense) {
          continue;
        } // map rows in column j of A


        for (const p1 = tptr[j + 1]; p < p1; p++) {
          tindex[p2++] = tindex[p];
        }
      } // finalize AT


      tptr[m] = p2; // recreate A from new transpose matrix

      a = transpose(at); // use A' * A

      return multiply(at, a);
    } // use A' * A, square or rectangular matrix


    return multiply(at, a);
  }
  /**
   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
   *
   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
   */


  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
    // Initialize quotient graph
    for (let k = 0; k < n; k++) {
      W[len + k] = cptr[k + 1] - cptr[k];
    }

    W[len + n] = 0; // initialize workspace

    for (let i = 0; i <= n; i++) {
      // degree list i is empty
      W[head + i] = -1;
      last[i] = -1;
      W[next + i] = -1; // hash list i is empty

      W[hhead + i] = -1; // node i is just one node

      W[nv + i] = 1; // node i is alive

      W[w + i] = 1; // Ek of node i is empty

      W[elen + i] = 0; // degree of node i

      W[degree + i] = W[len + i];
    } // clear w


    const mark = _wclear(0, 0, W, w, n); // n is a dead element


    W[elen + n] = -2; // n is a root of assembly tree

    cptr[n] = -1; // n is a dead element

    W[w + n] = 0; // return mark

    return mark;
  }
  /**
   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
   * output permutation p.
   */


  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
    // result
    let nel = 0; // loop columns

    for (let i = 0; i < n; i++) {
      // degree @ i
      const d = W[degree + i]; // check node i is empty

      if (d === 0) {
        // element i is dead
        W[elen + i] = -2;
        nel++; // i is a root of assembly tree

        cptr[i] = -1;
        W[w + i] = 0;
      } else if (d > dense) {
        // absorb i into element n
        W[nv + i] = 0; // node i is dead

        W[elen + i] = -1;
        nel++;
        cptr[i] = (0, _csFlip.csFlip)(n);
        W[nv + n]++;
      } else {
        const h = W[head + d];

        if (h !== -1) {
          last[h] = i;
        } // put node i in degree list d


        W[next + i] = W[head + d];
        W[head + d] = i;
      }
    }

    return nel;
  }

  function _wclear(mark, lemax, W, w, n) {
    if (mark < 2 || mark + lemax < 0) {
      for (let k = 0; k < n; k++) {
        if (W[w + k] !== 0) {
          W[w + k] = 1;
        }
      }

      mark = 2;
    } // at this point, W [0..n-1] < mark holds


    return mark;
  }

  function _diag(i, j) {
    return i !== j;
  }
});
exports.createCsAmd = createCsAmd;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./csFkeep":"../node_modules/mathjs/src/function/algebra/sparse/csFkeep.js","./csFlip":"../node_modules/mathjs/src/function/algebra/sparse/csFlip.js","./csTdfs":"../node_modules/mathjs/src/function/algebra/sparse/csTdfs.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csLeaf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csLeaf = csLeaf;

/**
 * This function determines if j is a leaf of the ith row subtree.
 * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
 *
 * @param {Number}  i               The ith row subtree
 * @param {Number}  j               The node to test
 * @param {Array}   w               The workspace array
 * @param {Number}  first           The index offset within the workspace for the first array
 * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
 * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
 * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
 *
 * @return {Object}
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
  let s, sparent, jprev; // our result

  let jleaf = 0;
  let q; // check j is a leaf

  if (i <= j || w[first + j] <= w[maxfirst + i]) {
    return -1;
  } // update max first[j] seen so far


  w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

  jprev = w[prevleaf + i];
  w[prevleaf + i] = j; // check j is first or subsequent leaf

  if (jprev === -1) {
    // 1st leaf, q = root of ith subtree
    jleaf = 1;
    q = i;
  } else {
    // update jleaf
    jleaf = 2; // q = least common ancester (jprev,j)

    for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]);

    for (s = jprev; s !== q; s = sparent) {
      // path compression
      sparent = w[ancestor + s];
      w[ancestor + s] = q;
    }
  }

  return {
    jleaf: jleaf,
    q: q
  };
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csCounts.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsCounts = void 0;

var _factory = require("../../../utils/factory");

var _csLeaf = require("./csLeaf");

const name = 'csCounts';
const dependencies = ['transpose'];
const createCsCounts =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  transpose
}) => {
  /**
   * Computes the column counts using the upper triangular part of A.
   * It transposes A internally, none of the input parameters are modified.
   *
   * @param {Matrix} a           The sparse matrix A
   *
   * @param {Matrix} ata         Count the columns of A'A instead
   *
   * @return                     An array of size n of the column counts or null on error
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function (a, parent, post, ata) {
    // check inputs
    if (!a || !parent || !post) {
      return null;
    } // a matrix arrays


    const asize = a._size; // rows and columns

    const m = asize[0];
    const n = asize[1]; // variables

    let i, j, k, J, p, p0, p1; // workspace size

    const s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

    const w = []; // (s)

    const ancestor = 0; // first n entries

    const maxfirst = n; // next n entries

    const prevleaf = 2 * n; // next n entries

    const first = 3 * n; // next n entries

    const head = 4 * n; // next n + 1 entries (used when ata is true)

    const next = 5 * n + 1; // last entries in workspace
    // clear workspace w[0..s-1]

    for (k = 0; k < s; k++) {
      w[k] = -1;
    } // allocate result


    const colcount = []; // (n)
    // AT = A'

    const at = transpose(a); // at arrays

    const tindex = at._index;
    const tptr = at._ptr; // find w[first + j]

    for (k = 0; k < n; k++) {
      j = post[k]; // colcount[j]=1 if j is a leaf

      colcount[j] = w[first + j] === -1 ? 1 : 0;

      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
        w[first + j] = k;
      }
    } // initialize ata if needed


    if (ata) {
      // invert post
      for (k = 0; k < n; k++) {
        w[post[k]] = k;
      } // loop rows (columns in AT)


      for (i = 0; i < m; i++) {
        // values in column i of AT
        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
          k = Math.min(k, w[tindex[p]]);
        } // place row i in linked list k


        w[next + i] = w[head + k];
        w[head + k] = i;
      }
    } // each node in its own set


    for (i = 0; i < n; i++) {
      w[ancestor + i] = i;
    }

    for (k = 0; k < n; k++) {
      // j is the kth node in postordered etree
      j = post[k]; // check j is not a root

      if (parent[j] !== -1) {
        colcount[parent[j]]--;
      } // J=j for LL'=A case


      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
        for (p = tptr[J]; p < tptr[J + 1]; p++) {
          i = tindex[p];
          const r = (0, _csLeaf.csLeaf)(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

          if (r.jleaf >= 1) {
            colcount[j]++;
          } // check account for overlap in q


          if (r.jleaf === 2) {
            colcount[r.q]--;
          }
        }
      }

      if (parent[j] !== -1) {
        w[ancestor + j] = parent[j];
      }
    } // sum up colcount's of each child


    for (j = 0; j < n; j++) {
      if (parent[j] !== -1) {
        colcount[parent[j]] += colcount[j];
      }
    }

    return colcount;
  };
});
exports.createCsCounts = createCsCounts;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./csLeaf":"../node_modules/mathjs/src/function/algebra/sparse/csLeaf.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csSqr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsSqr = void 0;

var _csPermute = require("./csPermute");

var _csPost = require("./csPost");

var _csEtree = require("./csEtree");

var _csAmd = require("./csAmd");

var _csCounts = require("./csCounts");

var _factory = require("../../../utils/factory");

const name = 'csSqr';
const dependencies = ['add', 'multiply', 'transpose'];
const createCsSqr =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  add,
  multiply,
  transpose
}) => {
  const csAmd = (0, _csAmd.createCsAmd)({
    add,
    multiply,
    transpose
  });
  const csCounts = (0, _csCounts.createCsCounts)({
    transpose
  });
  /**
   * Symbolic ordering and analysis for QR and LU decompositions.
   *
   * @param {Number}  order           The ordering strategy (see csAmd for more details)
   * @param {Matrix}  a               The A matrix
   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
   *                                  symbolic ordering and analysis for LU decomposition (false)
   *
   * @return {Object}                 The Symbolic ordering and analysis for matrix A
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csSqr(order, a, qr) {
    // a arrays
    const aptr = a._ptr;
    const asize = a._size; // columns

    const n = asize[1]; // vars

    let k; // symbolic analysis result

    const s = {}; // fill-reducing ordering

    s.q = csAmd(order, a); // validate results

    if (order && !s.q) {
      return null;
    } // QR symbolic analysis


    if (qr) {
      // apply permutations if needed
      const c = order ? (0, _csPermute.csPermute)(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

      s.parent = (0, _csEtree.csEtree)(c, 1); // post order elimination tree

      const post = (0, _csPost.csPost)(s.parent, n); // col counts chol(C'*C)

      s.cp = csCounts(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

      if (c && s.parent && s.cp && _vcount(c, s)) {
        // calculate number of nonzero elements
        for (s.unz = 0, k = 0; k < n; k++) {
          s.unz += s.cp[k];
        }
      }
    } else {
      // for LU factorization only, guess nnz(L) and nnz(U)
      s.unz = 4 * aptr[n] + n;
      s.lnz = s.unz;
    } // return result S


    return s;
  };
  /**
   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
   */

  function _vcount(a, s) {
    // a arrays
    const aptr = a._ptr;
    const aindex = a._index;
    const asize = a._size; // rows & columns

    const m = asize[0];
    const n = asize[1]; // initialize s arrays

    s.pinv = []; // (m + n)

    s.leftmost = []; // (m)
    // vars

    const parent = s.parent;
    const pinv = s.pinv;
    const leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

    const w = []; // (m + 3 * n)

    const next = 0;
    const head = m;
    const tail = m + n;
    const nque = m + 2 * n; // vars

    let i, k, p, p0, p1; // initialize w

    for (k = 0; k < n; k++) {
      // queue k is empty
      w[head + k] = -1;
      w[tail + k] = -1;
      w[nque + k] = 0;
    } // initialize row arrays


    for (i = 0; i < m; i++) {
      leftmost[i] = -1;
    } // loop columns backwards


    for (k = n - 1; k >= 0; k--) {
      // values & index for column k
      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
        // leftmost[i] = min(find(A(i,:)))
        leftmost[aindex[p]] = k;
      }
    } // scan rows in reverse order


    for (i = m - 1; i >= 0; i--) {
      // row i is not yet ordered
      pinv[i] = -1;
      k = leftmost[i]; // check row i is empty

      if (k === -1) {
        continue;
      } // first row in queue k


      if (w[nque + k]++ === 0) {
        w[tail + k] = i;
      } // put i at head of queue k


      w[next + i] = w[head + k];
      w[head + k] = i;
    }

    s.lnz = 0;
    s.m2 = m; // find row permutation and nnz(V)

    for (k = 0; k < n; k++) {
      // remove row i from queue k
      i = w[head + k]; // count V(k,k) as nonzero

      s.lnz++; // add a fictitious row

      if (i < 0) {
        i = s.m2++;
      } // associate row i with V(:,k)


      pinv[i] = k; // skip if V(k+1:m,k) is empty

      if (--nque[k] <= 0) {
        continue;
      } // nque[k] is nnz (V(k+1:m,k))


      s.lnz += w[nque + k]; // move all rows to parent of k

      const pa = parent[k];

      if (pa !== -1) {
        if (w[nque + pa] === 0) {
          w[tail + pa] = w[tail + k];
        }

        w[next + w[tail + k]] = w[head + pa];
        w[head + pa] = w[next + i];
        w[nque + pa] += w[nque + k];
      }
    }

    for (i = 0; i < m; i++) {
      if (pinv[i] < 0) {
        pinv[i] = k++;
      }
    }

    return true;
  }
});
exports.createCsSqr = createCsSqr;
},{"./csPermute":"../node_modules/mathjs/src/function/algebra/sparse/csPermute.js","./csPost":"../node_modules/mathjs/src/function/algebra/sparse/csPost.js","./csEtree":"../node_modules/mathjs/src/function/algebra/sparse/csEtree.js","./csAmd":"../node_modules/mathjs/src/function/algebra/sparse/csAmd.js","./csCounts":"../node_modules/mathjs/src/function/algebra/sparse/csCounts.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csMarked.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csMarked = csMarked;

/**
 * Checks if the node at w[j] is marked
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMarked(w, j) {
  // check node is marked
  return w[j] < 0;
}
},{}],"../node_modules/mathjs/src/function/algebra/sparse/csMark.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csMark = csMark;

var _csFlip = require("./csFlip");

/**
 * Marks the node at w[j]
 *
 * @param {Array}   w               The array
 * @param {Number}  j               The array index
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csMark(w, j) {
  // mark w[j]
  w[j] = (0, _csFlip.csFlip)(w[j]);
}
},{"./csFlip":"../node_modules/mathjs/src/function/algebra/sparse/csFlip.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csUnflip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csUnflip = csUnflip;

var _csFlip = require("./csFlip");

/**
 * Flips the value if it is negative of returns the same value otherwise.
 *
 * @param {Number}  i               The value to flip
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csUnflip(i) {
  // flip the value if it is negative
  return i < 0 ? (0, _csFlip.csFlip)(i) : i;
}
},{"./csFlip":"../node_modules/mathjs/src/function/algebra/sparse/csFlip.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csDfs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csDfs = csDfs;

var _csMarked = require("./csMarked");

var _csMark = require("./csMark");

var _csUnflip = require("./csUnflip");

/**
 * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
 * at nodes in B (see csReach()).
 *
 * @param {Number}  j               The starting node for the DFS algorithm
 * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
 * @param {Number}  top             Start index in stack xi[top..n-1]
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
 *
 * @return {Number}                 New value of top
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csDfs(j, g, top, xi, pinv) {
  // g arrays
  const index = g._index;
  const ptr = g._ptr;
  const size = g._size; // columns

  const n = size[1]; // vars

  let i, p, p2; // initialize head

  let head = 0; // initialize the recursion stack

  xi[0] = j; // loop

  while (head >= 0) {
    // get j from the top of the recursion stack
    j = xi[head]; // apply permutation vector

    const jnew = pinv ? pinv[j] : j; // check node j is marked

    if (!(0, _csMarked.csMarked)(ptr, j)) {
      // mark node j as visited
      (0, _csMark.csMark)(ptr, j); // update stack (last n entries in xi)

      xi[n + head] = jnew < 0 ? 0 : (0, _csUnflip.csUnflip)(ptr[jnew]);
    } // node j done if no unvisited neighbors


    let done = 1; // examine all neighbors of j, stack (last n entries in xi)

    for (p = xi[n + head], p2 = jnew < 0 ? 0 : (0, _csUnflip.csUnflip)(ptr[jnew + 1]); p < p2; p++) {
      // consider neighbor node i
      i = index[p]; // check we have visited node i, skip it

      if ((0, _csMarked.csMarked)(ptr, i)) {
        continue;
      } // pause depth-first search of node j, update stack (last n entries in xi)


      xi[n + head] = p; // start dfs at node i

      xi[++head] = i; // node j is not done

      done = 0; // break, to start dfs(i)

      break;
    } // check depth-first search at node j is done


    if (done) {
      // remove j from the recursion stack
      head--; // and place in the output stack

      xi[--top] = j;
    }
  }

  return top;
}
},{"./csMarked":"../node_modules/mathjs/src/function/algebra/sparse/csMarked.js","./csMark":"../node_modules/mathjs/src/function/algebra/sparse/csMark.js","./csUnflip":"../node_modules/mathjs/src/function/algebra/sparse/csUnflip.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csReach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csReach = csReach;

var _csMarked = require("./csMarked");

var _csMark = require("./csMark");

var _csDfs = require("./csDfs");

/**
 * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
 * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
 * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
 *
 * @param {Matrix}  g               The G matrix
 * @param {Matrix}  b               The B matrix
 * @param {Number}  k               The kth column in B
 * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
 *                                  The first n entries is the nonzero pattern, the last n entries is the stack
 * @param {Array}   pinv            The inverse row permutation vector
 *
 * @return {Number}                 The index for the nonzero pattern
 *
 * Reference: http://faculty.cse.tamu.edu/davis/publications.html
 */
function csReach(g, b, k, xi, pinv) {
  // g arrays
  const gptr = g._ptr;
  const gsize = g._size; // b arrays

  const bindex = b._index;
  const bptr = b._ptr; // columns

  const n = gsize[1]; // vars

  let p, p0, p1; // initialize top

  let top = n; // loop column indeces in B

  for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
    // node i
    const i = bindex[p]; // check node i is marked

    if (!(0, _csMarked.csMarked)(gptr, i)) {
      // start a dfs at unmarked node i
      top = (0, _csDfs.csDfs)(i, g, top, xi, pinv);
    }
  } // loop columns from top -> n - 1


  for (p = top; p < n; p++) {
    // restore G
    (0, _csMark.csMark)(gptr, xi[p]);
  }

  return top;
}
},{"./csMarked":"../node_modules/mathjs/src/function/algebra/sparse/csMarked.js","./csMark":"../node_modules/mathjs/src/function/algebra/sparse/csMark.js","./csDfs":"../node_modules/mathjs/src/function/algebra/sparse/csDfs.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csSpsolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsSpsolve = void 0;

var _csReach = require("./csReach");

var _factory = require("../../../utils/factory");

const name = 'csSpsolve';
const dependencies = ['divideScalar', 'multiply', 'subtract'];
const createCsSpsolve =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  divideScalar,
  multiply,
  subtract
}) => {
  /**
   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
   * is upper triangular with the diagonal entry as the last entry in each column.
   *
   * @param {Matrix}  g               The G matrix
   * @param {Matrix}  b               The B matrix
   * @param {Number}  k               The kth column in B
   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
   * @param {Array}   x               The soluton to the linear system G * x = b
   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
   * @param {boolean} lo              The lower (true) upper triangular (false) flag
   *
   * @return {Number}                 The index for the nonzero pattern
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */
  return function csSpsolve(g, b, k, xi, x, pinv, lo) {
    // g arrays
    const gvalues = g._values;
    const gindex = g._index;
    const gptr = g._ptr;
    const gsize = g._size; // columns

    const n = gsize[1]; // b arrays

    const bvalues = b._values;
    const bindex = b._index;
    const bptr = b._ptr; // vars

    let p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

    const top = (0, _csReach.csReach)(g, b, k, xi, pinv); // clear x

    for (p = top; p < n; p++) {
      x[xi[p]] = 0;
    } // scatter b


    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
      x[bindex[p]] = bvalues[p];
    } // loop columns


    for (let px = top; px < n; px++) {
      // x array index for px
      const j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

      const J = pinv ? pinv[j] : j; // check column J is empty

      if (J < 0) {
        continue;
      } // column value indeces in G, p0 <= p < p1


      p0 = gptr[J];
      p1 = gptr[J + 1]; // x(j) /= G(j,j)

      x[j] = divideScalar(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

      p = lo ? p0 + 1 : p0;
      q = lo ? p1 : p1 - 1; // loop

      for (; p < q; p++) {
        // row
        const i = gindex[p]; // x(i) -= G(i,j) * x(j)

        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
      }
    } // return top of stack


    return top;
  };
});
exports.createCsSpsolve = createCsSpsolve;
},{"./csReach":"../node_modules/mathjs/src/function/algebra/sparse/csReach.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csLu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCsLu = void 0;

var _factory = require("../../../utils/factory");

var _csSpsolve = require("./csSpsolve");

const name = 'csLu';
const dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
const createCsLu =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  abs,
  divideScalar,
  multiply,
  subtract,
  larger,
  largerEq,
  SparseMatrix
}) => {
  const csSpsolve = (0, _csSpsolve.createCsSpsolve)({
    divideScalar,
    multiply,
    subtract
  });
  /**
   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
   * L * U = A(p, q), where p is the inverse of pinv.
   *
   * @param {Matrix}  m               The A Matrix to factorize
   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
   *                                  column ordering q
   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Number}                 The numeric LU factorization of A or null
   *
   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
   */

  return function csLu(m, s, tol) {
    // validate input
    if (!m) {
      return null;
    } // m arrays


    const size = m._size; // columns

    const n = size[1]; // symbolic analysis result

    let q;
    let lnz = 100;
    let unz = 100; // update symbolic analysis parameters

    if (s) {
      q = s.q;
      lnz = s.lnz || lnz;
      unz = s.unz || unz;
    } // L arrays


    const lvalues = []; // (lnz)

    const lindex = []; // (lnz)

    const lptr = []; // (n + 1)
    // L

    const L = new SparseMatrix({
      values: lvalues,
      index: lindex,
      ptr: lptr,
      size: [n, n]
    }); // U arrays

    const uvalues = []; // (unz)

    const uindex = []; // (unz)

    const uptr = []; // (n + 1)
    // U

    const U = new SparseMatrix({
      values: uvalues,
      index: uindex,
      ptr: uptr,
      size: [n, n]
    }); // inverse of permutation vector

    const pinv = []; // (n)
    // vars

    let i, p; // allocate arrays

    const x = []; // (n)

    const xi = []; // (2 * n)
    // initialize variables

    for (i = 0; i < n; i++) {
      // clear workspace
      x[i] = 0; // no rows pivotal yet

      pinv[i] = -1; // no cols of L yet

      lptr[i + 1] = 0;
    } // reset number of nonzero elements in L and U


    lnz = 0;
    unz = 0; // compute L(:,k) and U(:,k)

    for (let k = 0; k < n; k++) {
      // update ptr
      lptr[k] = lnz;
      uptr[k] = unz; // apply column permutations if needed

      const col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

      const top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot

      let ipiv = -1;
      let a = -1; // loop xi[] from top -> n

      for (p = top; p < n; p++) {
        // x[i] is nonzero
        i = xi[p]; // check row i is not yet pivotal

        if (pinv[i] < 0) {
          // absolute value of x[i]
          const xabs = abs(x[i]); // check absoulte value is greater than pivot value

          if (larger(xabs, a)) {
            // largest pivot candidate so far
            a = xabs;
            ipiv = i;
          }
        } else {
          // x(i) is the entry U(pinv[i],k)
          uindex[unz] = pinv[i];
          uvalues[unz++] = x[i];
        }
      } // validate we found a valid pivot


      if (ipiv === -1 || a <= 0) {
        return null;
      } // update actual pivot column, give preference to diagonal value


      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {
        ipiv = col;
      } // the chosen pivot


      const pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

      uindex[unz] = k;
      uvalues[unz++] = pivot; // ipiv is the kth pivot row

      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

      lindex[lnz] = ipiv;
      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

      for (p = top; p < n; p++) {
        // row
        i = xi[p]; // check x(i) is an entry in L(:,k)

        if (pinv[i] < 0) {
          // save unpermuted row in L
          lindex[lnz] = i; // scale pivot column

          lvalues[lnz++] = divideScalar(x[i], pivot);
        } // x[0..n-1] = 0 for next k


        x[i] = 0;
      }
    } // update ptr


    lptr[n] = lnz;
    uptr[n] = unz; // fix row indices of L for final pinv

    for (p = 0; p < lnz; p++) {
      lindex[p] = pinv[lindex[p]];
    } // trim arrays


    lvalues.splice(lnz, lvalues.length - lnz);
    lindex.splice(lnz, lindex.length - lnz);
    uvalues.splice(unz, uvalues.length - unz);
    uindex.splice(unz, uindex.length - unz); // return LU factor

    return {
      L: L,
      U: U,
      pinv: pinv
    };
  };
});
exports.createCsLu = createCsLu;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./csSpsolve":"../node_modules/mathjs/src/function/algebra/sparse/csSpsolve.js"}],"../node_modules/mathjs/src/function/algebra/decomposition/slu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSlu = void 0;

var _number = require("../../../utils/number");

var _factory = require("../../../utils/factory");

var _csSqr = require("../sparse/csSqr");

var _csLu = require("../sparse/csLu");

const name = 'slu';
const dependencies = ['typed', 'abs', 'add', 'multiply', 'transpose', 'divideScalar', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];
const createSlu =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  abs,
  add,
  multiply,
  transpose,
  divideScalar,
  subtract,
  larger,
  largerEq,
  SparseMatrix
}) => {
  const csSqr = (0, _csSqr.createCsSqr)({
    add,
    multiply,
    transpose
  });
  const csLu = (0, _csLu.createCsLu)({
    abs,
    divideScalar,
    multiply,
    subtract,
    larger,
    largerEq,
    SparseMatrix
  });
  /**
   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
   *
   * `P * A * Q = L * U`
   *
   * Syntax:
   *
   *    math.slu(A, order, threshold)
   *
   * Examples:
   *
   *    const A = math.sparse([[4,3], [6, 3]])
   *    math.slu(A, 1, 0.001)
   *    // returns:
   *    // {
   *    //   L: [[1, 0], [1.5, 1]]
   *    //   U: [[4, 3], [0, -1.5]]
   *    //   p: [0, 1]
   *    //   q: [0, 1]
   *    // }
   *
   * See also:
   *
   *    lup, lsolve, usolve, lusolve
   *
   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
   * @param {Number}       order          The Symbolic Ordering and Analysis order:
   *                                       0 - Natural ordering, no permutation vector q is returned
   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
   *                                           A dense row is a row with more than 10*sqr(columns) entries.
   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
   *
   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
   */

  return typed(name, {
    'SparseMatrix, number, number': function (a, order, threshold) {
      // verify order
      if (!(0, _number.isInteger)(order) || order < 0 || order > 3) {
        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
      } // verify threshold


      if (threshold < 0 || threshold > 1) {
        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
      } // perform symbolic ordering and analysis


      const s = csSqr(order, a, false); // perform lu decomposition

      const f = csLu(a, s, threshold); // return decomposition

      return {
        L: f.L,
        U: f.U,
        p: f.pinv,
        q: s.q,
        toString: function () {
          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
        }
      };
    }
  });
});
exports.createSlu = createSlu;
},{"../../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../sparse/csSqr":"../node_modules/mathjs/src/function/algebra/sparse/csSqr.js","../sparse/csLu":"../node_modules/mathjs/src/function/algebra/sparse/csLu.js"}],"../node_modules/mathjs/src/function/algebra/sparse/csIpvec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csIpvec = csIpvec;

/**
 * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
 *
 * @param {Array} p           The permutation vector of length n. null value denotes identity
 * @param {Array} b           The input vector
 *
 * @return {Array}            The output vector x = P'b
 */
function csIpvec(p, b) {
  // vars
  let k;
  const n = b.length;
  const x = []; // check permutation vector was provided, p = null denotes identity

  if (p) {
    // loop vector
    for (k = 0; k < n; k++) {
      // apply permutation
      x[p[k]] = b[k];
    }
  } else {
    // loop vector
    for (k = 0; k < n; k++) {
      // x[i] = b[i]
      x[k] = b[k];
    }
  }

  return x;
}
},{}],"../node_modules/mathjs/src/function/algebra/solver/lusolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLusolve = void 0;

var _is = require("../../../utils/is");

var _factory = require("../../../utils/factory");

var _solveValidation = require("./utils/solveValidation");

var _csIpvec = require("../sparse/csIpvec");

const name = 'lusolve';
const dependencies = ['typed', 'matrix', 'lup', 'slu', 'usolve', 'lsolve', 'DenseMatrix'];
const createLusolve =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  lup,
  slu,
  usolve,
  lsolve,
  DenseMatrix
}) => {
  const solveValidation = (0, _solveValidation.createSolveValidation)({
    DenseMatrix
  });
  /**
   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
   *
   * Syntax:
   *
   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
   *
   * Examples:
   *
   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
   *
   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
   *
   *    const f = math.lup(m)
   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
   *
   *    const a = [[-2, 3], [2, 1]]
   *    const b = [11, 9]
   *    const x = math.lusolve(a, b)  // [[2], [5]]
   *
   * See also:
   *
   *    lup, slu, lsolve, usolve
   *
   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
   * @param {Matrix | Array} b               Column Vector
   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
   *
   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
   */

  return typed(name, {
    'Array, Array | Matrix': function (a, b) {
      // convert a to matrix
      a = matrix(a); // matrix lup decomposition

      const d = lup(a); // solve

      const x = _lusolve(d.L, d.U, d.p, null, b); // convert result to array


      return x.valueOf();
    },
    'DenseMatrix, Array | Matrix': function (a, b) {
      // matrix lup decomposition
      const d = lup(a); // solve

      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix': function (a, b) {
      // matrix lup decomposition
      const d = lup(a); // solve

      return _lusolve(d.L, d.U, d.p, null, b);
    },
    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {
      // matrix lu decomposition
      const d = slu(a, order, threshold); // solve

      return _lusolve(d.L, d.U, d.p, d.q, b);
    },
    'Object, Array | Matrix': function (d, b) {
      // solve
      return _lusolve(d.L, d.U, d.p, d.q, b);
    }
  });

  function _toMatrix(a) {
    // check it is a matrix
    if ((0, _is.isMatrix)(a)) {
      return a;
    } // check array


    if ((0, _is.isArray)(a)) {
      return matrix(a);
    } // throw


    throw new TypeError('Invalid Matrix LU decomposition');
  }

  function _lusolve(l, u, p, q, b) {
    // verify L, U, P
    l = _toMatrix(l);
    u = _toMatrix(u); // validate matrix and vector

    b = solveValidation(l, b, false); // apply row permutations if needed (b is a DenseMatrix)

    if (p) {
      b._data = (0, _csIpvec.csIpvec)(p, b._data);
    } // use forward substitution to resolve L * y = b


    const y = lsolve(l, b); // use backward substitution to resolve U * x = y

    const x = usolve(u, y); // apply column permutations if needed (x is a DenseMatrix)

    if (q) {
      x._data = (0, _csIpvec.csIpvec)(q, x._data);
    } // return solution


    return x;
  }
});
exports.createLusolve = createLusolve;
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/solveValidation":"../node_modules/mathjs/src/function/algebra/solver/utils/solveValidation.js","../sparse/csIpvec":"../node_modules/mathjs/src/function/algebra/sparse/csIpvec.js"}],"../node_modules/mathjs/src/expression/Help.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHelpClass = void 0;

var _is = require("../utils/is");

var _object = require("../utils/object");

var _string = require("../utils/string");

var _factory = require("../utils/factory");

const name = 'Help';
const dependencies = ['parse'];
const createHelpClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  parse
}) => {
  /**
   * Documentation object
   * @param {Object} doc  Object containing properties:
   *                      {string} name
   *                      {string} category
   *                      {string} description
   *                      {string[]} syntax
   *                      {string[]} examples
   *                      {string[]} seealso
   * @constructor
   */
  function Help(doc) {
    if (!(this instanceof Help)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if (!doc) throw new Error('Argument "doc" missing');
    this.doc = doc;
  }
  /**
   * Attach type information
   */


  Help.prototype.type = 'Help';
  Help.prototype.isHelp = true;
  /**
   * Generate a string representation of the Help object
   * @return {string} Returns a string
   * @private
   */

  Help.prototype.toString = function () {
    const doc = this.doc || {};
    let desc = '\n';

    if (doc.name) {
      desc += 'Name: ' + doc.name + '\n\n';
    }

    if (doc.category) {
      desc += 'Category: ' + doc.category + '\n\n';
    }

    if (doc.description) {
      desc += 'Description:\n    ' + doc.description + '\n\n';
    }

    if (doc.syntax) {
      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
    }

    if (doc.examples) {
      desc += 'Examples:\n';
      let scope = {};

      for (let i = 0; i < doc.examples.length; i++) {
        const expr = doc.examples[i];
        desc += '    ' + expr + '\n';
        let res;

        try {
          // note: res can be undefined when `expr` is an empty string
          res = parse(expr).compile().evaluate(scope);
        } catch (e) {
          res = e;
        }

        if (res !== undefined && !(0, _is.isHelp)(res)) {
          desc += '        ' + (0, _string.format)(res, {
            precision: 14
          }) + '\n';
        }
      }

      desc += '\n';
    }

    if (doc.seealso && doc.seealso.length) {
      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
    }

    return desc;
  };
  /**
   * Export the help object to JSON
   */


  Help.prototype.toJSON = function () {
    const obj = (0, _object.clone)(this.doc);
    obj.mathjs = 'Help';
    return obj;
  };
  /**
   * Instantiate a Help object from a JSON object
   * @param {Object} json
   * @returns {Help} Returns a new Help object
   */


  Help.fromJSON = function (json) {
    const doc = {};

    for (const prop in json) {
      if (prop !== 'mathjs') {
        // ignore mathjs field
        doc[prop] = json[prop];
      }
    }

    return new Help(doc);
  };
  /**
   * Returns a string representation of the Help object
   */


  Help.prototype.valueOf = Help.prototype.toString;
  return Help;
}, {
  isClass: true
});
exports.createHelpClass = createHelpClass;
},{"../utils/is":"../node_modules/mathjs/src/utils/is.js","../utils/object":"../node_modules/mathjs/src/utils/object.js","../utils/string":"../node_modules/mathjs/src/utils/string.js","../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/type/chain/Chain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChainClass = void 0;

var _is = require("../../utils/is");

var _string = require("../../utils/string");

var _object = require("../../utils/object");

var _factory = require("../../utils/factory");

const name = 'Chain';
const dependencies = ['?on', 'math'];
const createChainClass =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  on,
  math
}) => {
  /**
   * @constructor Chain
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing chain.done(), which will return
   * the final value.
   *
   * The Chain has a number of special functions:
   * - done()             Finalize the chained operation and return the
   *                      chain's value.
   * - valueOf()          The same as done()
   * - toString()         Returns a string representation of the chain's value.
   *
   * @param {*} [value]
   */
  function Chain(value) {
    if (!(this instanceof Chain)) {
      throw new SyntaxError('Constructor must be called with the new operator');
    }

    if ((0, _is.isChain)(value)) {
      this.value = value.value;
    } else {
      this.value = value;
    }
  }
  /**
   * Attach type information
   */


  Chain.prototype.type = 'Chain';
  Chain.prototype.isChain = true;
  /**
   * Close the chain. Returns the final value.
   * Does the same as method valueOf()
   * @returns {*} value
   */

  Chain.prototype.done = function () {
    return this.value;
  };
  /**
   * Close the chain. Returns the final value.
   * Does the same as method done()
   * @returns {*} value
   */


  Chain.prototype.valueOf = function () {
    return this.value;
  };
  /**
   * Get a string representation of the value in the chain
   * @returns {string}
   */


  Chain.prototype.toString = function () {
    return (0, _string.format)(this.value);
  };
  /**
   * Get a JSON representation of the chain
   * @returns {Object}
   */


  Chain.prototype.toJSON = function () {
    return {
      mathjs: 'Chain',
      value: this.value
    };
  };
  /**
   * Instantiate a Chain from its JSON representation
   * @param {Object} json  An object structured like
   *                       `{"mathjs": "Chain", value: ...}`,
   *                       where mathjs is optional
   * @returns {Chain}
   */


  Chain.fromJSON = function (json) {
    return new Chain(json.value);
  };
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {Function} fn      The function to be proxied
   *                           If fn is no function, it is silently ignored.
   * @private
   */


  function createProxy(name, fn) {
    if (typeof fn === 'function') {
      Chain.prototype[name] = chainify(fn);
    }
  }
  /**
   * Create a proxy method for the chain
   * @param {string} name
   * @param {function} resolver   The function resolving with the
   *                              function to be proxied
   * @private
   */


  function createLazyProxy(name, resolver) {
    (0, _object.lazy)(Chain.prototype, name, function outerResolver() {
      const fn = resolver();

      if (typeof fn === 'function') {
        return chainify(fn);
      }

      return undefined; // if not a function, ignore
    });
  }
  /**
   * Make a function chainable
   * @param {function} fn
   * @return {Function} chain function
   * @private
   */


  function chainify(fn) {
    return function () {
      const args = [this.value]; // `this` will be the context of a Chain instance

      for (let i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i];
      }

      return new Chain(fn.apply(fn, args));
    };
  }
  /**
   * Create a proxy for a single method, or an object with multiple methods.
   * Example usage:
   *
   *   Chain.createProxy('add', function add (x, y) {...})
   *   Chain.createProxy({
   *     add:      function add (x, y) {...},
   *     subtract: function subtract (x, y) {...}
   *   }
   *
   * @param {string | Object} arg0   A name (string), or an object with
   *                                 functions
   * @param {*} [arg1]               A function, when arg0 is a name
   */


  Chain.createProxy = function (arg0, arg1) {
    if (typeof arg0 === 'string') {
      // createProxy(name, value)
      createProxy(arg0, arg1);
    } else {
      // createProxy(values)
      for (const name in arg0) {
        if (arg0.hasOwnProperty(name) && excludedNames[name] === undefined) {
          createLazyProxy(name, () => arg0[name]);
        }
      }
    }
  };

  const excludedNames = {
    expression: true,
    docs: true,
    type: true,
    classes: true,
    json: true,
    error: true,
    isChain: true // conflicts with the property isChain of a Chain instance
    // create proxy for everything that is in math.js

  };
  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

  if (on) {
    on('import', function (name, resolver, path) {
      if (!path) {
        // an imported function (not a data type or something special)
        createLazyProxy(name, resolver);
      }
    });
  }

  return Chain;
}, {
  isClass: true
});
exports.createChainClass = createChainClass;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/bignumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bignumberDocs = void 0;
const bignumberDocs = {
  'name': 'bignumber',
  'category': 'Construction',
  'syntax': ['bignumber(x)'],
  'description': 'Create a big number from a number or string.',
  'examples': ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
  'seealso': ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};
exports.bignumberDocs = bignumberDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/typeOf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeOfDocs = void 0;
const typeOfDocs = {
  'name': 'typeOf',
  'category': 'Utils',
  'syntax': ['typeOf(x)'],
  'description': 'Get the type of a variable.',
  'examples': ['typeOf(3.5)', 'typeOf(2 - 4i)', 'typeOf(45 deg)', 'typeOf("hello world")'],
  'seealso': ['getMatrixDataType']
};
exports.typeOfDocs = typeOfDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isZero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isZeroDocs = void 0;
const isZeroDocs = {
  'name': 'isZero',
  'category': 'Utils',
  'syntax': ['isZero(x)'],
  'description': 'Test whether a value is zero.',
  'examples': ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
};
exports.isZeroDocs = isZeroDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isPrime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPrimeDocs = void 0;
const isPrimeDocs = {
  'name': 'isPrime',
  'category': 'Utils',
  'syntax': ['isPrime(x)'],
  'description': 'Test whether a value is prime: has no divisors other than itself and one.',
  'examples': ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
exports.isPrimeDocs = isPrimeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isPositive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPositiveDocs = void 0;
const isPositiveDocs = {
  'name': 'isPositive',
  'category': 'Utils',
  'syntax': ['isPositive(x)'],
  'description': 'Test whether a value is positive: larger than zero.',
  'examples': ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
};
exports.isPositiveDocs = isPositiveDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isNumeric.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumericDocs = void 0;
const isNumericDocs = {
  'name': 'isNumeric',
  'category': 'Utils',
  'syntax': ['isNumeric(x)'],
  'description': 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
  'examples': ['isNumeric(2)', 'isNumeric("2")', 'hasNumericValue("2")', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'hasNumericValue']
};
exports.isNumericDocs = isNumericDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/hasNumericValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasNumericValueDocs = void 0;
const hasNumericValueDocs = {
  'name': 'hasNumericValue',
  'category': 'Utils',
  'syntax': ['hasNumericValue(x)'],
  'description': 'Test whether a value is an numeric value. ' + 'In case of a string, true is returned if the string contains a numeric value.',
  'examples': ['hasNumericValue(2)', 'hasNumericValue("2")', 'isNumeric("2")', 'hasNumericValue(0)', 'hasNumericValue(bignumber(500))', 'hasNumericValue(fraction(0.125))', 'hasNumericValue(2 + 3i)', 'hasNumericValue([2.3, "foo", false])'],
  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN', 'isNumeric']
};
exports.hasNumericValueDocs = hasNumericValueDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isNegative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNegativeDocs = void 0;
const isNegativeDocs = {
  'name': 'isNegative',
  'category': 'Utils',
  'syntax': ['isNegative(x)'],
  'description': 'Test whether a value is negative: smaller than zero.',
  'examples': ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
};
exports.isNegativeDocs = isNegativeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isInteger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIntegerDocs = void 0;
const isIntegerDocs = {
  'name': 'isInteger',
  'category': 'Utils',
  'syntax': ['isInteger(x)'],
  'description': 'Test whether a value is an integer number.',
  'examples': ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};
exports.isIntegerDocs = isIntegerDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isNaN.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNaNDocs = void 0;
const isNaNDocs = {
  'name': 'isNaN',
  'category': 'Utils',
  'syntax': ['isNaN(x)'],
  'description': 'Test whether a value is NaN (not a number)',
  'examples': ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
};
exports.isNaNDocs = isNaNDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/format.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDocs = void 0;
const formatDocs = {
  'name': 'format',
  'category': 'Utils',
  'syntax': ['format(value)', 'format(value, precision)'],
  'description': 'Format a value of any type as string.',
  'examples': ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
  'seealso': ['print']
};
exports.formatDocs = formatDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/clone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneDocs = void 0;
const cloneDocs = {
  'name': 'clone',
  'category': 'Utils',
  'syntax': ['clone(x)'],
  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
  'examples': ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
  'seealso': []
};
exports.cloneDocs = cloneDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/units/to.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toDocs = void 0;
const toDocs = {
  'name': 'to',
  'category': 'Units',
  'syntax': ['x to unit', 'to(x, unit)'],
  'description': 'Change the unit of a value.',
  'examples': ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
  'seealso': []
};
exports.toDocs = toDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/tanh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanhDocs = void 0;
const tanhDocs = {
  'name': 'tanh',
  'category': 'Trigonometry',
  'syntax': ['tanh(x)'],
  'description': 'Compute the hyperbolic tangent of x in radians.',
  'examples': ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
  'seealso': ['sinh', 'cosh']
};
exports.tanhDocs = tanhDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/tan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanDocs = void 0;
const tanDocs = {
  'name': 'tan',
  'category': 'Trigonometry',
  'syntax': ['tan(x)'],
  'description': 'Compute the tangent of x in radians.',
  'examples': ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
  'seealso': ['atan', 'sin', 'cos']
};
exports.tanDocs = tanDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sinh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinhDocs = void 0;
const sinhDocs = {
  'name': 'sinh',
  'category': 'Trigonometry',
  'syntax': ['sinh(x)'],
  'description': 'Compute the hyperbolic sine of x in radians.',
  'examples': ['sinh(0.5)'],
  'seealso': ['cosh', 'tanh']
};
exports.sinhDocs = sinhDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sech.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sechDocs = void 0;
const sechDocs = {
  'name': 'sech',
  'category': 'Trigonometry',
  'syntax': ['sech(x)'],
  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
  'examples': ['sech(2)', '1 / cosh(2)'],
  'seealso': ['coth', 'csch', 'cosh']
};
exports.sechDocs = sechDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secDocs = void 0;
const secDocs = {
  'name': 'sec',
  'category': 'Trigonometry',
  'syntax': ['sec(x)'],
  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
  'examples': ['sec(2)', '1 / cos(2)'],
  'seealso': ['cot', 'csc', 'cos']
};
exports.secDocs = secDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/csch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cschDocs = void 0;
const cschDocs = {
  'name': 'csch',
  'category': 'Trigonometry',
  'syntax': ['csch(x)'],
  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
  'examples': ['csch(2)', '1 / sinh(2)'],
  'seealso': ['sech', 'coth', 'sinh']
};
exports.cschDocs = cschDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/csc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cscDocs = void 0;
const cscDocs = {
  'name': 'csc',
  'category': 'Trigonometry',
  'syntax': ['csc(x)'],
  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
  'examples': ['csc(2)', '1 / sin(2)'],
  'seealso': ['sec', 'cot', 'sin']
};
exports.cscDocs = cscDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/coth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cothDocs = void 0;
const cothDocs = {
  'name': 'coth',
  'category': 'Trigonometry',
  'syntax': ['coth(x)'],
  'description': 'Compute the hyperbolic cotangent of x in radians.',
  'examples': ['coth(2)', '1 / tanh(2)'],
  'seealso': ['sech', 'csch', 'tanh']
};
exports.cothDocs = cothDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/cot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cotDocs = void 0;
const cotDocs = {
  'name': 'cot',
  'category': 'Trigonometry',
  'syntax': ['cot(x)'],
  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
  'examples': ['cot(2)', '1 / tan(2)'],
  'seealso': ['sec', 'csc', 'tan']
};
exports.cotDocs = cotDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/cosh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coshDocs = void 0;
const coshDocs = {
  'name': 'cosh',
  'category': 'Trigonometry',
  'syntax': ['cosh(x)'],
  'description': 'Compute the hyperbolic cosine of x in radians.',
  'examples': ['cosh(0.5)'],
  'seealso': ['sinh', 'tanh', 'coth']
};
exports.coshDocs = coshDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/cos.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosDocs = void 0;
const cosDocs = {
  'name': 'cos',
  'category': 'Trigonometry',
  'syntax': ['cos(x)'],
  'description': 'Compute the cosine of x in radians.',
  'examples': ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  'seealso': ['acos', 'sin', 'tan']
};
exports.cosDocs = cosDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/atan2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan2Docs = void 0;
const atan2Docs = {
  'name': 'atan2',
  'category': 'Trigonometry',
  'syntax': ['atan2(y, x)'],
  'description': 'Computes the principal value of the arc tangent of y/x in radians.',
  'examples': ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
  'seealso': ['sin', 'cos', 'tan']
};
exports.atan2Docs = atan2Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/atanh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanhDocs = void 0;
const atanhDocs = {
  'name': 'atanh',
  'category': 'Trigonometry',
  'syntax': ['atanh(x)'],
  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
  'examples': ['atanh(0.5)'],
  'seealso': ['acosh', 'asinh']
};
exports.atanhDocs = atanhDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/atan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanDocs = void 0;
const atanDocs = {
  'name': 'atan',
  'category': 'Trigonometry',
  'syntax': ['atan(x)'],
  'description': 'Compute the inverse tangent of a value in radians.',
  'examples': ['atan(0.5)', 'atan(tan(0.5))'],
  'seealso': ['tan', 'acos', 'asin']
};
exports.atanDocs = atanDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asinh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinhDocs = void 0;
const asinhDocs = {
  'name': 'asinh',
  'category': 'Trigonometry',
  'syntax': ['asinh(x)'],
  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
  'examples': ['asinh(0.5)'],
  'seealso': ['acosh', 'atanh']
};
exports.asinhDocs = asinhDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinDocs = void 0;
const asinDocs = {
  'name': 'asin',
  'category': 'Trigonometry',
  'syntax': ['asin(x)'],
  'description': 'Compute the inverse sine of a value in radians.',
  'examples': ['asin(0.5)', 'asin(sin(0.5))'],
  'seealso': ['sin', 'acos', 'atan']
};
exports.asinDocs = asinDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asech.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asechDocs = void 0;
const asechDocs = {
  'name': 'asech',
  'category': 'Trigonometry',
  'syntax': ['asech(x)'],
  'description': 'Calculate the inverse secant of a value.',
  'examples': ['asech(0.5)'],
  'seealso': ['acsch', 'acoth']
};
exports.asechDocs = asechDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asecDocs = void 0;
const asecDocs = {
  'name': 'asec',
  'category': 'Trigonometry',
  'syntax': ['asec(x)'],
  'description': 'Calculate the inverse secant of a value.',
  'examples': ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
  'seealso': ['acos', 'acot', 'acsc']
};
exports.asecDocs = asecDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acsch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acschDocs = void 0;
const acschDocs = {
  'name': 'acsch',
  'category': 'Trigonometry',
  'syntax': ['acsch(x)'],
  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
  'examples': ['acsch(0.5)'],
  'seealso': ['asech', 'acoth']
};
exports.acschDocs = acschDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acsc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acscDocs = void 0;
const acscDocs = {
  'name': 'acsc',
  'category': 'Trigonometry',
  'syntax': ['acsc(x)'],
  'description': 'Calculate the inverse cotangent of a value.',
  'examples': ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
  'seealso': ['csc', 'asin', 'asec']
};
exports.acscDocs = acscDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acoth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acothDocs = void 0;
const acothDocs = {
  'name': 'acoth',
  'category': 'Trigonometry',
  'syntax': ['acoth(x)'],
  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
  'examples': ['acoth(2)', 'acoth(0.5)'],
  'seealso': ['acsch', 'asech']
};
exports.acothDocs = acothDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acotDocs = void 0;
const acotDocs = {
  'name': 'acot',
  'category': 'Trigonometry',
  'syntax': ['acot(x)'],
  'description': 'Calculate the inverse cotangent of a value.',
  'examples': ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
  'seealso': ['cot', 'atan']
};
exports.acotDocs = acotDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acosh.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acoshDocs = void 0;
const acoshDocs = {
  'name': 'acosh',
  'category': 'Trigonometry',
  'syntax': ['acosh(x)'],
  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
  'examples': ['acosh(1.5)'],
  'seealso': ['cosh', 'asinh', 'atanh']
};
exports.acoshDocs = acoshDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acos.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosDocs = void 0;
const acosDocs = {
  'name': 'acos',
  'category': 'Trigonometry',
  'syntax': ['acos(x)'],
  'description': 'Compute the inverse cosine of a value in radians.',
  'examples': ['acos(0.5)', 'acos(cos(2.3))'],
  'seealso': ['cos', 'atan', 'asin']
};
exports.acosDocs = acosDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sumDocs = void 0;
const sumDocs = {
  'name': 'sum',
  'category': 'Statistics',
  'syntax': ['sum(a, b, c, ...)', 'sum(A)'],
  'description': 'Compute the sum of all values.',
  'examples': ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
  'seealso': ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
exports.sumDocs = sumDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/std.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stdDocs = void 0;
const stdDocs = {
  'name': 'std',
  'category': 'Statistics',
  'syntax': ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  'examples': ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'variance']
};
exports.stdDocs = stdDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/quantileSeq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quantileSeqDocs = void 0;
const quantileSeqDocs = {
  'name': 'quantileSeq',
  'category': 'Statistics',
  'syntax': ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
  'examples': ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
  'seealso': ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'variance']
};
exports.quantileSeqDocs = quantileSeqDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/prod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prodDocs = void 0;
const prodDocs = {
  'name': 'prod',
  'category': 'Statistics',
  'syntax': ['prod(a, b, c, ...)', 'prod(A)'],
  'description': 'Compute the product of all values.',
  'examples': ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
  'seealso': ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'variance']
};
exports.prodDocs = prodDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/mode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modeDocs = void 0;
const modeDocs = {
  'name': 'mode',
  'category': 'Statistics',
  'syntax': ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
  'examples': ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
  'seealso': ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'variance']
};
exports.modeDocs = modeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/min.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minDocs = void 0;
const minDocs = {
  'name': 'min',
  'category': 'Statistics',
  'syntax': ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
  'description': 'Compute the minimum value of a list of values.',
  'examples': ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
  'seealso': ['max', 'mean', 'median', 'prod', 'std', 'sum', 'variance']
};
exports.minDocs = minDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.medianDocs = void 0;
const medianDocs = {
  'name': 'median',
  'category': 'Statistics',
  'syntax': ['median(a, b, c, ...)', 'median(A)'],
  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
  'examples': ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
  'seealso': ['max', 'mean', 'min', 'prod', 'std', 'sum', 'variance', 'quantileSeq']
};
exports.medianDocs = medianDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanDocs = void 0;
const meanDocs = {
  'name': 'mean',
  'category': 'Statistics',
  'syntax': ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
  'description': 'Compute the arithmetic mean of a list of values.',
  'examples': ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
  'seealso': ['max', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
exports.meanDocs = meanDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/max.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxDocs = void 0;
const maxDocs = {
  'name': 'max',
  'category': 'Statistics',
  'syntax': ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
  'description': 'Compute the maximum value of a list of values.',
  'examples': ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
  'seealso': ['mean', 'median', 'min', 'prod', 'std', 'sum', 'variance']
};
exports.maxDocs = maxDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/mad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.madDocs = void 0;
const madDocs = {
  'name': 'mad',
  'category': 'Statistics',
  'syntax': ['mad(a, b, c, ...)', 'mad(A)'],
  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
  'examples': ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
  'seealso': ['mean', 'median', 'std', 'abs']
};
exports.madDocs = madDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/special/erf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erfDocs = void 0;
const erfDocs = {
  'name': 'erf',
  'category': 'Special',
  'syntax': ['erf(x)'],
  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
  'examples': ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
  'seealso': []
};
exports.erfDocs = erfDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setUnion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setUnionDocs = void 0;
const setUnionDocs = {
  'name': 'setUnion',
  'category': 'Set',
  'syntax': ['setUnion(set1, set2)'],
  'description': 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  'seealso': ['setIntersect', 'setDifference']
};
exports.setUnionDocs = setUnionDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setSymDifference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSymDifferenceDocs = void 0;
const setSymDifferenceDocs = {
  'name': 'setSymDifference',
  'category': 'Set',
  'syntax': ['setSymDifference(set1, set2)'],
  'description': 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  'seealso': ['setUnion', 'setIntersect', 'setDifference']
};
exports.setSymDifferenceDocs = setSymDifferenceDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setSize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSizeDocs = void 0;
const setSizeDocs = {
  'name': 'setSize',
  'category': 'Set',
  'syntax': ['setSize(set)', 'setSize(set, unique)'],
  'description': 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
  'seealso': ['setUnion', 'setIntersect', 'setDifference']
};
exports.setSizeDocs = setSizeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setPowerset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPowersetDocs = void 0;
const setPowersetDocs = {
  'name': 'setPowerset',
  'category': 'Set',
  'syntax': ['setPowerset(set)'],
  'description': 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': ['setPowerset([1, 2, 3])'],
  'seealso': ['setCartesian']
};
exports.setPowersetDocs = setPowersetDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setMultiplicity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setMultiplicityDocs = void 0;
const setMultiplicityDocs = {
  'name': 'setMultiplicity',
  'category': 'Set',
  'syntax': ['setMultiplicity(element, set)'],
  'description': 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
  'seealso': ['setDistinct', 'setSize']
};
exports.setMultiplicityDocs = setMultiplicityDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setIsSubset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setIsSubsetDocs = void 0;
const setIsSubsetDocs = {
  'name': 'setIsSubset',
  'category': 'Set',
  'syntax': ['setIsSubset(set1, set2)'],
  'description': 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
  'seealso': ['setUnion', 'setIntersect', 'setDifference']
};
exports.setIsSubsetDocs = setIsSubsetDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setIntersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setIntersectDocs = void 0;
const setIntersectDocs = {
  'name': 'setIntersect',
  'category': 'Set',
  'syntax': ['setIntersect(set1, set2)'],
  'description': 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  'seealso': ['setUnion', 'setDifference']
};
exports.setIntersectDocs = setIntersectDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setDistinct.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDistinctDocs = void 0;
const setDistinctDocs = {
  'name': 'setDistinct',
  'category': 'Set',
  'syntax': ['setDistinct(set)'],
  'description': 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
  'examples': ['setDistinct([1, 1, 1, 2, 2, 3])'],
  'seealso': ['setMultiplicity']
};
exports.setDistinctDocs = setDistinctDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setDifference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDifferenceDocs = void 0;
const setDifferenceDocs = {
  'name': 'setDifference',
  'category': 'Set',
  'syntax': ['setDifference(set1, set2)'],
  'description': 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
  'seealso': ['setUnion', 'setIntersect', 'setSymDifference']
};
exports.setDifferenceDocs = setDifferenceDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setCartesian.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setCartesianDocs = void 0;
const setCartesianDocs = {
  'name': 'setCartesian',
  'category': 'Set',
  'syntax': ['setCartesian(set1, set2)'],
  'description': 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
  'examples': ['setCartesian([1, 2], [3, 4])'],
  'seealso': ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
};
exports.setCartesianDocs = setCartesianDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/unequal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unequalDocs = void 0;
const unequalDocs = {
  'name': 'unequal',
  'category': 'Relational',
  'syntax': ['x != y', 'unequal(x, y)'],
  'description': 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
  'examples': ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
  'seealso': ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
};
exports.unequalDocs = unequalDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/smallerEq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.smallerEqDocs = void 0;
const smallerEqDocs = {
  'name': 'smallerEq',
  'category': 'Relational',
  'syntax': ['x <= y', 'smallerEq(x, y)'],
  'description': 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
  'examples': ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
  'seealso': ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
};
exports.smallerEqDocs = smallerEqDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/smaller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.smallerDocs = void 0;
const smallerDocs = {
  'name': 'smaller',
  'category': 'Relational',
  'syntax': ['x < y', 'smaller(x, y)'],
  'description': 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
  'examples': ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
  'seealso': ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
};
exports.smallerDocs = smallerDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/largerEq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.largerEqDocs = void 0;
const largerEqDocs = {
  'name': 'largerEq',
  'category': 'Relational',
  'syntax': ['x >= y', 'largerEq(x, y)'],
  'description': 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
  'examples': ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
  'seealso': ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
};
exports.largerEqDocs = largerEqDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/larger.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.largerDocs = void 0;
const largerDocs = {
  'name': 'larger',
  'category': 'Relational',
  'syntax': ['x > y', 'larger(x, y)'],
  'description': 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
  'examples': ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
};
exports.largerDocs = largerDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/equalText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalTextDocs = void 0;
const equalTextDocs = {
  'name': 'equalText',
  'category': 'Relational',
  'syntax': ['equalText(x, y)'],
  'description': 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
  'examples': ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
  'seealso': ['compare', 'compareNatural', 'compareText', 'equal']
};
exports.equalTextDocs = equalTextDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalDocs = void 0;
const equalDocs = {
  'name': 'equal',
  'category': 'Relational',
  'syntax': ['x == y', 'equal(x, y)'],
  'description': 'Check equality of two values. Returns true if the values are equal, and false if not.',
  'examples': ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
  'seealso': ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
};
exports.equalDocs = equalDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/deepEqual.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepEqualDocs = void 0;
const deepEqualDocs = {
  'name': 'deepEqual',
  'category': 'Relational',
  'syntax': ['deepEqual(x, y)'],
  'description': 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
  'examples': ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
  'seealso': ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
};
exports.deepEqualDocs = deepEqualDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/compareText.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareTextDocs = void 0;
const compareTextDocs = {
  'name': 'compareText',
  'category': 'Relational',
  'syntax': ['compareText(x, y)'],
  'description': 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  'examples': ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
  'seealso': ['compare', 'compareNatural']
};
exports.compareTextDocs = compareTextDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/compareNatural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareNaturalDocs = void 0;
const compareNaturalDocs = {
  'name': 'compareNatural',
  'category': 'Relational',
  'syntax': ['compareNatural(x, y)'],
  'description': 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  'examples': ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
};
exports.compareNaturalDocs = compareNaturalDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/compare.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareDocs = void 0;
const compareDocs = {
  'name': 'compare',
  'category': 'Relational',
  'syntax': ['compare(x, y)'],
  'description': 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
  'examples': ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
};
exports.compareDocs = compareDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/randomInt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomIntDocs = void 0;
const randomIntDocs = {
  'name': 'randomInt',
  'category': 'Probability',
  'syntax': ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
  'description': 'Return a random integer number',
  'examples': ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
  'seealso': ['pickRandom', 'random']
};
exports.randomIntDocs = randomIntDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/random.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomDocs = void 0;
const randomDocs = {
  'name': 'random',
  'category': 'Probability',
  'syntax': ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
  'description': 'Return a random number.',
  'examples': ['random()', 'random(10, 20)', 'random([2, 3])'],
  'seealso': ['pickRandom', 'randomInt']
};
exports.randomDocs = randomDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/pickRandom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickRandomDocs = void 0;
const pickRandomDocs = {
  'name': 'pickRandom',
  'category': 'Probability',
  'syntax': ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
  'description': 'Pick a random entry from a given array.',
  'examples': ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
  'seealso': ['random', 'randomInt']
};
exports.pickRandomDocs = pickRandomDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/permutations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.permutationsDocs = void 0;
const permutationsDocs = {
  'name': 'permutations',
  'category': 'Probability',
  'syntax': ['permutations(n)', 'permutations(n, k)'],
  'description': 'Compute the number of permutations of n items taken k at a time',
  'examples': ['permutations(5)', 'permutations(5, 3)'],
  'seealso': ['combinations', 'factorial']
};
exports.permutationsDocs = permutationsDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/multinomial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multinomialDocs = void 0;
const multinomialDocs = {
  'name': 'multinomial',
  'category': 'Probability',
  'syntax': ['multinomial(A)'],
  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
  'examples': ['multinomial([1, 2, 1])'],
  'seealso': ['combinations', 'factorial']
};
exports.multinomialDocs = multinomialDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/kldivergence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kldivergenceDocs = void 0;
const kldivergenceDocs = {
  'name': 'kldivergence',
  'category': 'Probability',
  'syntax': ['kldivergence(x, y)'],
  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
  'examples': ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
  'seealso': []
};
exports.kldivergenceDocs = kldivergenceDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/gamma.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gammaDocs = void 0;
const gammaDocs = {
  'name': 'gamma',
  'category': 'Probability',
  'syntax': ['gamma(n)'],
  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
  'examples': ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
  'seealso': ['factorial']
};
exports.gammaDocs = gammaDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/factorial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.factorialDocs = void 0;
const factorialDocs = {
  'name': 'factorial',
  'category': 'Probability',
  'syntax': ['n!', 'factorial(n)'],
  'description': 'Compute the factorial of a value',
  'examples': ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
  'seealso': ['combinations', 'permutations', 'gamma']
};
exports.factorialDocs = factorialDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/combinations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combinationsDocs = void 0;
const combinationsDocs = {
  'name': 'combinations',
  'category': 'Probability',
  'syntax': ['combinations(n, k)'],
  'description': 'Compute the number of combinations of n items taken k at a time',
  'examples': ['combinations(7, 5)'],
  'seealso': ['permutations', 'factorial']
};
exports.combinationsDocs = combinationsDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/zeros.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zerosDocs = void 0;
const zerosDocs = {
  'name': 'zeros',
  'category': 'Matrix',
  'syntax': ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
  'description': 'Create a matrix containing zeros.',
  'examples': ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
};
exports.zerosDocs = zerosDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/transpose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeDocs = void 0;
const transposeDocs = {
  'name': 'transpose',
  'category': 'Matrix',
  'syntax': ['x\'', 'transpose(x)'],
  'description': 'Transpose a matrix',
  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};
exports.transposeDocs = transposeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/trace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traceDocs = void 0;
const traceDocs = {
  'name': 'trace',
  'category': 'Matrix',
  'syntax': ['trace(A)'],
  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
  'examples': ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
};
exports.traceDocs = traceDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/subset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subsetDocs = void 0;
const subsetDocs = {
  'name': 'subset',
  'category': 'Matrix',
  'syntax': ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
  'description': 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
  'examples': ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
};
exports.subsetDocs = subsetDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/squeeze.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squeezeDocs = void 0;
const squeezeDocs = {
  'name': 'squeeze',
  'category': 'Matrix',
  'syntax': ['squeeze(x)'],
  'description': 'Remove inner and outer singleton dimensions from a matrix.',
  'examples': ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
};
exports.squeezeDocs = squeezeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortDocs = void 0;
const sortDocs = {
  'name': 'sort',
  'category': 'Matrix',
  'syntax': ['sort(x)', 'sort(x, compare)'],
  'description': 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
  'examples': ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
  'seealso': ['map', 'filter', 'forEach']
};
exports.sortDocs = sortDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeDocs = void 0;
const sizeDocs = {
  'name': 'size',
  'category': 'Matrix',
  'syntax': ['size(x)'],
  'description': 'Calculate the size of a matrix.',
  'examples': ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.sizeDocs = sizeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/reshape.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshapeDocs = void 0;
const reshapeDocs = {
  'name': 'reshape',
  'category': 'Matrix',
  'syntax': ['reshape(x, sizes)'],
  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',
  'examples': ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
  'seealso': ['size', 'squeeze', 'resize']
};
exports.reshapeDocs = reshapeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/resize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeDocs = void 0;
const resizeDocs = {
  'name': 'resize',
  'category': 'Matrix',
  'syntax': ['resize(x, size)', 'resize(x, size, defaultValue)'],
  'description': 'Resize a matrix.',
  'examples': ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
  'seealso': ['size', 'subset', 'squeeze', 'reshape']
};
exports.resizeDocs = resizeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeDocs = void 0;
const rangeDocs = {
  'name': 'range',
  'category': 'Type',
  'syntax': ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
  'description': 'Create a range. Lower bound of the range is included, upper bound is excluded.',
  'examples': ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.rangeDocs = rangeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/partitionSelect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partitionSelectDocs = void 0;
const partitionSelectDocs = {
  'name': 'partitionSelect',
  'category': 'Matrix',
  'syntax': ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
  'examples': ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
  'seealso': ['sort']
};
exports.partitionSelectDocs = partitionSelectDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/ones.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onesDocs = void 0;
const onesDocs = {
  'name': 'ones',
  'category': 'Matrix',
  'syntax': ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
  'description': 'Create a matrix containing ones.',
  'examples': ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.onesDocs = onesDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapDocs = void 0;
const mapDocs = {
  'name': 'map',
  'category': 'Matrix',
  'syntax': ['map(x, callback)'],
  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
  'examples': ['map([1, 2, 3], square)'],
  'seealso': ['filter', 'forEach']
};
exports.mapDocs = mapDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/kron.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kronDocs = void 0;
const kronDocs = {
  'name': 'kron',
  'category': 'Matrix',
  'syntax': ['kron(x, y)'],
  'description': 'Calculates the kronecker product of 2 matrices or vectors.',
  'examples': ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
  'seealso': ['multiply', 'dot', 'cross']
};
exports.kronDocs = kronDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/inv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invDocs = void 0;
const invDocs = {
  'name': 'inv',
  'category': 'Matrix',
  'syntax': ['inv(x)'],
  'description': 'Calculate the inverse of a matrix',
  'examples': ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.invDocs = invDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/forEach.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEachDocs = void 0;
const forEachDocs = {
  'name': 'forEach',
  'category': 'Matrix',
  'syntax': ['forEach(x, callback)'],
  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
  'examples': ['forEach([1, 2, 3], function(val) { console.log(val) })'],
  'seealso': ['map', 'sort', 'filter']
};
exports.forEachDocs = forEachDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/flatten.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenDocs = void 0;
const flattenDocs = {
  'name': 'flatten',
  'category': 'Matrix',
  'syntax': ['flatten(x)'],
  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
  'seealso': ['concat', 'resize', 'size', 'squeeze']
};
exports.flattenDocs = flattenDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterDocs = void 0;
const filterDocs = {
  'name': 'filter',
  'category': 'Matrix',
  'syntax': ['filter(x, test)'],
  'description': 'Filter items in a matrix.',
  'examples': ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
  'seealso': ['sort', 'map', 'forEach']
};
exports.filterDocs = filterDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identityDocs = void 0;
const identityDocs = {
  'name': 'identity',
  'category': 'Matrix',
  'syntax': ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
  'examples': ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
  'seealso': ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.identityDocs = identityDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/getMatrixDataType.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMatrixDataTypeDocs = void 0;
const getMatrixDataTypeDocs = {
  'name': 'getMatrixDataType',
  'category': 'Matrix',
  'syntax': ['getMatrixDataType(x)'],
  'description': 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
  'examples': ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
  'seealso': ['matrix', 'sparse', 'typeOf']
};
exports.getMatrixDataTypeDocs = getMatrixDataTypeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/dot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotDocs = void 0;
const dotDocs = {
  'name': 'dot',
  'category': 'Matrix',
  'syntax': ['dot(A, B)', 'A * B'],
  'description': 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
  'examples': ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
  'seealso': ['multiply', 'cross']
};
exports.dotDocs = dotDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/diag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diagDocs = void 0;
const diagDocs = {
  'name': 'diag',
  'category': 'Matrix',
  'syntax': ['diag(x)', 'diag(x, k)'],
  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
  'examples': ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
  'seealso': ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.diagDocs = diagDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/det.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detDocs = void 0;
const detDocs = {
  'name': 'det',
  'category': 'Matrix',
  'syntax': ['det(x)'],
  'description': 'Calculate the determinant of a matrix',
  'examples': ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
  'seealso': ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.detDocs = detDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/ctranspose.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ctransposeDocs = void 0;
const ctransposeDocs = {
  'name': 'ctranspose',
  'category': 'Matrix',
  'syntax': ['x\'', 'ctranspose(x)'],
  'description': 'Complex Conjugate and Transpose a matrix',
  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
};
exports.ctransposeDocs = ctransposeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/cross.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.crossDocs = void 0;
const crossDocs = {
  'name': 'cross',
  'category': 'Matrix',
  'syntax': ['cross(A, B)'],
  'description': 'Calculate the cross product for two vectors in three dimensional space.',
  'examples': ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
  'seealso': ['multiply', 'dot']
};
exports.crossDocs = crossDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatDocs = void 0;
const concatDocs = {
  'name': 'concat',
  'category': 'Matrix',
  'syntax': ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
  'examples': ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
  'seealso': ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
};
exports.concatDocs = concatDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/xor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xorDocs = void 0;
const xorDocs = {
  'name': 'xor',
  'category': 'Logical',
  'syntax': ['x xor y', 'xor(x, y)'],
  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
  'examples': ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
  'seealso': ['not', 'and', 'or']
};
exports.xorDocs = xorDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/or.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orDocs = void 0;
const orDocs = {
  'name': 'or',
  'category': 'Logical',
  'syntax': ['x or y', 'or(x, y)'],
  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
  'examples': ['true or false', 'false or false', '0 or 4'],
  'seealso': ['not', 'and', 'xor']
};
exports.orDocs = orDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/not.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notDocs = void 0;
const notDocs = {
  'name': 'not',
  'category': 'Logical',
  'syntax': ['not x', 'not(x)'],
  'description': 'Logical not. Flips the boolean value of given argument.',
  'examples': ['not true', 'not false', 'not 2', 'not 0'],
  'seealso': ['and', 'or', 'xor']
};
exports.notDocs = notDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/and.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.andDocs = void 0;
const andDocs = {
  'name': 'and',
  'category': 'Logical',
  'syntax': ['x and y', 'and(x, y)'],
  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
  'examples': ['true and false', 'true and true', '2 and 4'],
  'seealso': ['not', 'or', 'xor']
};
exports.andDocs = andDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/geometry/intersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intersectDocs = void 0;
const intersectDocs = {
  'name': 'intersect',
  'category': 'Geometry',
  'syntax': ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
  'description': 'Computes the intersection point of lines and/or planes.',
  'examples': ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
  'seealso': []
};
exports.intersectDocs = intersectDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/geometry/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distanceDocs = void 0;
const distanceDocs = {
  'name': 'distance',
  'category': 'Geometry',
  'syntax': ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2])'],
  'description': 'Calculates the Euclidean distance between two points.',
  'examples': ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
  'seealso': []
};
exports.distanceDocs = distanceDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/expression/help.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpDocs = void 0;
const helpDocs = {
  'name': 'help',
  'category': 'Expression',
  'syntax': ['help(object)', 'help(string)'],
  'description': 'Display documentation on a function or data type.',
  'examples': ['help(sqrt)', 'help("complex")'],
  'seealso': []
};
exports.helpDocs = helpDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/expression/evaluate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evaluateDocs = void 0;
const evaluateDocs = {
  'name': 'evaluate',
  'category': 'Expression',
  'syntax': ['evaluate(expression)', 'evaluate([expr1, expr2, expr3, ...])'],
  'description': 'Evaluate an expression or an array with expressions.',
  'examples': ['evaluate("2 + 3")', 'evaluate("sqrt(" + 4 + ")")'],
  'seealso': []
};
exports.evaluateDocs = evaluateDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/im.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imDocs = void 0;
const imDocs = {
  'name': 'im',
  'category': 'Complex',
  'syntax': ['im(x)'],
  'description': 'Get the imaginary part of a complex number.',
  'examples': ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
  'seealso': ['re', 'conj', 'abs', 'arg']
};
exports.imDocs = imDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/re.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reDocs = void 0;
const reDocs = {
  'name': 're',
  'category': 'Complex',
  'syntax': ['re(x)'],
  'description': 'Get the real part of a complex number.',
  'examples': ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
  'seealso': ['im', 'conj', 'abs', 'arg']
};
exports.reDocs = reDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/conj.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conjDocs = void 0;
const conjDocs = {
  'name': 'conj',
  'category': 'Complex',
  'syntax': ['conj(x)'],
  'description': 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
  'examples': ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
  'seealso': ['re', 'im', 'abs', 'arg']
};
exports.conjDocs = conjDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/arg.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argDocs = void 0;
const argDocs = {
  'name': 'arg',
  'category': 'Complex',
  'syntax': ['arg(x)'],
  'description': 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
  'examples': ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
  'seealso': ['re', 'im', 'conj', 'abs']
};
exports.argDocs = argDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/core/typed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typedDocs = void 0;
const typedDocs = {
  'name': 'typed',
  'category': 'Core',
  'syntax': ['typed(signatures)', 'typed(name, signatures)'],
  'description': 'Create a typed function.',
  'examples': ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
  'seealso': []
};
exports.typedDocs = typedDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/core/import.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importDocs = void 0;
const importDocs = {
  'name': 'import',
  'category': 'Core',
  'syntax': ['import(functions)', 'import(functions, options)'],
  'description': 'Import functions or constants from an object.',
  'examples': ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
  'seealso': []
};
exports.importDocs = importDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/core/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configDocs = void 0;
const configDocs = {
  'name': 'config',
  'category': 'Core',
  'syntax': ['config()', 'config(options)'],
  'description': 'Get configuration or change configuration.',
  'examples': ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
  'seealso': []
};
exports.configDocs = configDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/stirlingS2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stirlingS2Docs = void 0;
const stirlingS2Docs = {
  'name': 'stirlingS2',
  'category': 'Combinatorics',
  'syntax': ['stirlingS2(n, k)'],
  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
  'examples': ['stirlingS2(5, 3)'],
  'seealso': ['bellNumbers']
};
exports.stirlingS2Docs = stirlingS2Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/composition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compositionDocs = void 0;
const compositionDocs = {
  'name': 'composition',
  'category': 'Combinatorics',
  'syntax': ['composition(n, k)'],
  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
  'examples': ['composition(5, 3)'],
  'seealso': ['combinations']
};
exports.compositionDocs = compositionDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/catalan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catalanDocs = void 0;
const catalanDocs = {
  'name': 'catalan',
  'category': 'Combinatorics',
  'syntax': ['catalan(n)'],
  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
  'examples': ['catalan(3)', 'catalan(8)'],
  'seealso': ['bellNumbers']
};
exports.catalanDocs = catalanDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/bellNumbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bellNumbersDocs = void 0;
const bellNumbersDocs = {
  'name': 'bellNumbers',
  'category': 'Combinatorics',
  'syntax': ['bellNumbers(n)'],
  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
  'examples': ['bellNumbers(3)', 'bellNumbers(8)'],
  'seealso': ['stirlingS2']
};
exports.bellNumbersDocs = bellNumbersDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/rightLogShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rightLogShiftDocs = void 0;
const rightLogShiftDocs = {
  'name': 'rightLogShift',
  'category': 'Bitwise',
  'syntax': ['x >>> y', 'rightLogShift(x, y)'],
  'description': 'Bitwise right logical shift of a value x by y number of bits.',
  'examples': ['8 >>> 1', '4 << 1', '-12 >>> 2'],
  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
};
exports.rightLogShiftDocs = rightLogShiftDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/rightArithShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rightArithShiftDocs = void 0;
const rightArithShiftDocs = {
  'name': 'rightArithShift',
  'category': 'Bitwise',
  'syntax': ['x >> y', 'rightArithShift(x, y)'],
  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
  'examples': ['8 >> 1', '4 << 1', '-12 >> 2'],
  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
};
exports.rightArithShiftDocs = rightArithShiftDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/leftShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.leftShiftDocs = void 0;
const leftShiftDocs = {
  'name': 'leftShift',
  'category': 'Bitwise',
  'syntax': ['x << y', 'leftShift(x, y)'],
  'description': 'Bitwise left logical shift of a value x by y number of bits.',
  'examples': ['4 << 1', '8 >> 1'],
  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
};
exports.leftShiftDocs = leftShiftDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitXor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitXorDocs = void 0;
const bitXorDocs = {
  'name': 'bitXor',
  'category': 'Bitwise',
  'syntax': ['bitXor(x, y)'],
  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
  'examples': ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitXorDocs = bitXorDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitOr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitOrDocs = void 0;
const bitOrDocs = {
  'name': 'bitOr',
  'category': 'Bitwise',
  'syntax': ['x | y', 'bitOr(x, y)'],
  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
  'examples': ['5 | 3', 'bitOr([1, 2, 3], 4)'],
  'seealso': ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitOrDocs = bitOrDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitNot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitNotDocs = void 0;
const bitNotDocs = {
  'name': 'bitNot',
  'category': 'Bitwise',
  'syntax': ['~x', 'bitNot(x)'],
  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
  'examples': ['~1', '~2', 'bitNot([2, -3, 4])'],
  'seealso': ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitNotDocs = bitNotDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitAnd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitAndDocs = void 0;
const bitAndDocs = {
  'name': 'bitAnd',
  'category': 'Bitwise',
  'syntax': ['x & y', 'bitAnd(x, y)'],
  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
  'examples': ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
  'seealso': ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
};
exports.bitAndDocs = bitAndDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/xgcd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xgcdDocs = void 0;
const xgcdDocs = {
  'name': 'xgcd',
  'category': 'Arithmetic',
  'syntax': ['xgcd(a, b)'],
  'description': 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
  'examples': ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
  'seealso': ['gcd', 'lcm']
};
exports.xgcdDocs = xgcdDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/unaryPlus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unaryPlusDocs = void 0;
const unaryPlusDocs = {
  'name': 'unaryPlus',
  'category': 'Operators',
  'syntax': ['+x', 'unaryPlus(x)'],
  'description': 'Converts booleans and strings to numbers.',
  'examples': ['+true', '+"2"'],
  'seealso': ['add', 'subtract', 'unaryMinus']
};
exports.unaryPlusDocs = unaryPlusDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/unaryMinus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unaryMinusDocs = void 0;
const unaryMinusDocs = {
  'name': 'unaryMinus',
  'category': 'Operators',
  'syntax': ['-x', 'unaryMinus(x)'],
  'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',
  'examples': ['-4.5', '-(-5.6)', '-"22"'],
  'seealso': ['add', 'subtract', 'unaryPlus']
};
exports.unaryMinusDocs = unaryMinusDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/square.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squareDocs = void 0;
const squareDocs = {
  'name': 'square',
  'category': 'Arithmetic',
  'syntax': ['square(x)'],
  'description': 'Compute the square of a value. The square of x is x * x.',
  'examples': ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
  'seealso': ['multiply', 'pow', 'sqrt', 'cube']
};
exports.squareDocs = squareDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/sqrtm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtmDocs = void 0;
const sqrtmDocs = {
  'name': 'sqrtm',
  'category': 'Arithmetic',
  'syntax': ['sqrtm(x)'],
  'description': 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
  'examples': ['sqrtm([[1, 2], [3, 4]])'],
  'seealso': ['sqrt', 'abs', 'square', 'multiply']
};
exports.sqrtmDocs = sqrtmDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/sqrt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtDocs = void 0;
const sqrtDocs = {
  'name': 'sqrt',
  'category': 'Arithmetic',
  'syntax': ['sqrt(x)'],
  'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',
  'examples': ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
  'seealso': ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
};
exports.sqrtDocs = sqrtDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/sign.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signDocs = void 0;
const signDocs = {
  'name': 'sign',
  'category': 'Arithmetic',
  'syntax': ['sign(x)'],
  'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
  'examples': ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
  'seealso': ['abs']
};
exports.signDocs = signDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/round.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.roundDocs = void 0;
const roundDocs = {
  'name': 'round',
  'category': 'Arithmetic',
  'syntax': ['round(x)', 'round(x, n)'],
  'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
  'examples': ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
  'seealso': ['ceil', 'floor', 'fix']
};
exports.roundDocs = roundDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powDocs = void 0;
const powDocs = {
  'name': 'pow',
  'category': 'Operators',
  'syntax': ['x ^ y', 'pow(x, y)'],
  'description': 'Calculates the power of x to y, x^y.',
  'examples': ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
  'seealso': ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
};
exports.powDocs = powDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/nthRoots.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nthRootsDocs = void 0;
const nthRootsDocs = {
  'name': 'nthRoots',
  'category': 'Arithmetic',
  'syntax': ['nthRoots(A)', 'nthRoots(A, root)'],
  'description': '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
  'examples': ['nthRoots(1)', 'nthRoots(1, 3)'],
  'seealso': ['sqrt', 'pow', 'nthRoot']
};
exports.nthRootsDocs = nthRootsDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/nthRoot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nthRootDocs = void 0;
const nthRootDocs = {
  'name': 'nthRoot',
  'category': 'Arithmetic',
  'syntax': ['nthRoot(a)', 'nthRoot(a, root)'],
  'description': 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
  'examples': ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
  'seealso': ['nthRoots', 'pow', 'sqrt']
};
exports.nthRootDocs = nthRootDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/norm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normDocs = void 0;
const normDocs = {
  'name': 'norm',
  'category': 'Arithmetic',
  'syntax': ['norm(x)', 'norm(x, p)'],
  'description': 'Calculate the norm of a number, vector or matrix.',
  'examples': ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
};
exports.normDocs = normDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/multiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiplyDocs = void 0;
const multiplyDocs = {
  'name': 'multiply',
  'category': 'Operators',
  'syntax': ['x * y', 'multiply(x, y)'],
  'description': 'multiply two values.',
  'examples': ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
  'seealso': ['divide']
};
exports.multiplyDocs = multiplyDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/mod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modDocs = void 0;
const modDocs = {
  'name': 'mod',
  'category': 'Operators',
  'syntax': ['x % y', 'x mod y', 'mod(x, y)'],
  'description': 'Calculates the modulus, the remainder of an integer division.',
  'examples': ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
  'seealso': ['divide']
};
exports.modDocs = modDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log10Docs = void 0;
const log10Docs = {
  'name': 'log10',
  'category': 'Arithmetic',
  'syntax': ['log10(x)'],
  'description': 'Compute the 10-base logarithm of a value.',
  'examples': ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
  'seealso': ['exp', 'log']
};
exports.log10Docs = log10Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log1p.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log1pDocs = void 0;
const log1pDocs = {
  'name': 'log1p',
  'category': 'Arithmetic',
  'syntax': ['log1p(x)', 'log1p(x, base)'],
  'description': 'Calculate the logarithm of a `value+1`',
  'examples': ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
  'seealso': ['exp', 'log', 'log2', 'log10']
};
exports.log1pDocs = log1pDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log2Docs = void 0;
const log2Docs = {
  'name': 'log2',
  'category': 'Arithmetic',
  'syntax': ['log2(x)'],
  'description': 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
  'examples': ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
  'seealso': ['exp', 'log1p', 'log', 'log10']
};
exports.log2Docs = log2Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logDocs = void 0;
const logDocs = {
  'name': 'log',
  'category': 'Arithmetic',
  'syntax': ['log(x)', 'log(x, base)'],
  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
  'examples': ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
  'seealso': ['exp', 'log1p', 'log2', 'log10']
};
exports.logDocs = logDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/lcm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lcmDocs = void 0;
const lcmDocs = {
  'name': 'lcm',
  'category': 'Arithmetic',
  'syntax': ['lcm(x, y)'],
  'description': 'Compute the least common multiple.',
  'examples': ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
  'seealso': ['gcd']
};
exports.lcmDocs = lcmDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/hypot.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hypotDocs = void 0;
const hypotDocs = {
  'name': 'hypot',
  'category': 'Arithmetic',
  'syntax': ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
  'description': 'Calculate the hypotenusa of a list with values. ',
  'examples': ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
  'seealso': ['abs', 'norm']
};
exports.hypotDocs = hypotDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/gcd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gcdDocs = void 0;
const gcdDocs = {
  'name': 'gcd',
  'category': 'Arithmetic',
  'syntax': ['gcd(a, b)', 'gcd(a, b, c, ...)'],
  'description': 'Compute the greatest common divisor.',
  'examples': ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
  'seealso': ['lcm', 'xgcd']
};
exports.gcdDocs = gcdDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/floor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorDocs = void 0;
const floorDocs = {
  'name': 'floor',
  'category': 'Arithmetic',
  'syntax': ['floor(x)'],
  'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
  'examples': ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
  'seealso': ['ceil', 'fix', 'round']
};
exports.floorDocs = floorDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/fix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixDocs = void 0;
const fixDocs = {
  'name': 'fix',
  'category': 'Arithmetic',
  'syntax': ['fix(x)'],
  'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
  'examples': ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
  'seealso': ['ceil', 'floor', 'round']
};
exports.fixDocs = fixDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/expm1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1Docs = void 0;
const expm1Docs = {
  'name': 'expm1',
  'category': 'Arithmetic',
  'syntax': ['expm1(x)'],
  'description': 'Calculate the value of subtracting 1 from the exponential value.',
  'examples': ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
  'seealso': ['exp', 'pow', 'log']
};
exports.expm1Docs = expm1Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/expm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expmDocs = void 0;
const expmDocs = {
  'name': 'expm',
  'category': 'Arithmetic',
  'syntax': ['exp(x)'],
  'description': 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
  'examples': ['expm([[0,2],[0,0]])'],
  'seealso': ['exp']
};
exports.expmDocs = expmDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/exp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expDocs = void 0;
const expDocs = {
  'name': 'exp',
  'category': 'Arithmetic',
  'syntax': ['exp(x)'],
  'description': 'Calculate the exponent of a value.',
  'examples': ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
  'seealso': ['expm', 'expm1', 'pow', 'log']
};
exports.expDocs = expDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/dotMultiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotMultiplyDocs = void 0;
const dotMultiplyDocs = {
  'name': 'dotMultiply',
  'category': 'Operators',
  'syntax': ['x .* y', 'dotMultiply(x, y)'],
  'description': 'Multiply two values element wise.',
  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
  'seealso': ['multiply', 'divide', 'dotDivide']
};
exports.dotMultiplyDocs = dotMultiplyDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/dotDivide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotDivideDocs = void 0;
const dotDivideDocs = {
  'name': 'dotDivide',
  'category': 'Operators',
  'syntax': ['x ./ y', 'dotDivide(x, y)'],
  'description': 'Divide two values element wise.',
  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
  'seealso': ['multiply', 'dotMultiply', 'divide']
};
exports.dotDivideDocs = dotDivideDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/divide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideDocs = void 0;
const divideDocs = {
  'name': 'divide',
  'category': 'Operators',
  'syntax': ['x / y', 'divide(x, y)'],
  'description': 'Divide two values.',
  'examples': ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
  'seealso': ['multiply']
};
exports.divideDocs = divideDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/cube.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubeDocs = void 0;
const cubeDocs = {
  'name': 'cube',
  'category': 'Arithmetic',
  'syntax': ['cube(x)'],
  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
  'examples': ['cube(2)', '2^3', '2 * 2 * 2'],
  'seealso': ['multiply', 'square', 'pow']
};
exports.cubeDocs = cubeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/ceil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceilDocs = void 0;
const ceilDocs = {
  'name': 'ceil',
  'category': 'Arithmetic',
  'syntax': ['ceil(x)'],
  'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
  'examples': ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
  'seealso': ['floor', 'fix', 'round']
};
exports.ceilDocs = ceilDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/cbrt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cbrtDocs = void 0;
const cbrtDocs = {
  'name': 'cbrt',
  'category': 'Arithmetic',
  'syntax': ['cbrt(x)', 'cbrt(x, allRoots)'],
  'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
  'examples': ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
  'seealso': ['square', 'sqrt', 'cube', 'multiply']
};
exports.cbrtDocs = cbrtDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addDocs = void 0;
const addDocs = {
  'name': 'add',
  'category': 'Operators',
  'syntax': ['x + y', 'add(x, y)'],
  'description': 'Add two values.',
  'examples': ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
  'seealso': ['subtract']
};
exports.addDocs = addDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/abs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absDocs = void 0;
const absDocs = {
  'name': 'abs',
  'category': 'Arithmetic',
  'syntax': ['abs(x)'],
  'description': 'Compute the absolute value.',
  'examples': ['abs(3.5)', 'abs(-4.2)'],
  'seealso': ['sign']
};
exports.absDocs = absDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/qr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qrDocs = void 0;
const qrDocs = {
  'name': 'qr',
  'category': 'Algebra',
  'syntax': ['qr(A)'],
  'description': 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
  'examples': ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
  'seealso': ['lup', 'slu', 'matrix']
};
exports.qrDocs = qrDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/usolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usolveDocs = void 0;
const usolveDocs = {
  'name': 'usolve',
  'category': 'Algebra',
  'syntax': ['x=usolve(U, b)'],
  'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
  'examples': ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
  'seealso': ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
};
exports.usolveDocs = usolveDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/slu.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sluDocs = void 0;
const sluDocs = {
  'name': 'slu',
  'category': 'Algebra',
  'syntax': ['slu(A, order, threshold)'],
  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
  'examples': ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
};
exports.sluDocs = sluDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/rationalize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rationalizeDocs = void 0;
const rationalizeDocs = {
  'name': 'rationalize',
  'category': 'Algebra',
  'syntax': ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
  'description': 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
  'examples': ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
  'seealso': ['simplify']
};
exports.rationalizeDocs = rationalizeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/simplify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simplifyDocs = void 0;
const simplifyDocs = {
  'name': 'simplify',
  'category': 'Algebra',
  'syntax': ['simplify(expr)', 'simplify(expr, rules)'],
  'description': 'Simplify an expression tree.',
  'examples': ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.evaluate({x: 2})'],
  'seealso': ['derivative', 'parse', 'evaluate']
};
exports.simplifyDocs = simplifyDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/lup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lupDocs = void 0;
const lupDocs = {
  'name': 'lup',
  'category': 'Algebra',
  'syntax': ['lup(m)'],
  'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
  'examples': ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
};
exports.lupDocs = lupDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/lsolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lsolveDocs = void 0;
const lsolveDocs = {
  'name': 'lsolve',
  'category': 'Algebra',
  'syntax': ['x=lsolve(L, b)'],
  'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
  'seealso': ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
};
exports.lsolveDocs = lsolveDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/derivative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.derivativeDocs = void 0;
const derivativeDocs = {
  'name': 'derivative',
  'category': 'Algebra',
  'syntax': ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
  'examples': ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.evaluate({x: 3})'],
  'seealso': ['simplify', 'parse', 'evaluate']
};
exports.derivativeDocs = derivativeDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.versionDocs = void 0;
const versionDocs = {
  'name': 'version',
  'category': 'Constants',
  'syntax': ['version'],
  'description': 'A string with the version number of math.js',
  'examples': ['version'],
  'seealso': []
};
exports.versionDocs = versionDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/true.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trueDocs = void 0;
const trueDocs = {
  'name': 'true',
  'category': 'Constants',
  'syntax': ['true'],
  'description': 'Boolean value true',
  'examples': ['true'],
  'seealso': ['false']
};
exports.trueDocs = trueDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/tau.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tauDocs = void 0;
const tauDocs = {
  'name': 'tau',
  'category': 'Constants',
  'syntax': ['tau'],
  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
  'examples': ['tau', '2 * pi'],
  'seealso': ['pi']
};
exports.tauDocs = tauDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/SQRT2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SQRT2Docs = void 0;
const SQRT2Docs = {
  'name': 'SQRT2',
  'category': 'Constants',
  'syntax': ['SQRT2'],
  'description': 'Returns the square root of 2, approximately equal to 1.414',
  'examples': ['SQRT2', 'sqrt(2)'],
  'seealso': []
};
exports.SQRT2Docs = SQRT2Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/SQRT1_2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SQRT12Docs = void 0;
const SQRT12Docs = {
  'name': 'SQRT1_2',
  'category': 'Constants',
  'syntax': ['SQRT1_2'],
  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
  'examples': ['SQRT1_2', 'sqrt(1/2)'],
  'seealso': []
};
exports.SQRT12Docs = SQRT12Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/phi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phiDocs = void 0;
const phiDocs = {
  'name': 'phi',
  'category': 'Constants',
  'syntax': ['phi'],
  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
  'examples': ['phi'],
  'seealso': []
};
exports.phiDocs = phiDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/pi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.piDocs = void 0;
const piDocs = {
  'name': 'pi',
  'category': 'Constants',
  'syntax': ['pi'],
  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
  'examples': ['pi', 'sin(pi/2)'],
  'seealso': ['tau']
};
exports.piDocs = piDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/null.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullDocs = void 0;
const nullDocs = {
  'name': 'null',
  'category': 'Constants',
  'syntax': ['null'],
  'description': 'Value null',
  'examples': ['null'],
  'seealso': ['true', 'false']
};
exports.nullDocs = nullDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/NaN.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NaNDocs = void 0;
const NaNDocs = {
  'name': 'NaN',
  'category': 'Constants',
  'syntax': ['NaN'],
  'description': 'Not a number',
  'examples': ['NaN', '0 / 0'],
  'seealso': []
};
exports.NaNDocs = NaNDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/LOG10E.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOG10EDocs = void 0;
const LOG10EDocs = {
  'name': 'LOG10E',
  'category': 'Constants',
  'syntax': ['LOG10E'],
  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
  'examples': ['LOG10E', 'log(e, 10)'],
  'seealso': []
};
exports.LOG10EDocs = LOG10EDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/LOG2E.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOG2EDocs = void 0;
const LOG2EDocs = {
  'name': 'LOG2E',
  'category': 'Constants',
  'syntax': ['LOG2E'],
  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
  'examples': ['LOG2E', 'log(e, 2)'],
  'seealso': []
};
exports.LOG2EDocs = LOG2EDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/LN10.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LN10Docs = void 0;
const LN10Docs = {
  'name': 'LN10',
  'category': 'Constants',
  'syntax': ['LN10'],
  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
  'examples': ['LN10', 'log(10)'],
  'seealso': []
};
exports.LN10Docs = LN10Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/LN2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LN2Docs = void 0;
const LN2Docs = {
  'name': 'LN2',
  'category': 'Constants',
  'syntax': ['LN2'],
  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
  'examples': ['LN2', 'log(2)'],
  'seealso': []
};
exports.LN2Docs = LN2Docs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/Infinity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InfinityDocs = void 0;
const InfinityDocs = {
  'name': 'Infinity',
  'category': 'Constants',
  'syntax': ['Infinity'],
  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
  'examples': ['Infinity', '1 / 0'],
  'seealso': []
};
exports.InfinityDocs = InfinityDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/i.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iDocs = void 0;
const iDocs = {
  'name': 'i',
  'category': 'Constants',
  'syntax': ['i'],
  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
  'examples': ['i', 'i * i', 'sqrt(-1)'],
  'seealso': []
};
exports.iDocs = iDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/false.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.falseDocs = void 0;
const falseDocs = {
  'name': 'false',
  'category': 'Constants',
  'syntax': ['false'],
  'description': 'Boolean value false',
  'examples': ['false'],
  'seealso': ['true']
};
exports.falseDocs = falseDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/constants/e.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eDocs = void 0;
const eDocs = {
  'name': 'e',
  'category': 'Constants',
  'syntax': ['e'],
  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
  'examples': ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
  'seealso': ['exp']
};
exports.eDocs = eDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/unit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unitDocs = void 0;
const unitDocs = {
  'name': 'unit',
  'category': 'Construction',
  'syntax': ['value unit', 'unit(value, unit)', 'unit(string)'],
  'description': 'Create a unit.',
  'examples': ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
};
exports.unitDocs = unitDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringDocs = void 0;
const stringDocs = {
  'name': 'string',
  'category': 'Construction',
  'syntax': ['"text"', 'string(x)'],
  'description': 'Create a string or convert a value to a string',
  'examples': ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
};
exports.stringDocs = stringDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/splitUnit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitUnitDocs = void 0;
const splitUnitDocs = {
  'name': 'splitUnit',
  'category': 'Construction',
  'syntax': ['splitUnit(unit: Unit, parts: Unit[])'],
  'description': 'Split a unit in an array of units whose sum is equal to the original unit.',
  'examples': ['splitUnit(1 m, ["feet", "inch"])'],
  'seealso': ['unit', 'createUnit']
};
exports.splitUnitDocs = splitUnitDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/sparse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseDocs = void 0;
const sparseDocs = {
  'name': 'sparse',
  'category': 'Construction',
  'syntax': ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
  'description': 'Create a sparse matrix.',
  'examples': ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
};
exports.sparseDocs = sparseDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberDocs = void 0;
const numberDocs = {
  'name': 'number',
  'category': 'Construction',
  'syntax': ['x', 'number(x)', 'number(unit, valuelessUnit)'],
  'description': 'Create a number or convert a string or boolean into a number.',
  'examples': ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
  'seealso': ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
};
exports.numberDocs = numberDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/matrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matrixDocs = void 0;
const matrixDocs = {
  'name': 'matrix',
  'category': 'Construction',
  'syntax': ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
  'description': 'Create a matrix.',
  'examples': ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
};
exports.matrixDocs = matrixDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexDocs = void 0;
const indexDocs = {
  'name': 'index',
  'category': 'Construction',
  'syntax': ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
  'description': 'Create an index to get or replace a subset of a matrix',
  'examples': ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
  'seealso': ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
};
exports.indexDocs = indexDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/fraction.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fractionDocs = void 0;
const fractionDocs = {
  'name': 'fraction',
  'category': 'Construction',
  'syntax': ['fraction(num)', 'fraction(num,den)'],
  'description': 'Create a fraction from a number or from a numerator and denominator.',
  'examples': ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
};
exports.fractionDocs = fractionDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/createUnit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnitDocs = void 0;
const createUnitDocs = {
  'name': 'createUnit',
  'category': 'Construction',
  'syntax': ['createUnit(definitions)', 'createUnit(name, definition)'],
  'description': 'Create a user-defined unit and register it with the Unit type.',
  'examples': ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
  'seealso': ['unit', 'splitUnit']
};
exports.createUnitDocs = createUnitDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/complex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complexDocs = void 0;
const complexDocs = {
  'name': 'complex',
  'category': 'Construction',
  'syntax': ['complex()', 'complex(re, im)', 'complex(string)'],
  'description': 'Create a complex number.',
  'examples': ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
  'seealso': ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
};
exports.complexDocs = complexDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/construction/boolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.booleanDocs = void 0;
const booleanDocs = {
  'name': 'boolean',
  'category': 'Construction',
  'syntax': ['x', 'boolean(x)'],
  'description': 'Convert a string or number into a boolean.',
  'examples': ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
  'seealso': ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
};
exports.booleanDocs = booleanDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/dotPow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotPowDocs = void 0;
const dotPowDocs = {
  'name': 'dotPow',
  'category': 'Operators',
  'syntax': ['x .^ y', 'dotPow(x, y)'],
  'description': 'Calculates the power of x to y element wise.',
  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
  'seealso': ['pow']
};
exports.dotPowDocs = dotPowDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/lusolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lusolveDocs = void 0;
const lusolveDocs = {
  'name': 'lusolve',
  'category': 'Algebra',
  'syntax': ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
  'seealso': ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
};
exports.lusolveDocs = lusolveDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/subtract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subtractDocs = void 0;
const subtractDocs = {
  'name': 'subtract',
  'category': 'Operators',
  'syntax': ['x - y', 'subtract(x, y)'],
  'description': 'subtract two values.',
  'examples': ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
  'seealso': ['add']
};
exports.subtractDocs = subtractDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.varianceDocs = void 0;
const varianceDocs = {
  'name': 'variance',
  'category': 'Statistics',
  'syntax': ['variance(a, b, c, ...)', 'variance(A)', 'variance(A, normalization)'],
  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
  'examples': ['variance(2, 4, 6)', 'variance([2, 4, 6, 8])', 'variance([2, 4, 6, 8], "uncorrected")', 'variance([2, 4, 6, 8], "biased")', 'variance([1, 2, 3; 4, 5, 6])'],
  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
};
exports.varianceDocs = varianceDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinDocs = void 0;
const sinDocs = {
  'name': 'sin',
  'category': 'Trigonometry',
  'syntax': ['sin(x)'],
  'description': 'Compute the sine of x in radians.',
  'examples': ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
  'seealso': ['asin', 'cos', 'tan']
};
exports.sinDocs = sinDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/numeric.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numericDocs = void 0;
const numericDocs = {
  'name': 'numeric',
  'category': 'Utils',
  'syntax': ['numeric(x)'],
  'description': 'Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.',
  'examples': ['numeric("4")', 'numeric("4", "number")', 'numeric("4", "BigNumber")', 'numeric("4", "Fraction)', 'numeric(4, "Fraction")', 'numeric(fraction(2, 5), "number)'],
  'seealso': ['number', 'fraction', 'bignumber', 'string', 'format']
};
exports.numericDocs = numericDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/column.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.columnDocs = void 0;
const columnDocs = {
  'name': 'column',
  'category': 'Matrix',
  'syntax': ['column(x, index)'],
  'description': 'Return a column from a matrix or array.',
  'examples': ['A = [[1, 2], [3, 4]]', 'column(A, 1)', 'column(A, 2)'],
  'seealso': ['row']
};
exports.columnDocs = columnDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/row.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rowDocs = void 0;
const rowDocs = {
  'name': 'row',
  'category': 'Matrix',
  'syntax': ['row(x, index)'],
  'description': 'Return a row from a matrix or array.',
  'examples': ['A = [[1, 2], [3, 4]]', 'row(A, 1)', 'row(A, 2)'],
  'seealso': ['column']
};
exports.rowDocs = rowDocs;
},{}],"../node_modules/mathjs/src/expression/embeddedDocs/embeddedDocs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.embeddedDocs = void 0;

var _bignumber = require("./construction/bignumber");

var _typeOf = require("./function/utils/typeOf");

var _isZero = require("./function/utils/isZero");

var _isPrime = require("./function/utils/isPrime");

var _isPositive = require("./function/utils/isPositive");

var _isNumeric = require("./function/utils/isNumeric");

var _hasNumericValue = require("./function/utils/hasNumericValue");

var _isNegative = require("./function/utils/isNegative");

var _isInteger = require("./function/utils/isInteger");

var _isNaN = require("./function/utils/isNaN");

var _format = require("./function/utils/format");

var _clone = require("./function/utils/clone");

var _to = require("./function/units/to");

var _tanh = require("./function/trigonometry/tanh");

var _tan = require("./function/trigonometry/tan");

var _sinh = require("./function/trigonometry/sinh");

var _sech = require("./function/trigonometry/sech");

var _sec = require("./function/trigonometry/sec");

var _csch = require("./function/trigonometry/csch");

var _csc = require("./function/trigonometry/csc");

var _coth = require("./function/trigonometry/coth");

var _cot = require("./function/trigonometry/cot");

var _cosh = require("./function/trigonometry/cosh");

var _cos = require("./function/trigonometry/cos");

var _atan = require("./function/trigonometry/atan2");

var _atanh = require("./function/trigonometry/atanh");

var _atan2 = require("./function/trigonometry/atan");

var _asinh = require("./function/trigonometry/asinh");

var _asin = require("./function/trigonometry/asin");

var _asech = require("./function/trigonometry/asech");

var _asec = require("./function/trigonometry/asec");

var _acsch = require("./function/trigonometry/acsch");

var _acsc = require("./function/trigonometry/acsc");

var _acoth = require("./function/trigonometry/acoth");

var _acot = require("./function/trigonometry/acot");

var _acosh = require("./function/trigonometry/acosh");

var _acos = require("./function/trigonometry/acos");

var _sum = require("./function/statistics/sum");

var _std = require("./function/statistics/std");

var _quantileSeq = require("./function/statistics/quantileSeq");

var _prod = require("./function/statistics/prod");

var _mode = require("./function/statistics/mode");

var _min = require("./function/statistics/min");

var _median = require("./function/statistics/median");

var _mean = require("./function/statistics/mean");

var _max = require("./function/statistics/max");

var _mad = require("./function/statistics/mad");

var _erf = require("./function/special/erf");

var _setUnion = require("./function/set/setUnion");

var _setSymDifference = require("./function/set/setSymDifference");

var _setSize = require("./function/set/setSize");

var _setPowerset = require("./function/set/setPowerset");

var _setMultiplicity = require("./function/set/setMultiplicity");

var _setIsSubset = require("./function/set/setIsSubset");

var _setIntersect = require("./function/set/setIntersect");

var _setDistinct = require("./function/set/setDistinct");

var _setDifference = require("./function/set/setDifference");

var _setCartesian = require("./function/set/setCartesian");

var _unequal = require("./function/relational/unequal");

var _smallerEq = require("./function/relational/smallerEq");

var _smaller = require("./function/relational/smaller");

var _largerEq = require("./function/relational/largerEq");

var _larger = require("./function/relational/larger");

var _equalText = require("./function/relational/equalText");

var _equal = require("./function/relational/equal");

var _deepEqual = require("./function/relational/deepEqual");

var _compareText = require("./function/relational/compareText");

var _compareNatural = require("./function/relational/compareNatural");

var _compare = require("./function/relational/compare");

var _randomInt = require("./function/probability/randomInt");

var _random = require("./function/probability/random");

var _pickRandom = require("./function/probability/pickRandom");

var _permutations = require("./function/probability/permutations");

var _multinomial = require("./function/probability/multinomial");

var _kldivergence = require("./function/probability/kldivergence");

var _gamma = require("./function/probability/gamma");

var _factorial = require("./function/probability/factorial");

var _combinations = require("./function/probability/combinations");

var _zeros = require("./function/matrix/zeros");

var _transpose = require("./function/matrix/transpose");

var _trace = require("./function/matrix/trace");

var _subset = require("./function/matrix/subset");

var _squeeze = require("./function/matrix/squeeze");

var _sort = require("./function/matrix/sort");

var _size = require("./function/matrix/size");

var _reshape = require("./function/matrix/reshape");

var _resize = require("./function/matrix/resize");

var _range = require("./function/matrix/range");

var _partitionSelect = require("./function/matrix/partitionSelect");

var _ones = require("./function/matrix/ones");

var _map = require("./function/matrix/map");

var _kron = require("./function/matrix/kron");

var _inv = require("./function/matrix/inv");

var _forEach = require("./function/matrix/forEach");

var _flatten = require("./function/matrix/flatten");

var _filter = require("./function/matrix/filter");

var _identity = require("./function/matrix/identity");

var _getMatrixDataType = require("./function/matrix/getMatrixDataType");

var _dot = require("./function/matrix/dot");

var _diag = require("./function/matrix/diag");

var _det = require("./function/matrix/det");

var _ctranspose = require("./function/matrix/ctranspose");

var _cross = require("./function/matrix/cross");

var _concat = require("./function/matrix/concat");

var _xor = require("./function/logical/xor");

var _or = require("./function/logical/or");

var _not = require("./function/logical/not");

var _and = require("./function/logical/and");

var _intersect = require("./function/geometry/intersect");

var _distance = require("./function/geometry/distance");

var _help = require("./function/expression/help");

var _evaluate = require("./function/expression/evaluate");

var _im = require("./function/complex/im");

var _re = require("./function/complex/re");

var _conj = require("./function/complex/conj");

var _arg = require("./function/complex/arg");

var _typed = require("./core/typed");

var _import = require("./core/import");

var _config = require("./core/config");

var _stirlingS = require("./function/combinatorics/stirlingS2");

var _composition = require("./function/combinatorics/composition");

var _catalan = require("./function/combinatorics/catalan");

var _bellNumbers = require("./function/combinatorics/bellNumbers");

var _rightLogShift = require("./function/bitwise/rightLogShift");

var _rightArithShift = require("./function/bitwise/rightArithShift");

var _leftShift = require("./function/bitwise/leftShift");

var _bitXor = require("./function/bitwise/bitXor");

var _bitOr = require("./function/bitwise/bitOr");

var _bitNot = require("./function/bitwise/bitNot");

var _bitAnd = require("./function/bitwise/bitAnd");

var _xgcd = require("./function/arithmetic/xgcd");

var _unaryPlus = require("./function/arithmetic/unaryPlus");

var _unaryMinus = require("./function/arithmetic/unaryMinus");

var _square = require("./function/arithmetic/square");

var _sqrtm = require("./function/arithmetic/sqrtm");

var _sqrt = require("./function/arithmetic/sqrt");

var _sign = require("./function/arithmetic/sign");

var _round = require("./function/arithmetic/round");

var _pow = require("./function/arithmetic/pow");

var _nthRoots = require("./function/arithmetic/nthRoots");

var _nthRoot = require("./function/arithmetic/nthRoot");

var _norm = require("./function/arithmetic/norm");

var _multiply = require("./function/arithmetic/multiply");

var _mod = require("./function/arithmetic/mod");

var _log = require("./function/arithmetic/log10");

var _log1p = require("./function/arithmetic/log1p");

var _log2 = require("./function/arithmetic/log2");

var _log3 = require("./function/arithmetic/log");

var _lcm = require("./function/arithmetic/lcm");

var _hypot = require("./function/arithmetic/hypot");

var _gcd = require("./function/arithmetic/gcd");

var _floor = require("./function/arithmetic/floor");

var _fix = require("./function/arithmetic/fix");

var _expm = require("./function/arithmetic/expm1");

var _expm2 = require("./function/arithmetic/expm");

var _exp = require("./function/arithmetic/exp");

var _dotMultiply = require("./function/arithmetic/dotMultiply");

var _dotDivide = require("./function/arithmetic/dotDivide");

var _divide = require("./function/arithmetic/divide");

var _cube = require("./function/arithmetic/cube");

var _ceil = require("./function/arithmetic/ceil");

var _cbrt = require("./function/arithmetic/cbrt");

var _add = require("./function/arithmetic/add");

var _abs = require("./function/arithmetic/abs");

var _qr = require("./function/algebra/qr");

var _usolve = require("./function/algebra/usolve");

var _slu = require("./function/algebra/slu");

var _rationalize = require("./function/algebra/rationalize");

var _simplify = require("./function/algebra/simplify");

var _lup = require("./function/algebra/lup");

var _lsolve = require("./function/algebra/lsolve");

var _derivative = require("./function/algebra/derivative");

var _version = require("./constants/version");

var _true = require("./constants/true");

var _tau = require("./constants/tau");

var _SQRT = require("./constants/SQRT2");

var _SQRT1_ = require("./constants/SQRT1_2");

var _phi = require("./constants/phi");

var _pi = require("./constants/pi");

var _null = require("./constants/null");

var _NaN = require("./constants/NaN");

var _LOG10E = require("./constants/LOG10E");

var _LOG2E = require("./constants/LOG2E");

var _LN = require("./constants/LN10");

var _LN2 = require("./constants/LN2");

var _Infinity = require("./constants/Infinity");

var _i = require("./constants/i");

var _false = require("./constants/false");

var _e = require("./constants/e");

var _unit = require("./construction/unit");

var _string = require("./construction/string");

var _splitUnit = require("./construction/splitUnit");

var _sparse = require("./construction/sparse");

var _number = require("./construction/number");

var _matrix = require("./construction/matrix");

var _construction = require("./construction");

var _fraction = require("./construction/fraction");

var _createUnit = require("./construction/createUnit");

var _complex = require("./construction/complex");

var _boolean = require("./construction/boolean");

var _dotPow = require("./function/arithmetic/dotPow");

var _lusolve = require("./function/algebra/lusolve");

var _subtract = require("./function/arithmetic/subtract");

var _variance = require("./function/statistics/variance");

var _sin = require("./function/trigonometry/sin");

var _numeric = require("./function/utils/numeric");

var _column = require("./function/matrix/column");

var _row = require("./function/matrix/row");

const embeddedDocs = {
  // construction functions
  bignumber: _bignumber.bignumberDocs,
  'boolean': _boolean.booleanDocs,
  complex: _complex.complexDocs,
  createUnit: _createUnit.createUnitDocs,
  fraction: _fraction.fractionDocs,
  index: _construction.indexDocs,
  matrix: _matrix.matrixDocs,
  number: _number.numberDocs,
  sparse: _sparse.sparseDocs,
  splitUnit: _splitUnit.splitUnitDocs,
  string: _string.stringDocs,
  unit: _unit.unitDocs,
  // constants
  e: _e.eDocs,
  E: _e.eDocs,
  'false': _false.falseDocs,
  i: _i.iDocs,
  'Infinity': _Infinity.InfinityDocs,
  LN2: _LN2.LN2Docs,
  LN10: _LN.LN10Docs,
  LOG2E: _LOG2E.LOG2EDocs,
  LOG10E: _LOG10E.LOG10EDocs,
  NaN: _NaN.NaNDocs,
  'null': _null.nullDocs,
  pi: _pi.piDocs,
  PI: _pi.piDocs,
  phi: _phi.phiDocs,
  SQRT1_2: _SQRT1_.SQRT12Docs,
  SQRT2: _SQRT.SQRT2Docs,
  tau: _tau.tauDocs,
  'true': _true.trueDocs,
  version: _version.versionDocs,
  // physical constants
  // TODO: more detailed docs for physical constants
  speedOfLight: {
    description: 'Speed of light in vacuum',
    examples: ['speedOfLight']
  },
  gravitationConstant: {
    description: 'Newtonian constant of gravitation',
    examples: ['gravitationConstant']
  },
  planckConstant: {
    description: 'Planck constant',
    examples: ['planckConstant']
  },
  reducedPlanckConstant: {
    description: 'Reduced Planck constant',
    examples: ['reducedPlanckConstant']
  },
  magneticConstant: {
    description: 'Magnetic constant (vacuum permeability)',
    examples: ['magneticConstant']
  },
  electricConstant: {
    description: 'Electric constant (vacuum permeability)',
    examples: ['electricConstant']
  },
  vacuumImpedance: {
    description: 'Characteristic impedance of vacuum',
    examples: ['vacuumImpedance']
  },
  coulomb: {
    description: 'Coulomb\'s constant',
    examples: ['coulomb']
  },
  elementaryCharge: {
    description: 'Elementary charge',
    examples: ['elementaryCharge']
  },
  bohrMagneton: {
    description: 'Borh magneton',
    examples: ['bohrMagneton']
  },
  conductanceQuantum: {
    description: 'Conductance quantum',
    examples: ['conductanceQuantum']
  },
  inverseConductanceQuantum: {
    description: 'Inverse conductance quantum',
    examples: ['inverseConductanceQuantum']
  },
  // josephson: {description: 'Josephson constant', examples: ['josephson']},
  magneticFluxQuantum: {
    description: 'Magnetic flux quantum',
    examples: ['magneticFluxQuantum']
  },
  nuclearMagneton: {
    description: 'Nuclear magneton',
    examples: ['nuclearMagneton']
  },
  klitzing: {
    description: 'Von Klitzing constant',
    examples: ['klitzing']
  },
  bohrRadius: {
    description: 'Borh radius',
    examples: ['bohrRadius']
  },
  classicalElectronRadius: {
    description: 'Classical electron radius',
    examples: ['classicalElectronRadius']
  },
  electronMass: {
    description: 'Electron mass',
    examples: ['electronMass']
  },
  fermiCoupling: {
    description: 'Fermi coupling constant',
    examples: ['fermiCoupling']
  },
  fineStructure: {
    description: 'Fine-structure constant',
    examples: ['fineStructure']
  },
  hartreeEnergy: {
    description: 'Hartree energy',
    examples: ['hartreeEnergy']
  },
  protonMass: {
    description: 'Proton mass',
    examples: ['protonMass']
  },
  deuteronMass: {
    description: 'Deuteron Mass',
    examples: ['deuteronMass']
  },
  neutronMass: {
    description: 'Neutron mass',
    examples: ['neutronMass']
  },
  quantumOfCirculation: {
    description: 'Quantum of circulation',
    examples: ['quantumOfCirculation']
  },
  rydberg: {
    description: 'Rydberg constant',
    examples: ['rydberg']
  },
  thomsonCrossSection: {
    description: 'Thomson cross section',
    examples: ['thomsonCrossSection']
  },
  weakMixingAngle: {
    description: 'Weak mixing angle',
    examples: ['weakMixingAngle']
  },
  efimovFactor: {
    description: 'Efimov factor',
    examples: ['efimovFactor']
  },
  atomicMass: {
    description: 'Atomic mass constant',
    examples: ['atomicMass']
  },
  avogadro: {
    description: 'Avogadro\'s number',
    examples: ['avogadro']
  },
  boltzmann: {
    description: 'Boltzmann constant',
    examples: ['boltzmann']
  },
  faraday: {
    description: 'Faraday constant',
    examples: ['faraday']
  },
  firstRadiation: {
    description: 'First radiation constant',
    examples: ['firstRadiation']
  },
  loschmidt: {
    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
    examples: ['loschmidt']
  },
  gasConstant: {
    description: 'Gas constant',
    examples: ['gasConstant']
  },
  molarPlanckConstant: {
    description: 'Molar Planck constant',
    examples: ['molarPlanckConstant']
  },
  molarVolume: {
    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
    examples: ['molarVolume']
  },
  sackurTetrode: {
    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
    examples: ['sackurTetrode']
  },
  secondRadiation: {
    description: 'Second radiation constant',
    examples: ['secondRadiation']
  },
  stefanBoltzmann: {
    description: 'Stefan-Boltzmann constant',
    examples: ['stefanBoltzmann']
  },
  wienDisplacement: {
    description: 'Wien displacement law constant',
    examples: ['wienDisplacement']
  },
  // spectralRadiance: {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']},
  molarMass: {
    description: 'Molar mass constant',
    examples: ['molarMass']
  },
  molarMassC12: {
    description: 'Molar mass constant of carbon-12',
    examples: ['molarMassC12']
  },
  gravity: {
    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
    examples: ['gravity']
  },
  planckLength: {
    description: 'Planck length',
    examples: ['planckLength']
  },
  planckMass: {
    description: 'Planck mass',
    examples: ['planckMass']
  },
  planckTime: {
    description: 'Planck time',
    examples: ['planckTime']
  },
  planckCharge: {
    description: 'Planck charge',
    examples: ['planckCharge']
  },
  planckTemperature: {
    description: 'Planck temperature',
    examples: ['planckTemperature']
  },
  // functions - algebra
  derivative: _derivative.derivativeDocs,
  lsolve: _lsolve.lsolveDocs,
  lup: _lup.lupDocs,
  lusolve: _lusolve.lusolveDocs,
  simplify: _simplify.simplifyDocs,
  rationalize: _rationalize.rationalizeDocs,
  slu: _slu.sluDocs,
  usolve: _usolve.usolveDocs,
  qr: _qr.qrDocs,
  // functions - arithmetic
  abs: _abs.absDocs,
  add: _add.addDocs,
  cbrt: _cbrt.cbrtDocs,
  ceil: _ceil.ceilDocs,
  cube: _cube.cubeDocs,
  divide: _divide.divideDocs,
  dotDivide: _dotDivide.dotDivideDocs,
  dotMultiply: _dotMultiply.dotMultiplyDocs,
  dotPow: _dotPow.dotPowDocs,
  exp: _exp.expDocs,
  expm: _expm2.expmDocs,
  expm1: _expm.expm1Docs,
  fix: _fix.fixDocs,
  floor: _floor.floorDocs,
  gcd: _gcd.gcdDocs,
  hypot: _hypot.hypotDocs,
  lcm: _lcm.lcmDocs,
  log: _log3.logDocs,
  log2: _log2.log2Docs,
  log1p: _log1p.log1pDocs,
  log10: _log.log10Docs,
  mod: _mod.modDocs,
  multiply: _multiply.multiplyDocs,
  norm: _norm.normDocs,
  nthRoot: _nthRoot.nthRootDocs,
  nthRoots: _nthRoots.nthRootsDocs,
  pow: _pow.powDocs,
  round: _round.roundDocs,
  sign: _sign.signDocs,
  sqrt: _sqrt.sqrtDocs,
  sqrtm: _sqrtm.sqrtmDocs,
  square: _square.squareDocs,
  subtract: _subtract.subtractDocs,
  unaryMinus: _unaryMinus.unaryMinusDocs,
  unaryPlus: _unaryPlus.unaryPlusDocs,
  xgcd: _xgcd.xgcdDocs,
  // functions - bitwise
  bitAnd: _bitAnd.bitAndDocs,
  bitNot: _bitNot.bitNotDocs,
  bitOr: _bitOr.bitOrDocs,
  bitXor: _bitXor.bitXorDocs,
  leftShift: _leftShift.leftShiftDocs,
  rightArithShift: _rightArithShift.rightArithShiftDocs,
  rightLogShift: _rightLogShift.rightLogShiftDocs,
  // functions - combinatorics
  bellNumbers: _bellNumbers.bellNumbersDocs,
  catalan: _catalan.catalanDocs,
  composition: _composition.compositionDocs,
  stirlingS2: _stirlingS.stirlingS2Docs,
  // functions - core
  'config': _config.configDocs,
  'import': _import.importDocs,
  'typed': _typed.typedDocs,
  // functions - complex
  arg: _arg.argDocs,
  conj: _conj.conjDocs,
  re: _re.reDocs,
  im: _im.imDocs,
  // functions - expression
  'evaluate': _evaluate.evaluateDocs,
  'eval': _evaluate.evaluateDocs,
  // TODO: deprecated, cleanup in v7
  help: _help.helpDocs,
  // functions - geometry
  distance: _distance.distanceDocs,
  intersect: _intersect.intersectDocs,
  // functions - logical
  'and': _and.andDocs,
  'not': _not.notDocs,
  'or': _or.orDocs,
  'xor': _xor.xorDocs,
  // functions - matrix
  'concat': _concat.concatDocs,
  cross: _cross.crossDocs,
  column: _column.columnDocs,
  ctranspose: _ctranspose.ctransposeDocs,
  det: _det.detDocs,
  diag: _diag.diagDocs,
  dot: _dot.dotDocs,
  getMatrixDataType: _getMatrixDataType.getMatrixDataTypeDocs,
  identity: _identity.identityDocs,
  filter: _filter.filterDocs,
  flatten: _flatten.flattenDocs,
  forEach: _forEach.forEachDocs,
  inv: _inv.invDocs,
  kron: _kron.kronDocs,
  map: _map.mapDocs,
  ones: _ones.onesDocs,
  partitionSelect: _partitionSelect.partitionSelectDocs,
  range: _range.rangeDocs,
  resize: _resize.resizeDocs,
  reshape: _reshape.reshapeDocs,
  row: _row.rowDocs,
  size: _size.sizeDocs,
  sort: _sort.sortDocs,
  squeeze: _squeeze.squeezeDocs,
  subset: _subset.subsetDocs,
  trace: _trace.traceDocs,
  transpose: _transpose.transposeDocs,
  zeros: _zeros.zerosDocs,
  // functions - probability
  combinations: _combinations.combinationsDocs,
  // distribution: distributionDocs,
  factorial: _factorial.factorialDocs,
  gamma: _gamma.gammaDocs,
  kldivergence: _kldivergence.kldivergenceDocs,
  multinomial: _multinomial.multinomialDocs,
  permutations: _permutations.permutationsDocs,
  pickRandom: _pickRandom.pickRandomDocs,
  random: _random.randomDocs,
  randomInt: _randomInt.randomIntDocs,
  // functions - relational
  compare: _compare.compareDocs,
  compareNatural: _compareNatural.compareNaturalDocs,
  compareText: _compareText.compareTextDocs,
  deepEqual: _deepEqual.deepEqualDocs,
  'equal': _equal.equalDocs,
  equalText: _equalText.equalTextDocs,
  larger: _larger.largerDocs,
  largerEq: _largerEq.largerEqDocs,
  smaller: _smaller.smallerDocs,
  smallerEq: _smallerEq.smallerEqDocs,
  unequal: _unequal.unequalDocs,
  // functions - set
  setCartesian: _setCartesian.setCartesianDocs,
  setDifference: _setDifference.setDifferenceDocs,
  setDistinct: _setDistinct.setDistinctDocs,
  setIntersect: _setIntersect.setIntersectDocs,
  setIsSubset: _setIsSubset.setIsSubsetDocs,
  setMultiplicity: _setMultiplicity.setMultiplicityDocs,
  setPowerset: _setPowerset.setPowersetDocs,
  setSize: _setSize.setSizeDocs,
  setSymDifference: _setSymDifference.setSymDifferenceDocs,
  setUnion: _setUnion.setUnionDocs,
  // functions - special
  erf: _erf.erfDocs,
  // functions - statistics
  mad: _mad.madDocs,
  max: _max.maxDocs,
  mean: _mean.meanDocs,
  median: _median.medianDocs,
  min: _min.minDocs,
  mode: _mode.modeDocs,
  prod: _prod.prodDocs,
  quantileSeq: _quantileSeq.quantileSeqDocs,
  std: _std.stdDocs,
  sum: _sum.sumDocs,
  'variance': _variance.varianceDocs,
  'var': _variance.varianceDocs,
  // TODO: deprecated, cleanup in v7
  // functions - trigonometry
  acos: _acos.acosDocs,
  acosh: _acosh.acoshDocs,
  acot: _acot.acotDocs,
  acoth: _acoth.acothDocs,
  acsc: _acsc.acscDocs,
  acsch: _acsch.acschDocs,
  asec: _asec.asecDocs,
  asech: _asech.asechDocs,
  asin: _asin.asinDocs,
  asinh: _asinh.asinhDocs,
  atan: _atan2.atanDocs,
  atanh: _atanh.atanhDocs,
  atan2: _atan.atan2Docs,
  cos: _cos.cosDocs,
  cosh: _cosh.coshDocs,
  cot: _cot.cotDocs,
  coth: _coth.cothDocs,
  csc: _csc.cscDocs,
  csch: _csch.cschDocs,
  sec: _sec.secDocs,
  sech: _sech.sechDocs,
  sin: _sin.sinDocs,
  sinh: _sinh.sinhDocs,
  tan: _tan.tanDocs,
  tanh: _tanh.tanhDocs,
  // functions - units
  to: _to.toDocs,
  // functions - utils
  clone: _clone.cloneDocs,
  format: _format.formatDocs,
  isNaN: _isNaN.isNaNDocs,
  isInteger: _isInteger.isIntegerDocs,
  isNegative: _isNegative.isNegativeDocs,
  isNumeric: _isNumeric.isNumericDocs,
  hasNumericValue: _hasNumericValue.hasNumericValueDocs,
  isPositive: _isPositive.isPositiveDocs,
  isPrime: _isPrime.isPrimeDocs,
  isZero: _isZero.isZeroDocs,
  // print: printDocs // TODO: add documentation for print as soon as the parser supports objects.
  'typeOf': _typeOf.typeOfDocs,
  'typeof': _typeOf.typeOfDocs,
  // TODO: deprecated, cleanup in v7
  'numeric': _numeric.numericDocs
};
exports.embeddedDocs = embeddedDocs;
},{"./construction/bignumber":"../node_modules/mathjs/src/expression/embeddedDocs/construction/bignumber.js","./function/utils/typeOf":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/typeOf.js","./function/utils/isZero":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isZero.js","./function/utils/isPrime":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isPrime.js","./function/utils/isPositive":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isPositive.js","./function/utils/isNumeric":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isNumeric.js","./function/utils/hasNumericValue":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/hasNumericValue.js","./function/utils/isNegative":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isNegative.js","./function/utils/isInteger":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isInteger.js","./function/utils/isNaN":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/isNaN.js","./function/utils/format":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/format.js","./function/utils/clone":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/clone.js","./function/units/to":"../node_modules/mathjs/src/expression/embeddedDocs/function/units/to.js","./function/trigonometry/tanh":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/tanh.js","./function/trigonometry/tan":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/tan.js","./function/trigonometry/sinh":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sinh.js","./function/trigonometry/sech":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sech.js","./function/trigonometry/sec":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sec.js","./function/trigonometry/csch":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/csch.js","./function/trigonometry/csc":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/csc.js","./function/trigonometry/coth":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/coth.js","./function/trigonometry/cot":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/cot.js","./function/trigonometry/cosh":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/cosh.js","./function/trigonometry/cos":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/cos.js","./function/trigonometry/atan2":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/atan2.js","./function/trigonometry/atanh":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/atanh.js","./function/trigonometry/atan":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/atan.js","./function/trigonometry/asinh":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asinh.js","./function/trigonometry/asin":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asin.js","./function/trigonometry/asech":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asech.js","./function/trigonometry/asec":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/asec.js","./function/trigonometry/acsch":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acsch.js","./function/trigonometry/acsc":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acsc.js","./function/trigonometry/acoth":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acoth.js","./function/trigonometry/acot":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acot.js","./function/trigonometry/acosh":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acosh.js","./function/trigonometry/acos":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/acos.js","./function/statistics/sum":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/sum.js","./function/statistics/std":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/std.js","./function/statistics/quantileSeq":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/quantileSeq.js","./function/statistics/prod":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/prod.js","./function/statistics/mode":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/mode.js","./function/statistics/min":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/min.js","./function/statistics/median":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/median.js","./function/statistics/mean":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/mean.js","./function/statistics/max":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/max.js","./function/statistics/mad":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/mad.js","./function/special/erf":"../node_modules/mathjs/src/expression/embeddedDocs/function/special/erf.js","./function/set/setUnion":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setUnion.js","./function/set/setSymDifference":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setSymDifference.js","./function/set/setSize":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setSize.js","./function/set/setPowerset":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setPowerset.js","./function/set/setMultiplicity":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setMultiplicity.js","./function/set/setIsSubset":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setIsSubset.js","./function/set/setIntersect":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setIntersect.js","./function/set/setDistinct":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setDistinct.js","./function/set/setDifference":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setDifference.js","./function/set/setCartesian":"../node_modules/mathjs/src/expression/embeddedDocs/function/set/setCartesian.js","./function/relational/unequal":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/unequal.js","./function/relational/smallerEq":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/smallerEq.js","./function/relational/smaller":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/smaller.js","./function/relational/largerEq":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/largerEq.js","./function/relational/larger":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/larger.js","./function/relational/equalText":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/equalText.js","./function/relational/equal":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/equal.js","./function/relational/deepEqual":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/deepEqual.js","./function/relational/compareText":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/compareText.js","./function/relational/compareNatural":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/compareNatural.js","./function/relational/compare":"../node_modules/mathjs/src/expression/embeddedDocs/function/relational/compare.js","./function/probability/randomInt":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/randomInt.js","./function/probability/random":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/random.js","./function/probability/pickRandom":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/pickRandom.js","./function/probability/permutations":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/permutations.js","./function/probability/multinomial":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/multinomial.js","./function/probability/kldivergence":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/kldivergence.js","./function/probability/gamma":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/gamma.js","./function/probability/factorial":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/factorial.js","./function/probability/combinations":"../node_modules/mathjs/src/expression/embeddedDocs/function/probability/combinations.js","./function/matrix/zeros":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/zeros.js","./function/matrix/transpose":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/transpose.js","./function/matrix/trace":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/trace.js","./function/matrix/subset":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/subset.js","./function/matrix/squeeze":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/squeeze.js","./function/matrix/sort":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/sort.js","./function/matrix/size":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/size.js","./function/matrix/reshape":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/reshape.js","./function/matrix/resize":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/resize.js","./function/matrix/range":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/range.js","./function/matrix/partitionSelect":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/partitionSelect.js","./function/matrix/ones":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/ones.js","./function/matrix/map":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/map.js","./function/matrix/kron":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/kron.js","./function/matrix/inv":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/inv.js","./function/matrix/forEach":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/forEach.js","./function/matrix/flatten":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/flatten.js","./function/matrix/filter":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/filter.js","./function/matrix/identity":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/identity.js","./function/matrix/getMatrixDataType":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/getMatrixDataType.js","./function/matrix/dot":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/dot.js","./function/matrix/diag":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/diag.js","./function/matrix/det":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/det.js","./function/matrix/ctranspose":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/ctranspose.js","./function/matrix/cross":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/cross.js","./function/matrix/concat":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/concat.js","./function/logical/xor":"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/xor.js","./function/logical/or":"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/or.js","./function/logical/not":"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/not.js","./function/logical/and":"../node_modules/mathjs/src/expression/embeddedDocs/function/logical/and.js","./function/geometry/intersect":"../node_modules/mathjs/src/expression/embeddedDocs/function/geometry/intersect.js","./function/geometry/distance":"../node_modules/mathjs/src/expression/embeddedDocs/function/geometry/distance.js","./function/expression/help":"../node_modules/mathjs/src/expression/embeddedDocs/function/expression/help.js","./function/expression/evaluate":"../node_modules/mathjs/src/expression/embeddedDocs/function/expression/evaluate.js","./function/complex/im":"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/im.js","./function/complex/re":"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/re.js","./function/complex/conj":"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/conj.js","./function/complex/arg":"../node_modules/mathjs/src/expression/embeddedDocs/function/complex/arg.js","./core/typed":"../node_modules/mathjs/src/expression/embeddedDocs/core/typed.js","./core/import":"../node_modules/mathjs/src/expression/embeddedDocs/core/import.js","./core/config":"../node_modules/mathjs/src/expression/embeddedDocs/core/config.js","./function/combinatorics/stirlingS2":"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/stirlingS2.js","./function/combinatorics/composition":"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/composition.js","./function/combinatorics/catalan":"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/catalan.js","./function/combinatorics/bellNumbers":"../node_modules/mathjs/src/expression/embeddedDocs/function/combinatorics/bellNumbers.js","./function/bitwise/rightLogShift":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/rightLogShift.js","./function/bitwise/rightArithShift":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/rightArithShift.js","./function/bitwise/leftShift":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/leftShift.js","./function/bitwise/bitXor":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitXor.js","./function/bitwise/bitOr":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitOr.js","./function/bitwise/bitNot":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitNot.js","./function/bitwise/bitAnd":"../node_modules/mathjs/src/expression/embeddedDocs/function/bitwise/bitAnd.js","./function/arithmetic/xgcd":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/xgcd.js","./function/arithmetic/unaryPlus":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/unaryPlus.js","./function/arithmetic/unaryMinus":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/unaryMinus.js","./function/arithmetic/square":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/square.js","./function/arithmetic/sqrtm":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/sqrtm.js","./function/arithmetic/sqrt":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/sqrt.js","./function/arithmetic/sign":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/sign.js","./function/arithmetic/round":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/round.js","./function/arithmetic/pow":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/pow.js","./function/arithmetic/nthRoots":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/nthRoots.js","./function/arithmetic/nthRoot":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/nthRoot.js","./function/arithmetic/norm":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/norm.js","./function/arithmetic/multiply":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/multiply.js","./function/arithmetic/mod":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/mod.js","./function/arithmetic/log10":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log10.js","./function/arithmetic/log1p":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log1p.js","./function/arithmetic/log2":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log2.js","./function/arithmetic/log":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/log.js","./function/arithmetic/lcm":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/lcm.js","./function/arithmetic/hypot":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/hypot.js","./function/arithmetic/gcd":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/gcd.js","./function/arithmetic/floor":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/floor.js","./function/arithmetic/fix":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/fix.js","./function/arithmetic/expm1":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/expm1.js","./function/arithmetic/expm":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/expm.js","./function/arithmetic/exp":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/exp.js","./function/arithmetic/dotMultiply":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/dotMultiply.js","./function/arithmetic/dotDivide":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/dotDivide.js","./function/arithmetic/divide":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/divide.js","./function/arithmetic/cube":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/cube.js","./function/arithmetic/ceil":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/ceil.js","./function/arithmetic/cbrt":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/cbrt.js","./function/arithmetic/add":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/add.js","./function/arithmetic/abs":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/abs.js","./function/algebra/qr":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/qr.js","./function/algebra/usolve":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/usolve.js","./function/algebra/slu":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/slu.js","./function/algebra/rationalize":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/rationalize.js","./function/algebra/simplify":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/simplify.js","./function/algebra/lup":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/lup.js","./function/algebra/lsolve":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/lsolve.js","./function/algebra/derivative":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/derivative.js","./constants/version":"../node_modules/mathjs/src/expression/embeddedDocs/constants/version.js","./constants/true":"../node_modules/mathjs/src/expression/embeddedDocs/constants/true.js","./constants/tau":"../node_modules/mathjs/src/expression/embeddedDocs/constants/tau.js","./constants/SQRT2":"../node_modules/mathjs/src/expression/embeddedDocs/constants/SQRT2.js","./constants/SQRT1_2":"../node_modules/mathjs/src/expression/embeddedDocs/constants/SQRT1_2.js","./constants/phi":"../node_modules/mathjs/src/expression/embeddedDocs/constants/phi.js","./constants/pi":"../node_modules/mathjs/src/expression/embeddedDocs/constants/pi.js","./constants/null":"../node_modules/mathjs/src/expression/embeddedDocs/constants/null.js","./constants/NaN":"../node_modules/mathjs/src/expression/embeddedDocs/constants/NaN.js","./constants/LOG10E":"../node_modules/mathjs/src/expression/embeddedDocs/constants/LOG10E.js","./constants/LOG2E":"../node_modules/mathjs/src/expression/embeddedDocs/constants/LOG2E.js","./constants/LN10":"../node_modules/mathjs/src/expression/embeddedDocs/constants/LN10.js","./constants/LN2":"../node_modules/mathjs/src/expression/embeddedDocs/constants/LN2.js","./constants/Infinity":"../node_modules/mathjs/src/expression/embeddedDocs/constants/Infinity.js","./constants/i":"../node_modules/mathjs/src/expression/embeddedDocs/constants/i.js","./constants/false":"../node_modules/mathjs/src/expression/embeddedDocs/constants/false.js","./constants/e":"../node_modules/mathjs/src/expression/embeddedDocs/constants/e.js","./construction/unit":"../node_modules/mathjs/src/expression/embeddedDocs/construction/unit.js","./construction/string":"../node_modules/mathjs/src/expression/embeddedDocs/construction/string.js","./construction/splitUnit":"../node_modules/mathjs/src/expression/embeddedDocs/construction/splitUnit.js","./construction/sparse":"../node_modules/mathjs/src/expression/embeddedDocs/construction/sparse.js","./construction/number":"../node_modules/mathjs/src/expression/embeddedDocs/construction/number.js","./construction/matrix":"../node_modules/mathjs/src/expression/embeddedDocs/construction/matrix.js","./construction":"../node_modules/mathjs/src/expression/embeddedDocs/construction/index.js","./construction/fraction":"../node_modules/mathjs/src/expression/embeddedDocs/construction/fraction.js","./construction/createUnit":"../node_modules/mathjs/src/expression/embeddedDocs/construction/createUnit.js","./construction/complex":"../node_modules/mathjs/src/expression/embeddedDocs/construction/complex.js","./construction/boolean":"../node_modules/mathjs/src/expression/embeddedDocs/construction/boolean.js","./function/arithmetic/dotPow":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/dotPow.js","./function/algebra/lusolve":"../node_modules/mathjs/src/expression/embeddedDocs/function/algebra/lusolve.js","./function/arithmetic/subtract":"../node_modules/mathjs/src/expression/embeddedDocs/function/arithmetic/subtract.js","./function/statistics/variance":"../node_modules/mathjs/src/expression/embeddedDocs/function/statistics/variance.js","./function/trigonometry/sin":"../node_modules/mathjs/src/expression/embeddedDocs/function/trigonometry/sin.js","./function/utils/numeric":"../node_modules/mathjs/src/expression/embeddedDocs/function/utils/numeric.js","./function/matrix/column":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/column.js","./function/matrix/row":"../node_modules/mathjs/src/expression/embeddedDocs/function/matrix/row.js"}],"../node_modules/mathjs/src/expression/function/help.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHelp = void 0;

var _factory = require("../../utils/factory");

var _customs = require("../../utils/customs");

var _embeddedDocs = require("../embeddedDocs/embeddedDocs");

const name = 'help';
const dependencies = ['typed', 'mathWithTransform', 'Help'];
const createHelp =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  mathWithTransform,
  Help
}) => {
  /**
   * Retrieve help on a function or data type.
   * Help files are retrieved from the embedded documentation in math.docs.
   *
   * Syntax:
   *
   *    math.help(search)
   *
   * Examples:
   *
   *    console.log(math.help('sin').toString())
   *    console.log(math.help(math.add).toString())
   *    console.log(math.help(math.add).toJSON())
   *
   * @param {Function | string | Object} search   A function or function name
   *                                              for which to get help
   * @return {Help} A help object
   */
  return typed(name, {
    'any': function (search) {
      let prop;
      let searchName = search;

      if (typeof search !== 'string') {
        for (prop in mathWithTransform) {
          // search in functions and constants
          if (mathWithTransform.hasOwnProperty(prop) && search === mathWithTransform[prop]) {
            searchName = prop;
            break;
          }
        }
        /* TODO: implement help for data types
         if (!text) {
         // search data type
         for (prop in math.type) {
         if (math.hasOwnProperty(prop)) {
         if (search === math.type[prop]) {
         text = prop
         break
         }
         }
         }
         }
         */

      }

      const doc = (0, _customs.getSafeProperty)(_embeddedDocs.embeddedDocs, searchName);

      if (!doc) {
        const searchText = typeof searchName === 'function' ? searchName.name : searchName;
        throw new Error('No documentation found on "' + searchText + '"');
      }

      return new Help(doc);
    }
  });
});
exports.createHelp = createHelp;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/customs":"../node_modules/mathjs/src/utils/customs.js","../embeddedDocs/embeddedDocs":"../node_modules/mathjs/src/expression/embeddedDocs/embeddedDocs.js"}],"../node_modules/mathjs/src/type/chain/function/chain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChain = void 0;

var _factory = require("../../../utils/factory");

const name = 'chain';
const dependencies = ['typed', 'Chain'];
const createChain =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Chain
}) => {
  /**
   * Wrap any value in a chain, allowing to perform chained operations on
   * the value.
   *
   * All methods available in the math.js library can be called upon the chain,
   * and then will be evaluated with the value itself as first argument.
   * The chain can be closed by executing `chain.done()`, which returns
   * the final value.
   *
   * The chain has a number of special functions:
   *
   * - `done()`     Finalize the chain and return the chain's value.
   * - `valueOf()`  The same as `done()`
   * - `toString()` Executes `math.format()` onto the chain's value, returning
   *                a string representation of the value.
   *
   * Syntax:
   *
   *    math.chain(value)
   *
   * Examples:
   *
   *     math.chain(3)
   *         .add(4)
   *         .subtract(2)
   *         .done()     // 5
   *
   *     math.chain( [[1, 2], [3, 4]] )
   *         .subset(math.index(0, 0), 8)
   *         .multiply(3)
   *         .done()     // [[24, 6], [9, 12]]
   *
   * @param {*} [value]   A value of any type on which to start a chained operation.
   * @return {math.Chain} The created chain
   */
  return typed(name, {
    '': function () {
      return new Chain();
    },
    'any': function (value) {
      return new Chain(value);
    }
  });
});
exports.createChain = createChain;
},{"../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/det.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDet = void 0;

var _is = require("../../utils/is");

var _object = require("../../utils/object");

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

const name = 'det';
const dependencies = ['typed', 'matrix', 'subtract', 'multiply', 'unaryMinus', 'lup'];
const createDet =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  subtract,
  multiply,
  unaryMinus,
  lup
}) => {
  /**
   * Calculate the determinant of a matrix.
   *
   * Syntax:
   *
   *    math.det(x)
   *
   * Examples:
   *
   *    math.det([[1, 2], [3, 4]]) // returns -2
   *
   *    const A = [
   *      [-2, 2, 3],
   *      [-1, 1, 3],
   *      [2, 0, -1]
   *    ]
   *    math.det(A) // returns 6
   *
   * See also:
   *
   *    inv
   *
   * @param {Array | Matrix} x  A matrix
   * @return {number} The determinant of `x`
   */
  return typed(name, {
    'any': function (x) {
      return (0, _object.clone)(x);
    },
    'Array | Matrix': function det(x) {
      let size;

      if ((0, _is.isMatrix)(x)) {
        size = x.size();
      } else if (Array.isArray(x)) {
        x = matrix(x);
        size = x.size();
      } else {
        // a scalar
        size = [];
      }

      switch (size.length) {
        case 0:
          // scalar
          return (0, _object.clone)(x);

        case 1:
          // vector
          if (size[0] === 1) {
            return (0, _object.clone)(x.valueOf()[0]);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        case 2:
          // two dimensional array
          const rows = size[0];
          const cols = size[1];

          if (rows === cols) {
            return _det(x.clone().valueOf(), rows, cols);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    }
  });
  /**
   * Calculate the determinant of a matrix
   * @param {Array[]} matrix  A square, two dimensional matrix
   * @param {number} rows     Number of rows of the matrix (zero-based)
   * @param {number} cols     Number of columns of the matrix (zero-based)
   * @returns {number} det
   * @private
   */

  function _det(matrix, rows, cols) {
    if (rows === 1) {
      // this is a 1 x 1 matrix
      return (0, _object.clone)(matrix[0][0]);
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
      return subtract(multiply(matrix[0][0], matrix[1][1]), multiply(matrix[1][0], matrix[0][1]));
    } else {
      // Compute the LU decomposition
      const decomp = lup(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

      let det = decomp.U[0][0];

      for (let i = 1; i < rows; i++) {
        det = multiply(det, decomp.U[i][i]);
      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
      // This can be determined by counting the cycles. This is roughly a linear time algorithm.


      let evenCycles = 0;
      let i = 0;
      const visited = [];

      while (true) {
        while (visited[i]) {
          i++;
        }

        if (i >= rows) break;
        let j = i;
        let cycleLen = 0;

        while (!visited[decomp.p[j]]) {
          visited[decomp.p[j]] = true;
          j = decomp.p[j];
          cycleLen++;
        }

        if (cycleLen % 2 === 0) {
          evenCycles++;
        }
      }

      return evenCycles % 2 === 0 ? det : unaryMinus(det);
    }
  }
});
exports.createDet = createDet;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/inv.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInv = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _string = require("../../utils/string");

const name = 'inv';
const dependencies = ['typed', 'matrix', 'divideScalar', 'addScalar', 'multiply', 'unaryMinus', 'det', 'identity', 'abs'];
const createInv =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  divideScalar,
  addScalar,
  multiply,
  unaryMinus,
  det,
  identity,
  abs
}) => {
  /**
   * Calculate the inverse of a square matrix.
   *
   * Syntax:
   *
   *     math.inv(x)
   *
   * Examples:
   *
   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
   *     math.inv(4)                 // returns 0.25
   *     1 / 4                       // returns 0.25
   *
   * See also:
   *
   *     det, transpose
   *
   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
   * @return {number | Complex | Array | Matrix} The inverse of `x`.
   */
  return typed(name, {
    'Array | Matrix': function (x) {
      const size = (0, _is.isMatrix)(x) ? x.size() : (0, _array.arraySize)(x);

      switch (size.length) {
        case 1:
          // vector
          if (size[0] === 1) {
            if ((0, _is.isMatrix)(x)) {
              return matrix([divideScalar(1, x.valueOf()[0])]);
            } else {
              return [divideScalar(1, x[0])];
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        case 2:
          // two dimensional array
          const rows = size[0];
          const cols = size[1];

          if (rows === cols) {
            if ((0, _is.isMatrix)(x)) {
              return matrix(_inv(x.valueOf(), rows, cols), x.storage());
            } else {
              // return an Array
              return _inv(x, rows, cols);
            }
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        default:
          // multi dimensional array
          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + (0, _string.format)(size) + ')');
      }
    },
    'any': function (x) {
      // scalar
      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
    }
  });
  /**
   * Calculate the inverse of a square matrix
   * @param {Array[]} mat     A square matrix
   * @param {number} rows     Number of rows
   * @param {number} cols     Number of columns, must equal rows
   * @return {Array[]} inv    Inverse matrix
   * @private
   */

  function _inv(mat, rows, cols) {
    let r, s, f, value, temp;

    if (rows === 1) {
      // this is a 1 x 1 matrix
      value = mat[0][0];

      if (value === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(1, value)]];
    } else if (rows === 2) {
      // this is a 2 x 2 matrix
      const d = det(mat);

      if (d === 0) {
        throw Error('Cannot calculate inverse, determinant is zero');
      }

      return [[divideScalar(mat[1][1], d), divideScalar(unaryMinus(mat[0][1]), d)], [divideScalar(unaryMinus(mat[1][0]), d), divideScalar(mat[0][0], d)]];
    } else {
      // this is a matrix of 3 x 3 or larger
      // calculate inverse using gauss-jordan elimination
      //      https://en.wikipedia.org/wiki/Gaussian_elimination
      //      http://mathworld.wolfram.com/MatrixInverse.html
      //      http://math.uww.edu/~mcfarlat/inverse.htm
      // make a copy of the matrix (only the arrays, not of the elements)
      const A = mat.concat();

      for (r = 0; r < rows; r++) {
        A[r] = A[r].concat();
      } // create an identity matrix which in the end will contain the
      // matrix inverse


      const B = identity(rows).valueOf(); // loop over all columns, and perform row reductions

      for (let c = 0; c < cols; c++) {
        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
        let ABig = abs(A[c][c]);
        let rBig = c;
        r = c + 1;

        while (r < rows) {
          if (abs(A[r][c]) > ABig) {
            ABig = abs(A[r][c]);
            rBig = r;
          }

          r++;
        }

        if (ABig === 0) {
          throw Error('Cannot calculate inverse, determinant is zero');
        }

        r = rBig;

        if (r !== c) {
          temp = A[c];
          A[c] = A[r];
          A[r] = temp;
          temp = B[c];
          B[c] = B[r];
          B[r] = temp;
        } // eliminate non-zero values on the other rows at column c


        const Ac = A[c];
        const Bc = B[c];

        for (r = 0; r < rows; r++) {
          const Ar = A[r];
          const Br = B[r];

          if (r !== c) {
            // eliminate value at column c and row r
            if (Ar[c] !== 0) {
              f = divideScalar(unaryMinus(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
              // at column c

              for (s = c; s < cols; s++) {
                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
              }

              for (s = 0; s < cols; s++) {
                Br[s] = addScalar(Br[s], multiply(f, Bc[s]));
              }
            }
          } else {
            // normalize value at Acc to 1,
            // divide each value on row r with the value at Acc
            f = Ac[c];

            for (s = c; s < cols; s++) {
              Ar[s] = divideScalar(Ar[s], f);
            }

            for (s = 0; s < cols; s++) {
              Br[s] = divideScalar(Br[s], f);
            }
          }
        }
      }

      return B;
    }
  }
});
exports.createInv = createInv;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js"}],"../node_modules/mathjs/src/function/matrix/expm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExpm = void 0;

var _is = require("../../utils/is");

var _string = require("../../utils/string");

var _factory = require("../../utils/factory");

const name = 'expm';
const dependencies = ['typed', 'abs', 'add', 'identity', 'inv', 'multiply'];
const createExpm =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  abs,
  add,
  identity,
  inv,
  multiply
}) => {
  /**
   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
   * Not to be confused with exp(a), which performs element-wise
   * exponentiation.
   *
   * The exponential is calculated using the Padé approximant with scaling and
   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
   * Matrix," by Moler and Van Loan.
   *
   * Syntax:
   *
   *     math.expm(x)
   *
   * Examples:
   *
   *     const A = [[0,2],[0,0]]
   *     math.expm(A)        // returns [[1,2],[0,1]]
   *
   * See also:
   *
   *     exp
   *
   * @param {Matrix} x  A square Matrix
   * @return {Matrix}   The exponential of x
   */
  return typed(name, {
    'Matrix': function (A) {
      // Check matrix size
      const size = A.size();

      if (size.length !== 2 || size[0] !== size[1]) {
        throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
      }

      const n = size[0]; // Desired accuracy of the approximant (The actual accuracy
      // will be affected by round-off error)

      const eps = 1e-15; // The Padé approximant is not so accurate when the values of A
      // are "large", so scale A by powers of two. Then compute the
      // exponential, and square the result repeatedly according to
      // the identity e^A = (e^(A/m))^m
      // Compute infinity-norm of A, ||A||, to see how "big" it is

      const infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
      // Padé approximant to reach the desired accuracy

      const params = findParams(infNorm, eps);
      const q = params.q;
      const j = params.j; // The Pade approximation to e^A is:
      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
      // where
      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
      // Scale A by 1 / 2^j

      const Apos = multiply(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

      let N = identity(n);
      let D = identity(n); // Initialization (i=0)

      let factor = 1; // Initialization (i=1)

      let AposToI = Apos; // Cloning not necessary

      let alternate = -1;

      for (let i = 1; i <= q; i++) {
        if (i > 1) {
          AposToI = multiply(AposToI, Apos);
          alternate = -alternate;
        }

        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
        N = add(N, multiply(factor, AposToI));
        D = add(D, multiply(factor * alternate, AposToI));
      }

      let R = multiply(inv(D), N); // Square j times

      for (let i = 0; i < j; i++) {
        R = multiply(R, R);
      }

      return (0, _is.isSparseMatrix)(A) ? A.createSparseMatrix(R) : R;
    }
  });

  function infinityNorm(A) {
    const n = A.size()[0];
    let infNorm = 0;

    for (let i = 0; i < n; i++) {
      let rowSum = 0;

      for (let j = 0; j < n; j++) {
        rowSum += abs(A.get([i, j]));
      }

      infNorm = Math.max(rowSum, infNorm);
    }

    return infNorm;
  }
  /**
   * Find the best parameters for the Pade approximant given
   * the matrix norm and desired accuracy. Returns the first acceptable
   * combination in order of increasing computational load.
   */


  function findParams(infNorm, eps) {
    const maxSearchSize = 30;

    for (let k = 0; k < maxSearchSize; k++) {
      for (let q = 0; q <= k; q++) {
        const j = k - q;

        if (errorEstimate(infNorm, q, j) < eps) {
          return {
            q: q,
            j: j
          };
        }
      }
    }

    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
  }
  /**
   * Returns the estimated error of the Pade approximant for the given
   * parameters.
   */


  function errorEstimate(infNorm, q, j) {
    let qfac = 1;

    for (let i = 2; i <= q; i++) {
      qfac *= i;
    }

    let twoqfac = qfac;

    for (let i = q + 1; i <= 2 * q; i++) {
      twoqfac *= i;
    }

    const twoqp1fac = twoqfac * (2 * q + 1);
    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
  }
});
exports.createExpm = createExpm;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/matrix/sqrtm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSqrtm = void 0;

var _is = require("../../utils/is");

var _string = require("../../utils/string");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'sqrtm';
const dependencies = ['typed', 'abs', 'add', 'multiply', 'sqrt', 'subtract', 'inv', 'size', 'max', 'identity'];
const createSqrtm =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  abs,
  add,
  multiply,
  sqrt,
  subtract,
  inv,
  size,
  max,
  identity
}) => {
  /**
   * Calculate the principal square root of a square matrix.
   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
   *
   * Syntax:
   *
   *     X = math.sqrtm(A)
   *
   * Examples:
   *
   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
   *
   * See also:
   *
   *     sqrt, pow
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   */
  const sqrtm = typed(name, {
    'Array | Matrix': function (A) {
      const size = (0, _is.isMatrix)(A) ? A.size() : (0, _array.arraySize)(A);

      switch (size.length) {
        case 1:
          // Single element Array | Matrix
          if (size[0] === 1) {
            return sqrt(A);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

        case 2:
          // Two-dimensional Array | Matrix
          const rows = size[0];
          const cols = size[1];

          if (rows === cols) {
            return _denmanBeavers(A);
          } else {
            throw new RangeError('Matrix must be square ' + '(size: ' + (0, _string.format)(size) + ')');
          }

      }
    }
  });
  const _maxIterations = 1e3;
  const _tolerance = 1e-6;
  /**
   * Calculate the principal square root matrix using the Denman–Beavers iterative method
   *
   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_Denman–Beavers_iteration
   *
   * @param  {Array | Matrix} A   The square matrix `A`
   * @return {Array | Matrix}     The principal square root of matrix `A`
   * @private
   */

  function _denmanBeavers(A) {
    let error;
    let iterations = 0;
    let Y = A;
    let Z = identity(size(A));

    do {
      const Yk = Y;
      Y = multiply(0.5, add(Yk, inv(Z)));
      Z = multiply(0.5, add(Z, inv(Yk)));
      error = max(abs(subtract(Y, Yk)));

      if (error > _tolerance && ++iterations > _maxIterations) {
        throw new Error('computing square root of matrix: iterative method could not converge');
      }
    } while (error > _tolerance);

    return Y;
  }

  return sqrtm;
});
exports.createSqrtm = createSqrtm;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/string":"../node_modules/mathjs/src/utils/string.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/arithmetic/divide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDivide = void 0;

var _factory = require("../../utils/factory");

var _object = require("../../utils/object");

var _algorithm = require("../../type/matrix/utils/algorithm11");

var _algorithm2 = require("../../type/matrix/utils/algorithm14");

const name = 'divide';
const dependencies = ['typed', 'matrix', 'multiply', 'equalScalar', 'divideScalar', 'inv'];
const createDivide =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  multiply,
  equalScalar,
  divideScalar,
  inv
}) => {
  const algorithm11 = (0, _algorithm.createAlgorithm11)({
    typed,
    equalScalar
  });
  const algorithm14 = (0, _algorithm2.createAlgorithm14)({
    typed
  });
  /**
   * Divide two values, `x / y`.
   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
   *
   * Syntax:
   *
   *    math.divide(x, y)
   *
   * Examples:
   *
   *    math.divide(2, 3)            // returns number 0.6666666666666666
   *
   *    const a = math.complex(5, 14)
   *    const b = math.complex(4, 1)
   *    math.divide(a, b)            // returns Complex 2 + 3i
   *
   *    const c = [[7, -6], [13, -4]]
   *    const d = [[1, 2], [4, 3]]
   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
   *
   *    const e = math.unit('18 km')
   *    math.divide(e, 4.5)          // returns Unit 4 km
   *
   * See also:
   *
   *    multiply
   *
   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
   */

  return typed('divide', (0, _object.extend)({
    // we extend the signatures of divideScalar with signatures dealing with matrices
    'Array | Matrix, Array | Matrix': function (x, y) {
      // TODO: implement matrix right division using pseudo inverse
      // https://www.mathworks.nl/help/matlab/ref/mrdivide.html
      // https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
      // https://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
      return multiply(x, inv(y));
    },
    'DenseMatrix, any': function (x, y) {
      return algorithm14(x, y, divideScalar, false);
    },
    'SparseMatrix, any': function (x, y) {
      return algorithm11(x, y, divideScalar, false);
    },
    'Array, any': function (x, y) {
      // use matrix implementation
      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
    },
    'any, Array | Matrix': function (x, y) {
      return multiply(x, inv(y));
    }
  }, divideScalar.signatures));
});
exports.createDivide = createDivide;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../type/matrix/utils/algorithm11":"../node_modules/mathjs/src/type/matrix/utils/algorithm11.js","../../type/matrix/utils/algorithm14":"../node_modules/mathjs/src/type/matrix/utils/algorithm14.js"}],"../node_modules/mathjs/src/function/geometry/distance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDistance = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

const name = 'distance';
const dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'unaryMinus', 'sqrt', 'abs'];
const createDistance =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  addScalar,
  subtract,
  multiplyScalar,
  divideScalar,
  unaryMinus,
  sqrt,
  abs
}) => {
  /**
    * Calculates:
    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
    *    Distance between point and a line in 2 and 3 dimensional spaces.
    *    Pairwise distance between a set of 2D or 3D points
    * NOTE:
    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
    *
    * Syntax:
    *    math.distance([x1, y1], [x2, y2])
    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
    *    math.distance([x1, y1, z1], [x2, y2, z2])
    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
    *    math.distance([[A], [B], [C]...])
    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
    *
    * Examples:
    *    math.distance([0,0], [4,4])                     // Returns 5.6569
    *    math.distance(
    *     {pointOneX: 0, pointOneY: 0},
    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
    *    math.distance(
    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
    *    math.distance(
    *     {pointX: 1, pointY: 4},
    *     {lineOnePtX: 6, lineOnePtY: 3},
    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
    *    math.distance(
    *     {pointX: 2, pointY: 3, pointZ: 1},
    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
    *
    * @param {Array | Matrix | Object} x    Co-ordinates of first point
    * @param {Array | Matrix | Object} y    Co-ordinates of second point
    * @return {Number | BigNumber} Returns the distance from two/three points
  */
  return typed(name, {
    'Array, Array, Array': function (x, y, z) {
      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
      if (x.length === 2 && y.length === 2 && z.length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        const m = divideScalar(subtract(z[1], z[0]), subtract(y[1], y[0]));
        const xCoeff = multiplyScalar(multiplyScalar(m, m), y[0]);
        const yCoeff = unaryMinus(multiplyScalar(m, y[0]));
        const constant = x[1];
        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object, Object': function (x, y, z) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
        }

        if (!_2d(z)) {
          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
        }

        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') && y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {
          const m = divideScalar(subtract(z.lineTwoPtY, z.lineTwoPtX), subtract(y.lineOnePtY, y.lineOnePtX));
          const xCoeff = multiplyScalar(multiplyScalar(m, m), y.lineOnePtX);
          const yCoeff = unaryMinus(multiplyScalar(m, y.lineOnePtX));
          const constant = x.pointX;
          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array, Array': function (x, y) {
      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
      if (x.length === 2 && y.length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
      } else if (x.length === 3 && y.length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
        }

        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
      } else if (x.length === 2 && y.length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        return _distance2d(x[0], x[1], y[0], y[1]);
      } else if (x.length === 3 && y.length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Object, Object': function (x, y) {
      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
        if (!_2d(x)) {
          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
        }

        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') && y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('constant')) {
          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
        // Point to Line 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
        }

        if (!_parametricLine(y)) {
          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
        }

        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') && y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') && y.hasOwnProperty('b') && y.hasOwnProperty('c')) {
          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
        // Point to Point 2D
        if (!_2d(x)) {
          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
        }

        if (!_2d(y)) {
          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
        }

        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {
          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
        // Point to Point 3D
        if (!_3d(x)) {
          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
        }

        if (!_3d(y)) {
          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
        }

        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {
          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
        } else {
          throw new TypeError('Key names do not match');
        }
      } else {
        throw new TypeError('Invalid Arguments: Try again');
      }
    },
    'Array': function (arr) {
      if (!_pairwise(arr)) {
        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
      }

      return _distancePairwise(arr);
    }
  });

  function _isNumber(a) {
    // distance supports numbers and bignumbers
    return typeof a === 'number' || (0, _is.isBigNumber)(a);
  }

  function _2d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]);
  }

  function _3d(a) {
    // checks if the number of arguments are correct in count and are valid (should be numbers)
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
  }

  function _parametricLine(a) {
    if (a.constructor !== Array) {
      a = _objectToArray(a);
    }

    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
  }

  function _objectToArray(o) {
    const keys = Object.keys(o);
    const a = [];

    for (let i = 0; i < keys.length; i++) {
      a.push(o[keys[i]]);
    }

    return a;
  }

  function _pairwise(a) {
    // checks for valid arguments passed to _distancePairwise(Array)
    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {
        return false;
      }
    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {
        return false;
      }
    } else {
      return false;
    }

    return true;
  }

  function _distancePointLine2D(x, y, a, b, c) {
    const num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));
    const den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));
    return divideScalar(num, den);
  }

  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
    let num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];
    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));
    const den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));
    return divideScalar(num, den);
  }

  function _distance2d(x1, y1, x2, y2) {
    const yDiff = subtract(y2, y1);
    const xDiff = subtract(x2, x1);
    const radicant = addScalar(multiplyScalar(yDiff, yDiff), multiplyScalar(xDiff, xDiff));
    return sqrt(radicant);
  }

  function _distance3d(x1, y1, z1, x2, y2, z2) {
    const zDiff = subtract(z2, z1);
    const yDiff = subtract(y2, y1);
    const xDiff = subtract(x2, x1);
    const radicant = addScalar(addScalar(multiplyScalar(zDiff, zDiff), multiplyScalar(yDiff, yDiff)), multiplyScalar(xDiff, xDiff));
    return sqrt(radicant);
  }

  function _distancePairwise(a) {
    const result = [];

    for (let i = 0; i < a.length - 1; i++) {
      for (let j = i + 1; j < a.length; j++) {
        if (a[0].length === 2) {
          result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
        } else if (a[0].length === 3) {
          result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
        }
      }
    }

    return result;
  }
});
exports.createDistance = createDistance;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/geometry/intersect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIntersect = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

const name = 'intersect';
const dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];
const createIntersect =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  abs,
  add,
  addScalar,
  matrix,
  multiply,
  multiplyScalar,
  divideScalar,
  subtract,
  smaller,
  equalScalar
}) => {
  /**
   * Calculates the point of intersection of two lines in two or three dimensions
   * and of a line and a plane in three dimensions. The inputs are in the form of
   * arrays or 1 dimensional matrices. The line intersection functions return null
   * if the lines do not meet.
   *
   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
   *
   * Syntax:
   *
   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
   *
   * Examples:
   *
   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
   *
   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
   *                              OR Co-efficients of the plane's equation
   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
   *                              OR null if the calculation is for line and plane
   * @return {Array}              Returns the point of intersection of lines/lines-planes
   */
  const intersect = typed('intersect', {
    'Array, Array, Array': function (x, y, plane) {
      if (!_3d(x)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
      }

      if (!_3d(y)) {
        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
      }

      if (!_4d(plane)) {
        throw new TypeError('Array with 4 numbers expected as third argument');
      }

      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
    },
    'Array, Array, Array, Array': function (w, x, y, z) {
      if (w.length === 2) {
        if (!_2d(w)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
        }

        if (!_2d(x)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
        }

        if (!_2d(y)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
        }

        if (!_2d(z)) {
          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
        }

        return _intersect2d(w, x, y, z);
      } else if (w.length === 3) {
        if (!_3d(w)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
        }

        if (!_3d(x)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
        }

        if (!_3d(y)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
        }

        if (!_3d(z)) {
          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
        }

        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
      } else {
        throw new TypeError('Arrays with two or thee dimensional points expected');
      }
    },
    'Matrix, Matrix, Matrix': function (x, y, plane) {
      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
    },
    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {
      // TODO: output matrix type should match input matrix type
      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
    }
  });

  function _isNumeric(a) {
    // intersect supports numbers and bignumbers
    return typeof a === 'number' || (0, _is.isBigNumber)(a);
  }

  function _2d(x) {
    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);
  }

  function _3d(x) {
    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);
  }

  function _4d(x) {
    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);
  }

  function _intersect2d(p1a, p1b, p2a, p2b) {
    const o1 = p1a;
    const o2 = p2a;
    const d1 = subtract(o1, p1b);
    const d2 = subtract(o2, p2b);
    const det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));

    if (smaller(abs(det), config.epsilon)) {
      return null;
    }

    const d20o11 = multiplyScalar(d2[0], o1[1]);
    const d21o10 = multiplyScalar(d2[1], o1[0]);
    const d20o21 = multiplyScalar(d2[0], o2[1]);
    const d21o20 = multiplyScalar(d2[1], o2[0]);
    const t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);
    return add(multiply(d1, t), o1);
  }

  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
    const add1 = multiplyScalar(subtract(a, b), subtract(c, d));
    const add2 = multiplyScalar(subtract(e, f), subtract(g, h));
    const add3 = multiplyScalar(subtract(i, j), subtract(k, l));
    return addScalar(addScalar(add1, add2), add3);
  }

  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
    const d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

    const d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

    const d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

    const d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

    const d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

    const ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));
    const tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);
    const pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));
    const pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));
    const paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));
    const pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));
    const pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));
    const pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));

    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {
      return [pax, pay, paz];
    } else {
      return null;
    }
  }

  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
    const x1x = multiplyScalar(x1, x);
    const x2x = multiplyScalar(x2, x);
    const y1y = multiplyScalar(y1, y);
    const y2y = multiplyScalar(y2, y);
    const z1z = multiplyScalar(z1, z);
    const z2z = multiplyScalar(z2, z);
    const t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));
    const px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));
    const py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));
    const pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));
    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
    //       (a) no intersection,
    //       (b) line contained in plane
  }

  return intersect;
});
exports.createIntersect = createIntersect;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/statistics/sum.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSum = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

var _noop = require("../../utils/noop");

const name = 'sum';
const dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];
const createSum =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  add,
  bignumber,
  fraction
}) => {
  /**
   * Compute the sum of a matrix or a list with values.
   * In case of a (multi dimensional) array or matrix, the sum of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.sum(a, b, c, ...)
   *     math.sum(A)
   *
   * Examples:
   *
   *     math.sum(2, 1, 4, 3)               // returns 10
   *     math.sum([2, 1, 4, 3])             // returns 10
   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
   *
   * See also:
   *
   *    mean, median, min, max, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The sum of all values
   */
  return typed(name, {
    // sum([a, b, c, d, ...])
    'Array | Matrix': _sum,
    // sum([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nsumDim,
    // sum(a, b, c, d, ...)
    '...': function (args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function sum');
      }

      return _sum(args);
    }
  });
  /**
   * Recursively calculate the sum of an n-dimensional array
   * @param {Array} array
   * @return {number} sum
   * @private
   */

  function _sum(array) {
    let sum;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        sum = sum === undefined ? value : add(sum, value);
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum', value);
      }
    });

    if (sum === undefined) {
      switch (config.number) {
        case 'number':
          return 0;

        case 'BigNumber':
          return bignumber ? bignumber(0) : (0, _noop.noBignumber)();

        case 'Fraction':
          return fraction ? fraction(0) : (0, _noop.noFraction)();

        default:
          return 0;
      }
    }

    return sum;
  }

  function _nsumDim(array, dim) {
    try {
      const sum = (0, _collection.reduce)(array, dim, add);
      return sum;
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'sum');
    }
  }
});
exports.createSum = createSum;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js","../../utils/noop":"../node_modules/mathjs/src/utils/noop.js"}],"../node_modules/mathjs/src/function/statistics/mean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMean = void 0;

var _collection = require("../../utils/collection");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

const name = 'mean';
const dependencies = ['typed', 'add', 'divide'];
const createMean =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  divide
}) => {
  /**
   * Compute the mean value of matrix or a list with values.
   * In case of a multi dimensional array, the mean of the flattened array
   * will be calculated. When `dim` is provided, the maximum over the selected
   * dimension will be calculated. Parameter `dim` is zero-based.
   *
   * Syntax:
   *
   *     math.mean(a, b, c, ...)
   *     math.mean(A)
   *     math.mean(A, dim)
   *
   * Examples:
   *
   *     math.mean(2, 1, 4, 3)                     // returns 2.5
   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
   *
   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
   *
   * See also:
   *
   *     median, min, max, sum, prod, std, variance
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The mean of all values
   */
  return typed(name, {
    // mean([a, b, c, d, ...])
    'Array | Matrix': _mean,
    // mean([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': _nmeanDim,
    // mean(a, b, c, d, ...)
    '...': function (args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function mean');
      }

      return _mean(args);
    }
  });
  /**
   * Calculate the mean value in an n-dimensional array, returning a
   * n-1 dimensional array
   * @param {Array} array
   * @param {number} dim
   * @return {number} mean
   * @private
   */

  function _nmeanDim(array, dim) {
    try {
      const sum = (0, _collection.reduce)(array, dim, add);
      const s = Array.isArray(array) ? (0, _array.arraySize)(array) : array.size();
      return divide(sum, s[dim]);
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean');
    }
  }
  /**
   * Recursively calculate the mean value in an n-dimensional array
   * @param {Array} array
   * @return {number} mean
   * @private
   */


  function _mean(array) {
    let sum = 0;
    let num = 0;
    (0, _collection.deepForEach)(array, function (value) {
      try {
        sum = add(sum, value);
        num++;
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mean', value);
      }
    });

    if (num === 0) {
      throw new Error('Cannot calculate mean of an empty array');
    }

    return divide(sum, num);
  }
});
exports.createMean = createMean;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js"}],"../node_modules/mathjs/src/function/statistics/median.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMedian = void 0;

var _collection = require("../../utils/collection");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

const name = 'median';
const dependencies = ['typed', 'add', 'divide', 'compare', 'partitionSelect'];
const createMedian =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  divide,
  compare,
  partitionSelect
}) => {
  /**
   * Compute the median of a matrix or a list with values. The values are
   * sorted and the middle value is returned. In case of an even number of
   * values, the average of the two middle values is returned.
   * Supported types of values are: Number, BigNumber, Unit
   *
   * In case of a (multi dimensional) array or matrix, the median of all
   * elements will be calculated.
   *
   * Syntax:
   *
   *     math.median(a, b, c, ...)
   *     math.median(A)
   *
   * Examples:
   *
   *     math.median(5, 2, 7)        // returns 5
   *     math.median([3, -1, 5, 7])  // returns 4
   *
   * See also:
   *
   *     mean, min, max, sum, prod, std, variance, quantileSeq
   *
   * @param {... *} args  A single matrix or or multiple scalar values
   * @return {*} The median
   */
  const median = typed(name, {
    // median([a, b, c, d, ...])
    'Array | Matrix': _median,
    // median([a, b, c, d, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      // TODO: implement median(A, dim)
      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
    },
    // median(a, b, c, d, ...)
    '...': function (args) {
      if ((0, _collection.containsCollections)(args)) {
        throw new TypeError('Scalar values expected in function median');
      }

      return _median(args);
    }
  });
  /**
   * Recursively calculate the median of an n-dimensional array
   * @param {Array} array
   * @return {Number} median
   * @private
   */

  function _median(array) {
    try {
      array = (0, _array.flatten)(array.valueOf());
      const num = array.length;

      if (num === 0) {
        throw new Error('Cannot calculate median of an empty array');
      }

      if (num % 2 === 0) {
        // even: return the average of the two middle values
        const mid = num / 2 - 1;
        const right = partitionSelect(array, mid + 1); // array now partitioned at mid + 1, take max of left part

        let left = array[mid];

        for (let i = 0; i < mid; ++i) {
          if (compare(array[i], left) > 0) {
            left = array[i];
          }
        }

        return middle2(left, right);
      } else {
        // odd: return the middle value
        const m = partitionSelect(array, (num - 1) / 2);
        return middle(m);
      }
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'median');
    }
  } // helper function to type check the middle value of the array


  const middle = typed({
    'number | BigNumber | Complex | Unit': function (value) {
      return value;
    }
  }); // helper function to type check the two middle value of the array

  const middle2 = typed({
    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function (left, right) {
      return divide(add(left, right), 2);
    }
  });
  return median;
});
exports.createMedian = createMedian;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js"}],"../node_modules/mathjs/src/function/statistics/mad.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMad = void 0;

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

const name = 'mad';
const dependencies = ['typed', 'abs', 'map', 'median', 'subtract'];
const createMad =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  abs,
  map,
  median,
  subtract
}) => {
  /**
   * Compute the median absolute deviation of a matrix or a list with values.
   * The median absolute deviation is defined as the median of the absolute
   * deviations from the median.
   *
   * Syntax:
   *
   *     math.mad(a, b, c, ...)
   *     math.mad(A)
   *
   * Examples:
   *
   *     math.mad(10, 20, 30)             // returns 10
   *     math.mad([1, 2, 3])              // returns 1
   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
   *
   * See also:
   *
   *     median, mean, std, abs
   *
   * @param {Array | Matrix} array
   *                        A single matrix or multiple scalar values.
   * @return {*} The median absolute deviation.
   */
  return typed(name, {
    // mad([a, b, c, d, ...])
    'Array | Matrix': _mad,
    // mad(a, b, c, d, ...)
    '...': function (args) {
      return _mad(args);
    }
  });

  function _mad(array) {
    array = (0, _array.flatten)(array.valueOf());

    if (array.length === 0) {
      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
    }

    try {
      const med = median(array);
      return median(map(array, function (value) {
        return abs(subtract(value, med));
      }));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
        throw new TypeError(err.message.replace('median', 'mad'));
      } else {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'mad');
      }
    }
  }
});
exports.createMad = createMad;
},{"../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js"}],"../node_modules/mathjs/src/function/statistics/variance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeprecatedVar = exports.createVariance = void 0;

var _collection = require("../../utils/collection");

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _improveErrorMessage = require("./utils/improveErrorMessage");

var _log = require("../../utils/log");

const DEFAULT_NORMALIZATION = 'unbiased';
const name = 'variance';
const dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
const createVariance =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  subtract,
  multiply,
  divide,
  apply,
  isNaN
}) => {
  /**
   * Compute the variance of a matrix or a  list with values.
   * In case of a (multi dimensional) array or matrix, the variance over all
   * elements will be calculated.
   *
   * Additionally, it is possible to compute the variance along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Note that older browser may not like the variable name `var`. In that
   * case, the function can be called as `math['var'](...)` instead of
   * `math.var(...)`.
   *
   * Syntax:
   *
   *     math.variance(a, b, c, ...)
   *     math.variance(A)
   *     math.variance(A, normalization)
   *     math.variance(A, dimension)
   *     math.variance(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.variance(2, 4, 6)                     // returns 4
   *     math.variance([2, 4, 6, 8])                // returns 6.666666666666667
   *     math.variance([2, 4, 6, 8], 'uncorrected') // returns 5
   *     math.variance([2, 4, 6, 8], 'biased')      // returns 4
   *
   *     math.variance([[1, 2, 3], [4, 5, 6]])      // returns 3.5
   *     math.variance([[1, 2, 3], [4, 6, 8]], 0)   // returns [4.5, 8, 12.5]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1)   // returns [1, 4]
   *     math.variance([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.5, 2]
   *
   * See also:
   *
   *    mean, median, max, min, prod, std, sum
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the variance for a matrix
   * @return {*} The variance
   */
  return typed(name, {
    // variance([a, b, c, d, ...])
    'Array | Matrix': function (array) {
      return _var(array, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _var,
    // variance([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': function (array, dim) {
      return _varDim(array, dim, DEFAULT_NORMALIZATION);
    },
    // variance([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _varDim,
    // variance(a, b, c, d, ...)
    '...': function (args) {
      return _var(args, DEFAULT_NORMALIZATION);
    }
  });
  /**
   * Recursively calculate the variance of an n-dimensional array
   * @param {Array} array
   * @param {string} normalization
   *                        Determines how to normalize the variance:
   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
   *                        - 'uncorrected' The sum of squared errors is divided by n
   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
   * @return {number | BigNumber} variance
   * @private
   */

  function _var(array, normalization) {
    let sum = 0;
    let num = 0;

    if (array.length === 0) {
      throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
    } // calculate the mean and number of elements


    (0, _collection.deepForEach)(array, function (value) {
      try {
        sum = add(sum, value);
        num++;
      } catch (err) {
        throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance', value);
      }
    });
    if (num === 0) throw new Error('Cannot calculate variance of an empty array');
    const mean = divide(sum, num); // calculate the variance

    sum = 0;
    (0, _collection.deepForEach)(array, function (value) {
      const diff = subtract(value, mean);
      sum = add(sum, multiply(diff, diff));
    });

    if (isNaN(sum)) {
      return sum;
    }

    switch (normalization) {
      case 'uncorrected':
        return divide(sum, num);

      case 'biased':
        return divide(sum, num + 1);

      case 'unbiased':
        const zero = (0, _is.isBigNumber)(sum) ? sum.mul(0) : 0;
        return num === 1 ? zero : divide(sum, num - 1);

      default:
        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
    }
  }

  function _varDim(array, dim, normalization) {
    try {
      if (array.length === 0) {
        throw new SyntaxError('Function variance requires one or more parameters (0 provided)');
      }

      return apply(array, dim, x => _var(x, normalization));
    } catch (err) {
      throw (0, _improveErrorMessage.improveErrorMessage)(err, 'variance');
    }
  }
}); // For backward compatibility, deprecated since version 6.0.0. Date: 2018-11-09

exports.createVariance = createVariance;
const createDeprecatedVar =
/* #__PURE__ */
(0, _factory.factory)('var', ['variance'], ({
  variance
}) => {
  return function (...args) {
    (0, _log.warnOnce)('Function "var" has been renamed to "variance" in v6.0.0, please use the new function instead.');
    return variance.apply(variance, args);
  };
});
exports.createDeprecatedVar = createDeprecatedVar;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/improveErrorMessage":"../node_modules/mathjs/src/function/statistics/utils/improveErrorMessage.js","../../utils/log":"../node_modules/mathjs/src/utils/log.js"}],"../node_modules/mathjs/src/function/statistics/quantileSeq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createQuantileSeq = void 0;

var _is = require("../../utils/is");

var _number = require("../../utils/number");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

const name = 'quantileSeq';
const dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare'];
const createQuantileSeq =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  multiply,
  partitionSelect,
  compare
}) => {
  /**
   * Compute the prob order quantile of a matrix or a list with values.
   * The sequence is sorted and the middle value is returned.
   * Supported types of sequence values are: Number, BigNumber, Unit
   * Supported types of probability are: Number, BigNumber
   *
   * In case of a (multi dimensional) array or matrix, the prob order quantile
   * of all elements will be calculated.
   *
   * Syntax:
   *
   *     math.quantileSeq(A, prob[, sorted])
   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
   *     math.quantileSeq(A, N[, sorted])
   *
   * Examples:
   *
   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
   *
   * See also:
   *
   *     median, mean, min, max, sum, prod, std, variance
   *
   * @param {Array, Matrix} data                A single matrix or Array
   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
   *                                            the amount of evenly distributed steps of
   *                                            probabilities; only one of these options can
   *                                            be provided
   * @param {Boolean} sorted=false              is data sorted in ascending order
   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
   */
  function quantileSeq(data, probOrN, sorted) {
    let probArr, dataArr, one;

    if (arguments.length < 2 || arguments.length > 3) {
      throw new SyntaxError('Function quantileSeq requires two or three parameters');
    }

    if ((0, _is.isCollection)(data)) {
      sorted = sorted || false;

      if (typeof sorted === 'boolean') {
        dataArr = data.valueOf();

        if ((0, _is.isNumber)(probOrN)) {
          if (probOrN < 0) {
            throw new Error('N/prob must be non-negative');
          }

          if (probOrN <= 1) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return _quantileSeq(dataArr, probOrN, sorted);
          }

          if (probOrN > 1) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!(0, _number.isInteger)(probOrN)) {
              throw new Error('N must be a positive integer');
            }

            const nPlusOne = probOrN + 1;
            probArr = new Array(probOrN);

            for (let i = 0; i < probOrN;) {
              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
            }

            return probArr;
          }
        }

        if ((0, _is.isBigNumber)(probOrN)) {
          const BigNumber = probOrN.constructor;

          if (probOrN.isNegative()) {
            throw new Error('N/prob must be non-negative');
          }

          one = new BigNumber(1);

          if (probOrN.lte(one)) {
            // quantileSeq([a, b, c, d, ...], prob[,sorted])
            return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
          }

          if (probOrN.gt(one)) {
            // quantileSeq([a, b, c, d, ...], N[,sorted])
            if (!probOrN.isInteger()) {
              throw new Error('N must be a positive integer');
            } // largest possible Array length is 2^32-1
            // 2^32 < 10^15, thus safe conversion guaranteed


            const intN = probOrN.toNumber();

            if (intN > 4294967295) {
              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
            }

            const nPlusOne = new BigNumber(intN + 1);
            probArr = new Array(intN);

            for (let i = 0; i < intN;) {
              probArr[i] = new BigNumber(_quantileSeq(dataArr, new BigNumber(++i).div(nPlusOne), sorted));
            }

            return probArr;
          }
        }

        if (Array.isArray(probOrN)) {
          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
          probArr = new Array(probOrN.length);

          for (let i = 0; i < probArr.length; ++i) {
            const currProb = probOrN[i];

            if ((0, _is.isNumber)(currProb)) {
              if (currProb < 0 || currProb > 1) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else if ((0, _is.isBigNumber)(currProb)) {
              one = new currProb.constructor(1);

              if (currProb.isNegative() || currProb.gt(one)) {
                throw new Error('Probability must be between 0 and 1, inclusive');
              }
            } else {
              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
            }

            probArr[i] = _quantileSeq(dataArr, currProb, sorted);
          }

          return probArr;
        }

        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
      }

      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
    }

    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
  }
  /**
   * Calculate the prob order quantile of an n-dimensional array.
   *
   * @param {Array} array
   * @param {Number, BigNumber} prob
   * @param {Boolean} sorted
   * @return {Number, BigNumber, Unit} prob order quantile
   * @private
   */


  function _quantileSeq(array, prob, sorted) {
    const flat = (0, _array.flatten)(array);
    const len = flat.length;

    if (len === 0) {
      throw new Error('Cannot calculate quantile of an empty sequence');
    }

    if ((0, _is.isNumber)(prob)) {
      const index = prob * (len - 1);
      const fracPart = index % 1;

      if (fracPart === 0) {
        const value = sorted ? flat[index] : partitionSelect(flat, index);
        validate(value);
        return value;
      }

      const integerPart = Math.floor(index);
      let left;
      let right;

      if (sorted) {
        left = flat[integerPart];
        right = flat[integerPart + 1];
      } else {
        right = partitionSelect(flat, integerPart + 1); // max of partition is kth largest

        left = flat[integerPart];

        for (let i = 0; i < integerPart; ++i) {
          if (compare(flat[i], left) > 0) {
            left = flat[i];
          }
        }
      }

      validate(left);
      validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
    } // If prob is a BigNumber


    let index = prob.times(len - 1);

    if (index.isInteger()) {
      index = index.toNumber();
      const value = sorted ? flat[index] : partitionSelect(flat, index);
      validate(value);
      return value;
    }

    const integerPart = index.floor();
    const fracPart = index.minus(integerPart);
    const integerPartNumber = integerPart.toNumber();
    let left;
    let right;

    if (sorted) {
      left = flat[integerPartNumber];
      right = flat[integerPartNumber + 1];
    } else {
      right = partitionSelect(flat, integerPartNumber + 1); // max of partition is kth largest

      left = flat[integerPartNumber];

      for (let i = 0; i < integerPartNumber; ++i) {
        if (compare(flat[i], left) > 0) {
          left = flat[i];
        }
      }
    }

    validate(left);
    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

    const one = new fracPart.constructor(1);
    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
  }
  /**
   * Check if array value types are valid, throw error otherwise.
   * @param {number | BigNumber | Unit} x
   * @param {number | BigNumber | Unit} x
   * @private
   */


  const validate = typed({
    'number | BigNumber | Unit': function (x) {
      return x;
    }
  });
  return quantileSeq;
});
exports.createQuantileSeq = createQuantileSeq;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/statistics/std.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStd = void 0;

var _factory = require("../../utils/factory");

const name = 'std';
const dependencies = ['typed', 'sqrt', 'variance'];
const createStd =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  sqrt,
  variance
}) => {
  /**
   * Compute the standard deviation of a matrix or a  list with values.
   * The standard deviations is defined as the square root of the variance:
   * `std(A) = sqrt(variance(A))`.
   * In case of a (multi dimensional) array or matrix, the standard deviation
   * over all elements will be calculated by default, unless an axis is specified
   * in which case the standard deviation will be computed along that axis.
   *
   * Additionally, it is possible to compute the standard deviation along the rows
   * or columns of a matrix by specifying the dimension as the second argument.
   *
   * Optionally, the type of normalization can be specified as the final
   * parameter. The parameter `normalization` can be one of the following values:
   *
   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
   * - 'uncorrected'        The sum of squared errors is divided by n
   * - 'biased'             The sum of squared errors is divided by (n + 1)
   *
   *
   * Syntax:
   *
   *     math.std(a, b, c, ...)
   *     math.std(A)
   *     math.std(A, normalization)
   *     math.std(A, dimension)
   *     math.std(A, dimension, normalization)
   *
   * Examples:
   *
   *     math.std(2, 4, 6)                     // returns 2
   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
   *
   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
   *     math.std([[1, 2, 3], [4, 6, 8]], 0)    // returns [2.1213203435596424, 2.8284271247461903, 3.5355339059327378]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1)    // returns [1, 2]
   *     math.std([[1, 2, 3], [4, 6, 8]], 1, 'biased') // returns [0.7071067811865476, 1.4142135623730951]
   *
   * See also:
   *
   *    mean, median, max, min, prod, sum, variance
   *
   * @param {Array | Matrix} array
   *                        A single matrix or or multiple scalar values
   * @param {string} [normalization='unbiased']
   *                        Determines how to normalize the variance.
   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
   * @param dimension {number | BigNumber}
   *                        Determines the axis to compute the standard deviation for a matrix
   * @return {*} The standard deviation
   */
  return typed(name, {
    // std([a, b, c, d, ...])
    'Array | Matrix': _std,
    // std([a, b, c, d, ...], normalization)
    'Array | Matrix, string': _std,
    // std([a, b, c, c, ...], dim)
    'Array | Matrix, number | BigNumber': _std,
    // std([a, b, c, c, ...], dim, normalization)
    'Array | Matrix, number | BigNumber, string': _std,
    // std(a, b, c, d, ...)
    '...': function (args) {
      return _std(args);
    }
  });

  function _std(array, normalization) {
    if (array.length === 0) {
      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
    }

    try {
      return sqrt(variance.apply(null, arguments));
    } catch (err) {
      if (err instanceof TypeError && err.message.indexOf(' variance') !== -1) {
        throw new TypeError(err.message.replace(' variance', ' std'));
      } else {
        throw err;
      }
    }
  }
});
exports.createStd = createStd;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/probability/combinations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCombinations = void 0;

var _factory = require("../../utils/factory");

var _combinations = require("../../plain/number/combinations");

const name = 'combinations';
const dependencies = ['typed'];
const createCombinations =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Compute the number of ways of picking `k` unordered outcomes from `n`
   * possibilities.
   *
   * Combinations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.combinations(n, k)
   *
   * Examples:
   *
   *    math.combinations(7, 5) // returns 21
   *
   * See also:
   *
   *    permutations, factorial
   *
   * @param {number | BigNumber} n    Total number of objects in the set
   * @param {number | BigNumber} k    Number of objects in the subset
   * @return {number | BigNumber}     Number of possible combinations.
   */
  return typed(name, {
    'number, number': _combinations.combinationsNumber,
    'BigNumber, BigNumber': function (n, k) {
      const BigNumber = n.constructor;
      let max, result, i, ii;
      const one = new BigNumber(1);

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function combinations');
      }

      if (k.gt(n)) {
        throw new TypeError('k must be less than n in function combinations');
      }

      max = n.minus(k);
      if (k.lt(max)) max = k;
      result = one;

      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
        result = result.times(max.plus(i)).dividedBy(i);
      }

      return result;
    } // TODO: implement support for collection in combinations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

exports.createCombinations = createCombinations;

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number/combinations":"../node_modules/mathjs/src/plain/number/combinations.js"}],"../node_modules/mathjs/src/function/probability/gamma.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGamma = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

var _number = require("../../plain/number");

const name = 'gamma';
const dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];
const createGamma =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  multiplyScalar,
  pow,
  BigNumber,
  Complex
}) => {
  /**
   * Compute the gamma function of a value using Lanczos approximation for
   * small values, and an extended Stirling approximation for large values.
   *
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.gamma(n)
   *
   * Examples:
   *
   *    math.gamma(5)       // returns 24
   *    math.gamma(-0.5)    // returns -3.5449077018110335
   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
   *
   * See also:
   *
   *    combinations, factorial, permutations
   *
   * @param {number | Array | Matrix} n   A real or complex number
   * @return {number | Array | Matrix}    The gamma of `n`
   */
  const gamma = typed(name, {
    'number': _number.gammaNumber,
    'Complex': function (n) {
      let t, x;

      if (n.im === 0) {
        return gamma(n.re);
      }

      n = new Complex(n.re - 1, n.im);
      x = new Complex(_number.gammaP[0], 0);

      for (let i = 1; i < _number.gammaP.length; ++i) {
        const real = n.re + i; // x += p[i]/(n+i)

        const den = real * real + n.im * n.im;

        if (den !== 0) {
          x.re += _number.gammaP[i] * real / den;
          x.im += -(_number.gammaP[i] * n.im) / den;
        } else {
          x.re = _number.gammaP[i] < 0 ? -Infinity : Infinity;
        }
      }

      t = new Complex(n.re + _number.gammaG + 0.5, n.im);
      const twoPiSqrt = Math.sqrt(2 * Math.PI);
      n.re += 0.5;
      const result = pow(t, n);

      if (result.im === 0) {
        // sqrt(2*PI)*result
        result.re *= twoPiSqrt;
      } else if (result.re === 0) {
        result.im *= twoPiSqrt;
      } else {
        result.re *= twoPiSqrt;
        result.im *= twoPiSqrt;
      }

      const r = Math.exp(-t.re); // exp(-t)

      t.re = r * Math.cos(-t.im);
      t.im = r * Math.sin(-t.im);
      return multiplyScalar(multiplyScalar(result, t), x);
    },
    'BigNumber': function (n) {
      if (n.isInteger()) {
        return n.isNegative() || n.isZero() ? new BigNumber(Infinity) : bigFactorial(n.minus(1));
      }

      if (!n.isFinite()) {
        return new BigNumber(n.isNegative() ? NaN : Infinity);
      }

      throw new Error('Integer BigNumber expected');
    },
    'Array | Matrix': function (n) {
      return (0, _collection.deepMap)(n, gamma);
    }
  });
  /**
   * Calculate factorial for a BigNumber
   * @param {BigNumber} n
   * @returns {BigNumber} Returns the factorial of n
   */

  function bigFactorial(n) {
    if (n.isZero()) {
      return new BigNumber(1); // 0! is per definition 1
    }

    const precision = config.precision + (Math.log(n.toNumber()) | 0);
    const Big = BigNumber.clone({
      precision: precision
    });
    let res = new Big(n);
    let value = n.toNumber() - 1; // number

    while (value > 1) {
      res = res.times(value);
      value--;
    }

    return new BigNumber(res.toPrecision(BigNumber.precision));
  }

  return gamma;
});
exports.createGamma = createGamma;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/function/probability/factorial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFactorial = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

const name = 'factorial';
const dependencies = ['typed', 'gamma'];
const createFactorial =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  gamma
}) => {
  /**
   * Compute the factorial of a value
   *
   * Factorial only supports an integer value as argument.
   * For matrices, the function is evaluated element wise.
   *
   * Syntax:
   *
   *    math.factorial(n)
   *
   * Examples:
   *
   *    math.factorial(5)    // returns 120
   *    math.factorial(3)    // returns 6
   *
   * See also:
   *
   *    combinations, gamma, permutations
   *
   * @param {number | BigNumber | Array | Matrix} n   An integer number
   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
   */
  const factorial = typed(name, {
    'number': function (n) {
      if (n < 0) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n + 1);
    },
    'BigNumber': function (n) {
      if (n.isNegative()) {
        throw new Error('Value must be non-negative');
      }

      return gamma(n.plus(1));
    },
    'Array | Matrix': function (n) {
      return (0, _collection.deepMap)(n, factorial);
    }
  });
  return factorial;
});
exports.createFactorial = createFactorial;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/probability/kldivergence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createKldivergence = void 0;

var _factory = require("../../utils/factory");

const name = 'kldivergence';
const dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];
const createKldivergence =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  divide,
  sum,
  multiply,
  dotDivide,
  log,
  isNumeric
}) => {
  /**
     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
     *
     * Syntax:
     *
     *     math.kldivergence(x, y)
     *
     * Examples:
     *
     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
     *
     *
     * @param  {Array | Matrix} q    First vector
     * @param  {Array | Matrix} p    Second vector
     * @return {number}              Returns distance between q and p
     */
  return typed(name, {
    'Array, Array': function (q, p) {
      return _kldiv(matrix(q), matrix(p));
    },
    'Matrix, Array': function (q, p) {
      return _kldiv(q, matrix(p));
    },
    'Array, Matrix': function (q, p) {
      return _kldiv(matrix(q), p);
    },
    'Matrix, Matrix': function (q, p) {
      return _kldiv(q, p);
    }
  });

  function _kldiv(q, p) {
    const plength = p.size().length;
    const qlength = q.size().length;

    if (plength > 1) {
      throw new Error('first object must be one dimensional');
    }

    if (qlength > 1) {
      throw new Error('second object must be one dimensional');
    }

    if (plength !== qlength) {
      throw new Error('Length of two vectors must be equal');
    } // Before calculation, apply normalization


    const sumq = sum(q);

    if (sumq === 0) {
      throw new Error('Sum of elements in first object must be non zero');
    }

    const sump = sum(p);

    if (sump === 0) {
      throw new Error('Sum of elements in second object must be non zero');
    }

    const qnorm = divide(q, sum(q));
    const pnorm = divide(p, sum(p));
    const result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));

    if (isNumeric(result)) {
      return result;
    } else {
      return Number.NaN;
    }
  }
});
exports.createKldivergence = createKldivergence;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/probability/multinomial.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMultinomial = void 0;

var _collection = require("../../utils/collection");

var _factory = require("../../utils/factory");

const name = 'multinomial';
const dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];
const createMultinomial =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  divide,
  multiply,
  factorial,
  isInteger,
  isPositive
}) => {
  /**
   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
   *
   * multinomial takes one array of integers as an argument.
   * The following condition must be enforced: every ai <= 0
   *
   * Syntax:
   *
   *     math.multinomial(a) // a is an array type
   *
   * Examples:
   *
   *    math.multinomial([1,2,1]) // returns 12
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
   * @return {Number | BigNumber}         Multinomial coefficient.
   */
  return typed(name, {
    'Array | Matrix': function (a) {
      let sum = 0;
      let denom = 1;
      (0, _collection.deepForEach)(a, function (ai) {
        if (!isInteger(ai) || !isPositive(ai)) {
          throw new TypeError('Positive integer value expected in function multinomial');
        }

        sum = add(sum, ai);
        denom = multiply(denom, factorial(ai));
      });
      return divide(factorial(sum), denom);
    }
  });
});
exports.createMultinomial = createMultinomial;
},{"../../utils/collection":"../node_modules/mathjs/src/utils/collection.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/probability/permutations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPermutations = void 0;

var _number = require("../../utils/number");

var _product = require("../../utils/product");

var _factory = require("../../utils/factory");

const name = 'permutations';
const dependencies = ['typed', 'factorial'];
const createPermutations =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  factorial
}) => {
  /**
   * Compute the number of ways of obtaining an ordered subset of `k` elements
   * from a set of `n` elements.
   *
   * Permutations only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *     math.permutations(n)
   *     math.permutations(n, k)
   *
   * Examples:
   *
   *    math.permutations(5)     // 120
   *    math.permutations(5, 3)  // 60
   *
   * See also:
   *
   *    combinations, factorial
   *
   * @param {number | BigNumber} n   The number of objects in total
   * @param {number | BigNumber} [k] The number of objects in the subset
   * @return {number | BigNumber}    The number of permutations
   */
  return typed(name, {
    'number | BigNumber': factorial,
    'number, number': function (n, k) {
      if (!(0, _number.isInteger)(n) || n < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (!(0, _number.isInteger)(k) || k < 0) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k > n) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      } // Permute n objects, k at a time


      return (0, _product.product)(n - k + 1, n);
    },
    'BigNumber, BigNumber': function (n, k) {
      let result, i;

      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
        throw new TypeError('Positive integer value expected in function permutations');
      }

      if (k.gt(n)) {
        throw new TypeError('second argument k must be less than or equal to first argument n');
      }

      const one = n.mul(0).add(1);
      result = one;

      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
        result = result.times(i);
      }

      return result;
    } // TODO: implement support for collection in permutations

  });
});
/**
 * Test whether BigNumber n is a positive integer
 * @param {BigNumber} n
 * @returns {boolean} isPositiveInteger
 */

exports.createPermutations = createPermutations;

function isPositiveInteger(n) {
  return n.isInteger() && n.gte(0);
}
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/product":"../node_modules/mathjs/src/utils/product.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/seed-random/index.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';

var width = 256;// each RC4 output is 0 <= x < 256
var chunks = 6;// at least six RC4 outputs for each double
var digits = 52;// there are 52 significant digits in a double
var pool = [];// pool: entropy pool starts empty
var GLOBAL = typeof global === 'undefined' ? window : global;

//
// The following constants are related to IEEE 754 limits.
//
var startdenom = Math.pow(width, chunks),
    significance = Math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1;


var oldRandom = Math.random;

//
// seedrandom()
// This is the seedrandom function described above.
//
module.exports = function(seed, options) {
  if (options && options.global === true) {
    options.global = false;
    Math.random = module.exports(seed, options);
    options.global = true;
    return Math.random;
  }
  var use_entropy = (options && options.entropy) || false;
  var key = [];

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    use_entropy ? [seed, tostring(pool)] :
    0 in arguments ? seed : autoseed(), 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  return function() {         // Closure to return a random double:
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer Math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };
};

module.exports.resetGlobal = function () {
  Math.random = oldRandom;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability discard an initial batch of values.
    // See http://www.rsa.com/rsalabs/node.asp?id=2009
  })(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj)[0], prop;
  if (depth && typ == 'o') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 's' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto if available.
//
/** @param {Uint8Array=} seed */
function autoseed(seed) {
  try {
    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
    return tostring(seed);
  } catch (e) {
    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
            GLOBAL.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call Math.random on its own again after
// initialization.
//
mixkey(Math.random(), pool);

},{}],"../node_modules/mathjs/src/function/probability/util/seededRNG.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRng = createRng;

var _seedRandom = _interopRequireDefault(require("seed-random"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// create a random seed here to prevent an infinite loop from seed-random
// inside the factory. Reason is that math.random is defined as a getter/setter
// and seed-random generates a seed from the local entropy by reading every
// defined object including `math` itself. That means that whilst getting
// math.random, it tries to get math.random, etc... an infinite loop.
// See https://github.com/ForbesLindesay/seed-random/issues/6
const singletonRandom =
/* #__PURE__ */
(0, _seedRandom.default)();

function createRng(randomSeed) {
  let random; // create a new random generator with given seed

  function setSeed(seed) {
    random = seed === null ? singletonRandom : (0, _seedRandom.default)(String(seed));
  } // initialize a seeded pseudo random number generator with config's random seed


  setSeed(randomSeed); // wrapper function so the rng can be updated via generator

  function rng() {
    return random();
  }

  return rng;
}
},{"seed-random":"../node_modules/seed-random/index.js"}],"../node_modules/mathjs/src/function/probability/pickRandom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPickRandom = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _seededRNG = require("./util/seededRNG");

const name = 'pickRandom';
const dependencies = ['typed', 'config', '?on'];
const createPickRandom =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  on
}) => {
  // seeded pseudo random number generator
  let rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Random pick one or more values from a one dimensional array.
   * Array elements are picked using a random function with uniform or weighted distribution.
   *
   * Syntax:
   *
   *     math.pickRandom(array)
   *     math.pickRandom(array, number)
   *     math.pickRandom(array, weights)
   *     math.pickRandom(array, number, weights)
   *     math.pickRandom(array, weights, number)
   *
   * Examples:
   *
   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
   *
   * See also:
   *
   *     random, randomInt
   *
   * @param {Array | Matrix} array     A one dimensional array
   * @param {Int} number               An int or float
   * @param {Array | Matrix} weights   An array of ints or floats
   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.
   *                                   Returns an array with the configured number of elements when number is > 1.
   */


  return typed({
    'Array | Matrix': function (possibles) {
      return _pickRandom(possibles);
    },
    'Array | Matrix, number': function (possibles, number) {
      return _pickRandom(possibles, number, undefined);
    },
    'Array | Matrix, Array': function (possibles, weights) {
      return _pickRandom(possibles, undefined, weights);
    },
    'Array | Matrix, Array | Matrix, number': function (possibles, weights, number) {
      return _pickRandom(possibles, number, weights);
    },
    'Array | Matrix, number, Array | Matrix': function (possibles, number, weights) {
      return _pickRandom(possibles, number, weights);
    }
  });

  function _pickRandom(possibles, number, weights) {
    const single = typeof number === 'undefined';

    if (single) {
      number = 1;
    }

    possibles = possibles.valueOf(); // get Array

    if (weights) {
      weights = weights.valueOf(); // get Array
    }

    if ((0, _array.arraySize)(possibles).length > 1) {
      throw new Error('Only one dimensional vectors supported');
    }

    let totalWeights = 0;

    if (typeof weights !== 'undefined') {
      if (weights.length !== possibles.length) {
        throw new Error('Weights must have the same length as possibles');
      }

      for (let i = 0, len = weights.length; i < len; i++) {
        if (!(0, _is.isNumber)(weights[i]) || weights[i] < 0) {
          throw new Error('Weights must be an array of positive numbers');
        }

        totalWeights += weights[i];
      }
    }

    const length = possibles.length;

    if (length === 0) {
      return [];
    } else if (number >= length) {
      return number > 1 ? possibles : possibles[0];
    }

    const result = [];
    let pick;

    while (result.length < number) {
      if (typeof weights === 'undefined') {
        pick = possibles[Math.floor(rng() * length)];
      } else {
        let randKey = rng() * totalWeights;

        for (let i = 0, len = possibles.length; i < len; i++) {
          randKey -= weights[i];

          if (randKey < 0) {
            pick = possibles[i];
            break;
          }
        }
      }

      if (result.indexOf(pick) === -1) {
        result.push(pick);
      }
    }

    return single ? result[0] : result; // TODO: return matrix when input was a matrix
    // TODO: add support for multi dimensional matrices
  }
});
exports.createPickRandom = createPickRandom;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","./util/seededRNG":"../node_modules/mathjs/src/function/probability/util/seededRNG.js"}],"../node_modules/mathjs/src/function/probability/util/randomMatrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomMatrix = randomMatrix;

/**
 * This is a util function for generating a random matrix recursively.
 * @param {number[]} size
 * @param {function} random
 * @returns {Array}
 */
function randomMatrix(size, random) {
  const data = [];
  size = size.slice(0);

  if (size.length > 1) {
    for (let i = 0, length = size.shift(); i < length; i++) {
      data.push(randomMatrix(size, random));
    }
  } else {
    for (let i = 0, length = size.shift(); i < length; i++) {
      data.push(random());
    }
  }

  return data;
}
},{}],"../node_modules/mathjs/src/function/probability/random.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRandomNumber = exports.createRandom = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

var _seededRNG = require("./util/seededRNG");

var _randomMatrix2 = require("./util/randomMatrix");

const name = 'random';
const dependencies = ['typed', 'config', '?on'];
const createRandom =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  on
}) => {
  // seeded pseudo random number generator
  let rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.random()                // generate a random number between 0 and 1
   *     math.random(max)             // generate a random number between 0 and max
   *     math.random(min, max)        // generate a random number between min and max
   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
   *
   * Examples:
   *
   *     math.random()       // returns a random number between 0 and 1
   *     math.random(100)    // returns a random number between 0 and 100
   *     math.random(30, 40) // returns a random number between 30 and 40
   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
   *
   * See also:
   *
   *     randomInt, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random number
   */


  return typed(name, {
    '': () => _random(0, 1),
    'number': max => _random(0, max),
    'number, number': (min, max) => _random(min, max),
    'Array | Matrix': size => _randomMatrix(size, 0, 1),
    'Array | Matrix, number': (size, max) => _randomMatrix(size, 0, max),
    'Array | Matrix, number, number': (size, min, max) => _randomMatrix(size, min, max)
  });

  function _randomMatrix(size, min, max) {
    const res = (0, _randomMatrix2.randomMatrix)(size.valueOf(), () => _random(min, max));
    return (0, _is.isMatrix)(size) ? size.create(res) : res;
  }

  function _random(min, max) {
    return min + rng() * (max - min);
  }
}); // number only implementation of random, no matrix support
// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?

exports.createRandom = createRandom;
const createRandomNumber =
/* #__PURE__ */
(0, _factory.factory)(name, ['typed', 'config', '?on'], ({
  typed,
  config,
  on,
  matrix
}) => {
  // seeded pseudo random number generator1
  let rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }

  return typed(name, {
    '': () => _random(0, 1),
    'number': max => _random(0, max),
    'number, number': (min, max) => _random(min, max)
  });

  function _random(min, max) {
    return min + rng() * (max - min);
  }
});
exports.createRandomNumber = createRandomNumber;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","./util/seededRNG":"../node_modules/mathjs/src/function/probability/util/seededRNG.js","./util/randomMatrix":"../node_modules/mathjs/src/function/probability/util/randomMatrix.js"}],"../node_modules/mathjs/src/function/probability/randomInt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRandomInt = void 0;

var _factory = require("../../utils/factory");

var _randomMatrix = require("./util/randomMatrix");

var _seededRNG = require("./util/seededRNG");

var _is = require("../../utils/is");

const name = 'randomInt';
const dependencies = ['typed', 'config', '?on'];
const createRandomInt =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  on
}) => {
  // seeded pseudo random number generator
  let rng = (0, _seededRNG.createRng)(config.randomSeed);

  if (on) {
    on('config', function (curr, prev) {
      if (curr.randomSeed !== prev.randomSeed) {
        rng = (0, _seededRNG.createRng)(curr.randomSeed);
      }
    });
  }
  /**
   * Return a random integer number larger or equal to `min` and smaller than `max`
   * using a uniform distribution.
   *
   * Syntax:
   *
   *     math.randomInt()                // generate a random integer between 0 and 1
   *     math.randomInt(max)             // generate a random integer between 0 and max
   *     math.randomInt(min, max)        // generate a random integer between min and max
   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
   *
   * Examples:
   *
   *     math.randomInt(100)    // returns a random integer between 0 and 100
   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
   *
   * See also:
   *
   *     random, pickRandom
   *
   * @param {Array | Matrix} [size] If provided, an array or matrix with given
   *                                size and filled with random values is returned
   * @param {number} [min]  Minimum boundary for the random value, included
   * @param {number} [max]  Maximum boundary for the random value, excluded
   * @return {number | Array | Matrix} A random integer value
   */


  return typed(name, {
    '': () => _randomInt(0, 1),
    'number': max => _randomInt(0, max),
    'number, number': (min, max) => _randomInt(min, max),
    'Array | Matrix': size => _randomIntMatrix(size, 0, 1),
    'Array | Matrix, number': (size, max) => _randomIntMatrix(size, 0, max),
    'Array | Matrix, number, number': (size, min, max) => _randomIntMatrix(size, min, max)
  });

  function _randomIntMatrix(size, min, max) {
    const res = (0, _randomMatrix.randomMatrix)(size.valueOf(), () => _randomInt(min, max));
    return (0, _is.isMatrix)(size) ? size.create(res) : res;
  }

  function _randomInt(min, max) {
    return Math.floor(min + rng() * (max - min));
  }
});
exports.createRandomInt = createRandomInt;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./util/randomMatrix":"../node_modules/mathjs/src/function/probability/util/randomMatrix.js","./util/seededRNG":"../node_modules/mathjs/src/function/probability/util/seededRNG.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/function/combinatorics/stirlingS2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStirlingS2 = void 0;

var _factory = require("../../utils/factory");

const name = 'stirlingS2';
const dependencies = ['typed', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'factorial', 'combinations', 'isNegative', 'isInteger', 'larger'];
const createStirlingS2 =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  addScalar,
  subtract,
  multiplyScalar,
  divideScalar,
  pow,
  factorial,
  combinations,
  isNegative,
  isInteger,
  larger
}) => {
  /**
   * The Stirling numbers of the second kind, counts the number of ways to partition
   * a set of n labelled objects into k nonempty unlabelled subsets.
   * stirlingS2 only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   *  If n = k or k = 1, then s(n,k) = 1
   *
   * Syntax:
   *
   *   math.stirlingS2(n, k)
   *
   * Examples:
   *
   *    math.stirlingS2(5, 3) //returns 25
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     S(n,k)
   */
  return typed(name, {
    'number | BigNumber, number | BigNumber': function (n, k) {
      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
        throw new TypeError('Non-negative integer value expected in function stirlingS2');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function stirlingS2');
      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]


      const kFactorial = factorial(k);
      let result = 0;

      for (let i = 0; i <= k; i++) {
        const negativeOne = pow(-1, subtract(k, i));
        const kChooseI = combinations(k, i);
        const iPower = pow(i, n);
        result = addScalar(result, multiplyScalar(multiplyScalar(kChooseI, iPower), negativeOne));
      }

      return divideScalar(result, kFactorial);
    }
  });
});
exports.createStirlingS2 = createStirlingS2;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/combinatorics/bellNumbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBellNumbers = void 0;

var _factory = require("../../utils/factory");

const name = 'bellNumbers';
const dependencies = ['typed', 'addScalar', 'isNegative', 'isInteger', 'stirlingS2'];
const createBellNumbers =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  addScalar,
  isNegative,
  isInteger,
  stirlingS2
}) => {
  /**
   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
   * bellNumbers only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.bellNumbers(n)
   *
   * Examples:
   *
   *    math.bellNumbers(3) // returns 5
   *    math.bellNumbers(8) // returns 4140
   *
   * See also:
   *
   *    stirlingS2
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @return {Number | BigNumber}     B(n)
   */
  return typed(name, {
    'number | BigNumber': function (n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function bellNumbers');
      } // Sum (k=0, n) S(n,k).


      let result = 0;

      for (let i = 0; i <= n; i++) {
        result = addScalar(result, stirlingS2(n, i));
      }

      return result;
    }
  });
});
exports.createBellNumbers = createBellNumbers;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/combinatorics/catalan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCatalan = void 0;

var _factory = require("../../utils/factory");

const name = 'catalan';
const dependencies = ['typed', 'addScalar', 'divideScalar', 'multiplyScalar', 'combinations', 'isNegative', 'isInteger'];
const createCatalan =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  addScalar,
  divideScalar,
  multiplyScalar,
  combinations,
  isNegative,
  isInteger
}) => {
  /**
   * The Catalan Numbers enumerate combinatorial structures of many different types.
   * catalan only takes integer arguments.
   * The following condition must be enforced: n >= 0
   *
   * Syntax:
   *
   *   math.catalan(n)
   *
   * Examples:
   *
   *    math.catalan(3) // returns 5
   *    math.catalan(8) // returns 1430
   *
   * See also:
   *
   *    bellNumbers
   *
   * @param {Number | BigNumber} n    nth Catalan number
   * @return {Number | BigNumber}     Cn(n)
   */
  return typed(name, {
    'number | BigNumber': function (n) {
      if (!isInteger(n) || isNegative(n)) {
        throw new TypeError('Non-negative integer value expected in function catalan');
      }

      return divideScalar(combinations(multiplyScalar(n, 2), n), addScalar(n, 1));
    }
  });
});
exports.createCatalan = createCatalan;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/combinatorics/composition.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createComposition = void 0;

var _factory = require("../../utils/factory");

const name = 'composition';
const dependencies = ['typed', 'addScalar', 'combinations', 'isNegative', 'isPositive', 'isInteger', 'larger'];
const createComposition =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  addScalar,
  combinations,
  isPositive,
  isNegative,
  isInteger,
  larger
}) => {
  /**
   * The composition counts of n into k parts.
   *
   * composition only takes integer arguments.
   * The following condition must be enforced: k <= n.
   *
   * Syntax:
   *
   *   math.composition(n, k)
   *
   * Examples:
   *
   *    math.composition(5, 3) // returns 6
   *
   * See also:
   *
   *    combinations
   *
   * @param {Number | BigNumber} n    Total number of objects in the set
   * @param {Number | BigNumber} k    Number of objects in the subset
   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
   */
  return typed(name, {
    'number | BigNumber, number | BigNumber': function (n, k) {
      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
        throw new TypeError('Positive integer value expected in function composition');
      } else if (larger(k, n)) {
        throw new TypeError('k must be less than or equal to n in function composition');
      }

      return combinations(addScalar(n, -1), addScalar(k, -1));
    }
  });
});
exports.createComposition = createComposition;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/simplify/util.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUtil = void 0;

var _is = require("../../../utils/is");

var _factory = require("../../../utils/factory");

const name = 'simplifyUtil';
const dependencies = ['FunctionNode', 'OperatorNode', 'SymbolNode'];
const createUtil =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  FunctionNode,
  OperatorNode,
  SymbolNode
}) => {
  // TODO commutative/associative properties rely on the arguments
  // e.g. multiply is not commutative for matrices
  // The properties should be calculated from an argument to simplify, or possibly something in math.config
  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
  const commutative = {
    'add': true,
    'multiply': true
  };
  const associative = {
    'add': true,
    'multiply': true
  };

  function isCommutative(node, context) {
    if (!(0, _is.isOperatorNode)(node)) {
      return true;
    }

    const name = node.fn.toString();

    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {
      return context[name].commutative;
    }

    return commutative[name] || false;
  }

  function isAssociative(node, context) {
    if (!(0, _is.isOperatorNode)(node)) {
      return false;
    }

    const name = node.fn.toString();

    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {
      return context[name].associative;
    }

    return associative[name] || false;
  }
  /**
   * Flatten all associative operators in an expression tree.
   * Assumes parentheses have already been removed.
   */


  function flatten(node) {
    if (!node.args || node.args.length === 0) {
      return node;
    }

    node.args = allChildren(node);

    for (let i = 0; i < node.args.length; i++) {
      flatten(node.args[i]);
    }
  }
  /**
   * Get the children of a node as if it has been flattened.
   * TODO implement for FunctionNodes
   */


  function allChildren(node) {
    let op;
    const children = [];

    const findChildren = function (node) {
      for (let i = 0; i < node.args.length; i++) {
        const child = node.args[i];

        if ((0, _is.isOperatorNode)(child) && op === child.op) {
          findChildren(child);
        } else {
          children.push(child);
        }
      }
    };

    if (isAssociative(node)) {
      op = node.op;
      findChildren(node);
      return children;
    } else {
      return node.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a right-heavy binary tree.
   */


  function unflattenr(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    const makeNode = createMakeNodeFunction(node);
    const l = node.args.length;

    for (let i = 0; i < l; i++) {
      unflattenr(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      let curnode = node.args.pop();

      while (node.args.length > 0) {
        curnode = makeNode([node.args.pop(), curnode]);
      }

      node.args = curnode.args;
    }
  }
  /**
   *  Unflatten all flattened operators to a left-heavy binary tree.
   */


  function unflattenl(node) {
    if (!node.args || node.args.length === 0) {
      return;
    }

    const makeNode = createMakeNodeFunction(node);
    const l = node.args.length;

    for (let i = 0; i < l; i++) {
      unflattenl(node.args[i]);
    }

    if (l > 2 && isAssociative(node)) {
      let curnode = node.args.shift();

      while (node.args.length > 0) {
        curnode = makeNode([curnode, node.args.shift()]);
      }

      node.args = curnode.args;
    }
  }

  function createMakeNodeFunction(node) {
    if ((0, _is.isOperatorNode)(node)) {
      return function (args) {
        try {
          return new OperatorNode(node.op, node.fn, args, node.implicit);
        } catch (err) {
          console.error(err);
          return [];
        }
      };
    } else {
      return function (args) {
        return new FunctionNode(new SymbolNode(node.name), args);
      };
    }
  }

  return {
    createMakeNodeFunction,
    isCommutative,
    isAssociative,
    flatten,
    allChildren,
    unflattenr,
    unflattenl
  };
});
exports.createUtil = createUtil;
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/simplify/simplifyCore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimplifyCore = void 0;

var _is = require("../../../utils/is");

var _factory = require("../../../utils/factory");

const name = 'simplifyCore';
const dependencies = ['equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'ParenthesisNode'];
const createSimplifyCore =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  equal,
  isZero,
  add,
  subtract,
  multiply,
  divide,
  pow,
  ConstantNode,
  OperatorNode,
  FunctionNode,
  ParenthesisNode
}) => {
  const node0 = new ConstantNode(0);
  const node1 = new ConstantNode(1);
  /**
   * simplifyCore() performs single pass simplification suitable for
   * applications requiring ultimate performance. In contrast, simplify()
   * extends simplifyCore() with additional passes to provide deeper
   * simplification.
   *
   * Syntax:
   *
   *     simplify.simplifyCore(expr)
   *
   * Examples:
   *
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
   *
   * See also:
   *
   *     derivative
   *
   * @param {Node} node
   *     The expression to be simplified
   */

  function simplifyCore(node) {
    if ((0, _is.isOperatorNode)(node) && node.isUnary()) {
      const a0 = simplifyCore(node.args[0]);

      if (node.op === '+') {
        // unary plus
        return a0;
      }

      if (node.op === '-') {
        // unary minus
        if ((0, _is.isOperatorNode)(a0)) {
          if (a0.isUnary() && a0.op === '-') {
            return a0.args[0];
          } else if (a0.isBinary() && a0.fn === 'subtract') {
            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
          }
        }

        return new OperatorNode(node.op, node.fn, [a0]);
      }
    } else if ((0, _is.isOperatorNode)(node) && node.isBinary()) {
      const a0 = simplifyCore(node.args[0]);
      const a1 = simplifyCore(node.args[1]);

      if (node.op === '+') {
        if ((0, _is.isConstantNode)(a0)) {
          if (isZero(a0.value)) {
            return a1;
          } else if ((0, _is.isConstantNode)(a1)) {
            return new ConstantNode(add(a0.value, a1.value));
          }
        }

        if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {
          return a0;
        }

        if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {
          return new OperatorNode('-', 'subtract', [a0, a1.args[0]]);
        }

        return new OperatorNode(node.op, node.fn, a1 ? [a0, a1] : [a0]);
      } else if (node.op === '-') {
        if ((0, _is.isConstantNode)(a0) && a1) {
          if ((0, _is.isConstantNode)(a1)) {
            return new ConstantNode(subtract(a0.value, a1.value));
          } else if (isZero(a0.value)) {
            return new OperatorNode('-', 'unaryMinus', [a1]);
          }
        } // if (node.fn === "subtract" && node.args.length === 2) {


        if (node.fn === 'subtract') {
          if ((0, _is.isConstantNode)(a1) && isZero(a1.value)) {
            return a0;
          }

          if ((0, _is.isOperatorNode)(a1) && a1.isUnary() && a1.op === '-') {
            return simplifyCore(new OperatorNode('+', 'add', [a0, a1.args[0]]));
          }

          return new OperatorNode(node.op, node.fn, [a0, a1]);
        }
      } else if (node.op === '*') {
        if ((0, _is.isConstantNode)(a0)) {
          if (isZero(a0.value)) {
            return node0;
          } else if (equal(a0.value, 1)) {
            return a1;
          } else if ((0, _is.isConstantNode)(a1)) {
            return new ConstantNode(multiply(a0.value, a1.value));
          }
        }

        if ((0, _is.isConstantNode)(a1)) {
          if (isZero(a1.value)) {
            return node0;
          } else if (equal(a1.value, 1)) {
            return a0;
          } else if ((0, _is.isOperatorNode)(a0) && a0.isBinary() && a0.op === node.op) {
            const a00 = a0.args[0];

            if ((0, _is.isConstantNode)(a00)) {
              const a00a1 = new ConstantNode(multiply(a00.value, a1.value));
              return new OperatorNode(node.op, node.fn, [a00a1, a0.args[1]], node.implicit); // constants on left
            }
          }

          return new OperatorNode(node.op, node.fn, [a1, a0], node.implicit); // constants on left
        }

        return new OperatorNode(node.op, node.fn, [a0, a1], node.implicit);
      } else if (node.op === '/') {
        if ((0, _is.isConstantNode)(a0)) {
          if (isZero(a0.value)) {
            return node0;
          } else if ((0, _is.isConstantNode)(a1) && (equal(a1.value, 1) || equal(a1.value, 2) || equal(a1.value, 4))) {
            return new ConstantNode(divide(a0.value, a1.value));
          }
        }

        return new OperatorNode(node.op, node.fn, [a0, a1]);
      } else if (node.op === '^') {
        if ((0, _is.isConstantNode)(a1)) {
          if (isZero(a1.value)) {
            return node1;
          } else if (equal(a1.value, 1)) {
            return a0;
          } else {
            if ((0, _is.isConstantNode)(a0)) {
              // fold constant
              return new ConstantNode(pow(a0.value, a1.value));
            } else if ((0, _is.isOperatorNode)(a0) && a0.isBinary() && a0.op === '^') {
              const a01 = a0.args[1];

              if ((0, _is.isConstantNode)(a01)) {
                return new OperatorNode(node.op, node.fn, [a0.args[0], new ConstantNode(multiply(a01.value, a1.value))]);
              }
            }
          }
        }

        return new OperatorNode(node.op, node.fn, [a0, a1]);
      }
    } else if ((0, _is.isParenthesisNode)(node)) {
      const c = simplifyCore(node.content);

      if ((0, _is.isParenthesisNode)(c) || (0, _is.isSymbolNode)(c) || (0, _is.isConstantNode)(c)) {
        return c;
      }

      return new ParenthesisNode(c);
    } else if ((0, _is.isFunctionNode)(node)) {
      const args = node.args.map(simplifyCore).map(function (arg) {
        return (0, _is.isParenthesisNode)(arg) ? arg.content : arg;
      });
      return new FunctionNode(simplifyCore(node.fn), args);
    } else {// cannot simplify
    }

    return node;
  }

  return simplifyCore;
});
exports.createSimplifyCore = createSimplifyCore;
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/simplify/simplifyConstant.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimplifyConstant = void 0;

var _is = require("../../../utils/is");

var _factory = require("../../../utils/factory");

var _util = require("./util");

var _noop = require("../../../utils/noop");

// TODO this could be improved by simplifying seperated constants under associative and commutative operators
const name = 'simplifyConstant';
const dependencies = ['typed', 'config', 'mathWithTransform', '?fraction', '?bignumber', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode'];
const createSimplifyConstant =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  mathWithTransform,
  fraction,
  bignumber,
  ConstantNode,
  OperatorNode,
  FunctionNode,
  SymbolNode
}) => {
  const {
    isCommutative,
    isAssociative,
    allChildren,
    createMakeNodeFunction
  } = (0, _util.createUtil)({
    FunctionNode,
    OperatorNode,
    SymbolNode
  });

  function simplifyConstant(expr, options) {
    const res = foldFraction(expr, options);
    return (0, _is.isNode)(res) ? res : _toNode(res);
  }

  function _eval(fnname, args, options) {
    try {
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    } catch (ignore) {
      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
      args = args.map(function (x) {
        if ((0, _is.isFraction)(x)) {
          return x.valueOf();
        }

        return x;
      });
      return _toNumber(mathWithTransform[fnname].apply(null, args), options);
    }
  }

  const _toNode = typed({
    'Fraction': _fractionToNode,
    'number': function (n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n);
    },
    'BigNumber': function (n) {
      if (n < 0) {
        return unaryMinusNode(new ConstantNode(-n));
      }

      return new ConstantNode(n); // old parameters: (n.toString(), 'number')
    },
    'Complex': function (s) {
      throw new Error('Cannot convert Complex number to Node');
    }
  }); // convert a number to a fraction only if it can be expressed exactly


  function _exactFraction(n, options) {
    const exactFractions = options && options.exactFractions !== false;

    if (exactFractions && isFinite(n) && fraction) {
      const f = fraction(n);

      if (f.valueOf() === n) {
        return f;
      }
    }

    return n;
  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
  // BigNumbers are left alone


  const _toNumber = typed({
    'string, Object': function (s, options) {
      if (config.number === 'BigNumber') {
        if (bignumber === undefined) {
          (0, _noop.noBignumber)();
        }

        return bignumber(s);
      } else if (config.number === 'Fraction') {
        if (fraction === undefined) {
          (0, _noop.noFraction)();
        }

        return fraction(s);
      } else {
        const n = parseFloat(s);
        return _exactFraction(n, options);
      }
    },
    'Fraction, Object': function (s, options) {
      return s;
    },
    // we don't need options here
    'BigNumber, Object': function (s, options) {
      return s;
    },
    // we don't need options here
    'number, Object': function (s, options) {
      return _exactFraction(s, options);
    },
    'Complex, Object': function (s, options) {
      if (s.im !== 0) {
        return s;
      }

      return _exactFraction(s.re, options);
    }
  });

  function unaryMinusNode(n) {
    return new OperatorNode('-', 'unaryMinus', [n]);
  }

  function _fractionToNode(f) {
    let n;
    const vn = f.s * f.n;

    if (vn < 0) {
      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
    } else {
      n = new ConstantNode(vn);
    }

    if (f.d === 1) {
      return n;
    }

    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
  }
  /*
   * Create a binary tree from a list of Fractions and Nodes.
   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
   * @param args - list of Fractions and Nodes
   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
   * if args.length is 1, returns args[0]
   * @return - Either a Node representing a binary expression or Fraction
   */


  function foldOp(fn, args, makeNode, options) {
    return args.reduce(function (a, b) {
      if (!(0, _is.isNode)(a) && !(0, _is.isNode)(b)) {
        try {
          return _eval(fn, [a, b], options);
        } catch (ignoreandcontinue) {}

        a = _toNode(a);
        b = _toNode(b);
      } else if (!(0, _is.isNode)(a)) {
        a = _toNode(a);
      } else if (!(0, _is.isNode)(b)) {
        b = _toNode(b);
      }

      return makeNode([a, b]);
    });
  } // destroys the original node and returns a folded one


  function foldFraction(node, options) {
    switch (node.type) {
      case 'SymbolNode':
        return node;

      case 'ConstantNode':
        if (typeof node.value === 'number' || !isNaN(node.value)) {
          return _toNumber(node.value, options);
        }

        return node;

      case 'FunctionNode':
        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {
          return node;
        } // Process operators as OperatorNode


        const operatorFunctions = ['add', 'multiply'];

        if (operatorFunctions.indexOf(node.name) === -1) {
          let args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers

          if (!args.some(_is.isNode)) {
            try {
              return _eval(node.name, args, options);
            } catch (ignoreandcontine) {}
          } // Convert all args to nodes and construct a symbolic function call


          args = args.map(function (arg) {
            return (0, _is.isNode)(arg) ? arg : _toNode(arg);
          });
          return new FunctionNode(node.name, args);
        } else {} // treat as operator

        /* falls through */


      case 'OperatorNode':
        const fn = node.fn.toString();
        let args;
        let res;
        const makeNode = createMakeNodeFunction(node);

        if ((0, _is.isOperatorNode)(node) && node.isUnary()) {
          args = [foldFraction(node.args[0], options)];

          if (!(0, _is.isNode)(args[0])) {
            res = _eval(fn, args, options);
          } else {
            res = makeNode(args);
          }
        } else if (isAssociative(node)) {
          args = allChildren(node);
          args = args.map(arg => foldFraction(arg, options));

          if (isCommutative(fn)) {
            // commutative binary operator
            const consts = [];
            const vars = [];

            for (let i = 0; i < args.length; i++) {
              if (!(0, _is.isNode)(args[i])) {
                consts.push(args[i]);
              } else {
                vars.push(args[i]);
              }
            }

            if (consts.length > 1) {
              res = foldOp(fn, consts, makeNode, options);
              vars.unshift(res);
              res = foldOp(fn, vars, makeNode, options);
            } else {
              // we won't change the children order since it's not neccessary
              res = foldOp(fn, args, makeNode, options);
            }
          } else {
            // non-commutative binary operator
            res = foldOp(fn, args, makeNode, options);
          }
        } else {
          // non-associative binary operator
          args = node.args.map(arg => foldFraction(arg, options));
          res = foldOp(fn, args, makeNode, options);
        }

        return res;

      case 'ParenthesisNode':
        // remove the uneccessary parenthesis
        return foldFraction(node.content, options);

      case 'AccessorNode':
      /* falls through */

      case 'ArrayNode':
      /* falls through */

      case 'AssignmentNode':
      /* falls through */

      case 'BlockNode':
      /* falls through */

      case 'FunctionAssignmentNode':
      /* falls through */

      case 'IndexNode':
      /* falls through */

      case 'ObjectNode':
      /* falls through */

      case 'RangeNode':
      /* falls through */

      case 'ConditionalNode':
      /* falls through */

      default:
        throw new Error(`Unimplemented node type in simplifyConstant: ${node.type}`);
    }
  }

  return simplifyConstant;
});
exports.createSimplifyConstant = createSimplifyConstant;
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./util":"../node_modules/mathjs/src/function/algebra/simplify/util.js","../../../utils/noop":"../node_modules/mathjs/src/utils/noop.js"}],"../node_modules/mathjs/src/function/algebra/simplify/resolve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createResolve = void 0;

var _is = require("../../../utils/is");

var _factory = require("../../../utils/factory");

const name = 'resolve';
const dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];
const createResolve =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  parse,
  FunctionNode,
  OperatorNode,
  ParenthesisNode
}) => {
  /**
   * resolve(expr, scope) replaces variable nodes with their scoped values
   *
   * Syntax:
   *
   *     simplify.resolve(expr, scope)
   *
   * Examples:
   *
   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
   *
   * @param {Node} node
   *     The expression tree to be simplified
   * @param {Object} scope with variables to be resolved
   */
  function resolve(node, scope) {
    if (!scope) {
      return node;
    }

    if ((0, _is.isSymbolNode)(node)) {
      const value = scope[node.name];

      if ((0, _is.isNode)(value)) {
        return resolve(value, scope);
      } else if (typeof value === 'number') {
        return parse(String(value));
      }
    } else if ((0, _is.isOperatorNode)(node)) {
      const args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new OperatorNode(node.op, node.fn, args, node.implicit);
    } else if ((0, _is.isParenthesisNode)(node)) {
      return new ParenthesisNode(resolve(node.content, scope));
    } else if ((0, _is.isFunctionNode)(node)) {
      const args = node.args.map(function (arg) {
        return resolve(arg, scope);
      });
      return new FunctionNode(node.name, args);
    }

    return node;
  }

  return resolve;
});
exports.createResolve = createResolve;
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/simplify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimplify = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _util = require("./simplify/util");

var _simplifyCore = require("./simplify/simplifyCore");

var _simplifyConstant = require("./simplify/simplifyConstant");

var _resolve = require("./simplify/resolve");

const name = 'simplify';
const dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
const createSimplify =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  config,
  typed,
  parse,
  add,
  subtract,
  multiply,
  divide,
  pow,
  isZero,
  equal,
  fraction,
  bignumber,
  mathWithTransform,
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode
}) => {
  const simplifyConstant = (0, _simplifyConstant.createSimplifyConstant)({
    typed,
    config,
    mathWithTransform,
    fraction,
    bignumber,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    SymbolNode
  });
  const simplifyCore = (0, _simplifyCore.createSimplifyCore)({
    equal,
    isZero,
    add,
    subtract,
    multiply,
    divide,
    pow,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    ParenthesisNode
  });
  const resolve = (0, _resolve.createResolve)({
    parse,
    FunctionNode,
    OperatorNode,
    ParenthesisNode
  });
  const {
    isCommutative,
    isAssociative,
    flatten,
    unflattenr,
    unflattenl,
    createMakeNodeFunction
  } = (0, _util.createUtil)({
    FunctionNode,
    OperatorNode,
    SymbolNode
  });
  /**
   * Simplify an expression tree.
   *
   * A list of rules are applied to an expression, repeating over the list until
   * no further changes are made.
   * It's possible to pass a custom set of rules to the function as second
   * argument. A rule can be specified as an object, string, or function:
   *
   *     const rules = [
   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
   *       function (node) {
   *         // ... return a new node or return the node unchanged
   *         return node
   *       }
   *     ]
   *
   * String and object rules consist of a left and right pattern. The left is
   * used to match against the expression and the right determines what matches
   * are replaced with. The main difference between a pattern and a normal
   * expression is that variables starting with the following characters are
   * interpreted as wildcards:
   *
   * - 'n' - matches any Node
   * - 'c' - matches any ConstantNode
   * - 'v' - matches any Node that is not a ConstantNode
   *
   * The default list of rules is exposed on the function as `simplify.rules`
   * and can be used as a basis to built a set of custom rules.
   *
   * For more details on the theory, see:
   *
   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
   *
   *  An optional `options` argument can be passed as last argument of `simplify`.
   *  There is currently one option available: `exactFractions`, a boolean which
   *  is `true` by default.
   *
   * Syntax:
   *
   *     simplify(expr)
   *     simplify(expr, rules)
   *     simplify(expr, rules)
   *     simplify(expr, rules, scope)
   *     simplify(expr, rules, scope, options)
   *     simplify(expr, scope)
   *     simplify(expr, scope, options)
   *
   * Examples:
   *
   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
   *     math.simplify(f)                          // Node "2 * x"
   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
   *
   * See also:
   *
   *     derivative, parse, evaluate, rationalize
   *
   * @param {Node | string} expr
   *            The expression to be simplified
   * @param {Array<{l:string, r: string} | string | function>} [rules]
   *            Optional list with custom rules
   * @return {Node} Returns the simplified form of `expr`
   */

  const simplify = typed('simplify', {
    'string': function (expr) {
      return simplify(parse(expr), simplify.rules, {}, {});
    },
    'string, Object': function (expr, scope) {
      return simplify(parse(expr), simplify.rules, scope, {});
    },
    'string, Object, Object': function (expr, scope, options) {
      return simplify(parse(expr), simplify.rules, scope, options);
    },
    'string, Array': function (expr, rules) {
      return simplify(parse(expr), rules, {}, {});
    },
    'string, Array, Object': function (expr, rules, scope) {
      return simplify(parse(expr), rules, scope, {});
    },
    'string, Array, Object, Object': function (expr, rules, scope, options) {
      return simplify(parse(expr), rules, scope, options);
    },
    'Node, Object': function (expr, scope) {
      return simplify(expr, simplify.rules, scope, {});
    },
    'Node, Object, Object': function (expr, scope, options) {
      return simplify(expr, simplify.rules, scope, options);
    },
    'Node': function (expr) {
      return simplify(expr, simplify.rules, {}, {});
    },
    'Node, Array': function (expr, rules) {
      return simplify(expr, rules, {}, {});
    },
    'Node, Array, Object': function (expr, rules, scope) {
      return simplify(expr, rules, scope, {});
    },
    'Node, Array, Object, Object': function (expr, rules, scope, options) {
      rules = _buildRules(rules);
      let res = resolve(expr, scope);
      res = removeParens(res);
      let visited = {};
      let str = res.toString({
        parenthesis: 'all'
      });

      while (!visited[str]) {
        visited[str] = true;
        _lastsym = 0; // counter for placeholder symbols

        for (let i = 0; i < rules.length; i++) {
          if (typeof rules[i] === 'function') {
            res = rules[i](res, options);
          } else {
            flatten(res);
            res = applyRule(res, rules[i]);
          }

          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
        }

        str = res.toString({
          parenthesis: 'all'
        });
      }

      return res;
    }
  });
  simplify.simplifyCore = simplifyCore;
  simplify.resolve = resolve;

  function removeParens(node) {
    return node.transform(function (node, path, parent) {
      return (0, _is.isParenthesisNode)(node) ? removeParens(node.content) : node;
    });
  } // All constants that are allowed in rules


  const SUPPORTED_CONSTANTS = {
    true: true,
    false: true,
    e: true,
    i: true,
    Infinity: true,
    LN2: true,
    LN10: true,
    LOG2E: true,
    LOG10E: true,
    NaN: true,
    phi: true,
    pi: true,
    SQRT1_2: true,
    SQRT2: true,
    tau: true // null: false,
    // undefined: false,
    // version: false,
    // Array of strings, used to build the ruleSet.
    // Each l (left side) and r (right side) are parsed by
    // the expression parser into a node tree.
    // Left hand sides are matched to subtrees within the
    // expression to be parsed and replaced with the right
    // hand side.
    // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
    // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
    // It is possible to get into an infinite loop with conflicting rules

  };
  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore
  // { l: 'n^0', r: '1' },     // simplifyCore
  // { l: '0*n', r: '0' },     // simplifyCore
  // { l: 'n/n', r: '1'},      // simplifyCore
  // { l: 'n^1', r: 'n' },     // simplifyCore
  // { l: '+n1', r:'n1' },     // simplifyCore
  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
  {
    l: 'log(e)',
    r: '1'
  }, // temporary rules
  {
    l: 'n-n1',
    r: 'n+-n1'
  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
  {
    l: '-(c*v)',
    r: '(-c) * v'
  }, // make non-constant terms positive
  {
    l: '-v',
    r: '(-1) * v'
  }, {
    l: 'n/n1^n2',
    r: 'n*n1^-n2'
  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
  {
    l: 'n/n1',
    r: 'n*n1^-1'
  }, // expand nested exponentiation
  {
    l: '(n ^ n1) ^ n2',
    r: 'n ^ (n1 * n2)'
  }, // collect like factors
  {
    l: 'n*n',
    r: 'n^2'
  }, {
    l: 'n * n^n1',
    r: 'n^(n1+1)'
  }, {
    l: 'n^n1 * n^n2',
    r: 'n^(n1+n2)'
  }, // collect like terms
  {
    l: 'n+n',
    r: '2*n'
  }, {
    l: 'n+-n',
    r: '0'
  }, {
    l: 'n1*n2 + n2',
    r: '(n1+1)*n2'
  }, {
    l: 'n1*n3 + n2*n3',
    r: '(n1+n2)*n3'
  }, // remove parenthesis in the case of negating a quantitiy
  {
    l: 'n1 + -1 * (n2 + n3)',
    r: 'n1 + -1 * n2 + -1 * n3'
  }, simplifyConstant, {
    l: '(-n)*n1',
    r: '-(n*n1)'
  }, // make factors positive (and undo 'make non-constant terms positive')
  // ordering of constants
  {
    l: 'c+v',
    r: 'v+c',
    context: {
      'add': {
        commutative: false
      }
    }
  }, {
    l: 'v*c',
    r: 'c*v',
    context: {
      'multiply': {
        commutative: false
      }
    }
  }, // undo temporary rules
  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
  {
    l: 'n+-n1',
    r: 'n-n1'
  }, // undo replace 'subtract'
  {
    l: 'n*(n1^-1)',
    r: 'n/n1'
  }, // undo replace 'divide'
  {
    l: 'n*n1^-n2',
    r: 'n/n1^n2'
  }, {
    l: 'n1^-1',
    r: '1/n1'
  }, {
    l: 'n*(n1/n2)',
    r: '(n*n1)/n2'
  }, // '*' before '/'
  {
    l: 'n-(n1+n2)',
    r: 'n-n1-n2'
  }, // '-' before '+'
  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
  {
    l: '1*n',
    r: 'n' // this pattern can be produced by simplifyConstant

  }];
  /**
   * Parse the string array of rules into nodes
   *
   * Example syntax for rules:
   *
   * Position constants to the left in a product:
   * { l: 'n1 * c1', r: 'c1 * n1' }
   * n1 is any Node, and c1 is a ConstantNode.
   *
   * Apply difference of squares formula:
   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
   * n1, n2 mean any Node.
   *
   * Short hand notation:
   * 'n1 * c1 -> c1 * n1'
   */

  function _buildRules(rules) {
    // Array of rules to be used to simplify expressions
    const ruleSet = [];

    for (let i = 0; i < rules.length; i++) {
      let rule = rules[i];
      let newRule;
      const ruleType = typeof rule;

      switch (ruleType) {
        case 'string':
          const lr = rule.split('->');

          if (lr.length === 2) {
            rule = {
              l: lr[0],
              r: lr[1]
            };
          } else {
            throw SyntaxError('Could not parse rule: ' + rule);
          }

        /* falls through */

        case 'object':
          newRule = {
            l: removeParens(parse(rule.l)),
            r: removeParens(parse(rule.r))
          };

          if (rule.context) {
            newRule.evaluate = rule.context;
          }

          if (rule.evaluate) {
            newRule.evaluate = parse(rule.evaluate);
          }

          if (isAssociative(newRule.l)) {
            const makeNode = createMakeNodeFunction(newRule.l);

            const expandsym = _getExpandPlaceholderSymbol();

            newRule.expanded = {};
            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
            // This helps to match the newRule against nodes returned from getSplits() later on.

            flatten(newRule.expanded.l);
            unflattenr(newRule.expanded.l);
            newRule.expanded.r = makeNode([newRule.r, expandsym]);
          }

          break;

        case 'function':
          newRule = rule;
          break;

        default:
          throw TypeError('Unsupported type of rule: ' + ruleType);
      } // console.log('Adding rule: ' + rules[i])
      // console.log(newRule)


      ruleSet.push(newRule);
    }

    return ruleSet;
  }

  let _lastsym = 0;

  function _getExpandPlaceholderSymbol() {
    return new SymbolNode('_p' + _lastsym++);
  }
  /**
   * Returns a simplfied form of node, or the original node if no simplification was possible.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
   */


  const applyRule = typed('applyRule', {
    'Node, Object': function (node, rule) {
      // console.log('Entering applyRule(' + node.toString() + ')')
      // Do not clone node unless we find a match
      let res = node; // First replace our child nodes with their simplified versions
      // If a child could not be simplified, the assignments will have
      // no effect since the node is returned unchanged

      if (res instanceof OperatorNode || res instanceof FunctionNode) {
        if (res.args) {
          for (let i = 0; i < res.args.length; i++) {
            res.args[i] = applyRule(res.args[i], rule);
          }
        }
      } else if (res instanceof ParenthesisNode) {
        if (res.content) {
          res.content = applyRule(res.content, rule);
        }
      } // Try to match a rule against this node


      let repl = rule.r;

      let matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


      if (!matches && rule.expanded) {
        repl = rule.expanded.r;
        matches = _ruleMatch(rule.expanded.l, res)[0];
      }

      if (matches) {
        // const before = res.toString({parenthesis: 'all'})
        // Create a new node by cloning the rhs of the matched rule
        // we keep any implicit multiplication state if relevant
        const implicit = res.implicit;
        res = repl.clone();

        if (implicit && 'implicit' in repl) {
          res.implicit = true;
        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


        res = res.transform(function (node) {
          if (node.isSymbolNode && matches.placeholders.hasOwnProperty(node.name)) {
            return matches.placeholders[node.name].clone();
          } else {
            return node;
          }
        }); // const after = res.toString({parenthesis: 'all'})
        // console.log('Simplified ' + before + ' to ' + after)
      }

      return res;
    }
  });
  /**
   * Get (binary) combinations of a flattened binary node
   * e.g. +(node1, node2, node3) -> [
   *        +(node1,  +(node2, node3)),
   *        +(node2,  +(node1, node3)),
   *        +(node3,  +(node1, node2))]
   *
   */

  function getSplits(node, context) {
    const res = [];
    let right, rightArgs;
    const makeNode = createMakeNodeFunction(node);

    if (isCommutative(node, context)) {
      for (let i = 0; i < node.args.length; i++) {
        rightArgs = node.args.slice(0);
        rightArgs.splice(i, 1);
        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
        res.push(makeNode([node.args[i], right]));
      }
    } else {
      rightArgs = node.args.slice(1);
      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
      res.push(makeNode([node.args[0], right]));
    }

    return res;
  }
  /**
   * Returns the set union of two match-placeholders or null if there is a conflict.
   */


  function mergeMatch(match1, match2) {
    const res = {
      placeholders: {} // Some matches may not have placeholders; this is OK

    };

    if (!match1.placeholders && !match2.placeholders) {
      return res;
    } else if (!match1.placeholders) {
      return match2;
    } else if (!match2.placeholders) {
      return match1;
    } // Placeholders with the same key must match exactly


    for (let key in match1.placeholders) {
      res.placeholders[key] = match1.placeholders[key];

      if (match2.placeholders.hasOwnProperty(key)) {
        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
          return null;
        }
      }
    }

    for (let key in match2.placeholders) {
      res.placeholders[key] = match2.placeholders[key];
    }

    return res;
  }
  /**
   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   */


  function combineChildMatches(list1, list2) {
    const res = [];

    if (list1.length === 0 || list2.length === 0) {
      return res;
    }

    let merged;

    for (let i1 = 0; i1 < list1.length; i1++) {
      for (let i2 = 0; i2 < list2.length; i2++) {
        merged = mergeMatch(list1[i1], list2[i2]);

        if (merged) {
          res.push(merged);
        }
      }
    }

    return res;
  }
  /**
   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
   * Each list represents matches found in one child of a node.
   * Returns a list of unique matches.
   */


  function mergeChildMatches(childMatches) {
    if (childMatches.length === 0) {
      return childMatches;
    }

    const sets = childMatches.reduce(combineChildMatches);
    const uniqueSets = [];
    const unique = {};

    for (let i = 0; i < sets.length; i++) {
      const s = JSON.stringify(sets[i]);

      if (!unique[s]) {
        unique[s] = true;
        uniqueSets.push(sets[i]);
      }
    }

    return uniqueSets;
  }
  /**
   * Determines whether node matches rule.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @return {Object} Information about the match, if it exists.
   */


  function _ruleMatch(rule, node, isSplit) {
    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
    //    console.log('rule = ' + rule)
    //    console.log('node = ' + node)
    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
    let res = [{
      placeholders: {}
    }];

    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {
      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
      if (rule instanceof OperatorNode) {
        if (rule.op !== node.op || rule.fn !== node.fn) {
          return [];
        }
      } else if (rule instanceof FunctionNode) {
        if (rule.name !== node.name) {
          return [];
        }
      } // rule and node match. Search the children of rule and node.


      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
        // Expect non-associative operators to match exactly
        const childMatches = [];

        for (let i = 0; i < rule.args.length; i++) {
          const childMatch = _ruleMatch(rule.args[i], node.args[i]);

          if (childMatch.length === 0) {
            // Child did not match, so stop searching immediately
            return [];
          } // The child matched, so add the information returned from the child to our result


          childMatches.push(childMatch);
        }

        res = mergeChildMatches(childMatches);
      } else if (node.args.length >= 2 && rule.args.length === 2) {
        // node is flattened, rule is not
        // Associative operators/functions can be split in different ways so we check if the rule matches each
        // them and return their union.
        const splits = getSplits(node, rule.context);
        let splitMatches = [];

        for (let i = 0; i < splits.length; i++) {
          const matchSet = _ruleMatch(rule, splits[i], true); // recursing at the same tree depth here


          splitMatches = splitMatches.concat(matchSet);
        }

        return splitMatches;
      } else if (rule.args.length > 2) {
        throw Error('Unexpected non-binary associative function: ' + rule.toString());
      } else {
        // Incorrect number of arguments in rule and node, so no match
        return [];
      }
    } else if (rule instanceof SymbolNode) {
      // If the rule is a SymbolNode, then it carries a special meaning
      // according to the first character of the symbol node name.
      // c.* matches a ConstantNode
      // n.* matches any node
      if (rule.name.length === 0) {
        throw new Error('Symbol in rule has 0 length...!?');
      }

      if (SUPPORTED_CONSTANTS[rule.name]) {
        // built-in constant must match exactly
        if (rule.name !== node.name) {
          return [];
        }
      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
        // rule matches _anything_, so assign this node to the rule.name placeholder
        // Assign node to the rule.name placeholder.
        // Our parent will check for matches among placeholders.
        res[0].placeholders[rule.name] = node;
      } else if (rule.name[0] === 'v') {
        // rule matches any variable thing (not a ConstantNode)
        if (!(0, _is.isConstantNode)(node)) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting something other than a ConstantNode
          return [];
        }
      } else if (rule.name[0] === 'c') {
        // rule matches any ConstantNode
        if (node instanceof ConstantNode) {
          res[0].placeholders[rule.name] = node;
        } else {
          // Mis-match: rule was expecting a ConstantNode
          return [];
        }
      } else {
        throw new Error('Invalid symbol in rule: ' + rule.name);
      }
    } else if (rule instanceof ConstantNode) {
      // Literal constant must match exactly
      if (!equal(rule.value, node.value)) {
        return [];
      }
    } else {
      // Some other node was encountered which we aren't prepared for, so no match
      return [];
    } // It's a match!
    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


    return res;
  }
  /**
   * Determines whether p and q (and all their children nodes) are identical.
   *
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
   * @return {Object} Information about the match, if it exists.
   */


  function _exactMatch(p, q) {
    if (p instanceof ConstantNode && q instanceof ConstantNode) {
      if (!equal(p.value, q.value)) {
        return false;
      }
    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {
      if (p.name !== q.name) {
        return false;
      }
    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {
      if (p instanceof OperatorNode) {
        if (p.op !== q.op || p.fn !== q.fn) {
          return false;
        }
      } else if (p instanceof FunctionNode) {
        if (p.name !== q.name) {
          return false;
        }
      }

      if (p.args.length !== q.args.length) {
        return false;
      }

      for (let i = 0; i < p.args.length; i++) {
        if (!_exactMatch(p.args[i], q.args[i])) {
          return false;
        }
      }
    } else {
      return false;
    }

    return true;
  }

  return simplify;
});
exports.createSimplify = createSimplify;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./simplify/util":"../node_modules/mathjs/src/function/algebra/simplify/util.js","./simplify/simplifyCore":"../node_modules/mathjs/src/function/algebra/simplify/simplifyCore.js","./simplify/simplifyConstant":"../node_modules/mathjs/src/function/algebra/simplify/simplifyConstant.js","./simplify/resolve":"../node_modules/mathjs/src/function/algebra/simplify/resolve.js"}],"../node_modules/mathjs/src/function/algebra/derivative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDerivative = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

const name = 'derivative';
const dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];
const createDerivative =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  parse,
  simplify,
  equal,
  isZero,
  numeric,
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode
}) => {
  /**
   * Takes the derivative of an expression expressed in parser Nodes.
   * The derivative will be taken over the supplied variable in the
   * second parameter. If there are multiple variables in the expression,
   * it will return a partial derivative.
   *
   * This uses rules of differentiation which can be found here:
   *
   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)
   *
   * Syntax:
   *
   *     derivative(expr, variable)
   *     derivative(expr, variable, options)
   *
   * Examples:
   *
   *     math.derivative('x^2', 'x')                     // Node {2 * x}
   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
   *     math.derivative('2*x', 'x').evaluate()          // number 2
   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8
   *     const f = math.parse('x^2')
   *     const x = math.parse('x')
   *     math.derivative(f, x)                           // Node {2 * x}
   *
   * See also:
   *
   *     simplify, parse, evaluate
   *
   * @param  {Node | string} expr           The expression to differentiate
   * @param  {SymbolNode | string} variable The variable over which to differentiate
   * @param  {{simplify: boolean}} [options]
   *                         There is one option available, `simplify`, which
   *                         is true by default. When false, output will not
   *                         be simplified.
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */
  const derivative = typed('derivative', {
    'Node, SymbolNode, Object': function (expr, variable, options) {
      const constNodes = {};
      constTag(constNodes, expr, variable.name);

      const res = _derivative(expr, constNodes);

      return options.simplify ? simplify(res) : res;
    },
    'Node, SymbolNode': function (expr, variable) {
      return derivative(expr, variable, {
        simplify: true
      });
    },
    'string, SymbolNode': function (expr, variable) {
      return derivative(parse(expr), variable);
    },
    'string, SymbolNode, Object': function (expr, variable, options) {
      return derivative(parse(expr), variable, options);
    },
    'string, string': function (expr, variable) {
      return derivative(parse(expr), parse(variable));
    },
    'string, string, Object': function (expr, variable, options) {
      return derivative(parse(expr), parse(variable), options);
    },
    'Node, string': function (expr, variable) {
      return derivative(expr, parse(variable));
    },
    'Node, string, Object': function (expr, variable, options) {
      return derivative(expr, parse(variable), options);
    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
      let res = expr
      for (let i = 0; i < order; i++) {
        let constNodes = {}
        constTag(constNodes, expr, variable.name)
        res = _derivative(res, constNodes)
      }
      return res
    }
    */

  });
  derivative._simplify = true;

  derivative.toTex = function (deriv) {
    return _derivTex.apply(null, deriv.args);
  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.
  // NOTE: the optional "order" parameter here is currently unused


  const _derivTex = typed('_derivTex', {
    'Node, SymbolNode': function (expr, x) {
      if ((0, _is.isConstantNode)(expr) && (0, _is.typeOf)(expr.value) === 'string') {
        return _derivTex(parse(expr.value).toString(), x.toString(), 1);
      } else {
        return _derivTex(expr.toString(), x.toString(), 1);
      }
    },
    'Node, ConstantNode': function (expr, x) {
      if ((0, _is.typeOf)(x.value) === 'string') {
        return _derivTex(expr, parse(x.value));
      } else {
        throw new Error("The second parameter to 'derivative' is a non-string constant");
      }
    },
    'Node, SymbolNode, ConstantNode': function (expr, x, order) {
      return _derivTex(expr.toString(), x.name, order.value);
    },
    'string, string, number': function (expr, x, order) {
      let d;

      if (order === 1) {
        d = '{d\\over d' + x + '}';
      } else {
        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
      }

      return d + `\\left[${expr}\\right]`;
    }
  });
  /**
   * Does a depth-first search on the expression tree to identify what Nodes
   * are constants (e.g. 2 + 2), and stores the ones that are constants in
   * constNodes. Classification is done as follows:
   *
   *   1. ConstantNodes are constants.
   *   2. If there exists a SymbolNode, of which we are differentiating over,
   *      in the subtree it is not constant.
   *
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {string} varName     Variable that we are differentiating
   * @return {boolean}  if node is constant
   */
  // TODO: can we rewrite constTag into a pure function?


  const constTag = typed('constTag', {
    'Object, ConstantNode, string': function (constNodes, node) {
      constNodes[node] = true;
      return true;
    },
    'Object, SymbolNode, string': function (constNodes, node, varName) {
      // Treat other variables like constants. For reasoning, see:
      //   https://en.wikipedia.org/wiki/Partial_derivative
      if (node.name !== varName) {
        constNodes[node] = true;
        return true;
      }

      return false;
    },
    'Object, ParenthesisNode, string': function (constNodes, node, varName) {
      return constTag(constNodes, node.content, varName);
    },
    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {
      if (node.params.indexOf(varName) === -1) {
        constNodes[node] = true;
        return true;
      }

      return constTag(constNodes, node.expr, varName);
    },
    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {
      if (node.args.length > 0) {
        let isConst = constTag(constNodes, node.args[0], varName);

        for (let i = 1; i < node.args.length; ++i) {
          isConst = constTag(constNodes, node.args[i], varName) && isConst;
        }

        if (isConst) {
          constNodes[node] = true;
          return true;
        }
      }

      return false;
    }
  });
  /**
   * Applies differentiation rules.
   *
   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
   * @param  {Object} constNodes  Holds the nodes that are constant
   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
   */

  const _derivative = typed('_derivative', {
    'ConstantNode, Object': function (node) {
      return createConstantNode(0);
    },
    'SymbolNode, Object': function (node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return createConstantNode(1);
    },
    'ParenthesisNode, Object': function (node, constNodes) {
      return new ParenthesisNode(_derivative(node.content, constNodes));
    },
    'FunctionAssignmentNode, Object': function (node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      return _derivative(node.expr, constNodes);
    },
    'FunctionNode, Object': function (node, constNodes) {
      if (node.args.length !== 1) {
        funcArgsCheck(node);
      }

      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      const arg0 = node.args[0];
      let arg1;
      let div = false; // is output a fraction?

      let negative = false; // is output negative?

      let funcDerivative;

      switch (node.name) {
        case 'cbrt':
          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
          break;

        case 'sqrt':
        case 'nthRoot':
          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
          if (node.args.length === 1) {
            div = true;
            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);
          } else if (node.args.length === 2) {
            // Rearrange from nthRoot(x, a) -> x^(1/a)
            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

            constNodes[arg1] = constNodes[node.args[1]];
            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);
          }

          break;

        case 'log10':
          arg1 = createConstantNode(10);

        /* fall through! */

        case 'log':
          if (!arg1 && node.args.length === 1) {
            // d/dx(log(x)) = 1 / x
            funcDerivative = arg0.clone();
            div = true;
          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
            // d/dx(log(x, c)) = 1 / (x*ln(c))
            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);
            div = true;
          } else if (node.args.length === 2) {
            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);
          }

          break;

        case 'pow':
          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser

          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);

        case 'exp':
          // d/dx(e^x) = e^x
          funcDerivative = new FunctionNode('exp', [arg0.clone()]);
          break;

        case 'sin':
          // d/dx(sin(x)) = cos(x)
          funcDerivative = new FunctionNode('cos', [arg0.clone()]);
          break;

        case 'cos':
          // d/dx(cos(x)) = -sin(x)
          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);
          break;

        case 'tan':
          // d/dx(tan(x)) = sec(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sec':
          // d/dx(sec(x)) = sec(x)tan(x)
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);
          break;

        case 'csc':
          // d/dx(csc(x)) = -csc(x)cot(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);
          break;

        case 'cot':
          // d/dx(cot(x)) = -csc(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asin':
          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'acos':
          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
          break;

        case 'atan':
          // d/dx(atan(x)) = 1 / (x^2 + 1)
          div = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'asec':
          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
          div = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acsc':
          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acot':
          // d/dx(acot(x)) = -1 / (x^2 + 1)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
          break;

        case 'sinh':
          // d/dx(sinh(x)) = cosh(x)
          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);
          break;

        case 'cosh':
          // d/dx(cosh(x)) = sinh(x)
          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);
          break;

        case 'tanh':
          // d/dx(tanh(x)) = sech(x)^2
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'sech':
          // d/dx(sech(x)) = -sech(x)tanh(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);
          break;

        case 'csch':
          // d/dx(csch(x)) = -csch(x)coth(x)
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);
          break;

        case 'coth':
          // d/dx(coth(x)) = -csch(x)^2
          negative = true;
          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);
          break;

        case 'asinh':
          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'acosh':
          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
          div = true;
          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
          break;

        case 'atanh':
          // d/dx(atanh(x)) = 1 / (1 - x^2)
          div = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'asech':
          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
          break;

        case 'acsch':
          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
          break;

        case 'acoth':
          // d/dx(acoth(x)) = -1 / (1 - x^2)
          div = true;
          negative = true;
          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
          break;

        case 'abs':
          // d/dx(abs(x)) = abs(x)/x
          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);
          break;

        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

        default:
          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
      }

      let op, func;

      if (div) {
        op = '/';
        func = 'divide';
      } else {
        op = '*';
        func = 'multiply';
      }
      /* Apply chain rule to all functions:
         F(x)  = f(g(x))
         F'(x) = g'(x)*f'(g(x)) */


      let chainDerivative = _derivative(arg0, constNodes);

      if (negative) {
        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
      }

      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
    },
    'OperatorNode, Object': function (node, constNodes) {
      if (constNodes[node] !== undefined) {
        return createConstantNode(0);
      }

      if (node.op === '+') {
        // d/dx(sum(f(x)) = sum(f'(x))
        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {
          return _derivative(arg, constNodes);
        }));
      }

      if (node.op === '-') {
        // d/dx(+/-f(x)) = +/-f'(x)
        if (node.isUnary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


        if (node.isBinary()) {
          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
        }
      }

      if (node.op === '*') {
        // d/dx(c*f(x)) = c*f'(x)
        const constantTerms = node.args.filter(function (arg) {
          return constNodes[arg] !== undefined;
        });

        if (constantTerms.length > 0) {
          const nonConstantTerms = node.args.filter(function (arg) {
            return constNodes[arg] === undefined;
          });
          const nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);
          const newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
          return new OperatorNode('*', 'multiply', newArgs);
        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {
          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {
            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
          }));
        }));
      }

      if (node.op === '/' && node.isBinary()) {
        const arg0 = node.args[0];
        const arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

        if (constNodes[arg1] !== undefined) {
          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);
        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


        if (constNodes[arg0] !== undefined) {
          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
      }

      if (node.op === '^' && node.isBinary()) {
        const arg0 = node.args[0];
        const arg1 = node.args[1];

        if (constNodes[arg0] !== undefined) {
          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
          if ((0, _is.isConstantNode)(arg0) && (isZero(arg0.value) || equal(arg0.value, 1))) {
            return createConstantNode(0);
          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [arg0.clone()]), _derivative(arg1.clone(), constNodes)])]);
        }

        if (constNodes[arg1] !== undefined) {
          if ((0, _is.isConstantNode)(arg1)) {
            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
            if (isZero(arg1.value)) {
              return createConstantNode(0);
            } // Ignore exponent; f(x)^1 = f(x)


            if (equal(arg1.value, 1)) {
              return _derivative(arg0, constNodes);
            }
          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


          const powMinusOne = new OperatorNode('^', 'pow', [arg0.clone(), new OperatorNode('-', 'subtract', [arg1, createConstantNode(1)])]);
          return new OperatorNode('*', 'multiply', [arg1.clone(), new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), powMinusOne])]);
        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [arg0.clone(), arg1.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), new OperatorNode('/', 'divide', [arg1.clone(), arg0.clone()])]), new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), new FunctionNode('log', [arg0.clone()])])])]);
      }

      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
    }
  });
  /**
   * Ensures the number of arguments for a function are correct,
   * and will throw an error otherwise.
   *
   * @param {FunctionNode} node
   */


  function funcArgsCheck(node) {
    // TODO add min, max etc
    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {
      return;
    } // There should be an incorrect number of arguments if we reach here
    // Change all args to constants to avoid unidentified
    // symbol error when compiling function


    for (let i = 0; i < node.args.length; ++i) {
      node.args[i] = createConstantNode(0);
    }

    node.compile().evaluate();
    throw new Error('Expected TypeError, but none found');
  }
  /**
   * Helper function to create a constant node with a specific type
   * (number, BigNumber, Fraction)
   * @param {number} value
   * @param {string} [valueType]
   * @return {ConstantNode}
   */


  function createConstantNode(value, valueType) {
    return new ConstantNode(numeric(value, valueType || config.number));
  }

  return derivative;
});
exports.createDerivative = createDerivative;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/function/algebra/rationalize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRationalize = void 0;

var _number = require("../../utils/number");

var _factory = require("../../utils/factory");

var _simplifyConstant = require("./simplify/simplifyConstant");

var _simplifyCore = require("./simplify/simplifyCore");

const name = 'rationalize';
const dependencies = ['config', 'typed', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'parse', 'simplify', '?bignumber', '?fraction', 'mathWithTransform', 'ConstantNode', 'OperatorNode', 'FunctionNode', 'SymbolNode', 'ParenthesisNode'];
const createRationalize =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  config,
  typed,
  equal,
  isZero,
  add,
  subtract,
  multiply,
  divide,
  pow,
  parse,
  simplify,
  fraction,
  bignumber,
  mathWithTransform,
  ConstantNode,
  OperatorNode,
  FunctionNode,
  SymbolNode,
  ParenthesisNode
}) => {
  const simplifyConstant = (0, _simplifyConstant.createSimplifyConstant)({
    typed,
    config,
    mathWithTransform,
    fraction,
    bignumber,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    SymbolNode
  });
  const simplifyCore = (0, _simplifyCore.createSimplifyCore)({
    equal,
    isZero,
    add,
    subtract,
    multiply,
    divide,
    pow,
    ConstantNode,
    OperatorNode,
    FunctionNode,
    ParenthesisNode
  });
  /**
   * Transform a rationalizable expression in a rational fraction.
   * If rational fraction is one variable polynomial then converts
   * the numerator and denominator in canonical form, with decreasing
   * exponents, returning the coefficients of numerator.
   *
   * Syntax:
   *
   *     rationalize(expr)
   *     rationalize(expr, detailed)
   *     rationalize(expr, scope)
   *     rationalize(expr, scope, detailed)
   *
   * Examples:
   *
   *     math.rationalize('sin(x)+y')
   *                   //  Error: There is an unsolved function call
   *     math.rationalize('2x/y - y/(x+1)')
   *                   // (2*x^2-y^2+2*x)/(x*y+y)
   *     math.rationalize('(2x+1)^6')
   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
   *
   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
   *     math.rationalize('x+x+x+y',{})    // 3*x+y
   *
   *     const ret = math.rationalize('x+x+x+y',{},true)
   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
   *     const ret = math.rationalize('-2+5x^2',{},true)
   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
   *
   * See also:
   *
   *     simplify
   *
   * @param  {Node|string} expr    The expression to check if is a polynomial expression
   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
   *
   * @return {Object | Node}    The rational polynomial of `expr` or na object
   *            {Object}
   *              {Expression Node} expression: node simplified expression
   *              {Expression Node} numerator: simplified numerator of expression
   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
   *              {Array}           variables:  variable names
   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
   *           {Expression Node}  node simplified expression
   *
   */

  const rationalize = typed(name, {
    'string': function (expr) {
      return rationalize(parse(expr), {}, false);
    },
    'string, boolean': function (expr, detailed) {
      return rationalize(parse(expr), {}, detailed);
    },
    'string, Object': function (expr, scope) {
      return rationalize(parse(expr), scope, false);
    },
    'string, Object, boolean': function (expr, scope, detailed) {
      return rationalize(parse(expr), scope, detailed);
    },
    'Node': function (expr) {
      return rationalize(expr, {}, false);
    },
    'Node, boolean': function (expr, detailed) {
      return rationalize(expr, {}, detailed);
    },
    'Node, Object': function (expr, scope) {
      return rationalize(expr, scope, false);
    },
    'Node, Object, boolean': function (expr, scope, detailed) {
      const setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

      const polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

      const nVars = polyRet.variables.length;
      expr = polyRet.expression;

      if (nVars >= 1) {
        // If expression in not a constant
        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

        let sBefore; // Previous expression

        let rules;
        let eDistrDiv = true;
        let redoInic = false;
        expr = simplify(expr, setRules.firstRules, {}, {
          exactFractions: false
        }); // Apply the initial rules, including succ div rules

        let s;

        while (true) {
          // Apply alternately  successive division rules and distr.div.rules
          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
          expr = simplify(expr, rules); // until no more changes

          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

          s = expr.toString();

          if (s === sBefore) {
            break; // No changes : end of the loop
          }

          redoInic = true;
          sBefore = s;
        }

        if (redoInic) {
          // Apply first rules again without succ div rules (if there are changes)
          expr = simplify(expr, setRules.firstRulesAgain, {}, {
            exactFractions: false
          });
        }

        expr = simplify(expr, setRules.finalRules, {}, {
          exactFractions: false
        }); // Apply final rules
      } // NVars >= 1


      const coefficients = [];
      const retRationalize = {};

      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
        // Separate numerator from denominator
        if (nVars === 1) {
          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
          expr.args[1] = polyToCanonical(expr.args[1]);
        }

        if (detailed) {
          retRationalize.numerator = expr.args[0];
          retRationalize.denominator = expr.args[1];
        }
      } else {
        if (nVars === 1) {
          expr = polyToCanonical(expr, coefficients);
        }

        if (detailed) {
          retRationalize.numerator = expr;
          retRationalize.denominator = null;
        }
      } // nVars


      if (!detailed) return expr;
      retRationalize.coefficients = coefficients;
      retRationalize.variables = polyRet.variables;
      retRationalize.expression = expr;
      return retRationalize;
    } // ^^^^^^^ end of rationalize ^^^^^^^^

  }); // end of typed rationalize

  /**
   *  Function to simplify an expression using an optional scope and
   *  return it if the expression is a polynomial expression, i.e.
   *  an expression with one or more variables and the operators
   *  +, -, *, and ^, where the exponent can only be a positive integer.
   *
   * Syntax:
   *
   *     polynomial(expr,scope,extended, rules)
   *
   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
   * @param  {object} scope           Optional scope for expression simplification
   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
   * @param  {array}  rules           Optional. Default is no rule.
   *
   *
   * @return {Object}
   *            {Object} node:   node simplified expression
   *            {Array}  variables:  variable names
   */

  function polynomial(expr, scope, extended, rules) {
    const variables = [];
    const node = simplify(expr, rules, scope, {
      exactFractions: false
    }); // Resolves any variables and functions with all defined parameters

    extended = !!extended;
    const oper = '+-*' + (extended ? '/' : '');
    recPoly(node);
    const retFunc = {};
    retFunc.expression = node;
    retFunc.variables = variables;
    return retFunc; // -------------------------------------------------------------------------------------------------------

    /**
     *  Function to simplify an expression using an optional scope and
     *  return it if the expression is a polynomial expression, i.e.
     *  an expression with one or more variables and the operators
     *  +, -, *, and ^, where the exponent can only be a positive integer.
     *
     * Syntax:
     *
     *     recPoly(node)
     *
     *
     * @param  {Node} node               The current sub tree expression in recursion
     *
     * @return                           nothing, throw an exception if error
     */

    function recPoly(node) {
      const tp = node.type; // node type

      if (tp === 'FunctionNode') {
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        if (node.op === '^') {
          if (node.args[1].fn === 'unaryMinus') {
            node = node.args[0];
          }

          if (node.args[1].type !== 'ConstantNode' || !(0, _number.isInteger)(parseFloat(node.args[1].value))) {
            throw new Error('There is a non-integer exponent');
          } else {
            recPoly(node.args[0]);
          }
        } else {
          if (oper.indexOf(node.op) === -1) {
            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
          }

          for (let i = 0; i < node.args.length; i++) {
            recPoly(node.args[i]);
          }
        } // type of operator

      } else if (tp === 'SymbolNode') {
        const name = node.name; // variable name

        const pos = variables.indexOf(name);

        if (pos === -1) {
          // new variable in expression
          variables.push(name);
        }
      } else if (tp === 'ParenthesisNode') {
        recPoly(node.content);
      } else if (tp !== 'ConstantNode') {
        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
      }
    } // end of recPoly

  } // end of polynomial
  // ---------------------------------------------------------------------------------------

  /**
   * Return a rule set to rationalize an polynomial expression in rationalize
   *
   * Syntax:
   *
   *     rulesRationalize()
   *
   * @return {array}        rule set to rationalize an polynomial expression
   */


  function rulesRationalize() {
    const oldRules = [simplifyCore, // sCore
    {
      l: 'n+n',
      r: '2*n'
    }, {
      l: 'n+-n',
      r: '0'
    }, simplifyConstant, // sConstant
    {
      l: 'n*(n1^-1)',
      r: 'n/n1'
    }, {
      l: 'n*n1^-n2',
      r: 'n/n1^n2'
    }, {
      l: 'n1^-1',
      r: '1/n1'
    }, {
      l: 'n*(n1/n2)',
      r: '(n*n1)/n2'
    }, {
      l: '1*n',
      r: 'n'
    }];
    const rulesFirst = [{
      l: '(-n1)/(-n2)',
      r: 'n1/n2'
    }, // Unary division
    {
      l: '(-n1)*(-n2)',
      r: 'n1*n2'
    }, // Unary multiplication
    {
      l: 'n1--n2',
      r: 'n1+n2'
    }, // '--' elimination
    {
      l: 'n1-n2',
      r: 'n1+(-n2)'
    }, // Subtraction turn into add with un�ry minus
    {
      l: '(n1+n2)*n3',
      r: '(n1*n3 + n2*n3)'
    }, // Distributive 1
    {
      l: 'n1*(n2+n3)',
      r: '(n1*n2+n1*n3)'
    }, // Distributive 2
    {
      l: 'c1*n + c2*n',
      r: '(c1+c2)*n'
    }, // Joining constants
    {
      l: 'c1*n + n',
      r: '(c1+1)*n'
    }, // Joining constants
    {
      l: 'c1*n - c2*n',
      r: '(c1-c2)*n'
    }, // Joining constants
    {
      l: 'c1*n - n',
      r: '(c1-1)*n'
    }, // Joining constants
    {
      l: 'v/c',
      r: '(1/c)*v'
    }, // variable/constant (new!)
    {
      l: 'v/-c',
      r: '-(1/c)*v'
    }, // variable/constant (new!)
    {
      l: '-v*-c',
      r: 'c*v'
    }, // Inversion constant and variable 1
    {
      l: '-v*c',
      r: '-c*v'
    }, // Inversion constant and variable 2
    {
      l: 'v*-c',
      r: '-c*v'
    }, // Inversion constant and variable 3
    {
      l: 'v*c',
      r: 'c*v'
    }, // Inversion constant and variable 4
    {
      l: '-(-n1*n2)',
      r: '(n1*n2)'
    }, // Unary propagation
    {
      l: '-(n1*n2)',
      r: '(-n1*n2)'
    }, // Unary propagation
    {
      l: '-(-n1+n2)',
      r: '(n1-n2)'
    }, // Unary propagation
    {
      l: '-(n1+n2)',
      r: '(-n1-n2)'
    }, // Unary propagation
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))'
    }, // Power to Power
    {
      l: '-(-n1/n2)',
      r: '(n1/n2)'
    }, // Division and Unary
    {
      l: '-(n1/n2)',
      r: '(-n1/n2)'
    }]; // Divisao and Unary

    const rulesDistrDiv = [{
      l: '(n1/n2 + n3/n4)',
      r: '((n1*n4 + n3*n2)/(n2*n4))'
    }, // Sum of fractions
    {
      l: '(n1/n2 + n3)',
      r: '((n1 + n3*n2)/n2)'
    }, // Sum fraction with number 1
    {
      l: '(n1 + n2/n3)',
      r: '((n1*n3 + n2)/n3)'
    }]; // Sum fraction with number 1

    const rulesSucDiv = [{
      l: '(n1/(n2/n3))',
      r: '((n1*n3)/n2)'
    }, // Division simplification
    {
      l: '(n1/n2/n3)',
      r: '(n1/(n2*n3))'
    }];
    const setRules = {}; // rules set in 4 steps.
    // All rules => infinite loop
    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
    // Division simplification
    // Second rule set.
    // There is no aggregate expression with parentesis, but the only variable can be scattered.

    setRules.finalRules = [simplifyCore, // simplify.rules[0]
    {
      l: 'n*-n',
      r: '-n^2'
    }, // Joining multiply with power 1
    {
      l: 'n*n',
      r: 'n^2'
    }, // Joining multiply with power 2
    simplifyConstant, // simplify.rules[14] old 3rd index in oldRules
    {
      l: 'n*-n^n1',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 3
    {
      l: 'n*n^n1',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 4
    {
      l: 'n^n1*-n^n2',
      r: '-n^(n1+n2)'
    }, // Joining multiply with power 5
    {
      l: 'n^n1*n^n2',
      r: 'n^(n1+n2)'
    }, // Joining multiply with power 6
    {
      l: 'n^n1*-n',
      r: '-n^(n1+1)'
    }, // Joining multiply with power 7
    {
      l: 'n^n1*n',
      r: 'n^(n1+1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/-n',
      r: '-n^(n1-1)'
    }, // Joining multiply with power 8
    {
      l: 'n^n1/n',
      r: 'n^(n1-1)'
    }, // Joining division with power 1
    {
      l: 'n/-n^n1',
      r: '-n^(1-n1)'
    }, // Joining division with power 2
    {
      l: 'n/n^n1',
      r: 'n^(1-n1)'
    }, // Joining division with power 3
    {
      l: 'n^n1/-n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 4
    {
      l: 'n^n1/n^n2',
      r: 'n^(n1-n2)'
    }, // Joining division with power 5
    {
      l: 'n1+(-n2*n3)',
      r: 'n1-n2*n3'
    }, // Solving useless parenthesis 1
    {
      l: 'v*(-c)',
      r: '-c*v'
    }, // Solving useless unary 2
    {
      l: 'n1+-n2',
      r: 'n1-n2'
    }, // Solving +- together (new!)
    {
      l: 'v*c',
      r: 'c*v'
    }, // inversion constant with variable
    {
      l: '(n1^n2)^n3',
      r: '(n1^(n2*n3))' // Power to Power

    }];
    return setRules;
  } // End rulesRationalize
  // ---------------------------------------------------------------------------------------

  /**
   *  Expand recursively a tree node for handling with expressions with exponents
   *  (it's not for constants, symbols or functions with exponents)
   *  PS: The other parameters are internal for recursion
   *
   * Syntax:
   *
   *     expandPower(node)
   *
   * @param  {Node} node         Current expression node
   * @param  {node} parent       Parent current node inside the recursion
   * @param  (int}               Parent number of chid inside the rercursion
   *
   * @return {node}        node expression with all powers expanded.
   */


  function expandPower(node, parent, indParent) {
    const tp = node.type;
    const internal = arguments.length > 1; // TRUE in internal calls

    if (tp === 'OperatorNode' && node.isBinary()) {
      let does = false;
      let val;

      if (node.op === '^') {
        // First operator: Parenthesis or UnaryMinus
        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
          // Second operator: Constant
          val = parseFloat(node.args[1].value);
          does = val >= 2 && (0, _number.isInteger)(val);
        }
      }

      if (does) {
        // Exponent >= 2
        // Before:
        //            operator A --> Subtree
        // parent pow
        //            constant
        //
        if (val > 2) {
          // Exponent > 2,
          // AFTER:  (exponent > 2)
          //             operator A --> Subtree
          // parent  *
          //                 deep clone (operator A --> Subtree
          //             pow
          //                 constant - 1
          //
          const nEsqTopo = node.args[0];
          const nDirTopo = new OperatorNode('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode(val - 1)]);
          node = new OperatorNode('*', 'multiply', [nEsqTopo, nDirTopo]);
        } else {
          // Expo = 2 - no power
          // AFTER:  (exponent =  2)
          //             operator A --> Subtree
          // parent   oper
          //            deep clone (operator A --> Subtree)
          //
          node = new OperatorNode('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
        }

        if (internal) {
          // Change parent references in internal recursive calls
          if (indParent === 'content') {
            parent.content = node;
          } else {
            parent.args[indParent] = node;
          }
        }
      } // does

    } // binary OperatorNode


    if (tp === 'ParenthesisNode') {
      // Recursion
      expandPower(node.content, node, 'content');
    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
      for (let i = 0; i < node.args.length; i++) {
        expandPower(node.args[i], node, i);
      }
    }

    if (!internal) {
      // return the root node
      return node;
    }
  } // End expandPower
  // ---------------------------------------------------------------------------------------

  /**
   * Auxilary function for rationalize
   * Convert near canonical polynomial in one variable in a canonical polynomial
   * with one term for each exponent in decreasing order
   *
   * Syntax:
   *
   *     polyToCanonical(node [, coefficients])
   *
   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
   *
   *        The string or tree expression needs to be at below syntax, with free spaces:
   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
   *       Where 'var' is one variable with any valid name
   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
   *
   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
   *
   *
   * @return {node}        new node tree with one variable polynomial or string error.
   */


  function polyToCanonical(node, coefficients) {
    if (coefficients === undefined) {
      coefficients = [];
    } // coefficients.


    coefficients[0] = 0; // index is the exponent

    const o = {};
    o.cte = 1;
    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
    //       It is used to deduce the exponent: 1 for *, 0 for "".

    o.fire = '';
    let maxExpo = 0; // maximum exponent

    let varname = ''; // variable name

    recurPol(node, null, o);
    maxExpo = coefficients.length - 1;
    let first = true;
    let no;

    for (let i = maxExpo; i >= 0; i--) {
      if (coefficients[i] === 0) continue;
      let n1 = new ConstantNode(first ? coefficients[i] : Math.abs(coefficients[i]));
      const op = coefficients[i] < 0 ? '-' : '+';

      if (i > 0) {
        // Is not a constant without variable
        let n2 = new SymbolNode(varname);

        if (i > 1) {
          const n3 = new ConstantNode(i);
          n2 = new OperatorNode('^', 'pow', [n2, n3]);
        }

        if (coefficients[i] === -1 && first) {
          n1 = new OperatorNode('-', 'unaryMinus', [n2]);
        } else if (Math.abs(coefficients[i]) === 1) {
          n1 = n2;
        } else {
          n1 = new OperatorNode('*', 'multiply', [n1, n2]);
        }
      }

      if (first) {
        no = n1;
      } else if (op === '+') {
        no = new OperatorNode('+', 'add', [no, n1]);
      } else {
        no = new OperatorNode('-', 'subtract', [no, n1]);
      }

      first = false;
    } // for


    if (first) {
      return new ConstantNode(0);
    } else {
      return no;
    }
    /**
     * Recursive auxilary function inside polyToCanonical for
     * converting expression in canonical form
     *
     * Syntax:
     *
     *     recurPol(node, noPai, obj)
     *
     * @param  {Node} node        The current subpolynomial expression
     * @param  {Node | Null}  noPai   The current parent node
     * @param  {object}    obj        Object with many internal flags
     *
     * @return {}                    No return. If error, throws an exception
     */


    function recurPol(node, noPai, o) {
      const tp = node.type;

      if (tp === 'FunctionNode') {
        // ***** FunctionName *****
        // No function call in polynomial expression
        throw new Error('There is an unsolved function call');
      } else if (tp === 'OperatorNode') {
        // ***** OperatorName *****
        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

        if (noPai !== null) {
          // -(unary),^  : children of *,+,-
          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+,* : children of +,-


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
            throw new Error('Invalid ' + node.op + ' placing');
          } // -,+ : first child


          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
            throw new Error('Invalid ' + node.op + ' placing');
          }
        } // Has parent
        // Firers: ^,*       Old:   ^,&,-(unary): firers


        if (node.op === '^' || node.op === '*') {
          o.fire = node.op;
        }

        for (let i = 0; i < node.args.length; i++) {
          // +,-: reset fire
          if (node.fn === 'unaryMinus') o.oper = '-';

          if (node.op === '+' || node.fn === 'subtract') {
            o.fire = '';
            o.cte = 1; // default if there is no constant

            o.oper = i === 0 ? '+' : node.op;
          }

          o.noFil = i; // number of son

          recurPol(node.args[i], node, o);
        } // for in children

      } else if (tp === 'SymbolNode') {
        // ***** SymbolName *****
        if (node.name !== varname && varname !== '') {
          throw new Error('There is more than one variable');
        }

        varname = node.name;

        if (noPai === null) {
          coefficients[1] = 1;
          return;
        } // ^: Symbol is First child


        if (noPai.op === '^' && o.noFil !== 0) {
          throw new Error('In power the variable should be the first parameter');
        } // *: Symbol is Second child


        if (noPai.op === '*' && o.noFil !== 1) {
          throw new Error('In multiply the variable should be the second parameter');
        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


        if (o.fire === '' || o.fire === '*') {
          if (maxExpo < 1) coefficients[1] = 0;
          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(1, maxExpo);
        }
      } else if (tp === 'ConstantNode') {
        const valor = parseFloat(node.value);

        if (noPai === null) {
          coefficients[0] = valor;
          return;
        }

        if (noPai.op === '^') {
          // cte: second  child of power
          if (o.noFil !== 1) throw new Error('Constant cannot be powered');

          if (!(0, _number.isInteger)(valor) || valor <= 0) {
            throw new Error('Non-integer exponent is not allowed');
          }

          for (let i = maxExpo + 1; i < valor; i++) coefficients[i] = 0;

          if (valor > maxExpo) coefficients[valor] = 0;
          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
          maxExpo = Math.max(valor, maxExpo);
          return;
        }

        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

        if (o.fire === '') {
          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
        }
      } else {
        throw new Error('Type ' + tp + ' is not allowed');
      }
    } // End of recurPol

  } // End of polyToCanonical


  return rationalize;
});
exports.createRationalize = createRationalize;
},{"../../utils/number":"../node_modules/mathjs/src/utils/number.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./simplify/simplifyConstant":"../node_modules/mathjs/src/function/algebra/simplify/simplifyConstant.js","./simplify/simplifyCore":"../node_modules/mathjs/src/function/algebra/simplify/simplifyCore.js"}],"../node_modules/mathjs/src/json/reviver.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReviver = void 0;

var _factory = require("../utils/factory");

const name = 'reviver';
const dependencies = ['classes'];
const createReviver =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  classes
}) => {
  /**
   * Instantiate mathjs data types from their JSON representation
   * @param {string} key
   * @param {*} value
   * @returns {*} Returns the revived object
   */
  return function reviver(key, value) {
    const constructor = classes[value && value.mathjs];

    if (constructor && typeof constructor.fromJSON === 'function') {
      return constructor.fromJSON(value);
    }

    return value;
  };
});
exports.createReviver = createReviver;
},{"../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = '6.0.1'; // Note: This file is automatically generated when building math.js.
// Changes made in this file will be overwritten.

exports.version = version;
},{}],"../node_modules/mathjs/src/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVersion = exports.createUppercaseE = exports.createUppercasePi = exports.createI = exports.createSQRT2 = exports.createSQRT1_2 = exports.createLOG10E = exports.createLOG2E = exports.createLN10 = exports.createLN2 = exports.createPhi = exports.createE = exports.createTau = exports.createPi = exports.createNaN = exports.createInfinity = exports.createNull = exports.createFalse = exports.createTrue = void 0;

var _factory = require("./utils/factory");

var _version = require("./version");

var _constants = require("./utils/bignumber/constants");

var _number = require("./plain/number");

const createTrue =
/* #__PURE__ */
(0, _factory.factory)('true', [], () => true);
exports.createTrue = createTrue;
const createFalse =
/* #__PURE__ */
(0, _factory.factory)('false', [], () => false);
exports.createFalse = createFalse;
const createNull =
/* #__PURE__ */
(0, _factory.factory)('null', [], () => null);
exports.createNull = createNull;
const createInfinity =
/* #__PURE__ */
recreateFactory('Infinity', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(Infinity) : Infinity);
exports.createInfinity = createInfinity;
const createNaN =
/* #__PURE__ */
recreateFactory('NaN', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(NaN) : NaN);
exports.createNaN = createNaN;
const createPi =
/* #__PURE__ */
recreateFactory('pi', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? (0, _constants.createBigNumberPi)(BigNumber) : _number.pi);
exports.createPi = createPi;
const createTau =
/* #__PURE__ */
recreateFactory('tau', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? (0, _constants.createBigNumberTau)(BigNumber) : _number.tau);
exports.createTau = createTau;
const createE =
/* #__PURE__ */
recreateFactory('e', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? (0, _constants.createBigNumberE)(BigNumber) : _number.e); // golden ratio, (1+sqrt(5))/2

exports.createE = createE;
const createPhi =
/* #__PURE__ */
recreateFactory('phi', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? (0, _constants.createBigNumberPhi)(BigNumber) : _number.phi);
exports.createPhi = createPhi;
const createLN2 =
/* #__PURE__ */
recreateFactory('LN2', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(2).ln() : Math.LN2);
exports.createLN2 = createLN2;
const createLN10 =
/* #__PURE__ */
recreateFactory('LN10', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(10).ln() : Math.LN10);
exports.createLN10 = createLN10;
const createLOG2E =
/* #__PURE__ */
recreateFactory('LOG2E', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(2).ln()) : Math.LOG2E);
exports.createLOG2E = createLOG2E;
const createLOG10E =
/* #__PURE__ */
recreateFactory('LOG10E', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(1).div(new BigNumber(10).ln()) : Math.LOG10E);
exports.createLOG10E = createLOG10E;
const createSQRT1_2 =
/* #__PURE__ */
recreateFactory( // eslint-disable-line camelcase
'SQRT1_2', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber('0.5').sqrt() : Math.SQRT1_2);
exports.createSQRT1_2 = createSQRT1_2;
const createSQRT2 =
/* #__PURE__ */
recreateFactory('SQRT2', ['config', '?BigNumber'], ({
  config,
  BigNumber
}) => config.number === 'BigNumber' ? new BigNumber(2).sqrt() : Math.SQRT2);
exports.createSQRT2 = createSQRT2;
const createI =
/* #__PURE__ */
recreateFactory('i', ['Complex'], ({
  Complex
}) => Complex.I); // for backward compatibility with v5

exports.createI = createI;
const createUppercasePi =
/* #__PURE__ */
(0, _factory.factory)('PI', ['pi'], ({
  pi
}) => pi);
exports.createUppercasePi = createUppercasePi;
const createUppercaseE =
/* #__PURE__ */
(0, _factory.factory)('E', ['e'], ({
  e
}) => e);
exports.createUppercaseE = createUppercaseE;
const createVersion =
/* #__PURE__ */
(0, _factory.factory)('version', [], () => _version.version); // helper function to create a factory with a flag recreateOnConfigChange
// idea: allow passing optional properties to be attached to the factory function as 4th argument?

exports.createVersion = createVersion;

function recreateFactory(name, dependencies, create) {
  return (0, _factory.factory)(name, dependencies, create, {
    recreateOnConfigChange: true
  });
}
},{"./utils/factory":"../node_modules/mathjs/src/utils/factory.js","./version":"../node_modules/mathjs/src/version.js","./utils/bignumber/constants":"../node_modules/mathjs/src/utils/bignumber/constants.js","./plain/number":"../node_modules/mathjs/src/plain/number/index.js"}],"../node_modules/mathjs/src/type/unit/physicalConstants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPlanckTemperature = exports.createPlanckCharge = exports.createPlanckTime = exports.createPlanckMass = exports.createPlanckLength = exports.createGravity = exports.createMolarMassC12 = exports.createMolarMass = exports.createWienDisplacement = exports.createStefanBoltzmann = exports.createSecondRadiation = exports.createSackurTetrode = exports.createMolarVolume = exports.createMolarPlanckConstant = exports.createGasConstant = exports.createLoschmidt = exports.createFirstRadiation = exports.createFaraday = exports.createBoltzmann = exports.createAvogadro = exports.createAtomicMass = exports.createEfimovFactor = exports.createWeakMixingAngle = exports.createThomsonCrossSection = exports.createRydberg = exports.createQuantumOfCirculation = exports.createNeutronMass = exports.createDeuteronMass = exports.createProtonMass = exports.createHartreeEnergy = exports.createFineStructure = exports.createFermiCoupling = exports.createElectronMass = exports.createClassicalElectronRadius = exports.createBohrRadius = exports.createJosephson = exports.createKlitzing = exports.createNuclearMagneton = exports.createMagneticFluxQuantum = exports.createInverseConductanceQuantum = exports.createConductanceQuantum = exports.createBohrMagneton = exports.createElementaryCharge = exports.createCoulomb = exports.createVacuumImpedance = exports.createElectricConstant = exports.createMagneticConstant = exports.createReducedPlanckConstant = exports.createPlanckConstant = exports.createGravitationConstant = exports.createSpeedOfLight = void 0;

var _factory = require("../../utils/factory");

// Source: https://en.wikipedia.org/wiki/Physical_constant
// Universal constants
const createSpeedOfLight =
/* #__PURE__ */
unitFactory('speedOfLight', '299792458', 'm s^-1');
exports.createSpeedOfLight = createSpeedOfLight;
const createGravitationConstant =
/* #__PURE__ */
unitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');
exports.createGravitationConstant = createGravitationConstant;
const createPlanckConstant =
/* #__PURE__ */
unitFactory('planckConstant', '6.62607015e-34', 'J s');
exports.createPlanckConstant = createPlanckConstant;
const createReducedPlanckConstant =
/* #__PURE__ */
unitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants

exports.createReducedPlanckConstant = createReducedPlanckConstant;
const createMagneticConstant =
/* #__PURE__ */
unitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');
exports.createMagneticConstant = createMagneticConstant;
const createElectricConstant =
/* #__PURE__ */
unitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');
exports.createElectricConstant = createElectricConstant;
const createVacuumImpedance =
/* #__PURE__ */
unitFactory('vacuumImpedance', '376.730313667', 'ohm');
exports.createVacuumImpedance = createVacuumImpedance;
const createCoulomb =
/* #__PURE__ */
unitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');
exports.createCoulomb = createCoulomb;
const createElementaryCharge =
/* #__PURE__ */
unitFactory('elementaryCharge', '1.602176634e-19', 'C');
exports.createElementaryCharge = createElementaryCharge;
const createBohrMagneton =
/* #__PURE__ */
unitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');
exports.createBohrMagneton = createBohrMagneton;
const createConductanceQuantum =
/* #__PURE__ */
unitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');
exports.createConductanceQuantum = createConductanceQuantum;
const createInverseConductanceQuantum =
/* #__PURE__ */
unitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');
exports.createInverseConductanceQuantum = createInverseConductanceQuantum;
const createMagneticFluxQuantum =
/* #__PURE__ */
unitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');
exports.createMagneticFluxQuantum = createMagneticFluxQuantum;
const createNuclearMagneton =
/* #__PURE__ */
unitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');
exports.createNuclearMagneton = createNuclearMagneton;
const createKlitzing =
/* #__PURE__ */
unitFactory('klitzing', '25812.807459304513', 'ohm');
exports.createKlitzing = createKlitzing;
const createJosephson =
/* #__PURE__ */
unitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed
// Atomic and nuclear constants

exports.createJosephson = createJosephson;
const createBohrRadius =
/* #__PURE__ */
unitFactory('bohrRadius', '5.29177210903e-11', 'm');
exports.createBohrRadius = createBohrRadius;
const createClassicalElectronRadius =
/* #__PURE__ */
unitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');
exports.createClassicalElectronRadius = createClassicalElectronRadius;
const createElectronMass =
/* #__PURE__ */
unitFactory('electronMass', '9.1093837015e-31', 'kg');
exports.createElectronMass = createElectronMass;
const createFermiCoupling =
/* #__PURE__ */
unitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');
exports.createFermiCoupling = createFermiCoupling;
const createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);
exports.createFineStructure = createFineStructure;
const createHartreeEnergy =
/* #__PURE__ */
unitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');
exports.createHartreeEnergy = createHartreeEnergy;
const createProtonMass =
/* #__PURE__ */
unitFactory('protonMass', '1.67262192369e-27', 'kg');
exports.createProtonMass = createProtonMass;
const createDeuteronMass =
/* #__PURE__ */
unitFactory('deuteronMass', '3.3435830926e-27', 'kg');
exports.createDeuteronMass = createDeuteronMass;
const createNeutronMass =
/* #__PURE__ */
unitFactory('neutronMass', '1.6749271613e-27', 'kg');
exports.createNeutronMass = createNeutronMass;
const createQuantumOfCirculation =
/* #__PURE__ */
unitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');
exports.createQuantumOfCirculation = createQuantumOfCirculation;
const createRydberg =
/* #__PURE__ */
unitFactory('rydberg', '10973731.568160', 'm^-1');
exports.createRydberg = createRydberg;
const createThomsonCrossSection =
/* #__PURE__ */
unitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');
exports.createThomsonCrossSection = createThomsonCrossSection;
const createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);
exports.createWeakMixingAngle = createWeakMixingAngle;
const createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants

exports.createEfimovFactor = createEfimovFactor;
const createAtomicMass =
/* #__PURE__ */
unitFactory('atomicMass', '1.66053906660e-27', 'kg');
exports.createAtomicMass = createAtomicMass;
const createAvogadro =
/* #__PURE__ */
unitFactory('avogadro', '6.02214076e23', 'mol^-1');
exports.createAvogadro = createAvogadro;
const createBoltzmann =
/* #__PURE__ */
unitFactory('boltzmann', '1.380649e-23', 'J K^-1');
exports.createBoltzmann = createBoltzmann;
const createFaraday =
/* #__PURE__ */
unitFactory('faraday', '96485.33212331001', 'C mol^-1');
exports.createFaraday = createFaraday;
const createFirstRadiation =
/* #__PURE__ */
unitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance

exports.createFirstRadiation = createFirstRadiation;
const createLoschmidt =
/* #__PURE__ */
unitFactory('loschmidt', '2.686780111798444e25', 'm^-3');
exports.createLoschmidt = createLoschmidt;
const createGasConstant =
/* #__PURE__ */
unitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');
exports.createGasConstant = createGasConstant;
const createMolarPlanckConstant =
/* #__PURE__ */
unitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');
exports.createMolarPlanckConstant = createMolarPlanckConstant;
const createMolarVolume =
/* #__PURE__ */
unitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');
exports.createMolarVolume = createMolarVolume;
const createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);
exports.createSackurTetrode = createSackurTetrode;
const createSecondRadiation =
/* #__PURE__ */
unitFactory('secondRadiation', '0.014387768775039337', 'm K');
exports.createSecondRadiation = createSecondRadiation;
const createStefanBoltzmann =
/* #__PURE__ */
unitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');
exports.createStefanBoltzmann = createStefanBoltzmann;
const createWienDisplacement =
/* #__PURE__ */
unitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values

exports.createWienDisplacement = createWienDisplacement;
const createMolarMass =
/* #__PURE__ */
unitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');
exports.createMolarMass = createMolarMass;
const createMolarMassC12 =
/* #__PURE__ */
unitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');
exports.createMolarMassC12 = createMolarMassC12;
const createGravity =
/* #__PURE__ */
unitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js
// Natural units

exports.createGravity = createGravity;
const createPlanckLength =
/* #__PURE__ */
unitFactory('planckLength', '1.616255e-35', 'm');
exports.createPlanckLength = createPlanckLength;
const createPlanckMass =
/* #__PURE__ */
unitFactory('planckMass', '2.176435e-8', 'kg');
exports.createPlanckMass = createPlanckMass;
const createPlanckTime =
/* #__PURE__ */
unitFactory('planckTime', '5.391245e-44', 's');
exports.createPlanckTime = createPlanckTime;
const createPlanckCharge =
/* #__PURE__ */
unitFactory('planckCharge', '1.87554603778e-18', 'C');
exports.createPlanckCharge = createPlanckCharge;
const createPlanckTemperature =
/* #__PURE__ */
unitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,
// a Unit with either a number value or a BigNumber value depending on the configuration

exports.createPlanckTemperature = createPlanckTemperature;

function unitFactory(name, valueStr, unitStr) {
  const dependencies = ['config', 'Unit', 'BigNumber'];
  return (0, _factory.factory)(name, dependencies, ({
    config,
    Unit,
    BigNumber
  }) => {
    // Note that we can parse into number or BigNumber.
    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values
    // Therefore we dont use Unit.parse()
    const value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);
    const unit = new Unit(value, unitStr);
    unit.fixPrefix = true;
    return unit;
  });
} // helper function to create a factory function which creates a numeric constant,
// either a number or BigNumber depending on the configuration


function numberFactory(name, value) {
  const dependencies = ['config', 'BigNumber'];
  return (0, _factory.factory)(name, dependencies, ({
    config,
    BigNumber
  }) => {
    return config.number === 'BigNumber' ? new BigNumber(value) : value;
  });
}
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/transform/apply.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createApplyTransform = void 0;

var _errorTransform = require("./utils/errorTransform");

var _factory = require("../../utils/factory");

var _apply = require("../../function/matrix/apply");

var _is = require("../../utils/is");

const name = 'apply';
const dependencies = ['typed', 'isInteger'];
/**
 * Attach a transform function to math.apply
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function apply
 * from one-based to zero based
 */

const createApplyTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  isInteger
}) => {
  const apply = (0, _apply.createApply)({
    typed,
    isInteger
  }); // @see: comment of concat itself

  return typed('apply', {
    '...any': function (args) {
      // change dim from one-based to zero-based
      const dim = args[1];

      if ((0, _is.isNumber)(dim)) {
        args[1] = dim - 1;
      } else if ((0, _is.isBigNumber)(dim)) {
        args[1] = dim.minus(1);
      }

      try {
        return apply.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createApplyTransform = createApplyTransform;
},{"./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../function/matrix/apply":"../node_modules/mathjs/src/function/matrix/apply.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/expression/transform/column.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createColumnTransform = void 0;

var _errorTransform = require("./utils/errorTransform");

var _factory = require("../../utils/factory");

var _column = require("../../function/matrix/column");

var _is = require("../../utils/is");

const name = 'column';
const dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

const createColumnTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Index,
  matrix,
  range
}) => {
  const column = (0, _column.createColumn)({
    typed,
    Index,
    matrix,
    range
  }); // @see: comment of column itself

  return typed('column', {
    '...any': function (args) {
      // change last argument from zero-based to one-based
      const lastIndex = args.length - 1;
      const last = args[lastIndex];

      if ((0, _is.isNumber)(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return column.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createColumnTransform = createColumnTransform;
},{"./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../function/matrix/column":"../node_modules/mathjs/src/function/matrix/column.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/expression/transform/utils/compileInlineExpression.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileInlineExpression = compileInlineExpression;

var _is = require("../../../utils/is");

/**
 * Compile an inline expression like "x > 0"
 * @param {Node} expression
 * @param {Object} math
 * @param {Object} scope
 * @return {function} Returns a function with one argument which fills in the
 *                    undefined variable (like "x") and evaluates the expression
 */
function compileInlineExpression(expression, math, scope) {
  // find an undefined symbol
  const symbol = expression.filter(function (node) {
    return (0, _is.isSymbolNode)(node) && !(node.name in math) && !(node.name in scope);
  })[0];

  if (!symbol) {
    throw new Error('No undefined variable found in inline expression "' + expression + '"');
  } // create a test function for this equation


  const name = symbol.name; // variable name

  const subScope = Object.create(scope);
  const eq = expression.compile();
  return function inlineExpression(x) {
    subScope[name] = x;
    return eq.evaluate(subScope);
  };
}
},{"../../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/expression/transform/filter.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFilterTransform = void 0;

var _is = require("../../utils/is");

var _array = require("../../utils/array");

var _function = require("../../utils/function");

var _compileInlineExpression = require("./utils/compileInlineExpression");

var _factory = require("../../utils/factory");

const name = 'filter';
const dependencies = ['typed'];
const createFilterTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Attach a transform function to math.filter
   * Adds a property transform containing the transform function.
   *
   * This transform adds support for equations as test function for math.filter,
   * so you can do something like 'filter([3, -2, 5], x > 0)'.
   */
  function filterTransform(args, math, scope) {
    let x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);
      }
    }

    return filter(x, callback);
  }

  filterTransform.rawArgs = true; // one based version of function filter

  const filter = typed('filter', {
    'Array, function': _filter,
    'Matrix, function': function (x, test) {
      return x.create(_filter(x.toArray(), test));
    },
    'Array, RegExp': _array.filterRegExp,
    'Matrix, RegExp': function (x, test) {
      return x.create((0, _array.filterRegExp)(x.toArray(), test));
    }
  });
  return filterTransform;
}, {
  isTransformFunction: true
});
/**
 * Filter values in a callback given a callback function
 *
 * !!! Passes a one-based index !!!
 *
 * @param {Array} x
 * @param {Function} callback
 * @return {Array} Returns the filtered array
 * @private
 */

exports.createFilterTransform = createFilterTransform;

function _filter(x, callback) {
  // figure out what number of arguments the callback function expects
  const args = (0, _function.maxArgumentCount)(callback);
  return (0, _array.filter)(x, function (value, index, array) {
    // invoke the callback function with the right number of arguments
    if (args === 1) {
      return callback(value);
    } else if (args === 2) {
      return callback(value, [index + 1]);
    } else {
      // 3 or -1
      return callback(value, [index + 1], array);
    }
  });
}
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/function":"../node_modules/mathjs/src/utils/function.js","./utils/compileInlineExpression":"../node_modules/mathjs/src/expression/transform/utils/compileInlineExpression.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js"}],"../node_modules/mathjs/src/expression/transform/forEach.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createForEachTransform = void 0;

var _is = require("../../utils/is");

var _function = require("../../utils/function");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _compileInlineExpression = require("./utils/compileInlineExpression");

const name = 'forEach';
const dependencies = ['typed'];
const createForEachTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Attach a transform function to math.forEach
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function forEachTransform(args, math, scope) {
    let x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like forEach([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);
      }
    }

    return _forEach(x, callback);
  }

  forEachTransform.rawArgs = true; // one-based version of forEach

  const _forEach = typed('forEach', {
    'Array | Matrix, function': function (array, callback) {
      // figure out what number of arguments the callback function expects
      const args = (0, _function.maxArgumentCount)(callback);

      const recurse = function (value, index) {
        if (Array.isArray(value)) {
          (0, _array.forEach)(value, function (child, i) {
            // we create a copy of the index array and append the new index value
            recurse(child, index.concat(i + 1)); // one based index, hence i+1
          });
        } else {
          // invoke the callback function with the right number of arguments
          if (args === 1) {
            callback(value);
          } else if (args === 2) {
            callback(value, index);
          } else {
            // 3 or -1
            callback(value, index, array);
          }
        }
      };

      recurse(array.valueOf(), []); // pass Array
    }
  });

  return forEachTransform;
}, {
  isTransformFunction: true
});
exports.createForEachTransform = createForEachTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/function":"../node_modules/mathjs/src/utils/function.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/compileInlineExpression":"../node_modules/mathjs/src/expression/transform/utils/compileInlineExpression.js"}],"../node_modules/mathjs/src/expression/transform/map.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMapTransform = void 0;

var _is = require("../../utils/is");

var _function = require("../../utils/function");

var _array = require("../../utils/array");

var _factory = require("../../utils/factory");

var _compileInlineExpression = require("./utils/compileInlineExpression");

const name = 'map';
const dependencies = ['typed'];
const createMapTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed
}) => {
  /**
   * Attach a transform function to math.map
   * Adds a property transform containing the transform function.
   *
   * This transform creates a one-based index instead of a zero-based index
   */
  function mapTransform(args, math, scope) {
    let x, callback;

    if (args[0]) {
      x = args[0].compile().evaluate(scope);
    }

    if (args[1]) {
      if ((0, _is.isSymbolNode)(args[1]) || (0, _is.isFunctionAssignmentNode)(args[1])) {
        // a function pointer, like filter([3, -2, 5], myTestFunction)
        callback = args[1].compile().evaluate(scope);
      } else {
        // an expression like filter([3, -2, 5], x > 0)
        callback = (0, _compileInlineExpression.compileInlineExpression)(args[1], math, scope);
      }
    }

    return map(x, callback);
  }

  mapTransform.rawArgs = true; // one-based version of map function

  const map = typed('map', {
    'Array, function': function (x, callback) {
      return _map(x, callback, x);
    },
    'Matrix, function': function (x, callback) {
      return x.create(_map(x.valueOf(), callback, x));
    }
  });
  return mapTransform;
}, {
  isTransformFunction: true
});
/**
 * Map for a multi dimensional array. One-based indexes
 * @param {Array} array
 * @param {function} callback
 * @param {Array} orig
 * @return {Array}
 * @private
 */

exports.createMapTransform = createMapTransform;

function _map(array, callback, orig) {
  // figure out what number of arguments the callback function expects
  const argsCount = (0, _function.maxArgumentCount)(callback);

  function recurse(value, index) {
    if (Array.isArray(value)) {
      return (0, _array.map)(value, function (child, i) {
        // we create a copy of the index array and append the new index value
        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
      });
    } else {
      // invoke the (typed) callback function with the right number of arguments
      if (argsCount === 1) {
        return callback(value);
      } else if (argsCount === 2) {
        return callback(value, index);
      } else {
        // 3 or -1
        return callback(value, index, orig);
      }
    }
  }

  return recurse(array, []);
}
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/function":"../node_modules/mathjs/src/utils/function.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/compileInlineExpression":"../node_modules/mathjs/src/expression/transform/utils/compileInlineExpression.js"}],"../node_modules/mathjs/src/expression/transform/max.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMaxTransform = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _errorTransform = require("./utils/errorTransform");

var _max = require("../../function/statistics/max");

const name = 'max';
const dependencies = ['typed', 'larger'];
const createMaxTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  larger
}) => {
  const max = (0, _max.createMax)({
    typed,
    larger
  });
  /**
   * Attach a transform function to math.max
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function max
   * from one-based to zero based
   */

  return typed('max', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && (0, _is.isCollection)(args[0])) {
        const dim = args[1];

        if ((0, _is.isNumber)(dim)) {
          args[1] = dim - 1;
        } else if ((0, _is.isBigNumber)(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return max.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createMaxTransform = createMaxTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../function/statistics/max":"../node_modules/mathjs/src/function/statistics/max.js"}],"../node_modules/mathjs/src/expression/transform/mean.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMeanTransform = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _errorTransform = require("./utils/errorTransform");

var _mean = require("../../function/statistics/mean");

const name = 'mean';
const dependencies = ['typed', 'add', 'divide'];
const createMeanTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  divide
}) => {
  const mean = (0, _mean.createMean)({
    typed,
    add,
    divide
  });
  /**
   * Attach a transform function to math.mean
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function mean
   * from one-based to zero based
   */

  return typed('mean', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && (0, _is.isCollection)(args[0])) {
        const dim = args[1];

        if ((0, _is.isNumber)(dim)) {
          args[1] = dim - 1;
        } else if ((0, _is.isBigNumber)(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return mean.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createMeanTransform = createMeanTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../function/statistics/mean":"../node_modules/mathjs/src/function/statistics/mean.js"}],"../node_modules/mathjs/src/expression/transform/min.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinTransform = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _errorTransform = require("./utils/errorTransform");

var _min = require("../../function/statistics/min");

const name = 'min';
const dependencies = ['typed', 'smaller'];
const createMinTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  smaller
}) => {
  const min = (0, _min.createMin)({
    typed,
    smaller
  });
  /**
   * Attach a transform function to math.min
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function min
   * from one-based to zero based
   */

  return typed('min', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && (0, _is.isCollection)(args[0])) {
        const dim = args[1];

        if ((0, _is.isNumber)(dim)) {
          args[1] = dim - 1;
        } else if ((0, _is.isBigNumber)(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return min.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createMinTransform = createMinTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../function/statistics/min":"../node_modules/mathjs/src/function/statistics/min.js"}],"../node_modules/mathjs/src/expression/transform/range.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRangeTransform = void 0;

var _factory = require("../../utils/factory");

var _range = require("../../function/matrix/range");

const name = 'range';
const dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq'];
const createRangeTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  matrix,
  bignumber,
  smaller,
  smallerEq,
  larger,
  largerEq
}) => {
  const range = (0, _range.createRange)({
    typed,
    config,
    matrix,
    bignumber,
    smaller,
    smallerEq,
    larger,
    largerEq
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('range', {
    '...any': function (args) {
      const lastIndex = args.length - 1;
      const last = args[lastIndex];

      if (typeof last !== 'boolean') {
        // append a parameter includeEnd=true
        args.push(true);
      }

      return range.apply(null, args);
    }
  });
}, {
  isTransformFunction: true
});
exports.createRangeTransform = createRangeTransform;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../function/matrix/range":"../node_modules/mathjs/src/function/matrix/range.js"}],"../node_modules/mathjs/src/expression/transform/row.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRowTransform = void 0;

var _factory = require("../../utils/factory");

var _row = require("../../function/matrix/row");

var _errorTransform = require("./utils/errorTransform");

var _is = require("../../utils/is");

const name = 'row';
const dependencies = ['typed', 'Index', 'matrix', 'range'];
/**
 * Attach a transform function to matrix.column
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `index` parameter of function column
 * from zero-based to one-based
 */

const createRowTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  Index,
  matrix,
  range
}) => {
  const row = (0, _row.createRow)({
    typed,
    Index,
    matrix,
    range
  }); // @see: comment of row itself

  return typed('row', {
    '...any': function (args) {
      // change last argument from zero-based to one-based
      const lastIndex = args.length - 1;
      const last = args[lastIndex];

      if ((0, _is.isNumber)(last)) {
        args[lastIndex] = last - 1;
      }

      try {
        return row.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createRowTransform = createRowTransform;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../function/matrix/row":"../node_modules/mathjs/src/function/matrix/row.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/expression/transform/subset.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSubsetTransform = void 0;

var _factory = require("../../utils/factory");

var _errorTransform = require("./utils/errorTransform");

var _subset = require("../../function/matrix/subset");

const name = 'subset';
const dependencies = ['typed', 'matrix'];
const createSubsetTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix
}) => {
  const subset = (0, _subset.createSubset)({
    typed,
    matrix
  });
  /**
   * Attach a transform function to math.subset
   * Adds a property transform containing the transform function.
   *
   * This transform creates a range which includes the end value
   */

  return typed('subset', {
    '...any': function (args) {
      try {
        return subset.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createSubsetTransform = createSubsetTransform;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../function/matrix/subset":"../node_modules/mathjs/src/function/matrix/subset.js"}],"../node_modules/mathjs/src/expression/transform/concat.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConcatTransform = void 0;

var _is = require("../../utils/is");

var _errorTransform = require("./utils/errorTransform");

var _factory = require("../../utils/factory");

var _concat = require("../../function/matrix/concat");

const name = 'concat';
const dependencies = ['typed', 'matrix', 'isInteger'];
const createConcatTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  matrix,
  isInteger
}) => {
  const concat = (0, _concat.createConcat)({
    typed,
    matrix,
    isInteger
  });
  /**
   * Attach a transform function to math.range
   * Adds a property transform containing the transform function.
   *
   * This transform changed the last `dim` parameter of function concat
   * from one-based to zero based
   */

  return typed('concat', {
    '...any': function (args) {
      // change last argument from one-based to zero-based
      const lastIndex = args.length - 1;
      const last = args[lastIndex];

      if ((0, _is.isNumber)(last)) {
        args[lastIndex] = last - 1;
      } else if ((0, _is.isBigNumber)(last)) {
        args[lastIndex] = last.minus(1);
      }

      try {
        return concat.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createConcatTransform = createConcatTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../function/matrix/concat":"../node_modules/mathjs/src/function/matrix/concat.js"}],"../node_modules/mathjs/src/expression/transform/std.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStdTransform = void 0;

var _factory = require("../../utils/factory");

var _std = require("../../function/statistics/std");

var _is = require("../../utils/is");

var _errorTransform = require("./utils/errorTransform");

const name = 'std';
const dependencies = ['typed', 'sqrt', 'variance'];
/**
 * Attach a transform function to math.std
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function std
 * from one-based to zero based
 */

const createStdTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  sqrt,
  variance
}) => {
  const std = (0, _std.createStd)({
    typed,
    sqrt,
    variance
  });
  return typed('std', {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length >= 2 && (0, _is.isCollection)(args[0])) {
        const dim = args[1];

        if ((0, _is.isNumber)(dim)) {
          args[1] = dim - 1;
        } else if ((0, _is.isBigNumber)(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return std.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createStdTransform = createStdTransform;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../function/statistics/std":"../node_modules/mathjs/src/function/statistics/std.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js"}],"../node_modules/mathjs/src/expression/transform/sum.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSumTransform = void 0;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _errorTransform = require("./utils/errorTransform");

var _sum = require("../../function/statistics/sum");

/**
 * Attach a transform function to math.sum
 * Adds a property transform containing the transform function.
 *
 * This transform changed the last `dim` parameter of function mean
 * from one-based to zero based
 */
const name = 'sum';
const dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];
const createSumTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  config,
  add,
  bignumber,
  fraction
}) => {
  const sum = (0, _sum.createSum)({
    typed,
    config,
    add,
    bignumber,
    fraction
  });
  return typed(name, {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length === 2 && (0, _is.isCollection)(args[0])) {
        const dim = args[1];

        if ((0, _is.isNumber)(dim)) {
          args[1] = dim - 1;
        } else if ((0, _is.isBigNumber)(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return sum.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createSumTransform = createSumTransform;
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../function/statistics/sum":"../node_modules/mathjs/src/function/statistics/sum.js"}],"../node_modules/mathjs/src/expression/transform/variance.transform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVarianceTransform = void 0;

var _factory = require("../../utils/factory");

var _is = require("../../utils/is");

var _errorTransform = require("./utils/errorTransform");

var _variance = require("../../function/statistics/variance");

const name = 'variance';
const dependencies = ['typed', 'add', 'subtract', 'multiply', 'divide', 'apply', 'isNaN'];
/**
 * Attach a transform function to math.var
 * Adds a property transform containing the transform function.
 *
 * This transform changed the `dim` parameter of function var
 * from one-based to zero based
 */

const createVarianceTransform =
/* #__PURE__ */
(0, _factory.factory)(name, dependencies, ({
  typed,
  add,
  subtract,
  multiply,
  divide,
  apply,
  isNaN
}) => {
  const variance = (0, _variance.createVariance)({
    typed,
    add,
    subtract,
    multiply,
    divide,
    apply,
    isNaN
  });
  return typed(name, {
    '...any': function (args) {
      // change last argument dim from one-based to zero-based
      if (args.length >= 2 && (0, _is.isCollection)(args[0])) {
        const dim = args[1];

        if ((0, _is.isNumber)(dim)) {
          args[1] = dim - 1;
        } else if ((0, _is.isBigNumber)(dim)) {
          args[1] = dim.minus(1);
        }
      }

      try {
        return variance.apply(null, args);
      } catch (err) {
        throw (0, _errorTransform.errorTransform)(err);
      }
    }
  });
}, {
  isTransformFunction: true
});
exports.createVarianceTransform = createVarianceTransform;
},{"../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/is":"../node_modules/mathjs/src/utils/is.js","./utils/errorTransform":"../node_modules/mathjs/src/expression/transform/utils/errorTransform.js","../../function/statistics/variance":"../node_modules/mathjs/src/function/statistics/variance.js"}],"../node_modules/mathjs/src/factoriesAny.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createTyped", {
  enumerable: true,
  get: function () {
    return _typed.createTyped;
  }
});
Object.defineProperty(exports, "createResultSet", {
  enumerable: true,
  get: function () {
    return _ResultSet.createResultSet;
  }
});
Object.defineProperty(exports, "createBigNumberClass", {
  enumerable: true,
  get: function () {
    return _BigNumber.createBigNumberClass;
  }
});
Object.defineProperty(exports, "createComplexClass", {
  enumerable: true,
  get: function () {
    return _Complex.createComplexClass;
  }
});
Object.defineProperty(exports, "createFractionClass", {
  enumerable: true,
  get: function () {
    return _Fraction.createFractionClass;
  }
});
Object.defineProperty(exports, "createRangeClass", {
  enumerable: true,
  get: function () {
    return _Range.createRangeClass;
  }
});
Object.defineProperty(exports, "createMatrixClass", {
  enumerable: true,
  get: function () {
    return _Matrix.createMatrixClass;
  }
});
Object.defineProperty(exports, "createDenseMatrixClass", {
  enumerable: true,
  get: function () {
    return _DenseMatrix.createDenseMatrixClass;
  }
});
Object.defineProperty(exports, "createClone", {
  enumerable: true,
  get: function () {
    return _clone.createClone;
  }
});
Object.defineProperty(exports, "createIsInteger", {
  enumerable: true,
  get: function () {
    return _isInteger.createIsInteger;
  }
});
Object.defineProperty(exports, "createIsNegative", {
  enumerable: true,
  get: function () {
    return _isNegative.createIsNegative;
  }
});
Object.defineProperty(exports, "createIsNumeric", {
  enumerable: true,
  get: function () {
    return _isNumeric.createIsNumeric;
  }
});
Object.defineProperty(exports, "createHasNumericValue", {
  enumerable: true,
  get: function () {
    return _hasNumericValue.createHasNumericValue;
  }
});
Object.defineProperty(exports, "createIsPositive", {
  enumerable: true,
  get: function () {
    return _isPositive.createIsPositive;
  }
});
Object.defineProperty(exports, "createIsZero", {
  enumerable: true,
  get: function () {
    return _isZero.createIsZero;
  }
});
Object.defineProperty(exports, "createIsNaN", {
  enumerable: true,
  get: function () {
    return _isNaN.createIsNaN;
  }
});
Object.defineProperty(exports, "createTypeOf", {
  enumerable: true,
  get: function () {
    return _typeOf.createTypeOf;
  }
});
Object.defineProperty(exports, "createDeprecatedTypeof", {
  enumerable: true,
  get: function () {
    return _typeOf.createDeprecatedTypeof;
  }
});
Object.defineProperty(exports, "createEqualScalar", {
  enumerable: true,
  get: function () {
    return _equalScalar.createEqualScalar;
  }
});
Object.defineProperty(exports, "createSparseMatrixClass", {
  enumerable: true,
  get: function () {
    return _SparseMatrix.createSparseMatrixClass;
  }
});
Object.defineProperty(exports, "createNumber", {
  enumerable: true,
  get: function () {
    return _number.createNumber;
  }
});
Object.defineProperty(exports, "createString", {
  enumerable: true,
  get: function () {
    return _string.createString;
  }
});
Object.defineProperty(exports, "createBoolean", {
  enumerable: true,
  get: function () {
    return _boolean.createBoolean;
  }
});
Object.defineProperty(exports, "createBignumber", {
  enumerable: true,
  get: function () {
    return _bignumber.createBignumber;
  }
});
Object.defineProperty(exports, "createComplex", {
  enumerable: true,
  get: function () {
    return _complex.createComplex;
  }
});
Object.defineProperty(exports, "createFraction", {
  enumerable: true,
  get: function () {
    return _fraction.createFraction;
  }
});
Object.defineProperty(exports, "createMatrix", {
  enumerable: true,
  get: function () {
    return _matrix.createMatrix;
  }
});
Object.defineProperty(exports, "createSplitUnit", {
  enumerable: true,
  get: function () {
    return _splitUnit.createSplitUnit;
  }
});
Object.defineProperty(exports, "createUnaryMinus", {
  enumerable: true,
  get: function () {
    return _unaryMinus.createUnaryMinus;
  }
});
Object.defineProperty(exports, "createUnaryPlus", {
  enumerable: true,
  get: function () {
    return _unaryPlus.createUnaryPlus;
  }
});
Object.defineProperty(exports, "createAbs", {
  enumerable: true,
  get: function () {
    return _abs.createAbs;
  }
});
Object.defineProperty(exports, "createApply", {
  enumerable: true,
  get: function () {
    return _apply.createApply;
  }
});
Object.defineProperty(exports, "createAddScalar", {
  enumerable: true,
  get: function () {
    return _addScalar.createAddScalar;
  }
});
Object.defineProperty(exports, "createCbrt", {
  enumerable: true,
  get: function () {
    return _cbrt.createCbrt;
  }
});
Object.defineProperty(exports, "createCeil", {
  enumerable: true,
  get: function () {
    return _ceil.createCeil;
  }
});
Object.defineProperty(exports, "createCube", {
  enumerable: true,
  get: function () {
    return _cube.createCube;
  }
});
Object.defineProperty(exports, "createExp", {
  enumerable: true,
  get: function () {
    return _exp.createExp;
  }
});
Object.defineProperty(exports, "createExpm1", {
  enumerable: true,
  get: function () {
    return _expm.createExpm1;
  }
});
Object.defineProperty(exports, "createFix", {
  enumerable: true,
  get: function () {
    return _fix.createFix;
  }
});
Object.defineProperty(exports, "createFloor", {
  enumerable: true,
  get: function () {
    return _floor.createFloor;
  }
});
Object.defineProperty(exports, "createGcd", {
  enumerable: true,
  get: function () {
    return _gcd.createGcd;
  }
});
Object.defineProperty(exports, "createLcm", {
  enumerable: true,
  get: function () {
    return _lcm.createLcm;
  }
});
Object.defineProperty(exports, "createLog10", {
  enumerable: true,
  get: function () {
    return _log.createLog10;
  }
});
Object.defineProperty(exports, "createLog2", {
  enumerable: true,
  get: function () {
    return _log2.createLog2;
  }
});
Object.defineProperty(exports, "createMod", {
  enumerable: true,
  get: function () {
    return _mod.createMod;
  }
});
Object.defineProperty(exports, "createMultiplyScalar", {
  enumerable: true,
  get: function () {
    return _multiplyScalar.createMultiplyScalar;
  }
});
Object.defineProperty(exports, "createMultiply", {
  enumerable: true,
  get: function () {
    return _multiply.createMultiply;
  }
});
Object.defineProperty(exports, "createNthRoot", {
  enumerable: true,
  get: function () {
    return _nthRoot.createNthRoot;
  }
});
Object.defineProperty(exports, "createSign", {
  enumerable: true,
  get: function () {
    return _sign.createSign;
  }
});
Object.defineProperty(exports, "createSqrt", {
  enumerable: true,
  get: function () {
    return _sqrt.createSqrt;
  }
});
Object.defineProperty(exports, "createSquare", {
  enumerable: true,
  get: function () {
    return _square.createSquare;
  }
});
Object.defineProperty(exports, "createSubtract", {
  enumerable: true,
  get: function () {
    return _subtract.createSubtract;
  }
});
Object.defineProperty(exports, "createXgcd", {
  enumerable: true,
  get: function () {
    return _xgcd.createXgcd;
  }
});
Object.defineProperty(exports, "createDotMultiply", {
  enumerable: true,
  get: function () {
    return _dotMultiply.createDotMultiply;
  }
});
Object.defineProperty(exports, "createBitAnd", {
  enumerable: true,
  get: function () {
    return _bitAnd.createBitAnd;
  }
});
Object.defineProperty(exports, "createBitNot", {
  enumerable: true,
  get: function () {
    return _bitNot.createBitNot;
  }
});
Object.defineProperty(exports, "createBitOr", {
  enumerable: true,
  get: function () {
    return _bitOr.createBitOr;
  }
});
Object.defineProperty(exports, "createBitXor", {
  enumerable: true,
  get: function () {
    return _bitXor.createBitXor;
  }
});
Object.defineProperty(exports, "createArg", {
  enumerable: true,
  get: function () {
    return _arg.createArg;
  }
});
Object.defineProperty(exports, "createConj", {
  enumerable: true,
  get: function () {
    return _conj.createConj;
  }
});
Object.defineProperty(exports, "createIm", {
  enumerable: true,
  get: function () {
    return _im.createIm;
  }
});
Object.defineProperty(exports, "createRe", {
  enumerable: true,
  get: function () {
    return _re.createRe;
  }
});
Object.defineProperty(exports, "createNot", {
  enumerable: true,
  get: function () {
    return _not.createNot;
  }
});
Object.defineProperty(exports, "createOr", {
  enumerable: true,
  get: function () {
    return _or.createOr;
  }
});
Object.defineProperty(exports, "createXor", {
  enumerable: true,
  get: function () {
    return _xor.createXor;
  }
});
Object.defineProperty(exports, "createConcat", {
  enumerable: true,
  get: function () {
    return _concat.createConcat;
  }
});
Object.defineProperty(exports, "createColumn", {
  enumerable: true,
  get: function () {
    return _column.createColumn;
  }
});
Object.defineProperty(exports, "createCross", {
  enumerable: true,
  get: function () {
    return _cross.createCross;
  }
});
Object.defineProperty(exports, "createDiag", {
  enumerable: true,
  get: function () {
    return _diag.createDiag;
  }
});
Object.defineProperty(exports, "createEye", {
  enumerable: true,
  get: function () {
    return _eye.createEye;
  }
});
Object.defineProperty(exports, "createFilter", {
  enumerable: true,
  get: function () {
    return _filter.createFilter;
  }
});
Object.defineProperty(exports, "createFlatten", {
  enumerable: true,
  get: function () {
    return _flatten.createFlatten;
  }
});
Object.defineProperty(exports, "createForEach", {
  enumerable: true,
  get: function () {
    return _forEach.createForEach;
  }
});
Object.defineProperty(exports, "createGetMatrixDataType", {
  enumerable: true,
  get: function () {
    return _getMatrixDataType.createGetMatrixDataType;
  }
});
Object.defineProperty(exports, "createIdentity", {
  enumerable: true,
  get: function () {
    return _identity.createIdentity;
  }
});
Object.defineProperty(exports, "createKron", {
  enumerable: true,
  get: function () {
    return _kron.createKron;
  }
});
Object.defineProperty(exports, "createMap", {
  enumerable: true,
  get: function () {
    return _map.createMap;
  }
});
Object.defineProperty(exports, "createOnes", {
  enumerable: true,
  get: function () {
    return _ones.createOnes;
  }
});
Object.defineProperty(exports, "createRange", {
  enumerable: true,
  get: function () {
    return _range.createRange;
  }
});
Object.defineProperty(exports, "createReshape", {
  enumerable: true,
  get: function () {
    return _reshape.createReshape;
  }
});
Object.defineProperty(exports, "createResize", {
  enumerable: true,
  get: function () {
    return _resize.createResize;
  }
});
Object.defineProperty(exports, "createRow", {
  enumerable: true,
  get: function () {
    return _row.createRow;
  }
});
Object.defineProperty(exports, "createSize", {
  enumerable: true,
  get: function () {
    return _size.createSize;
  }
});
Object.defineProperty(exports, "createSqueeze", {
  enumerable: true,
  get: function () {
    return _squeeze.createSqueeze;
  }
});
Object.defineProperty(exports, "createSubset", {
  enumerable: true,
  get: function () {
    return _subset.createSubset;
  }
});
Object.defineProperty(exports, "createTranspose", {
  enumerable: true,
  get: function () {
    return _transpose.createTranspose;
  }
});
Object.defineProperty(exports, "createCtranspose", {
  enumerable: true,
  get: function () {
    return _ctranspose.createCtranspose;
  }
});
Object.defineProperty(exports, "createZeros", {
  enumerable: true,
  get: function () {
    return _zeros.createZeros;
  }
});
Object.defineProperty(exports, "createErf", {
  enumerable: true,
  get: function () {
    return _erf.createErf;
  }
});
Object.defineProperty(exports, "createMode", {
  enumerable: true,
  get: function () {
    return _mode.createMode;
  }
});
Object.defineProperty(exports, "createProd", {
  enumerable: true,
  get: function () {
    return _prod.createProd;
  }
});
Object.defineProperty(exports, "createFormat", {
  enumerable: true,
  get: function () {
    return _format.createFormat;
  }
});
Object.defineProperty(exports, "createPrint", {
  enumerable: true,
  get: function () {
    return _print.createPrint;
  }
});
Object.defineProperty(exports, "createTo", {
  enumerable: true,
  get: function () {
    return _to.createTo;
  }
});
Object.defineProperty(exports, "createIsPrime", {
  enumerable: true,
  get: function () {
    return _isPrime.createIsPrime;
  }
});
Object.defineProperty(exports, "createNumeric", {
  enumerable: true,
  get: function () {
    return _numeric.createNumeric;
  }
});
Object.defineProperty(exports, "createDivideScalar", {
  enumerable: true,
  get: function () {
    return _divideScalar.createDivideScalar;
  }
});
Object.defineProperty(exports, "createPow", {
  enumerable: true,
  get: function () {
    return _pow.createPow;
  }
});
Object.defineProperty(exports, "createRound", {
  enumerable: true,
  get: function () {
    return _round.createRound;
  }
});
Object.defineProperty(exports, "createLog", {
  enumerable: true,
  get: function () {
    return _log3.createLog;
  }
});
Object.defineProperty(exports, "createLog1p", {
  enumerable: true,
  get: function () {
    return _log1p.createLog1p;
  }
});
Object.defineProperty(exports, "createNthRoots", {
  enumerable: true,
  get: function () {
    return _nthRoots.createNthRoots;
  }
});
Object.defineProperty(exports, "createDotPow", {
  enumerable: true,
  get: function () {
    return _dotPow.createDotPow;
  }
});
Object.defineProperty(exports, "createDotDivide", {
  enumerable: true,
  get: function () {
    return _dotDivide.createDotDivide;
  }
});
Object.defineProperty(exports, "createLsolve", {
  enumerable: true,
  get: function () {
    return _lsolve.createLsolve;
  }
});
Object.defineProperty(exports, "createUsolve", {
  enumerable: true,
  get: function () {
    return _usolve.createUsolve;
  }
});
Object.defineProperty(exports, "createLeftShift", {
  enumerable: true,
  get: function () {
    return _leftShift.createLeftShift;
  }
});
Object.defineProperty(exports, "createRightArithShift", {
  enumerable: true,
  get: function () {
    return _rightArithShift.createRightArithShift;
  }
});
Object.defineProperty(exports, "createRightLogShift", {
  enumerable: true,
  get: function () {
    return _rightLogShift.createRightLogShift;
  }
});
Object.defineProperty(exports, "createAnd", {
  enumerable: true,
  get: function () {
    return _and.createAnd;
  }
});
Object.defineProperty(exports, "createCompare", {
  enumerable: true,
  get: function () {
    return _compare.createCompare;
  }
});
Object.defineProperty(exports, "createCompareNatural", {
  enumerable: true,
  get: function () {
    return _compareNatural.createCompareNatural;
  }
});
Object.defineProperty(exports, "createCompareText", {
  enumerable: true,
  get: function () {
    return _compareText.createCompareText;
  }
});
Object.defineProperty(exports, "createEqual", {
  enumerable: true,
  get: function () {
    return _equal.createEqual;
  }
});
Object.defineProperty(exports, "createEqualText", {
  enumerable: true,
  get: function () {
    return _equalText.createEqualText;
  }
});
Object.defineProperty(exports, "createSmaller", {
  enumerable: true,
  get: function () {
    return _smaller.createSmaller;
  }
});
Object.defineProperty(exports, "createSmallerEq", {
  enumerable: true,
  get: function () {
    return _smallerEq.createSmallerEq;
  }
});
Object.defineProperty(exports, "createLarger", {
  enumerable: true,
  get: function () {
    return _larger.createLarger;
  }
});
Object.defineProperty(exports, "createLargerEq", {
  enumerable: true,
  get: function () {
    return _largerEq.createLargerEq;
  }
});
Object.defineProperty(exports, "createDeepEqual", {
  enumerable: true,
  get: function () {
    return _deepEqual.createDeepEqual;
  }
});
Object.defineProperty(exports, "createUnequal", {
  enumerable: true,
  get: function () {
    return _unequal.createUnequal;
  }
});
Object.defineProperty(exports, "createPartitionSelect", {
  enumerable: true,
  get: function () {
    return _partitionSelect.createPartitionSelect;
  }
});
Object.defineProperty(exports, "createSort", {
  enumerable: true,
  get: function () {
    return _sort.createSort;
  }
});
Object.defineProperty(exports, "createMax", {
  enumerable: true,
  get: function () {
    return _max.createMax;
  }
});
Object.defineProperty(exports, "createMin", {
  enumerable: true,
  get: function () {
    return _min.createMin;
  }
});
Object.defineProperty(exports, "createImmutableDenseMatrixClass", {
  enumerable: true,
  get: function () {
    return _ImmutableDenseMatrix.createImmutableDenseMatrixClass;
  }
});
Object.defineProperty(exports, "createIndexClass", {
  enumerable: true,
  get: function () {
    return _MatrixIndex.createIndexClass;
  }
});
Object.defineProperty(exports, "createFibonacciHeapClass", {
  enumerable: true,
  get: function () {
    return _FibonacciHeap.createFibonacciHeapClass;
  }
});
Object.defineProperty(exports, "createSpaClass", {
  enumerable: true,
  get: function () {
    return _Spa.createSpaClass;
  }
});
Object.defineProperty(exports, "createUnitClass", {
  enumerable: true,
  get: function () {
    return _Unit.createUnitClass;
  }
});
Object.defineProperty(exports, "createUnitFunction", {
  enumerable: true,
  get: function () {
    return _unit.createUnitFunction;
  }
});
Object.defineProperty(exports, "createSparse", {
  enumerable: true,
  get: function () {
    return _sparse.createSparse;
  }
});
Object.defineProperty(exports, "createCreateUnit", {
  enumerable: true,
  get: function () {
    return _createUnit.createCreateUnit;
  }
});
Object.defineProperty(exports, "createAcos", {
  enumerable: true,
  get: function () {
    return _acos.createAcos;
  }
});
Object.defineProperty(exports, "createAcosh", {
  enumerable: true,
  get: function () {
    return _acosh.createAcosh;
  }
});
Object.defineProperty(exports, "createAcot", {
  enumerable: true,
  get: function () {
    return _acot.createAcot;
  }
});
Object.defineProperty(exports, "createAcoth", {
  enumerable: true,
  get: function () {
    return _acoth.createAcoth;
  }
});
Object.defineProperty(exports, "createAcsc", {
  enumerable: true,
  get: function () {
    return _acsc.createAcsc;
  }
});
Object.defineProperty(exports, "createAcsch", {
  enumerable: true,
  get: function () {
    return _acsch.createAcsch;
  }
});
Object.defineProperty(exports, "createAsec", {
  enumerable: true,
  get: function () {
    return _asec.createAsec;
  }
});
Object.defineProperty(exports, "createAsech", {
  enumerable: true,
  get: function () {
    return _asech.createAsech;
  }
});
Object.defineProperty(exports, "createAsin", {
  enumerable: true,
  get: function () {
    return _asin.createAsin;
  }
});
Object.defineProperty(exports, "createAsinh", {
  enumerable: true,
  get: function () {
    return _asinh.createAsinh;
  }
});
Object.defineProperty(exports, "createAtan", {
  enumerable: true,
  get: function () {
    return _atan.createAtan;
  }
});
Object.defineProperty(exports, "createAtan2", {
  enumerable: true,
  get: function () {
    return _atan2.createAtan2;
  }
});
Object.defineProperty(exports, "createAtanh", {
  enumerable: true,
  get: function () {
    return _atanh.createAtanh;
  }
});
Object.defineProperty(exports, "createCos", {
  enumerable: true,
  get: function () {
    return _cos.createCos;
  }
});
Object.defineProperty(exports, "createCosh", {
  enumerable: true,
  get: function () {
    return _cosh.createCosh;
  }
});
Object.defineProperty(exports, "createCot", {
  enumerable: true,
  get: function () {
    return _cot.createCot;
  }
});
Object.defineProperty(exports, "createCoth", {
  enumerable: true,
  get: function () {
    return _coth.createCoth;
  }
});
Object.defineProperty(exports, "createCsc", {
  enumerable: true,
  get: function () {
    return _csc.createCsc;
  }
});
Object.defineProperty(exports, "createCsch", {
  enumerable: true,
  get: function () {
    return _csch.createCsch;
  }
});
Object.defineProperty(exports, "createSec", {
  enumerable: true,
  get: function () {
    return _sec.createSec;
  }
});
Object.defineProperty(exports, "createSech", {
  enumerable: true,
  get: function () {
    return _sech.createSech;
  }
});
Object.defineProperty(exports, "createSin", {
  enumerable: true,
  get: function () {
    return _sin.createSin;
  }
});
Object.defineProperty(exports, "createSinh", {
  enumerable: true,
  get: function () {
    return _sinh.createSinh;
  }
});
Object.defineProperty(exports, "createTan", {
  enumerable: true,
  get: function () {
    return _tan.createTan;
  }
});
Object.defineProperty(exports, "createTanh", {
  enumerable: true,
  get: function () {
    return _tanh.createTanh;
  }
});
Object.defineProperty(exports, "createSetCartesian", {
  enumerable: true,
  get: function () {
    return _setCartesian.createSetCartesian;
  }
});
Object.defineProperty(exports, "createSetDifference", {
  enumerable: true,
  get: function () {
    return _setDifference.createSetDifference;
  }
});
Object.defineProperty(exports, "createSetDistinct", {
  enumerable: true,
  get: function () {
    return _setDistinct.createSetDistinct;
  }
});
Object.defineProperty(exports, "createSetIntersect", {
  enumerable: true,
  get: function () {
    return _setIntersect.createSetIntersect;
  }
});
Object.defineProperty(exports, "createSetIsSubset", {
  enumerable: true,
  get: function () {
    return _setIsSubset.createSetIsSubset;
  }
});
Object.defineProperty(exports, "createSetMultiplicity", {
  enumerable: true,
  get: function () {
    return _setMultiplicity.createSetMultiplicity;
  }
});
Object.defineProperty(exports, "createSetPowerset", {
  enumerable: true,
  get: function () {
    return _setPowerset.createSetPowerset;
  }
});
Object.defineProperty(exports, "createSetSize", {
  enumerable: true,
  get: function () {
    return _setSize.createSetSize;
  }
});
Object.defineProperty(exports, "createSetSymDifference", {
  enumerable: true,
  get: function () {
    return _setSymDifference.createSetSymDifference;
  }
});
Object.defineProperty(exports, "createSetUnion", {
  enumerable: true,
  get: function () {
    return _setUnion.createSetUnion;
  }
});
Object.defineProperty(exports, "createAdd", {
  enumerable: true,
  get: function () {
    return _add.createAdd;
  }
});
Object.defineProperty(exports, "createHypot", {
  enumerable: true,
  get: function () {
    return _hypot.createHypot;
  }
});
Object.defineProperty(exports, "createNorm", {
  enumerable: true,
  get: function () {
    return _norm.createNorm;
  }
});
Object.defineProperty(exports, "createDot", {
  enumerable: true,
  get: function () {
    return _dot.createDot;
  }
});
Object.defineProperty(exports, "createTrace", {
  enumerable: true,
  get: function () {
    return _trace.createTrace;
  }
});
Object.defineProperty(exports, "createIndex", {
  enumerable: true,
  get: function () {
    return _function.createIndex;
  }
});
Object.defineProperty(exports, "createNode", {
  enumerable: true,
  get: function () {
    return _Node.createNode;
  }
});
Object.defineProperty(exports, "createAccessorNode", {
  enumerable: true,
  get: function () {
    return _AccessorNode.createAccessorNode;
  }
});
Object.defineProperty(exports, "createArrayNode", {
  enumerable: true,
  get: function () {
    return _ArrayNode.createArrayNode;
  }
});
Object.defineProperty(exports, "createAssignmentNode", {
  enumerable: true,
  get: function () {
    return _AssignmentNode.createAssignmentNode;
  }
});
Object.defineProperty(exports, "createBlockNode", {
  enumerable: true,
  get: function () {
    return _BlockNode.createBlockNode;
  }
});
Object.defineProperty(exports, "createConditionalNode", {
  enumerable: true,
  get: function () {
    return _ConditionalNode.createConditionalNode;
  }
});
Object.defineProperty(exports, "createConstantNode", {
  enumerable: true,
  get: function () {
    return _ConstantNode.createConstantNode;
  }
});
Object.defineProperty(exports, "createFunctionAssignmentNode", {
  enumerable: true,
  get: function () {
    return _FunctionAssignmentNode.createFunctionAssignmentNode;
  }
});
Object.defineProperty(exports, "createIndexNode", {
  enumerable: true,
  get: function () {
    return _IndexNode.createIndexNode;
  }
});
Object.defineProperty(exports, "createObjectNode", {
  enumerable: true,
  get: function () {
    return _ObjectNode.createObjectNode;
  }
});
Object.defineProperty(exports, "createOperatorNode", {
  enumerable: true,
  get: function () {
    return _OperatorNode.createOperatorNode;
  }
});
Object.defineProperty(exports, "createParenthesisNode", {
  enumerable: true,
  get: function () {
    return _ParenthesisNode.createParenthesisNode;
  }
});
Object.defineProperty(exports, "createRangeNode", {
  enumerable: true,
  get: function () {
    return _RangeNode.createRangeNode;
  }
});
Object.defineProperty(exports, "createRelationalNode", {
  enumerable: true,
  get: function () {
    return _RelationalNode.createRelationalNode;
  }
});
Object.defineProperty(exports, "createSymbolNode", {
  enumerable: true,
  get: function () {
    return _SymbolNode.createSymbolNode;
  }
});
Object.defineProperty(exports, "createFunctionNode", {
  enumerable: true,
  get: function () {
    return _FunctionNode.createFunctionNode;
  }
});
Object.defineProperty(exports, "createParse", {
  enumerable: true,
  get: function () {
    return _parse.createParse;
  }
});
Object.defineProperty(exports, "createCompile", {
  enumerable: true,
  get: function () {
    return _compile.createCompile;
  }
});
Object.defineProperty(exports, "createEvaluate", {
  enumerable: true,
  get: function () {
    return _evaluate.createEvaluate;
  }
});
Object.defineProperty(exports, "createDeprecatedEval", {
  enumerable: true,
  get: function () {
    return _eval.createDeprecatedEval;
  }
});
Object.defineProperty(exports, "createParserClass", {
  enumerable: true,
  get: function () {
    return _Parser.createParserClass;
  }
});
Object.defineProperty(exports, "createParser", {
  enumerable: true,
  get: function () {
    return _parser.createParser;
  }
});
Object.defineProperty(exports, "createLup", {
  enumerable: true,
  get: function () {
    return _lup.createLup;
  }
});
Object.defineProperty(exports, "createQr", {
  enumerable: true,
  get: function () {
    return _qr.createQr;
  }
});
Object.defineProperty(exports, "createSlu", {
  enumerable: true,
  get: function () {
    return _slu.createSlu;
  }
});
Object.defineProperty(exports, "createLusolve", {
  enumerable: true,
  get: function () {
    return _lusolve.createLusolve;
  }
});
Object.defineProperty(exports, "createHelpClass", {
  enumerable: true,
  get: function () {
    return _Help.createHelpClass;
  }
});
Object.defineProperty(exports, "createChainClass", {
  enumerable: true,
  get: function () {
    return _Chain.createChainClass;
  }
});
Object.defineProperty(exports, "createHelp", {
  enumerable: true,
  get: function () {
    return _help.createHelp;
  }
});
Object.defineProperty(exports, "createChain", {
  enumerable: true,
  get: function () {
    return _chain.createChain;
  }
});
Object.defineProperty(exports, "createDet", {
  enumerable: true,
  get: function () {
    return _det.createDet;
  }
});
Object.defineProperty(exports, "createInv", {
  enumerable: true,
  get: function () {
    return _inv.createInv;
  }
});
Object.defineProperty(exports, "createExpm", {
  enumerable: true,
  get: function () {
    return _expm2.createExpm;
  }
});
Object.defineProperty(exports, "createSqrtm", {
  enumerable: true,
  get: function () {
    return _sqrtm.createSqrtm;
  }
});
Object.defineProperty(exports, "createDivide", {
  enumerable: true,
  get: function () {
    return _divide.createDivide;
  }
});
Object.defineProperty(exports, "createDistance", {
  enumerable: true,
  get: function () {
    return _distance.createDistance;
  }
});
Object.defineProperty(exports, "createIntersect", {
  enumerable: true,
  get: function () {
    return _intersect.createIntersect;
  }
});
Object.defineProperty(exports, "createSum", {
  enumerable: true,
  get: function () {
    return _sum.createSum;
  }
});
Object.defineProperty(exports, "createMean", {
  enumerable: true,
  get: function () {
    return _mean.createMean;
  }
});
Object.defineProperty(exports, "createMedian", {
  enumerable: true,
  get: function () {
    return _median.createMedian;
  }
});
Object.defineProperty(exports, "createMad", {
  enumerable: true,
  get: function () {
    return _mad.createMad;
  }
});
Object.defineProperty(exports, "createVariance", {
  enumerable: true,
  get: function () {
    return _variance.createVariance;
  }
});
Object.defineProperty(exports, "createDeprecatedVar", {
  enumerable: true,
  get: function () {
    return _variance.createDeprecatedVar;
  }
});
Object.defineProperty(exports, "createQuantileSeq", {
  enumerable: true,
  get: function () {
    return _quantileSeq.createQuantileSeq;
  }
});
Object.defineProperty(exports, "createStd", {
  enumerable: true,
  get: function () {
    return _std.createStd;
  }
});
Object.defineProperty(exports, "createCombinations", {
  enumerable: true,
  get: function () {
    return _combinations.createCombinations;
  }
});
Object.defineProperty(exports, "createGamma", {
  enumerable: true,
  get: function () {
    return _gamma.createGamma;
  }
});
Object.defineProperty(exports, "createFactorial", {
  enumerable: true,
  get: function () {
    return _factorial.createFactorial;
  }
});
Object.defineProperty(exports, "createKldivergence", {
  enumerable: true,
  get: function () {
    return _kldivergence.createKldivergence;
  }
});
Object.defineProperty(exports, "createMultinomial", {
  enumerable: true,
  get: function () {
    return _multinomial.createMultinomial;
  }
});
Object.defineProperty(exports, "createPermutations", {
  enumerable: true,
  get: function () {
    return _permutations.createPermutations;
  }
});
Object.defineProperty(exports, "createPickRandom", {
  enumerable: true,
  get: function () {
    return _pickRandom.createPickRandom;
  }
});
Object.defineProperty(exports, "createRandom", {
  enumerable: true,
  get: function () {
    return _random.createRandom;
  }
});
Object.defineProperty(exports, "createRandomInt", {
  enumerable: true,
  get: function () {
    return _randomInt.createRandomInt;
  }
});
Object.defineProperty(exports, "createStirlingS2", {
  enumerable: true,
  get: function () {
    return _stirlingS.createStirlingS2;
  }
});
Object.defineProperty(exports, "createBellNumbers", {
  enumerable: true,
  get: function () {
    return _bellNumbers.createBellNumbers;
  }
});
Object.defineProperty(exports, "createCatalan", {
  enumerable: true,
  get: function () {
    return _catalan.createCatalan;
  }
});
Object.defineProperty(exports, "createComposition", {
  enumerable: true,
  get: function () {
    return _composition.createComposition;
  }
});
Object.defineProperty(exports, "createSimplify", {
  enumerable: true,
  get: function () {
    return _simplify.createSimplify;
  }
});
Object.defineProperty(exports, "createDerivative", {
  enumerable: true,
  get: function () {
    return _derivative.createDerivative;
  }
});
Object.defineProperty(exports, "createRationalize", {
  enumerable: true,
  get: function () {
    return _rationalize.createRationalize;
  }
});
Object.defineProperty(exports, "createReviver", {
  enumerable: true,
  get: function () {
    return _reviver.createReviver;
  }
});
Object.defineProperty(exports, "createE", {
  enumerable: true,
  get: function () {
    return _constants.createE;
  }
});
Object.defineProperty(exports, "createUppercaseE", {
  enumerable: true,
  get: function () {
    return _constants.createUppercaseE;
  }
});
Object.defineProperty(exports, "createFalse", {
  enumerable: true,
  get: function () {
    return _constants.createFalse;
  }
});
Object.defineProperty(exports, "createI", {
  enumerable: true,
  get: function () {
    return _constants.createI;
  }
});
Object.defineProperty(exports, "createInfinity", {
  enumerable: true,
  get: function () {
    return _constants.createInfinity;
  }
});
Object.defineProperty(exports, "createLN10", {
  enumerable: true,
  get: function () {
    return _constants.createLN10;
  }
});
Object.defineProperty(exports, "createLN2", {
  enumerable: true,
  get: function () {
    return _constants.createLN2;
  }
});
Object.defineProperty(exports, "createLOG10E", {
  enumerable: true,
  get: function () {
    return _constants.createLOG10E;
  }
});
Object.defineProperty(exports, "createLOG2E", {
  enumerable: true,
  get: function () {
    return _constants.createLOG2E;
  }
});
Object.defineProperty(exports, "createNaN", {
  enumerable: true,
  get: function () {
    return _constants.createNaN;
  }
});
Object.defineProperty(exports, "createNull", {
  enumerable: true,
  get: function () {
    return _constants.createNull;
  }
});
Object.defineProperty(exports, "createPhi", {
  enumerable: true,
  get: function () {
    return _constants.createPhi;
  }
});
Object.defineProperty(exports, "createPi", {
  enumerable: true,
  get: function () {
    return _constants.createPi;
  }
});
Object.defineProperty(exports, "createUppercasePi", {
  enumerable: true,
  get: function () {
    return _constants.createUppercasePi;
  }
});
Object.defineProperty(exports, "createSQRT1_2", {
  enumerable: true,
  get: function () {
    return _constants.createSQRT1_2;
  }
});
Object.defineProperty(exports, "createSQRT2", {
  enumerable: true,
  get: function () {
    return _constants.createSQRT2;
  }
});
Object.defineProperty(exports, "createTau", {
  enumerable: true,
  get: function () {
    return _constants.createTau;
  }
});
Object.defineProperty(exports, "createTrue", {
  enumerable: true,
  get: function () {
    return _constants.createTrue;
  }
});
Object.defineProperty(exports, "createVersion", {
  enumerable: true,
  get: function () {
    return _constants.createVersion;
  }
});
Object.defineProperty(exports, "createAtomicMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createAtomicMass;
  }
});
Object.defineProperty(exports, "createAvogadro", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createAvogadro;
  }
});
Object.defineProperty(exports, "createBohrMagneton", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createBohrMagneton;
  }
});
Object.defineProperty(exports, "createBohrRadius", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createBohrRadius;
  }
});
Object.defineProperty(exports, "createBoltzmann", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createBoltzmann;
  }
});
Object.defineProperty(exports, "createClassicalElectronRadius", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createClassicalElectronRadius;
  }
});
Object.defineProperty(exports, "createConductanceQuantum", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createConductanceQuantum;
  }
});
Object.defineProperty(exports, "createCoulomb", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createCoulomb;
  }
});
Object.defineProperty(exports, "createDeuteronMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createDeuteronMass;
  }
});
Object.defineProperty(exports, "createEfimovFactor", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createEfimovFactor;
  }
});
Object.defineProperty(exports, "createElectricConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createElectricConstant;
  }
});
Object.defineProperty(exports, "createElectronMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createElectronMass;
  }
});
Object.defineProperty(exports, "createElementaryCharge", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createElementaryCharge;
  }
});
Object.defineProperty(exports, "createFaraday", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createFaraday;
  }
});
Object.defineProperty(exports, "createFermiCoupling", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createFermiCoupling;
  }
});
Object.defineProperty(exports, "createFineStructure", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createFineStructure;
  }
});
Object.defineProperty(exports, "createFirstRadiation", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createFirstRadiation;
  }
});
Object.defineProperty(exports, "createGasConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createGasConstant;
  }
});
Object.defineProperty(exports, "createGravitationConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createGravitationConstant;
  }
});
Object.defineProperty(exports, "createGravity", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createGravity;
  }
});
Object.defineProperty(exports, "createHartreeEnergy", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createHartreeEnergy;
  }
});
Object.defineProperty(exports, "createInverseConductanceQuantum", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createInverseConductanceQuantum;
  }
});
Object.defineProperty(exports, "createKlitzing", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createKlitzing;
  }
});
Object.defineProperty(exports, "createLoschmidt", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createLoschmidt;
  }
});
Object.defineProperty(exports, "createMagneticConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createMagneticConstant;
  }
});
Object.defineProperty(exports, "createMagneticFluxQuantum", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createMagneticFluxQuantum;
  }
});
Object.defineProperty(exports, "createMolarMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createMolarMass;
  }
});
Object.defineProperty(exports, "createMolarMassC12", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createMolarMassC12;
  }
});
Object.defineProperty(exports, "createMolarPlanckConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createMolarPlanckConstant;
  }
});
Object.defineProperty(exports, "createMolarVolume", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createMolarVolume;
  }
});
Object.defineProperty(exports, "createNeutronMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createNeutronMass;
  }
});
Object.defineProperty(exports, "createNuclearMagneton", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createNuclearMagneton;
  }
});
Object.defineProperty(exports, "createPlanckCharge", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createPlanckCharge;
  }
});
Object.defineProperty(exports, "createPlanckConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createPlanckConstant;
  }
});
Object.defineProperty(exports, "createPlanckLength", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createPlanckLength;
  }
});
Object.defineProperty(exports, "createPlanckMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createPlanckMass;
  }
});
Object.defineProperty(exports, "createPlanckTemperature", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createPlanckTemperature;
  }
});
Object.defineProperty(exports, "createPlanckTime", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createPlanckTime;
  }
});
Object.defineProperty(exports, "createProtonMass", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createProtonMass;
  }
});
Object.defineProperty(exports, "createQuantumOfCirculation", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createQuantumOfCirculation;
  }
});
Object.defineProperty(exports, "createReducedPlanckConstant", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createReducedPlanckConstant;
  }
});
Object.defineProperty(exports, "createRydberg", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createRydberg;
  }
});
Object.defineProperty(exports, "createSackurTetrode", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createSackurTetrode;
  }
});
Object.defineProperty(exports, "createSecondRadiation", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createSecondRadiation;
  }
});
Object.defineProperty(exports, "createSpeedOfLight", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createSpeedOfLight;
  }
});
Object.defineProperty(exports, "createStefanBoltzmann", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createStefanBoltzmann;
  }
});
Object.defineProperty(exports, "createThomsonCrossSection", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createThomsonCrossSection;
  }
});
Object.defineProperty(exports, "createVacuumImpedance", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createVacuumImpedance;
  }
});
Object.defineProperty(exports, "createWeakMixingAngle", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createWeakMixingAngle;
  }
});
Object.defineProperty(exports, "createWienDisplacement", {
  enumerable: true,
  get: function () {
    return _physicalConstants.createWienDisplacement;
  }
});
Object.defineProperty(exports, "createApplyTransform", {
  enumerable: true,
  get: function () {
    return _apply2.createApplyTransform;
  }
});
Object.defineProperty(exports, "createColumnTransform", {
  enumerable: true,
  get: function () {
    return _column2.createColumnTransform;
  }
});
Object.defineProperty(exports, "createFilterTransform", {
  enumerable: true,
  get: function () {
    return _filter2.createFilterTransform;
  }
});
Object.defineProperty(exports, "createForEachTransform", {
  enumerable: true,
  get: function () {
    return _forEach2.createForEachTransform;
  }
});
Object.defineProperty(exports, "createIndexTransform", {
  enumerable: true,
  get: function () {
    return _index.createIndexTransform;
  }
});
Object.defineProperty(exports, "createMapTransform", {
  enumerable: true,
  get: function () {
    return _map2.createMapTransform;
  }
});
Object.defineProperty(exports, "createMaxTransform", {
  enumerable: true,
  get: function () {
    return _max2.createMaxTransform;
  }
});
Object.defineProperty(exports, "createMeanTransform", {
  enumerable: true,
  get: function () {
    return _mean2.createMeanTransform;
  }
});
Object.defineProperty(exports, "createMinTransform", {
  enumerable: true,
  get: function () {
    return _min2.createMinTransform;
  }
});
Object.defineProperty(exports, "createRangeTransform", {
  enumerable: true,
  get: function () {
    return _range2.createRangeTransform;
  }
});
Object.defineProperty(exports, "createRowTransform", {
  enumerable: true,
  get: function () {
    return _row2.createRowTransform;
  }
});
Object.defineProperty(exports, "createSubsetTransform", {
  enumerable: true,
  get: function () {
    return _subset2.createSubsetTransform;
  }
});
Object.defineProperty(exports, "createConcatTransform", {
  enumerable: true,
  get: function () {
    return _concat2.createConcatTransform;
  }
});
Object.defineProperty(exports, "createStdTransform", {
  enumerable: true,
  get: function () {
    return _std2.createStdTransform;
  }
});
Object.defineProperty(exports, "createSumTransform", {
  enumerable: true,
  get: function () {
    return _sum2.createSumTransform;
  }
});
Object.defineProperty(exports, "createVarianceTransform", {
  enumerable: true,
  get: function () {
    return _variance2.createVarianceTransform;
  }
});

var _typed = require("./core/function/typed");

var _ResultSet = require("./type/resultset/ResultSet");

var _BigNumber = require("./type/bignumber/BigNumber");

var _Complex = require("./type/complex/Complex");

var _Fraction = require("./type/fraction/Fraction");

var _Range = require("./type/matrix/Range");

var _Matrix = require("./type/matrix/Matrix");

var _DenseMatrix = require("./type/matrix/DenseMatrix");

var _clone = require("./function/utils/clone");

var _isInteger = require("./function/utils/isInteger");

var _isNegative = require("./function/utils/isNegative");

var _isNumeric = require("./function/utils/isNumeric");

var _hasNumericValue = require("./function/utils/hasNumericValue");

var _isPositive = require("./function/utils/isPositive");

var _isZero = require("./function/utils/isZero");

var _isNaN = require("./function/utils/isNaN");

var _typeOf = require("./function/utils/typeOf");

var _equalScalar = require("./function/relational/equalScalar");

var _SparseMatrix = require("./type/matrix/SparseMatrix");

var _number = require("./type/number");

var _string = require("./type/string");

var _boolean = require("./type/boolean");

var _bignumber = require("./type/bignumber/function/bignumber");

var _complex = require("./type/complex/function/complex");

var _fraction = require("./type/fraction/function/fraction");

var _matrix = require("./type/matrix/function/matrix");

var _splitUnit = require("./type/unit/function/splitUnit");

var _unaryMinus = require("./function/arithmetic/unaryMinus");

var _unaryPlus = require("./function/arithmetic/unaryPlus");

var _abs = require("./function/arithmetic/abs");

var _apply = require("./function/matrix/apply");

var _addScalar = require("./function/arithmetic/addScalar");

var _cbrt = require("./function/arithmetic/cbrt");

var _ceil = require("./function/arithmetic/ceil");

var _cube = require("./function/arithmetic/cube");

var _exp = require("./function/arithmetic/exp");

var _expm = require("./function/arithmetic/expm1");

var _fix = require("./function/arithmetic/fix");

var _floor = require("./function/arithmetic/floor");

var _gcd = require("./function/arithmetic/gcd");

var _lcm = require("./function/arithmetic/lcm");

var _log = require("./function/arithmetic/log10");

var _log2 = require("./function/arithmetic/log2");

var _mod = require("./function/arithmetic/mod");

var _multiplyScalar = require("./function/arithmetic/multiplyScalar");

var _multiply = require("./function/arithmetic/multiply");

var _nthRoot = require("./function/arithmetic/nthRoot");

var _sign = require("./function/arithmetic/sign");

var _sqrt = require("./function/arithmetic/sqrt");

var _square = require("./function/arithmetic/square");

var _subtract = require("./function/arithmetic/subtract");

var _xgcd = require("./function/arithmetic/xgcd");

var _dotMultiply = require("./function/arithmetic/dotMultiply");

var _bitAnd = require("./function/bitwise/bitAnd");

var _bitNot = require("./function/bitwise/bitNot");

var _bitOr = require("./function/bitwise/bitOr");

var _bitXor = require("./function/bitwise/bitXor");

var _arg = require("./function/complex/arg");

var _conj = require("./function/complex/conj");

var _im = require("./function/complex/im");

var _re = require("./function/complex/re");

var _not = require("./function/logical/not");

var _or = require("./function/logical/or");

var _xor = require("./function/logical/xor");

var _concat = require("./function/matrix/concat");

var _column = require("./function/matrix/column");

var _cross = require("./function/matrix/cross");

var _diag = require("./function/matrix/diag");

var _eye = require("./function/matrix/eye");

var _filter = require("./function/matrix/filter");

var _flatten = require("./function/matrix/flatten");

var _forEach = require("./function/matrix/forEach");

var _getMatrixDataType = require("./function/matrix/getMatrixDataType");

var _identity = require("./function/matrix/identity");

var _kron = require("./function/matrix/kron");

var _map = require("./function/matrix/map");

var _ones = require("./function/matrix/ones");

var _range = require("./function/matrix/range");

var _reshape = require("./function/matrix/reshape");

var _resize = require("./function/matrix/resize");

var _row = require("./function/matrix/row");

var _size = require("./function/matrix/size");

var _squeeze = require("./function/matrix/squeeze");

var _subset = require("./function/matrix/subset");

var _transpose = require("./function/matrix/transpose");

var _ctranspose = require("./function/matrix/ctranspose");

var _zeros = require("./function/matrix/zeros");

var _erf = require("./function/special/erf");

var _mode = require("./function/statistics/mode");

var _prod = require("./function/statistics/prod");

var _format = require("./function/string/format");

var _print = require("./function/string/print");

var _to = require("./function/unit/to");

var _isPrime = require("./function/utils/isPrime");

var _numeric = require("./function/utils/numeric");

var _divideScalar = require("./function/arithmetic/divideScalar");

var _pow = require("./function/arithmetic/pow");

var _round = require("./function/arithmetic/round");

var _log3 = require("./function/arithmetic/log");

var _log1p = require("./function/arithmetic/log1p");

var _nthRoots = require("./function/arithmetic/nthRoots");

var _dotPow = require("./function/arithmetic/dotPow");

var _dotDivide = require("./function/arithmetic/dotDivide");

var _lsolve = require("./function/algebra/solver/lsolve");

var _usolve = require("./function/algebra/solver/usolve");

var _leftShift = require("./function/bitwise/leftShift");

var _rightArithShift = require("./function/bitwise/rightArithShift");

var _rightLogShift = require("./function/bitwise/rightLogShift");

var _and = require("./function/logical/and");

var _compare = require("./function/relational/compare");

var _compareNatural = require("./function/relational/compareNatural");

var _compareText = require("./function/relational/compareText");

var _equal = require("./function/relational/equal");

var _equalText = require("./function/relational/equalText");

var _smaller = require("./function/relational/smaller");

var _smallerEq = require("./function/relational/smallerEq");

var _larger = require("./function/relational/larger");

var _largerEq = require("./function/relational/largerEq");

var _deepEqual = require("./function/relational/deepEqual");

var _unequal = require("./function/relational/unequal");

var _partitionSelect = require("./function/matrix/partitionSelect");

var _sort = require("./function/matrix/sort");

var _max = require("./function/statistics/max");

var _min = require("./function/statistics/min");

var _ImmutableDenseMatrix = require("./type/matrix/ImmutableDenseMatrix");

var _MatrixIndex = require("./type/matrix/MatrixIndex");

var _FibonacciHeap = require("./type/matrix/FibonacciHeap");

var _Spa = require("./type/matrix/Spa");

var _Unit = require("./type/unit/Unit");

var _unit = require("./type/unit/function/unit");

var _sparse = require("./type/matrix/function/sparse");

var _createUnit = require("./type/unit/function/createUnit");

var _acos = require("./function/trigonometry/acos");

var _acosh = require("./function/trigonometry/acosh");

var _acot = require("./function/trigonometry/acot");

var _acoth = require("./function/trigonometry/acoth");

var _acsc = require("./function/trigonometry/acsc");

var _acsch = require("./function/trigonometry/acsch");

var _asec = require("./function/trigonometry/asec");

var _asech = require("./function/trigonometry/asech");

var _asin = require("./function/trigonometry/asin");

var _asinh = require("./function/trigonometry/asinh");

var _atan = require("./function/trigonometry/atan");

var _atan2 = require("./function/trigonometry/atan2");

var _atanh = require("./function/trigonometry/atanh");

var _cos = require("./function/trigonometry/cos");

var _cosh = require("./function/trigonometry/cosh");

var _cot = require("./function/trigonometry/cot");

var _coth = require("./function/trigonometry/coth");

var _csc = require("./function/trigonometry/csc");

var _csch = require("./function/trigonometry/csch");

var _sec = require("./function/trigonometry/sec");

var _sech = require("./function/trigonometry/sech");

var _sin = require("./function/trigonometry/sin");

var _sinh = require("./function/trigonometry/sinh");

var _tan = require("./function/trigonometry/tan");

var _tanh = require("./function/trigonometry/tanh");

var _setCartesian = require("./function/set/setCartesian");

var _setDifference = require("./function/set/setDifference");

var _setDistinct = require("./function/set/setDistinct");

var _setIntersect = require("./function/set/setIntersect");

var _setIsSubset = require("./function/set/setIsSubset");

var _setMultiplicity = require("./function/set/setMultiplicity");

var _setPowerset = require("./function/set/setPowerset");

var _setSize = require("./function/set/setSize");

var _setSymDifference = require("./function/set/setSymDifference");

var _setUnion = require("./function/set/setUnion");

var _add = require("./function/arithmetic/add");

var _hypot = require("./function/arithmetic/hypot");

var _norm = require("./function/arithmetic/norm");

var _dot = require("./function/matrix/dot");

var _trace = require("./function/matrix/trace");

var _function = require("./type/matrix/function");

var _Node = require("./expression/node/Node");

var _AccessorNode = require("./expression/node/AccessorNode");

var _ArrayNode = require("./expression/node/ArrayNode");

var _AssignmentNode = require("./expression/node/AssignmentNode");

var _BlockNode = require("./expression/node/BlockNode");

var _ConditionalNode = require("./expression/node/ConditionalNode");

var _ConstantNode = require("./expression/node/ConstantNode");

var _FunctionAssignmentNode = require("./expression/node/FunctionAssignmentNode");

var _IndexNode = require("./expression/node/IndexNode");

var _ObjectNode = require("./expression/node/ObjectNode");

var _OperatorNode = require("./expression/node/OperatorNode");

var _ParenthesisNode = require("./expression/node/ParenthesisNode");

var _RangeNode = require("./expression/node/RangeNode");

var _RelationalNode = require("./expression/node/RelationalNode");

var _SymbolNode = require("./expression/node/SymbolNode");

var _FunctionNode = require("./expression/node/FunctionNode");

var _parse = require("./expression/parse");

var _compile = require("./expression/function/compile");

var _evaluate = require("./expression/function/evaluate");

var _eval = require("./expression/function/eval");

var _Parser = require("./expression/Parser");

var _parser = require("./expression/function/parser");

var _lup = require("./function/algebra/decomposition/lup");

var _qr = require("./function/algebra/decomposition/qr");

var _slu = require("./function/algebra/decomposition/slu");

var _lusolve = require("./function/algebra/solver/lusolve");

var _Help = require("./expression/Help");

var _Chain = require("./type/chain/Chain");

var _help = require("./expression/function/help");

var _chain = require("./type/chain/function/chain");

var _det = require("./function/matrix/det");

var _inv = require("./function/matrix/inv");

var _expm2 = require("./function/matrix/expm");

var _sqrtm = require("./function/matrix/sqrtm");

var _divide = require("./function/arithmetic/divide");

var _distance = require("./function/geometry/distance");

var _intersect = require("./function/geometry/intersect");

var _sum = require("./function/statistics/sum");

var _mean = require("./function/statistics/mean");

var _median = require("./function/statistics/median");

var _mad = require("./function/statistics/mad");

var _variance = require("./function/statistics/variance");

var _quantileSeq = require("./function/statistics/quantileSeq");

var _std = require("./function/statistics/std");

var _combinations = require("./function/probability/combinations");

var _gamma = require("./function/probability/gamma");

var _factorial = require("./function/probability/factorial");

var _kldivergence = require("./function/probability/kldivergence");

var _multinomial = require("./function/probability/multinomial");

var _permutations = require("./function/probability/permutations");

var _pickRandom = require("./function/probability/pickRandom");

var _random = require("./function/probability/random");

var _randomInt = require("./function/probability/randomInt");

var _stirlingS = require("./function/combinatorics/stirlingS2");

var _bellNumbers = require("./function/combinatorics/bellNumbers");

var _catalan = require("./function/combinatorics/catalan");

var _composition = require("./function/combinatorics/composition");

var _simplify = require("./function/algebra/simplify");

var _derivative = require("./function/algebra/derivative");

var _rationalize = require("./function/algebra/rationalize");

var _reviver = require("./json/reviver");

var _constants = require("./constants");

var _physicalConstants = require("./type/unit/physicalConstants");

var _apply2 = require("./expression/transform/apply.transform");

var _column2 = require("./expression/transform/column.transform");

var _filter2 = require("./expression/transform/filter.transform");

var _forEach2 = require("./expression/transform/forEach.transform");

var _index = require("./expression/transform/index.transform");

var _map2 = require("./expression/transform/map.transform");

var _max2 = require("./expression/transform/max.transform");

var _mean2 = require("./expression/transform/mean.transform");

var _min2 = require("./expression/transform/min.transform");

var _range2 = require("./expression/transform/range.transform");

var _row2 = require("./expression/transform/row.transform");

var _subset2 = require("./expression/transform/subset.transform");

var _concat2 = require("./expression/transform/concat.transform");

var _std2 = require("./expression/transform/std.transform");

var _sum2 = require("./expression/transform/sum.transform");

var _variance2 = require("./expression/transform/variance.transform");
},{"./core/function/typed":"../node_modules/mathjs/src/core/function/typed.js","./type/resultset/ResultSet":"../node_modules/mathjs/src/type/resultset/ResultSet.js","./type/bignumber/BigNumber":"../node_modules/mathjs/src/type/bignumber/BigNumber.js","./type/complex/Complex":"../node_modules/mathjs/src/type/complex/Complex.js","./type/fraction/Fraction":"../node_modules/mathjs/src/type/fraction/Fraction.js","./type/matrix/Range":"../node_modules/mathjs/src/type/matrix/Range.js","./type/matrix/Matrix":"../node_modules/mathjs/src/type/matrix/Matrix.js","./type/matrix/DenseMatrix":"../node_modules/mathjs/src/type/matrix/DenseMatrix.js","./function/utils/clone":"../node_modules/mathjs/src/function/utils/clone.js","./function/utils/isInteger":"../node_modules/mathjs/src/function/utils/isInteger.js","./function/utils/isNegative":"../node_modules/mathjs/src/function/utils/isNegative.js","./function/utils/isNumeric":"../node_modules/mathjs/src/function/utils/isNumeric.js","./function/utils/hasNumericValue":"../node_modules/mathjs/src/function/utils/hasNumericValue.js","./function/utils/isPositive":"../node_modules/mathjs/src/function/utils/isPositive.js","./function/utils/isZero":"../node_modules/mathjs/src/function/utils/isZero.js","./function/utils/isNaN":"../node_modules/mathjs/src/function/utils/isNaN.js","./function/utils/typeOf":"../node_modules/mathjs/src/function/utils/typeOf.js","./function/relational/equalScalar":"../node_modules/mathjs/src/function/relational/equalScalar.js","./type/matrix/SparseMatrix":"../node_modules/mathjs/src/type/matrix/SparseMatrix.js","./type/number":"../node_modules/mathjs/src/type/number.js","./type/string":"../node_modules/mathjs/src/type/string.js","./type/boolean":"../node_modules/mathjs/src/type/boolean.js","./type/bignumber/function/bignumber":"../node_modules/mathjs/src/type/bignumber/function/bignumber.js","./type/complex/function/complex":"../node_modules/mathjs/src/type/complex/function/complex.js","./type/fraction/function/fraction":"../node_modules/mathjs/src/type/fraction/function/fraction.js","./type/matrix/function/matrix":"../node_modules/mathjs/src/type/matrix/function/matrix.js","./type/unit/function/splitUnit":"../node_modules/mathjs/src/type/unit/function/splitUnit.js","./function/arithmetic/unaryMinus":"../node_modules/mathjs/src/function/arithmetic/unaryMinus.js","./function/arithmetic/unaryPlus":"../node_modules/mathjs/src/function/arithmetic/unaryPlus.js","./function/arithmetic/abs":"../node_modules/mathjs/src/function/arithmetic/abs.js","./function/matrix/apply":"../node_modules/mathjs/src/function/matrix/apply.js","./function/arithmetic/addScalar":"../node_modules/mathjs/src/function/arithmetic/addScalar.js","./function/arithmetic/cbrt":"../node_modules/mathjs/src/function/arithmetic/cbrt.js","./function/arithmetic/ceil":"../node_modules/mathjs/src/function/arithmetic/ceil.js","./function/arithmetic/cube":"../node_modules/mathjs/src/function/arithmetic/cube.js","./function/arithmetic/exp":"../node_modules/mathjs/src/function/arithmetic/exp.js","./function/arithmetic/expm1":"../node_modules/mathjs/src/function/arithmetic/expm1.js","./function/arithmetic/fix":"../node_modules/mathjs/src/function/arithmetic/fix.js","./function/arithmetic/floor":"../node_modules/mathjs/src/function/arithmetic/floor.js","./function/arithmetic/gcd":"../node_modules/mathjs/src/function/arithmetic/gcd.js","./function/arithmetic/lcm":"../node_modules/mathjs/src/function/arithmetic/lcm.js","./function/arithmetic/log10":"../node_modules/mathjs/src/function/arithmetic/log10.js","./function/arithmetic/log2":"../node_modules/mathjs/src/function/arithmetic/log2.js","./function/arithmetic/mod":"../node_modules/mathjs/src/function/arithmetic/mod.js","./function/arithmetic/multiplyScalar":"../node_modules/mathjs/src/function/arithmetic/multiplyScalar.js","./function/arithmetic/multiply":"../node_modules/mathjs/src/function/arithmetic/multiply.js","./function/arithmetic/nthRoot":"../node_modules/mathjs/src/function/arithmetic/nthRoot.js","./function/arithmetic/sign":"../node_modules/mathjs/src/function/arithmetic/sign.js","./function/arithmetic/sqrt":"../node_modules/mathjs/src/function/arithmetic/sqrt.js","./function/arithmetic/square":"../node_modules/mathjs/src/function/arithmetic/square.js","./function/arithmetic/subtract":"../node_modules/mathjs/src/function/arithmetic/subtract.js","./function/arithmetic/xgcd":"../node_modules/mathjs/src/function/arithmetic/xgcd.js","./function/arithmetic/dotMultiply":"../node_modules/mathjs/src/function/arithmetic/dotMultiply.js","./function/bitwise/bitAnd":"../node_modules/mathjs/src/function/bitwise/bitAnd.js","./function/bitwise/bitNot":"../node_modules/mathjs/src/function/bitwise/bitNot.js","./function/bitwise/bitOr":"../node_modules/mathjs/src/function/bitwise/bitOr.js","./function/bitwise/bitXor":"../node_modules/mathjs/src/function/bitwise/bitXor.js","./function/complex/arg":"../node_modules/mathjs/src/function/complex/arg.js","./function/complex/conj":"../node_modules/mathjs/src/function/complex/conj.js","./function/complex/im":"../node_modules/mathjs/src/function/complex/im.js","./function/complex/re":"../node_modules/mathjs/src/function/complex/re.js","./function/logical/not":"../node_modules/mathjs/src/function/logical/not.js","./function/logical/or":"../node_modules/mathjs/src/function/logical/or.js","./function/logical/xor":"../node_modules/mathjs/src/function/logical/xor.js","./function/matrix/concat":"../node_modules/mathjs/src/function/matrix/concat.js","./function/matrix/column":"../node_modules/mathjs/src/function/matrix/column.js","./function/matrix/cross":"../node_modules/mathjs/src/function/matrix/cross.js","./function/matrix/diag":"../node_modules/mathjs/src/function/matrix/diag.js","./function/matrix/eye":"../node_modules/mathjs/src/function/matrix/eye.js","./function/matrix/filter":"../node_modules/mathjs/src/function/matrix/filter.js","./function/matrix/flatten":"../node_modules/mathjs/src/function/matrix/flatten.js","./function/matrix/forEach":"../node_modules/mathjs/src/function/matrix/forEach.js","./function/matrix/getMatrixDataType":"../node_modules/mathjs/src/function/matrix/getMatrixDataType.js","./function/matrix/identity":"../node_modules/mathjs/src/function/matrix/identity.js","./function/matrix/kron":"../node_modules/mathjs/src/function/matrix/kron.js","./function/matrix/map":"../node_modules/mathjs/src/function/matrix/map.js","./function/matrix/ones":"../node_modules/mathjs/src/function/matrix/ones.js","./function/matrix/range":"../node_modules/mathjs/src/function/matrix/range.js","./function/matrix/reshape":"../node_modules/mathjs/src/function/matrix/reshape.js","./function/matrix/resize":"../node_modules/mathjs/src/function/matrix/resize.js","./function/matrix/row":"../node_modules/mathjs/src/function/matrix/row.js","./function/matrix/size":"../node_modules/mathjs/src/function/matrix/size.js","./function/matrix/squeeze":"../node_modules/mathjs/src/function/matrix/squeeze.js","./function/matrix/subset":"../node_modules/mathjs/src/function/matrix/subset.js","./function/matrix/transpose":"../node_modules/mathjs/src/function/matrix/transpose.js","./function/matrix/ctranspose":"../node_modules/mathjs/src/function/matrix/ctranspose.js","./function/matrix/zeros":"../node_modules/mathjs/src/function/matrix/zeros.js","./function/special/erf":"../node_modules/mathjs/src/function/special/erf.js","./function/statistics/mode":"../node_modules/mathjs/src/function/statistics/mode.js","./function/statistics/prod":"../node_modules/mathjs/src/function/statistics/prod.js","./function/string/format":"../node_modules/mathjs/src/function/string/format.js","./function/string/print":"../node_modules/mathjs/src/function/string/print.js","./function/unit/to":"../node_modules/mathjs/src/function/unit/to.js","./function/utils/isPrime":"../node_modules/mathjs/src/function/utils/isPrime.js","./function/utils/numeric":"../node_modules/mathjs/src/function/utils/numeric.js","./function/arithmetic/divideScalar":"../node_modules/mathjs/src/function/arithmetic/divideScalar.js","./function/arithmetic/pow":"../node_modules/mathjs/src/function/arithmetic/pow.js","./function/arithmetic/round":"../node_modules/mathjs/src/function/arithmetic/round.js","./function/arithmetic/log":"../node_modules/mathjs/src/function/arithmetic/log.js","./function/arithmetic/log1p":"../node_modules/mathjs/src/function/arithmetic/log1p.js","./function/arithmetic/nthRoots":"../node_modules/mathjs/src/function/arithmetic/nthRoots.js","./function/arithmetic/dotPow":"../node_modules/mathjs/src/function/arithmetic/dotPow.js","./function/arithmetic/dotDivide":"../node_modules/mathjs/src/function/arithmetic/dotDivide.js","./function/algebra/solver/lsolve":"../node_modules/mathjs/src/function/algebra/solver/lsolve.js","./function/algebra/solver/usolve":"../node_modules/mathjs/src/function/algebra/solver/usolve.js","./function/bitwise/leftShift":"../node_modules/mathjs/src/function/bitwise/leftShift.js","./function/bitwise/rightArithShift":"../node_modules/mathjs/src/function/bitwise/rightArithShift.js","./function/bitwise/rightLogShift":"../node_modules/mathjs/src/function/bitwise/rightLogShift.js","./function/logical/and":"../node_modules/mathjs/src/function/logical/and.js","./function/relational/compare":"../node_modules/mathjs/src/function/relational/compare.js","./function/relational/compareNatural":"../node_modules/mathjs/src/function/relational/compareNatural.js","./function/relational/compareText":"../node_modules/mathjs/src/function/relational/compareText.js","./function/relational/equal":"../node_modules/mathjs/src/function/relational/equal.js","./function/relational/equalText":"../node_modules/mathjs/src/function/relational/equalText.js","./function/relational/smaller":"../node_modules/mathjs/src/function/relational/smaller.js","./function/relational/smallerEq":"../node_modules/mathjs/src/function/relational/smallerEq.js","./function/relational/larger":"../node_modules/mathjs/src/function/relational/larger.js","./function/relational/largerEq":"../node_modules/mathjs/src/function/relational/largerEq.js","./function/relational/deepEqual":"../node_modules/mathjs/src/function/relational/deepEqual.js","./function/relational/unequal":"../node_modules/mathjs/src/function/relational/unequal.js","./function/matrix/partitionSelect":"../node_modules/mathjs/src/function/matrix/partitionSelect.js","./function/matrix/sort":"../node_modules/mathjs/src/function/matrix/sort.js","./function/statistics/max":"../node_modules/mathjs/src/function/statistics/max.js","./function/statistics/min":"../node_modules/mathjs/src/function/statistics/min.js","./type/matrix/ImmutableDenseMatrix":"../node_modules/mathjs/src/type/matrix/ImmutableDenseMatrix.js","./type/matrix/MatrixIndex":"../node_modules/mathjs/src/type/matrix/MatrixIndex.js","./type/matrix/FibonacciHeap":"../node_modules/mathjs/src/type/matrix/FibonacciHeap.js","./type/matrix/Spa":"../node_modules/mathjs/src/type/matrix/Spa.js","./type/unit/Unit":"../node_modules/mathjs/src/type/unit/Unit.js","./type/unit/function/unit":"../node_modules/mathjs/src/type/unit/function/unit.js","./type/matrix/function/sparse":"../node_modules/mathjs/src/type/matrix/function/sparse.js","./type/unit/function/createUnit":"../node_modules/mathjs/src/type/unit/function/createUnit.js","./function/trigonometry/acos":"../node_modules/mathjs/src/function/trigonometry/acos.js","./function/trigonometry/acosh":"../node_modules/mathjs/src/function/trigonometry/acosh.js","./function/trigonometry/acot":"../node_modules/mathjs/src/function/trigonometry/acot.js","./function/trigonometry/acoth":"../node_modules/mathjs/src/function/trigonometry/acoth.js","./function/trigonometry/acsc":"../node_modules/mathjs/src/function/trigonometry/acsc.js","./function/trigonometry/acsch":"../node_modules/mathjs/src/function/trigonometry/acsch.js","./function/trigonometry/asec":"../node_modules/mathjs/src/function/trigonometry/asec.js","./function/trigonometry/asech":"../node_modules/mathjs/src/function/trigonometry/asech.js","./function/trigonometry/asin":"../node_modules/mathjs/src/function/trigonometry/asin.js","./function/trigonometry/asinh":"../node_modules/mathjs/src/function/trigonometry/asinh.js","./function/trigonometry/atan":"../node_modules/mathjs/src/function/trigonometry/atan.js","./function/trigonometry/atan2":"../node_modules/mathjs/src/function/trigonometry/atan2.js","./function/trigonometry/atanh":"../node_modules/mathjs/src/function/trigonometry/atanh.js","./function/trigonometry/cos":"../node_modules/mathjs/src/function/trigonometry/cos.js","./function/trigonometry/cosh":"../node_modules/mathjs/src/function/trigonometry/cosh.js","./function/trigonometry/cot":"../node_modules/mathjs/src/function/trigonometry/cot.js","./function/trigonometry/coth":"../node_modules/mathjs/src/function/trigonometry/coth.js","./function/trigonometry/csc":"../node_modules/mathjs/src/function/trigonometry/csc.js","./function/trigonometry/csch":"../node_modules/mathjs/src/function/trigonometry/csch.js","./function/trigonometry/sec":"../node_modules/mathjs/src/function/trigonometry/sec.js","./function/trigonometry/sech":"../node_modules/mathjs/src/function/trigonometry/sech.js","./function/trigonometry/sin":"../node_modules/mathjs/src/function/trigonometry/sin.js","./function/trigonometry/sinh":"../node_modules/mathjs/src/function/trigonometry/sinh.js","./function/trigonometry/tan":"../node_modules/mathjs/src/function/trigonometry/tan.js","./function/trigonometry/tanh":"../node_modules/mathjs/src/function/trigonometry/tanh.js","./function/set/setCartesian":"../node_modules/mathjs/src/function/set/setCartesian.js","./function/set/setDifference":"../node_modules/mathjs/src/function/set/setDifference.js","./function/set/setDistinct":"../node_modules/mathjs/src/function/set/setDistinct.js","./function/set/setIntersect":"../node_modules/mathjs/src/function/set/setIntersect.js","./function/set/setIsSubset":"../node_modules/mathjs/src/function/set/setIsSubset.js","./function/set/setMultiplicity":"../node_modules/mathjs/src/function/set/setMultiplicity.js","./function/set/setPowerset":"../node_modules/mathjs/src/function/set/setPowerset.js","./function/set/setSize":"../node_modules/mathjs/src/function/set/setSize.js","./function/set/setSymDifference":"../node_modules/mathjs/src/function/set/setSymDifference.js","./function/set/setUnion":"../node_modules/mathjs/src/function/set/setUnion.js","./function/arithmetic/add":"../node_modules/mathjs/src/function/arithmetic/add.js","./function/arithmetic/hypot":"../node_modules/mathjs/src/function/arithmetic/hypot.js","./function/arithmetic/norm":"../node_modules/mathjs/src/function/arithmetic/norm.js","./function/matrix/dot":"../node_modules/mathjs/src/function/matrix/dot.js","./function/matrix/trace":"../node_modules/mathjs/src/function/matrix/trace.js","./type/matrix/function":"../node_modules/mathjs/src/type/matrix/function/index.js","./expression/node/Node":"../node_modules/mathjs/src/expression/node/Node.js","./expression/node/AccessorNode":"../node_modules/mathjs/src/expression/node/AccessorNode.js","./expression/node/ArrayNode":"../node_modules/mathjs/src/expression/node/ArrayNode.js","./expression/node/AssignmentNode":"../node_modules/mathjs/src/expression/node/AssignmentNode.js","./expression/node/BlockNode":"../node_modules/mathjs/src/expression/node/BlockNode.js","./expression/node/ConditionalNode":"../node_modules/mathjs/src/expression/node/ConditionalNode.js","./expression/node/ConstantNode":"../node_modules/mathjs/src/expression/node/ConstantNode.js","./expression/node/FunctionAssignmentNode":"../node_modules/mathjs/src/expression/node/FunctionAssignmentNode.js","./expression/node/IndexNode":"../node_modules/mathjs/src/expression/node/IndexNode.js","./expression/node/ObjectNode":"../node_modules/mathjs/src/expression/node/ObjectNode.js","./expression/node/OperatorNode":"../node_modules/mathjs/src/expression/node/OperatorNode.js","./expression/node/ParenthesisNode":"../node_modules/mathjs/src/expression/node/ParenthesisNode.js","./expression/node/RangeNode":"../node_modules/mathjs/src/expression/node/RangeNode.js","./expression/node/RelationalNode":"../node_modules/mathjs/src/expression/node/RelationalNode.js","./expression/node/SymbolNode":"../node_modules/mathjs/src/expression/node/SymbolNode.js","./expression/node/FunctionNode":"../node_modules/mathjs/src/expression/node/FunctionNode.js","./expression/parse":"../node_modules/mathjs/src/expression/parse.js","./expression/function/compile":"../node_modules/mathjs/src/expression/function/compile.js","./expression/function/evaluate":"../node_modules/mathjs/src/expression/function/evaluate.js","./expression/function/eval":"../node_modules/mathjs/src/expression/function/eval.js","./expression/Parser":"../node_modules/mathjs/src/expression/Parser.js","./expression/function/parser":"../node_modules/mathjs/src/expression/function/parser.js","./function/algebra/decomposition/lup":"../node_modules/mathjs/src/function/algebra/decomposition/lup.js","./function/algebra/decomposition/qr":"../node_modules/mathjs/src/function/algebra/decomposition/qr.js","./function/algebra/decomposition/slu":"../node_modules/mathjs/src/function/algebra/decomposition/slu.js","./function/algebra/solver/lusolve":"../node_modules/mathjs/src/function/algebra/solver/lusolve.js","./expression/Help":"../node_modules/mathjs/src/expression/Help.js","./type/chain/Chain":"../node_modules/mathjs/src/type/chain/Chain.js","./expression/function/help":"../node_modules/mathjs/src/expression/function/help.js","./type/chain/function/chain":"../node_modules/mathjs/src/type/chain/function/chain.js","./function/matrix/det":"../node_modules/mathjs/src/function/matrix/det.js","./function/matrix/inv":"../node_modules/mathjs/src/function/matrix/inv.js","./function/matrix/expm":"../node_modules/mathjs/src/function/matrix/expm.js","./function/matrix/sqrtm":"../node_modules/mathjs/src/function/matrix/sqrtm.js","./function/arithmetic/divide":"../node_modules/mathjs/src/function/arithmetic/divide.js","./function/geometry/distance":"../node_modules/mathjs/src/function/geometry/distance.js","./function/geometry/intersect":"../node_modules/mathjs/src/function/geometry/intersect.js","./function/statistics/sum":"../node_modules/mathjs/src/function/statistics/sum.js","./function/statistics/mean":"../node_modules/mathjs/src/function/statistics/mean.js","./function/statistics/median":"../node_modules/mathjs/src/function/statistics/median.js","./function/statistics/mad":"../node_modules/mathjs/src/function/statistics/mad.js","./function/statistics/variance":"../node_modules/mathjs/src/function/statistics/variance.js","./function/statistics/quantileSeq":"../node_modules/mathjs/src/function/statistics/quantileSeq.js","./function/statistics/std":"../node_modules/mathjs/src/function/statistics/std.js","./function/probability/combinations":"../node_modules/mathjs/src/function/probability/combinations.js","./function/probability/gamma":"../node_modules/mathjs/src/function/probability/gamma.js","./function/probability/factorial":"../node_modules/mathjs/src/function/probability/factorial.js","./function/probability/kldivergence":"../node_modules/mathjs/src/function/probability/kldivergence.js","./function/probability/multinomial":"../node_modules/mathjs/src/function/probability/multinomial.js","./function/probability/permutations":"../node_modules/mathjs/src/function/probability/permutations.js","./function/probability/pickRandom":"../node_modules/mathjs/src/function/probability/pickRandom.js","./function/probability/random":"../node_modules/mathjs/src/function/probability/random.js","./function/probability/randomInt":"../node_modules/mathjs/src/function/probability/randomInt.js","./function/combinatorics/stirlingS2":"../node_modules/mathjs/src/function/combinatorics/stirlingS2.js","./function/combinatorics/bellNumbers":"../node_modules/mathjs/src/function/combinatorics/bellNumbers.js","./function/combinatorics/catalan":"../node_modules/mathjs/src/function/combinatorics/catalan.js","./function/combinatorics/composition":"../node_modules/mathjs/src/function/combinatorics/composition.js","./function/algebra/simplify":"../node_modules/mathjs/src/function/algebra/simplify.js","./function/algebra/derivative":"../node_modules/mathjs/src/function/algebra/derivative.js","./function/algebra/rationalize":"../node_modules/mathjs/src/function/algebra/rationalize.js","./json/reviver":"../node_modules/mathjs/src/json/reviver.js","./constants":"../node_modules/mathjs/src/constants.js","./type/unit/physicalConstants":"../node_modules/mathjs/src/type/unit/physicalConstants.js","./expression/transform/apply.transform":"../node_modules/mathjs/src/expression/transform/apply.transform.js","./expression/transform/column.transform":"../node_modules/mathjs/src/expression/transform/column.transform.js","./expression/transform/filter.transform":"../node_modules/mathjs/src/expression/transform/filter.transform.js","./expression/transform/forEach.transform":"../node_modules/mathjs/src/expression/transform/forEach.transform.js","./expression/transform/index.transform":"../node_modules/mathjs/src/expression/transform/index.transform.js","./expression/transform/map.transform":"../node_modules/mathjs/src/expression/transform/map.transform.js","./expression/transform/max.transform":"../node_modules/mathjs/src/expression/transform/max.transform.js","./expression/transform/mean.transform":"../node_modules/mathjs/src/expression/transform/mean.transform.js","./expression/transform/min.transform":"../node_modules/mathjs/src/expression/transform/min.transform.js","./expression/transform/range.transform":"../node_modules/mathjs/src/expression/transform/range.transform.js","./expression/transform/row.transform":"../node_modules/mathjs/src/expression/transform/row.transform.js","./expression/transform/subset.transform":"../node_modules/mathjs/src/expression/transform/subset.transform.js","./expression/transform/concat.transform":"../node_modules/mathjs/src/expression/transform/concat.transform.js","./expression/transform/std.transform":"../node_modules/mathjs/src/expression/transform/std.transform.js","./expression/transform/sum.transform":"../node_modules/mathjs/src/expression/transform/sum.transform.js","./expression/transform/variance.transform":"../node_modules/mathjs/src/expression/transform/variance.transform.js"}],"../node_modules/mathjs/src/entry/pureFunctionsAny.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mod = exports.gcd = exports.cbrt = exports.matrix = exports.SparseMatrix = exports.isNegative = exports.version = exports.random = exports.sin = exports.csc = exports.cos = exports.asinh = exports.acsch = exports.acosh = exports.print = exports.mode = exports.getMatrixDataType = exports.conj = exports.sqrt = exports.log2 = exports.exp = exports.addScalar = exports.unaryMinus = exports.fraction = exports.string = exports.typeOf = exports.hasNumericValue = exports.clone = exports.LOG2E = exports.randomInt = exports.pickRandom = exports.combinations = exports.tanh = exports.sinh = exports.sech = exports.csch = exports.coth = exports.cosh = exports.atanh = exports.atan = exports.asin = exports.asec = exports.acsc = exports.acot = exports.acos = exports.isPrime = exports.format = exports.erf = exports.map = exports.forEach = exports.filter = exports.not = exports.im = exports.arg = exports.bitNot = exports.square = exports.sign = exports.multiplyScalar = exports.log10 = exports.expm1 = exports.cube = exports.apply = exports.unaryPlus = exports.splitUnit = exports.complex = exports.boolean = exports.number = exports.equalScalar = exports.isNaN = exports.isPositive = exports.isNumeric = exports.isInteger = exports.typed = exports._Infinity = exports.DenseMatrix = exports.SQRT2 = exports.phi = exports.LN2 = exports.Fraction = exports.weakMixingAngle = exports.sackurTetrode = exports.fineStructure = exports.efimovFactor = exports.tau = exports.SQRT1_2 = exports.pi = exports._NaN = exports.LOG10E = exports.LN10 = exports.i = exports.e = exports.Matrix = exports.BigNumber = exports._true = exports._null = exports._false = exports.eye = exports.Range = exports.Complex = exports.ResultSet = void 0;
exports.dotDivide = exports.row = exports.xor = exports.catalan = exports.stirlingS2 = exports.distance = exports.det = exports.slu = exports.lup = exports.hypot = exports.setMultiplicity = exports.setDifference = exports.deepEqual = exports.lsolve = exports.nthRoots = exports.divideScalar = exports.range = exports.fix = exports.index = exports.setPowerset = exports.setIsSubset = exports.setDistinct = exports.setCartesian = exports.Index = exports.equal = exports.ctranspose = exports.cross = exports.subtract = exports.ceil = exports.permutations = exports.factorial = exports.sum = exports.dot = exports.cot = exports.sort = exports.smallerEq = exports.and = exports.numeric = exports.transpose = exports.kron = exports.bitOr = exports.lcm = exports.bignumber = exports.gamma = exports.quantileSeq = exports.norm = exports.setSize = exports.tan = exports.asech = exports.Spa = exports.min = exports.partitionSelect = exports.largerEq = exports.equalText = exports.compareNatural = exports.rightArithShift = exports.dotPow = exports.pow = exports.prod = exports.squeeze = exports.resize = exports.flatten = exports.re = exports.dotMultiply = exports.multiply = exports.floor = exports.abs = exports.isZero = exports.composition = exports.trace = exports.add = exports.sec = exports.atan2 = exports.acoth = exports.sparse = exports.FibonacciHeap = exports.ImmutableDenseMatrix = exports.max = exports.unequal = exports.larger = exports.smaller = exports.compareText = exports.compare = exports.rightLogShift = exports.leftShift = exports.round = exports.to = exports.zeros = exports.subset = exports.size = exports.reshape = exports.ones = exports.identity = exports.diag = exports.concat = exports.or = exports.bitXor = exports.bitAnd = exports.xgcd = exports.nthRoot = void 0;
exports.magneticFluxQuantum = exports.mad = exports.rydberg = exports.coulomb = exports.kldivergence = exports.setUnion = exports.planckConstant = exports.gasConstant = exports.mean = exports.log1p = exports.thomsonCrossSection = exports.planckTime = exports.molarVolume = exports.inverseConductanceQuantum = exports.elementaryCharge = exports.bohrRadius = exports.multinomial = exports.std = exports.variance = exports.median = exports.divide = exports.unit = exports.log = exports.wienDisplacement = exports.speedOfLight = exports.quantumOfCirculation = exports.planckMass = exports.nuclearMagneton = exports.molarMassC12 = exports.loschmidt = exports.gravity = exports.fermiCoupling = exports.electricConstant = exports.classicalElectronRadius = exports.avogadro = exports.expm = exports.lusolve = exports.setIntersect = exports.usolve = exports.column = exports.vacuumImpedance = exports.stefanBoltzmann = exports.secondRadiation = exports.reducedPlanckConstant = exports.protonMass = exports.planckTemperature = exports.planckLength = exports.planckCharge = exports.neutronMass = exports.molarPlanckConstant = exports.molarMass = exports.magneticConstant = exports.klitzing = exports.hartreeEnergy = exports.gravitationConstant = exports.firstRadiation = exports.faraday = exports.electronMass = exports.deuteronMass = exports.conductanceQuantum = exports.boltzmann = exports.bohrMagneton = exports.atomicMass = exports.bellNumbers = exports.intersect = exports.sqrtm = exports.inv = exports.qr = exports.setSymDifference = exports.createUnit = exports.Unit = void 0;

var _configReadonly = require("./configReadonly");

var _factoriesAny = require("../factoriesAny");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ResultSet =
/* #__PURE__ */
(0, _factoriesAny.createResultSet)({});
exports.ResultSet = ResultSet;
const Complex =
/* #__PURE__ */
(0, _factoriesAny.createComplexClass)({});
exports.Complex = Complex;
const Range =
/* #__PURE__ */
(0, _factoriesAny.createRangeClass)({});
exports.Range = Range;
const eye =
/* #__PURE__ */
(0, _factoriesAny.createEye)({});
exports.eye = eye;

const _false =
/* #__PURE__ */
(0, _factoriesAny.createFalse)({});

exports._false = _false;

const _null =
/* #__PURE__ */
(0, _factoriesAny.createNull)({});

exports._null = _null;

const _true =
/* #__PURE__ */
(0, _factoriesAny.createTrue)({});

exports._true = _true;
const BigNumber =
/* #__PURE__ */
(0, _factoriesAny.createBigNumberClass)({
  config: _configReadonly.config
});
exports.BigNumber = BigNumber;
const Matrix =
/* #__PURE__ */
(0, _factoriesAny.createMatrixClass)({});
exports.Matrix = Matrix;
const e =
/* #__PURE__ */
(0, _factoriesAny.createE)({
  BigNumber,
  config: _configReadonly.config
});
exports.e = e;
const i =
/* #__PURE__ */
(0, _factoriesAny.createI)({
  Complex
});
exports.i = i;
const LN10 =
/* #__PURE__ */
(0, _factoriesAny.createLN10)({
  BigNumber,
  config: _configReadonly.config
});
exports.LN10 = LN10;
const LOG10E =
/* #__PURE__ */
(0, _factoriesAny.createLOG10E)({
  BigNumber,
  config: _configReadonly.config
});
exports.LOG10E = LOG10E;

const _NaN =
/* #__PURE__ */
(0, _factoriesAny.createNaN)({
  BigNumber,
  config: _configReadonly.config
});

exports._NaN = _NaN;
const pi =
/* #__PURE__ */
(0, _factoriesAny.createPi)({
  BigNumber,
  config: _configReadonly.config
});
exports.pi = pi;
const SQRT1_2 =
/* #__PURE__ */
(0, _factoriesAny.createSQRT1_2)({
  BigNumber,
  config: _configReadonly.config
});
exports.SQRT1_2 = SQRT1_2;
const tau =
/* #__PURE__ */
(0, _factoriesAny.createTau)({
  BigNumber,
  config: _configReadonly.config
});
exports.tau = tau;
const efimovFactor =
/* #__PURE__ */
(0, _factoriesAny.createEfimovFactor)({
  BigNumber,
  config: _configReadonly.config
});
exports.efimovFactor = efimovFactor;
const fineStructure =
/* #__PURE__ */
(0, _factoriesAny.createFineStructure)({
  BigNumber,
  config: _configReadonly.config
});
exports.fineStructure = fineStructure;
const sackurTetrode =
/* #__PURE__ */
(0, _factoriesAny.createSackurTetrode)({
  BigNumber,
  config: _configReadonly.config
});
exports.sackurTetrode = sackurTetrode;
const weakMixingAngle =
/* #__PURE__ */
(0, _factoriesAny.createWeakMixingAngle)({
  BigNumber,
  config: _configReadonly.config
});
exports.weakMixingAngle = weakMixingAngle;
const Fraction =
/* #__PURE__ */
(0, _factoriesAny.createFractionClass)({});
exports.Fraction = Fraction;
const LN2 =
/* #__PURE__ */
(0, _factoriesAny.createLN2)({
  BigNumber,
  config: _configReadonly.config
});
exports.LN2 = LN2;
const phi =
/* #__PURE__ */
(0, _factoriesAny.createPhi)({
  BigNumber,
  config: _configReadonly.config
});
exports.phi = phi;
const SQRT2 =
/* #__PURE__ */
(0, _factoriesAny.createSQRT2)({
  BigNumber,
  config: _configReadonly.config
});
exports.SQRT2 = SQRT2;
const DenseMatrix =
/* #__PURE__ */
(0, _factoriesAny.createDenseMatrixClass)({
  Matrix
});
exports.DenseMatrix = DenseMatrix;

const _Infinity =
/* #__PURE__ */
(0, _factoriesAny.createInfinity)({
  BigNumber,
  config: _configReadonly.config
});

exports._Infinity = _Infinity;
const typed =
/* #__PURE__ */
(0, _factoriesAny.createTyped)({
  BigNumber,
  Complex,
  DenseMatrix,
  Fraction
});
exports.typed = typed;
const isInteger =
/* #__PURE__ */
(0, _factoriesAny.createIsInteger)({
  typed
});
exports.isInteger = isInteger;
const isNumeric =
/* #__PURE__ */
(0, _factoriesAny.createIsNumeric)({
  typed
});
exports.isNumeric = isNumeric;
const isPositive =
/* #__PURE__ */
(0, _factoriesAny.createIsPositive)({
  typed
});
exports.isPositive = isPositive;
const isNaN =
/* #__PURE__ */
(0, _factoriesAny.createIsNaN)({
  typed
});
exports.isNaN = isNaN;
const equalScalar =
/* #__PURE__ */
(0, _factoriesAny.createEqualScalar)({
  config: _configReadonly.config,
  typed
});
exports.equalScalar = equalScalar;
const number =
/* #__PURE__ */
(0, _factoriesAny.createNumber)({
  typed
});
exports.number = number;
const boolean =
/* #__PURE__ */
(0, _factoriesAny.createBoolean)({
  typed
});
exports.boolean = boolean;
const complex =
/* #__PURE__ */
(0, _factoriesAny.createComplex)({
  Complex,
  typed
});
exports.complex = complex;
const splitUnit =
/* #__PURE__ */
(0, _factoriesAny.createSplitUnit)({
  typed
});
exports.splitUnit = splitUnit;
const unaryPlus =
/* #__PURE__ */
(0, _factoriesAny.createUnaryPlus)({
  BigNumber,
  config: _configReadonly.config,
  typed
});
exports.unaryPlus = unaryPlus;
const apply =
/* #__PURE__ */
(0, _factoriesAny.createApply)({
  isInteger,
  typed
});
exports.apply = apply;
const cube =
/* #__PURE__ */
(0, _factoriesAny.createCube)({
  typed
});
exports.cube = cube;
const expm1 =
/* #__PURE__ */
(0, _factoriesAny.createExpm1)({
  Complex,
  typed
});
exports.expm1 = expm1;
const log10 =
/* #__PURE__ */
(0, _factoriesAny.createLog10)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.log10 = log10;
const multiplyScalar =
/* #__PURE__ */
(0, _factoriesAny.createMultiplyScalar)({
  typed
});
exports.multiplyScalar = multiplyScalar;
const sign =
/* #__PURE__ */
(0, _factoriesAny.createSign)({
  BigNumber,
  Fraction,
  typed
});
exports.sign = sign;
const square =
/* #__PURE__ */
(0, _factoriesAny.createSquare)({
  typed
});
exports.square = square;
const bitNot =
/* #__PURE__ */
(0, _factoriesAny.createBitNot)({
  typed
});
exports.bitNot = bitNot;
const arg =
/* #__PURE__ */
(0, _factoriesAny.createArg)({
  typed
});
exports.arg = arg;
const im =
/* #__PURE__ */
(0, _factoriesAny.createIm)({
  typed
});
exports.im = im;
const not =
/* #__PURE__ */
(0, _factoriesAny.createNot)({
  typed
});
exports.not = not;
const filter =
/* #__PURE__ */
(0, _factoriesAny.createFilter)({
  typed
});
exports.filter = filter;
const forEach =
/* #__PURE__ */
(0, _factoriesAny.createForEach)({
  typed
});
exports.forEach = forEach;
const map =
/* #__PURE__ */
(0, _factoriesAny.createMap)({
  typed
});
exports.map = map;
const erf =
/* #__PURE__ */
(0, _factoriesAny.createErf)({
  typed
});
exports.erf = erf;
const format =
/* #__PURE__ */
(0, _factoriesAny.createFormat)({
  typed
});
exports.format = format;
const isPrime =
/* #__PURE__ */
(0, _factoriesAny.createIsPrime)({
  typed
});
exports.isPrime = isPrime;
const acos =
/* #__PURE__ */
(0, _factoriesAny.createAcos)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.acos = acos;
const acot =
/* #__PURE__ */
(0, _factoriesAny.createAcot)({
  BigNumber,
  typed
});
exports.acot = acot;
const acsc =
/* #__PURE__ */
(0, _factoriesAny.createAcsc)({
  BigNumber,
  Complex,
  config: _configReadonly.config,
  typed
});
exports.acsc = acsc;
const asec =
/* #__PURE__ */
(0, _factoriesAny.createAsec)({
  BigNumber,
  Complex,
  config: _configReadonly.config,
  typed
});
exports.asec = asec;
const asin =
/* #__PURE__ */
(0, _factoriesAny.createAsin)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.asin = asin;
const atan =
/* #__PURE__ */
(0, _factoriesAny.createAtan)({
  typed
});
exports.atan = atan;
const atanh =
/* #__PURE__ */
(0, _factoriesAny.createAtanh)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.atanh = atanh;
const cosh =
/* #__PURE__ */
(0, _factoriesAny.createCosh)({
  typed
});
exports.cosh = cosh;
const coth =
/* #__PURE__ */
(0, _factoriesAny.createCoth)({
  BigNumber,
  typed
});
exports.coth = coth;
const csch =
/* #__PURE__ */
(0, _factoriesAny.createCsch)({
  BigNumber,
  typed
});
exports.csch = csch;
const sech =
/* #__PURE__ */
(0, _factoriesAny.createSech)({
  BigNumber,
  typed
});
exports.sech = sech;
const sinh =
/* #__PURE__ */
(0, _factoriesAny.createSinh)({
  typed
});
exports.sinh = sinh;
const tanh =
/* #__PURE__ */
(0, _factoriesAny.createTanh)({
  typed
});
exports.tanh = tanh;
const combinations =
/* #__PURE__ */
(0, _factoriesAny.createCombinations)({
  typed
});
exports.combinations = combinations;
const pickRandom =
/* #__PURE__ */
(0, _factoriesAny.createPickRandom)({
  config: _configReadonly.config,
  typed
});
exports.pickRandom = pickRandom;
const randomInt =
/* #__PURE__ */
(0, _factoriesAny.createRandomInt)({
  config: _configReadonly.config,
  typed
});
exports.randomInt = randomInt;
const LOG2E =
/* #__PURE__ */
(0, _factoriesAny.createLOG2E)({
  BigNumber,
  config: _configReadonly.config
});
exports.LOG2E = LOG2E;
const clone =
/* #__PURE__ */
(0, _factoriesAny.createClone)({
  typed
});
exports.clone = clone;
const hasNumericValue =
/* #__PURE__ */
(0, _factoriesAny.createHasNumericValue)({
  isNumeric,
  typed
});
exports.hasNumericValue = hasNumericValue;
const typeOf =
/* #__PURE__ */
(0, _factoriesAny.createTypeOf)({
  typed
});
exports.typeOf = typeOf;
const string =
/* #__PURE__ */
(0, _factoriesAny.createString)({
  typed
});
exports.string = string;
const fraction =
/* #__PURE__ */
(0, _factoriesAny.createFraction)({
  Fraction,
  typed
});
exports.fraction = fraction;
const unaryMinus =
/* #__PURE__ */
(0, _factoriesAny.createUnaryMinus)({
  typed
});
exports.unaryMinus = unaryMinus;
const addScalar =
/* #__PURE__ */
(0, _factoriesAny.createAddScalar)({
  typed
});
exports.addScalar = addScalar;
const exp =
/* #__PURE__ */
(0, _factoriesAny.createExp)({
  typed
});
exports.exp = exp;
const log2 =
/* #__PURE__ */
(0, _factoriesAny.createLog2)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.log2 = log2;
const sqrt =
/* #__PURE__ */
(0, _factoriesAny.createSqrt)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.sqrt = sqrt;
const conj =
/* #__PURE__ */
(0, _factoriesAny.createConj)({
  typed
});
exports.conj = conj;
const getMatrixDataType =
/* #__PURE__ */
(0, _factoriesAny.createGetMatrixDataType)({
  typed
});
exports.getMatrixDataType = getMatrixDataType;
const mode =
/* #__PURE__ */
(0, _factoriesAny.createMode)({
  isNaN,
  isNumeric,
  typed
});
exports.mode = mode;
const print =
/* #__PURE__ */
(0, _factoriesAny.createPrint)({
  typed
});
exports.print = print;
const acosh =
/* #__PURE__ */
(0, _factoriesAny.createAcosh)({
  Complex,
  config: _configReadonly.config,
  typed
});
exports.acosh = acosh;
const acsch =
/* #__PURE__ */
(0, _factoriesAny.createAcsch)({
  BigNumber,
  typed
});
exports.acsch = acsch;
const asinh =
/* #__PURE__ */
(0, _factoriesAny.createAsinh)({
  typed
});
exports.asinh = asinh;
const cos =
/* #__PURE__ */
(0, _factoriesAny.createCos)({
  typed
});
exports.cos = cos;
const csc =
/* #__PURE__ */
(0, _factoriesAny.createCsc)({
  BigNumber,
  typed
});
exports.csc = csc;
const sin =
/* #__PURE__ */
(0, _factoriesAny.createSin)({
  typed
});
exports.sin = sin;
const random =
/* #__PURE__ */
(0, _factoriesAny.createRandom)({
  config: _configReadonly.config,
  typed
});
exports.random = random;
const version =
/* #__PURE__ */
(0, _factoriesAny.createVersion)({});
exports.version = version;
const isNegative =
/* #__PURE__ */
(0, _factoriesAny.createIsNegative)({
  typed
});
exports.isNegative = isNegative;
const SparseMatrix =
/* #__PURE__ */
(0, _factoriesAny.createSparseMatrixClass)({
  Matrix,
  equalScalar,
  typed
});
exports.SparseMatrix = SparseMatrix;
const matrix =
/* #__PURE__ */
(0, _factoriesAny.createMatrix)({
  DenseMatrix,
  Matrix,
  SparseMatrix,
  typed
});
exports.matrix = matrix;
const cbrt =
/* #__PURE__ */
(0, _factoriesAny.createCbrt)({
  BigNumber,
  Complex,
  Fraction,
  config: _configReadonly.config,
  isNegative,
  matrix,
  typed,
  unaryMinus
});
exports.cbrt = cbrt;
const gcd =
/* #__PURE__ */
(0, _factoriesAny.createGcd)({
  BigNumber,
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
exports.gcd = gcd;
const mod =
/* #__PURE__ */
(0, _factoriesAny.createMod)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
exports.mod = mod;
const nthRoot =
/* #__PURE__ */
(0, _factoriesAny.createNthRoot)({
  BigNumber,
  equalScalar,
  matrix,
  typed
});
exports.nthRoot = nthRoot;
const xgcd =
/* #__PURE__ */
(0, _factoriesAny.createXgcd)({
  BigNumber,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.xgcd = xgcd;
const bitAnd =
/* #__PURE__ */
(0, _factoriesAny.createBitAnd)({
  equalScalar,
  matrix,
  typed
});
exports.bitAnd = bitAnd;
const bitXor =
/* #__PURE__ */
(0, _factoriesAny.createBitXor)({
  DenseMatrix,
  matrix,
  typed
});
exports.bitXor = bitXor;
const or =
/* #__PURE__ */
(0, _factoriesAny.createOr)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
exports.or = or;
const concat =
/* #__PURE__ */
(0, _factoriesAny.createConcat)({
  isInteger,
  matrix,
  typed
});
exports.concat = concat;
const diag =
/* #__PURE__ */
(0, _factoriesAny.createDiag)({
  DenseMatrix,
  SparseMatrix,
  matrix,
  typed
});
exports.diag = diag;
const identity =
/* #__PURE__ */
(0, _factoriesAny.createIdentity)({
  BigNumber,
  DenseMatrix,
  SparseMatrix,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.identity = identity;
const ones =
/* #__PURE__ */
(0, _factoriesAny.createOnes)({
  BigNumber,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.ones = ones;
const reshape =
/* #__PURE__ */
(0, _factoriesAny.createReshape)({
  isInteger,
  matrix,
  typed
});
exports.reshape = reshape;
const size =
/* #__PURE__ */
(0, _factoriesAny.createSize)({
  matrix,
  config: _configReadonly.config,
  typed
});
exports.size = size;
const subset =
/* #__PURE__ */
(0, _factoriesAny.createSubset)({
  matrix,
  typed
});
exports.subset = subset;
const zeros =
/* #__PURE__ */
(0, _factoriesAny.createZeros)({
  BigNumber,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.zeros = zeros;
const to =
/* #__PURE__ */
(0, _factoriesAny.createTo)({
  matrix,
  typed
});
exports.to = to;
const round =
/* #__PURE__ */
(0, _factoriesAny.createRound)({
  BigNumber,
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
exports.round = round;
const leftShift =
/* #__PURE__ */
(0, _factoriesAny.createLeftShift)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
exports.leftShift = leftShift;
const rightLogShift =
/* #__PURE__ */
(0, _factoriesAny.createRightLogShift)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
exports.rightLogShift = rightLogShift;
const compare =
/* #__PURE__ */
(0, _factoriesAny.createCompare)({
  BigNumber,
  DenseMatrix,
  Fraction,
  config: _configReadonly.config,
  equalScalar,
  matrix,
  typed
});
exports.compare = compare;
const compareText =
/* #__PURE__ */
(0, _factoriesAny.createCompareText)({
  matrix,
  typed
});
exports.compareText = compareText;
const smaller =
/* #__PURE__ */
(0, _factoriesAny.createSmaller)({
  DenseMatrix,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.smaller = smaller;
const larger =
/* #__PURE__ */
(0, _factoriesAny.createLarger)({
  DenseMatrix,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.larger = larger;
const unequal =
/* #__PURE__ */
(0, _factoriesAny.createUnequal)({
  DenseMatrix,
  config: _configReadonly.config,
  equalScalar,
  matrix,
  typed
});
exports.unequal = unequal;
const max =
/* #__PURE__ */
(0, _factoriesAny.createMax)({
  larger,
  typed
});
exports.max = max;
const ImmutableDenseMatrix =
/* #__PURE__ */
(0, _factoriesAny.createImmutableDenseMatrixClass)({
  DenseMatrix,
  smaller
});
exports.ImmutableDenseMatrix = ImmutableDenseMatrix;
const FibonacciHeap =
/* #__PURE__ */
(0, _factoriesAny.createFibonacciHeapClass)({
  larger,
  smaller
});
exports.FibonacciHeap = FibonacciHeap;
const sparse =
/* #__PURE__ */
(0, _factoriesAny.createSparse)({
  SparseMatrix,
  typed
});
exports.sparse = sparse;
const acoth =
/* #__PURE__ */
(0, _factoriesAny.createAcoth)({
  BigNumber,
  Complex,
  config: _configReadonly.config,
  typed
});
exports.acoth = acoth;
const atan2 =
/* #__PURE__ */
(0, _factoriesAny.createAtan2)({
  BigNumber,
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
exports.atan2 = atan2;
const sec =
/* #__PURE__ */
(0, _factoriesAny.createSec)({
  BigNumber,
  typed
});
exports.sec = sec;
const add =
/* #__PURE__ */
(0, _factoriesAny.createAdd)({
  DenseMatrix,
  SparseMatrix,
  addScalar,
  equalScalar,
  matrix,
  typed
});
exports.add = add;
const trace =
/* #__PURE__ */
(0, _factoriesAny.createTrace)({
  add,
  matrix,
  typed
});
exports.trace = trace;
const composition =
/* #__PURE__ */
(0, _factoriesAny.createComposition)({
  addScalar,
  combinations,
  isInteger,
  isNegative,
  isPositive,
  larger,
  typed
});
exports.composition = composition;
const isZero =
/* #__PURE__ */
(0, _factoriesAny.createIsZero)({
  typed
});
exports.isZero = isZero;
const abs =
/* #__PURE__ */
(0, _factoriesAny.createAbs)({
  typed
});
exports.abs = abs;
const floor =
/* #__PURE__ */
(0, _factoriesAny.createFloor)({
  config: _configReadonly.config,
  round,
  typed
});
exports.floor = floor;
const multiply =
/* #__PURE__ */
(0, _factoriesAny.createMultiply)({
  addScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  typed
});
exports.multiply = multiply;
const dotMultiply =
/* #__PURE__ */
(0, _factoriesAny.createDotMultiply)({
  equalScalar,
  matrix,
  multiplyScalar,
  typed
});
exports.dotMultiply = dotMultiply;
const re =
/* #__PURE__ */
(0, _factoriesAny.createRe)({
  typed
});
exports.re = re;
const flatten =
/* #__PURE__ */
(0, _factoriesAny.createFlatten)({
  matrix,
  typed
});
exports.flatten = flatten;
const resize =
/* #__PURE__ */
(0, _factoriesAny.createResize)({
  config: _configReadonly.config,
  matrix
});
exports.resize = resize;
const squeeze =
/* #__PURE__ */
(0, _factoriesAny.createSqueeze)({
  matrix,
  typed
});
exports.squeeze = squeeze;
const prod =
/* #__PURE__ */
(0, _factoriesAny.createProd)({
  multiply,
  typed
});
exports.prod = prod;
const pow =
/* #__PURE__ */
(0, _factoriesAny.createPow)({
  Complex,
  config: _configReadonly.config,
  fraction,
  identity,
  matrix,
  multiply,
  number,
  typed
});
exports.pow = pow;
const dotPow =
/* #__PURE__ */
(0, _factoriesAny.createDotPow)({
  DenseMatrix,
  equalScalar,
  matrix,
  pow,
  typed
});
exports.dotPow = dotPow;
const rightArithShift =
/* #__PURE__ */
(0, _factoriesAny.createRightArithShift)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed,
  zeros
});
exports.rightArithShift = rightArithShift;
const compareNatural =
/* #__PURE__ */
(0, _factoriesAny.createCompareNatural)({
  compare,
  typed
});
exports.compareNatural = compareNatural;
const equalText =
/* #__PURE__ */
(0, _factoriesAny.createEqualText)({
  compareText,
  isZero,
  typed
});
exports.equalText = equalText;
const largerEq =
/* #__PURE__ */
(0, _factoriesAny.createLargerEq)({
  DenseMatrix,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.largerEq = largerEq;
const partitionSelect =
/* #__PURE__ */
(0, _factoriesAny.createPartitionSelect)({
  compare,
  isNaN,
  isNumeric,
  typed
});
exports.partitionSelect = partitionSelect;
const min =
/* #__PURE__ */
(0, _factoriesAny.createMin)({
  smaller,
  typed
});
exports.min = min;
const Spa =
/* #__PURE__ */
(0, _factoriesAny.createSpaClass)({
  FibonacciHeap,
  addScalar,
  equalScalar
});
exports.Spa = Spa;
const asech =
/* #__PURE__ */
(0, _factoriesAny.createAsech)({
  BigNumber,
  Complex,
  config: _configReadonly.config,
  typed
});
exports.asech = asech;
const tan =
/* #__PURE__ */
(0, _factoriesAny.createTan)({
  typed
});
exports.tan = tan;
const setSize =
/* #__PURE__ */
(0, _factoriesAny.createSetSize)({
  compareNatural,
  typed
});
exports.setSize = setSize;
const norm =
/* #__PURE__ */
(0, _factoriesAny.createNorm)({
  abs,
  add,
  conj,
  equalScalar,
  larger,
  matrix,
  multiply,
  pow,
  smaller,
  sqrt,
  typed
});
exports.norm = norm;
const quantileSeq =
/* #__PURE__ */
(0, _factoriesAny.createQuantileSeq)({
  add,
  compare,
  multiply,
  partitionSelect,
  typed
});
exports.quantileSeq = quantileSeq;
const gamma =
/* #__PURE__ */
(0, _factoriesAny.createGamma)({
  BigNumber,
  Complex,
  config: _configReadonly.config,
  multiplyScalar,
  pow,
  typed
});
exports.gamma = gamma;
const bignumber =
/* #__PURE__ */
(0, _factoriesAny.createBignumber)({
  BigNumber,
  typed
});
exports.bignumber = bignumber;
const lcm =
/* #__PURE__ */
(0, _factoriesAny.createLcm)({
  equalScalar,
  matrix,
  typed
});
exports.lcm = lcm;
const bitOr =
/* #__PURE__ */
(0, _factoriesAny.createBitOr)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
exports.bitOr = bitOr;
const kron =
/* #__PURE__ */
(0, _factoriesAny.createKron)({
  matrix,
  multiplyScalar,
  typed
});
exports.kron = kron;
const transpose =
/* #__PURE__ */
(0, _factoriesAny.createTranspose)({
  matrix,
  typed
});
exports.transpose = transpose;
const numeric =
/* #__PURE__ */
(0, _factoriesAny.createNumeric)({
  bignumber,
  fraction,
  number
});
exports.numeric = numeric;
const and =
/* #__PURE__ */
(0, _factoriesAny.createAnd)({
  equalScalar,
  matrix,
  not,
  typed,
  zeros
});
exports.and = and;
const smallerEq =
/* #__PURE__ */
(0, _factoriesAny.createSmallerEq)({
  DenseMatrix,
  config: _configReadonly.config,
  matrix,
  typed
});
exports.smallerEq = smallerEq;
const sort =
/* #__PURE__ */
(0, _factoriesAny.createSort)({
  compare,
  compareNatural,
  matrix,
  typed
});
exports.sort = sort;
const cot =
/* #__PURE__ */
(0, _factoriesAny.createCot)({
  BigNumber,
  typed
});
exports.cot = cot;
const dot =
/* #__PURE__ */
(0, _factoriesAny.createDot)({
  add,
  multiply,
  typed
});
exports.dot = dot;
const sum =
/* #__PURE__ */
(0, _factoriesAny.createSum)({
  bignumber,
  fraction,
  add,
  config: _configReadonly.config,
  typed
});
exports.sum = sum;
const factorial =
/* #__PURE__ */
(0, _factoriesAny.createFactorial)({
  gamma,
  typed
});
exports.factorial = factorial;
const permutations =
/* #__PURE__ */
(0, _factoriesAny.createPermutations)({
  factorial,
  typed
});
exports.permutations = permutations;
const ceil =
/* #__PURE__ */
(0, _factoriesAny.createCeil)({
  config: _configReadonly.config,
  round,
  typed
});
exports.ceil = ceil;
const subtract =
/* #__PURE__ */
(0, _factoriesAny.createSubtract)({
  DenseMatrix,
  addScalar,
  equalScalar,
  matrix,
  typed,
  unaryMinus
});
exports.subtract = subtract;
const cross =
/* #__PURE__ */
(0, _factoriesAny.createCross)({
  matrix,
  multiply,
  subtract,
  typed
});
exports.cross = cross;
const ctranspose =
/* #__PURE__ */
(0, _factoriesAny.createCtranspose)({
  conj,
  transpose,
  typed
});
exports.ctranspose = ctranspose;
const equal =
/* #__PURE__ */
(0, _factoriesAny.createEqual)({
  DenseMatrix,
  equalScalar,
  matrix,
  typed
});
exports.equal = equal;
const Index =
/* #__PURE__ */
(0, _factoriesAny.createIndexClass)({
  ImmutableDenseMatrix
});
exports.Index = Index;
const setCartesian =
/* #__PURE__ */
(0, _factoriesAny.createSetCartesian)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setCartesian = setCartesian;
const setDistinct =
/* #__PURE__ */
(0, _factoriesAny.createSetDistinct)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setDistinct = setDistinct;
const setIsSubset =
/* #__PURE__ */
(0, _factoriesAny.createSetIsSubset)({
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setIsSubset = setIsSubset;
const setPowerset =
/* #__PURE__ */
(0, _factoriesAny.createSetPowerset)({
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setPowerset = setPowerset;
const index =
/* #__PURE__ */
(0, _factoriesAny.createIndex)({
  Index,
  typed
});
exports.index = index;
const fix =
/* #__PURE__ */
(0, _factoriesAny.createFix)({
  Complex,
  ceil,
  floor,
  typed
});
exports.fix = fix;
const range =
/* #__PURE__ */
(0, _factoriesAny.createRange)({
  bignumber,
  matrix,
  config: _configReadonly.config,
  larger,
  largerEq,
  smaller,
  smallerEq,
  typed
});
exports.range = range;
const divideScalar =
/* #__PURE__ */
(0, _factoriesAny.createDivideScalar)({
  numeric,
  typed
});
exports.divideScalar = divideScalar;
const nthRoots =
/* #__PURE__ */
(0, _factoriesAny.createNthRoots)({
  Complex,
  config: _configReadonly.config,
  divideScalar,
  typed
});
exports.nthRoots = nthRoots;
const lsolve =
/* #__PURE__ */
(0, _factoriesAny.createLsolve)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  subtract,
  typed
});
exports.lsolve = lsolve;
const deepEqual =
/* #__PURE__ */
(0, _factoriesAny.createDeepEqual)({
  equal,
  typed
});
exports.deepEqual = deepEqual;
const setDifference =
/* #__PURE__ */
(0, _factoriesAny.createSetDifference)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setDifference = setDifference;
const setMultiplicity =
/* #__PURE__ */
(0, _factoriesAny.createSetMultiplicity)({
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setMultiplicity = setMultiplicity;
const hypot =
/* #__PURE__ */
(0, _factoriesAny.createHypot)({
  abs,
  addScalar,
  divideScalar,
  isPositive,
  multiplyScalar,
  smaller,
  sqrt,
  typed
});
exports.hypot = hypot;
const lup =
/* #__PURE__ */
(0, _factoriesAny.createLup)({
  DenseMatrix,
  Spa,
  SparseMatrix,
  abs,
  addScalar,
  divideScalar,
  equalScalar,
  larger,
  matrix,
  multiplyScalar,
  subtract,
  typed,
  unaryMinus
});
exports.lup = lup;
const slu =
/* #__PURE__ */
(0, _factoriesAny.createSlu)({
  SparseMatrix,
  abs,
  add,
  divideScalar,
  larger,
  largerEq,
  multiply,
  subtract,
  transpose,
  typed
});
exports.slu = slu;
const det =
/* #__PURE__ */
(0, _factoriesAny.createDet)({
  lup,
  matrix,
  multiply,
  subtract,
  typed,
  unaryMinus
});
exports.det = det;
const distance =
/* #__PURE__ */
(0, _factoriesAny.createDistance)({
  abs,
  addScalar,
  divideScalar,
  multiplyScalar,
  sqrt,
  subtract,
  typed,
  unaryMinus
});
exports.distance = distance;
const stirlingS2 =
/* #__PURE__ */
(0, _factoriesAny.createStirlingS2)({
  addScalar,
  combinations,
  divideScalar,
  factorial,
  isInteger,
  isNegative,
  larger,
  multiplyScalar,
  pow,
  subtract,
  typed
});
exports.stirlingS2 = stirlingS2;
const catalan =
/* #__PURE__ */
(0, _factoriesAny.createCatalan)({
  addScalar,
  combinations,
  divideScalar,
  isInteger,
  isNegative,
  multiplyScalar,
  typed
});
exports.catalan = catalan;
const xor =
/* #__PURE__ */
(0, _factoriesAny.createXor)({
  DenseMatrix,
  matrix,
  typed
});
exports.xor = xor;
const row =
/* #__PURE__ */
(0, _factoriesAny.createRow)({
  Index,
  matrix,
  range,
  typed
});
exports.row = row;
const dotDivide =
/* #__PURE__ */
(0, _factoriesAny.createDotDivide)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  typed
});
exports.dotDivide = dotDivide;
const Unit =
/* #__PURE__ */
(0, _factoriesAny.createUnitClass)({
  BigNumber,
  Complex,
  Fraction,
  abs,
  addScalar,
  config: _configReadonly.config,
  divideScalar,
  equal,
  fix,
  format,
  isNumeric,
  multiplyScalar,
  number,
  pow,
  round,
  subtract
});
exports.Unit = Unit;
const createUnit =
/* #__PURE__ */
(0, _factoriesAny.createCreateUnit)({
  Unit,
  typed
});
exports.createUnit = createUnit;
const setSymDifference =
/* #__PURE__ */
(0, _factoriesAny.createSetSymDifference)({
  Index,
  concat,
  setDifference,
  size,
  subset,
  typed
});
exports.setSymDifference = setSymDifference;
const qr =
/* #__PURE__ */
(0, _factoriesAny.createQr)({
  addScalar,
  conj,
  divideScalar,
  identity,
  isZero,
  matrix,
  multiplyScalar,
  sign,
  sqrt,
  subtract,
  typed,
  unaryMinus,
  unequal,
  zeros
});
exports.qr = qr;
const inv =
/* #__PURE__ */
(0, _factoriesAny.createInv)({
  abs,
  addScalar,
  det,
  divideScalar,
  identity,
  matrix,
  multiply,
  typed,
  unaryMinus
});
exports.inv = inv;
const sqrtm =
/* #__PURE__ */
(0, _factoriesAny.createSqrtm)({
  abs,
  add,
  identity,
  inv,
  max,
  multiply,
  size,
  sqrt,
  subtract,
  typed
});
exports.sqrtm = sqrtm;
const intersect =
/* #__PURE__ */
(0, _factoriesAny.createIntersect)({
  abs,
  add,
  addScalar,
  config: _configReadonly.config,
  divideScalar,
  equalScalar,
  matrix,
  multiply,
  multiplyScalar,
  smaller,
  subtract,
  typed
});
exports.intersect = intersect;
const bellNumbers =
/* #__PURE__ */
(0, _factoriesAny.createBellNumbers)({
  addScalar,
  isInteger,
  isNegative,
  stirlingS2,
  typed
});
exports.bellNumbers = bellNumbers;
const atomicMass =
/* #__PURE__ */
(0, _factoriesAny.createAtomicMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.atomicMass = atomicMass;
const bohrMagneton =
/* #__PURE__ */
(0, _factoriesAny.createBohrMagneton)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.bohrMagneton = bohrMagneton;
const boltzmann =
/* #__PURE__ */
(0, _factoriesAny.createBoltzmann)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.boltzmann = boltzmann;
const conductanceQuantum =
/* #__PURE__ */
(0, _factoriesAny.createConductanceQuantum)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.conductanceQuantum = conductanceQuantum;
const deuteronMass =
/* #__PURE__ */
(0, _factoriesAny.createDeuteronMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.deuteronMass = deuteronMass;
const electronMass =
/* #__PURE__ */
(0, _factoriesAny.createElectronMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.electronMass = electronMass;
const faraday =
/* #__PURE__ */
(0, _factoriesAny.createFaraday)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.faraday = faraday;
const firstRadiation =
/* #__PURE__ */
(0, _factoriesAny.createFirstRadiation)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.firstRadiation = firstRadiation;
const gravitationConstant =
/* #__PURE__ */
(0, _factoriesAny.createGravitationConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.gravitationConstant = gravitationConstant;
const hartreeEnergy =
/* #__PURE__ */
(0, _factoriesAny.createHartreeEnergy)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.hartreeEnergy = hartreeEnergy;
const klitzing =
/* #__PURE__ */
(0, _factoriesAny.createKlitzing)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.klitzing = klitzing;
const magneticConstant =
/* #__PURE__ */
(0, _factoriesAny.createMagneticConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.magneticConstant = magneticConstant;
const molarMass =
/* #__PURE__ */
(0, _factoriesAny.createMolarMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.molarMass = molarMass;
const molarPlanckConstant =
/* #__PURE__ */
(0, _factoriesAny.createMolarPlanckConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.molarPlanckConstant = molarPlanckConstant;
const neutronMass =
/* #__PURE__ */
(0, _factoriesAny.createNeutronMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.neutronMass = neutronMass;
const planckCharge =
/* #__PURE__ */
(0, _factoriesAny.createPlanckCharge)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.planckCharge = planckCharge;
const planckLength =
/* #__PURE__ */
(0, _factoriesAny.createPlanckLength)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.planckLength = planckLength;
const planckTemperature =
/* #__PURE__ */
(0, _factoriesAny.createPlanckTemperature)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.planckTemperature = planckTemperature;
const protonMass =
/* #__PURE__ */
(0, _factoriesAny.createProtonMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.protonMass = protonMass;
const reducedPlanckConstant =
/* #__PURE__ */
(0, _factoriesAny.createReducedPlanckConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.reducedPlanckConstant = reducedPlanckConstant;
const secondRadiation =
/* #__PURE__ */
(0, _factoriesAny.createSecondRadiation)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.secondRadiation = secondRadiation;
const stefanBoltzmann =
/* #__PURE__ */
(0, _factoriesAny.createStefanBoltzmann)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.stefanBoltzmann = stefanBoltzmann;
const vacuumImpedance =
/* #__PURE__ */
(0, _factoriesAny.createVacuumImpedance)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.vacuumImpedance = vacuumImpedance;
const column =
/* #__PURE__ */
(0, _factoriesAny.createColumn)({
  Index,
  matrix,
  range,
  typed
});
exports.column = column;
const usolve =
/* #__PURE__ */
(0, _factoriesAny.createUsolve)({
  DenseMatrix,
  divideScalar,
  equalScalar,
  matrix,
  multiplyScalar,
  subtract,
  typed
});
exports.usolve = usolve;
const setIntersect =
/* #__PURE__ */
(0, _factoriesAny.createSetIntersect)({
  DenseMatrix,
  Index,
  compareNatural,
  size,
  subset,
  typed
});
exports.setIntersect = setIntersect;
const lusolve =
/* #__PURE__ */
(0, _factoriesAny.createLusolve)({
  DenseMatrix,
  lsolve,
  lup,
  matrix,
  slu,
  typed,
  usolve
});
exports.lusolve = lusolve;
const expm =
/* #__PURE__ */
(0, _factoriesAny.createExpm)({
  abs,
  add,
  identity,
  inv,
  multiply,
  typed
});
exports.expm = expm;
const avogadro =
/* #__PURE__ */
(0, _factoriesAny.createAvogadro)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.avogadro = avogadro;
const classicalElectronRadius =
/* #__PURE__ */
(0, _factoriesAny.createClassicalElectronRadius)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.classicalElectronRadius = classicalElectronRadius;
const electricConstant =
/* #__PURE__ */
(0, _factoriesAny.createElectricConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.electricConstant = electricConstant;
const fermiCoupling =
/* #__PURE__ */
(0, _factoriesAny.createFermiCoupling)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.fermiCoupling = fermiCoupling;
const gravity =
/* #__PURE__ */
(0, _factoriesAny.createGravity)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.gravity = gravity;
const loschmidt =
/* #__PURE__ */
(0, _factoriesAny.createLoschmidt)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.loschmidt = loschmidt;
const molarMassC12 =
/* #__PURE__ */
(0, _factoriesAny.createMolarMassC12)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.molarMassC12 = molarMassC12;
const nuclearMagneton =
/* #__PURE__ */
(0, _factoriesAny.createNuclearMagneton)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.nuclearMagneton = nuclearMagneton;
const planckMass =
/* #__PURE__ */
(0, _factoriesAny.createPlanckMass)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.planckMass = planckMass;
const quantumOfCirculation =
/* #__PURE__ */
(0, _factoriesAny.createQuantumOfCirculation)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.quantumOfCirculation = quantumOfCirculation;
const speedOfLight =
/* #__PURE__ */
(0, _factoriesAny.createSpeedOfLight)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.speedOfLight = speedOfLight;
const wienDisplacement =
/* #__PURE__ */
(0, _factoriesAny.createWienDisplacement)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.wienDisplacement = wienDisplacement;
const log =
/* #__PURE__ */
(0, _factoriesAny.createLog)({
  Complex,
  config: _configReadonly.config,
  divideScalar,
  typed
});
exports.log = log;
const unit =
/* #__PURE__ */
(0, _factoriesAny.createUnitFunction)({
  Unit,
  typed
});
exports.unit = unit;
const divide =
/* #__PURE__ */
(0, _factoriesAny.createDivide)({
  divideScalar,
  equalScalar,
  inv,
  matrix,
  multiply,
  typed
});
exports.divide = divide;
const median =
/* #__PURE__ */
(0, _factoriesAny.createMedian)({
  add,
  compare,
  divide,
  partitionSelect,
  typed
});
exports.median = median;
const variance =
/* #__PURE__ */
(0, _factoriesAny.createVariance)({
  add,
  apply,
  divide,
  isNaN,
  multiply,
  subtract,
  typed
});
exports.variance = variance;
const std =
/* #__PURE__ */
(0, _factoriesAny.createStd)({
  sqrt,
  typed,
  variance
});
exports.std = std;
const multinomial =
/* #__PURE__ */
(0, _factoriesAny.createMultinomial)({
  add,
  divide,
  factorial,
  isInteger,
  isPositive,
  multiply,
  typed
});
exports.multinomial = multinomial;
const bohrRadius =
/* #__PURE__ */
(0, _factoriesAny.createBohrRadius)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.bohrRadius = bohrRadius;
const elementaryCharge =
/* #__PURE__ */
(0, _factoriesAny.createElementaryCharge)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.elementaryCharge = elementaryCharge;
const inverseConductanceQuantum =
/* #__PURE__ */
(0, _factoriesAny.createInverseConductanceQuantum)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.inverseConductanceQuantum = inverseConductanceQuantum;
const molarVolume =
/* #__PURE__ */
(0, _factoriesAny.createMolarVolume)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.molarVolume = molarVolume;
const planckTime =
/* #__PURE__ */
(0, _factoriesAny.createPlanckTime)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.planckTime = planckTime;
const thomsonCrossSection =
/* #__PURE__ */
(0, _factoriesAny.createThomsonCrossSection)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.thomsonCrossSection = thomsonCrossSection;
const log1p =
/* #__PURE__ */
(0, _factoriesAny.createLog1p)({
  Complex,
  config: _configReadonly.config,
  divideScalar,
  log,
  typed
});
exports.log1p = log1p;
const mean =
/* #__PURE__ */
(0, _factoriesAny.createMean)({
  add,
  divide,
  typed
});
exports.mean = mean;
const gasConstant =
/* #__PURE__ */
(0, _factoriesAny.createGasConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.gasConstant = gasConstant;
const planckConstant =
/* #__PURE__ */
(0, _factoriesAny.createPlanckConstant)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.planckConstant = planckConstant;
const setUnion =
/* #__PURE__ */
(0, _factoriesAny.createSetUnion)({
  Index,
  concat,
  setIntersect,
  setSymDifference,
  size,
  subset,
  typed
});
exports.setUnion = setUnion;
const kldivergence =
/* #__PURE__ */
(0, _factoriesAny.createKldivergence)({
  divide,
  dotDivide,
  isNumeric,
  log,
  matrix,
  multiply,
  sum,
  typed
});
exports.kldivergence = kldivergence;
const coulomb =
/* #__PURE__ */
(0, _factoriesAny.createCoulomb)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.coulomb = coulomb;
const rydberg =
/* #__PURE__ */
(0, _factoriesAny.createRydberg)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.rydberg = rydberg;
const mad =
/* #__PURE__ */
(0, _factoriesAny.createMad)({
  abs,
  map,
  median,
  subtract,
  typed
});
exports.mad = mad;
const magneticFluxQuantum =
/* #__PURE__ */
(0, _factoriesAny.createMagneticFluxQuantum)({
  BigNumber,
  Unit,
  config: _configReadonly.config
});
exports.magneticFluxQuantum = magneticFluxQuantum;
},{"./configReadonly":"../node_modules/mathjs/src/entry/configReadonly.js","../factoriesAny":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/impureFunctionsAny.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "docs", {
  enumerable: true,
  get: function () {
    return _embeddedDocs.embeddedDocs;
  }
});
exports.derivative = exports.parser = exports.compile = exports.help = exports.rationalize = exports.simplify = exports.Help = exports.Parser = exports.evaluate = exports.parse = exports.FunctionNode = exports.SymbolNode = exports.IndexNode = exports.AssignmentNode = exports.AccessorNode = exports.chain = exports.FunctionAssignmentNode = exports.RangeNode = exports.OperatorNode = exports.ConditionalNode = exports.reviver = exports.Chain = exports.RelationalNode = exports.ParenthesisNode = exports.ObjectNode = exports.ConstantNode = exports.BlockNode = exports.ArrayNode = exports.Node = void 0;

var _configReadonly = require("./configReadonly");

var _factoriesAny = require("../factoriesAny");

var _pureFunctionsAny = require("./pureFunctionsAny.generated");

var _embeddedDocs = require("../expression/embeddedDocs/embeddedDocs");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const math = {}; // NOT pure!

const mathWithTransform = {}; // NOT pure!

const classes = {}; // NOT pure!

const Node = (0, _factoriesAny.createNode)({
  mathWithTransform
});
exports.Node = Node;
const ArrayNode = (0, _factoriesAny.createArrayNode)({
  Node
});
exports.ArrayNode = ArrayNode;
const BlockNode = (0, _factoriesAny.createBlockNode)({
  Node,
  ResultSet: _pureFunctionsAny.ResultSet
});
exports.BlockNode = BlockNode;
const ConstantNode = (0, _factoriesAny.createConstantNode)({
  Node
});
exports.ConstantNode = ConstantNode;
const ObjectNode = (0, _factoriesAny.createObjectNode)({
  Node
});
exports.ObjectNode = ObjectNode;
const ParenthesisNode = (0, _factoriesAny.createParenthesisNode)({
  Node
});
exports.ParenthesisNode = ParenthesisNode;
const RelationalNode = (0, _factoriesAny.createRelationalNode)({
  Node
});
exports.RelationalNode = RelationalNode;
const Chain = (0, _factoriesAny.createChainClass)({
  math
});
exports.Chain = Chain;
const reviver = (0, _factoriesAny.createReviver)({
  classes
});
exports.reviver = reviver;
const ConditionalNode = (0, _factoriesAny.createConditionalNode)({
  Node
});
exports.ConditionalNode = ConditionalNode;
const OperatorNode = (0, _factoriesAny.createOperatorNode)({
  Node
});
exports.OperatorNode = OperatorNode;
const RangeNode = (0, _factoriesAny.createRangeNode)({
  Node
});
exports.RangeNode = RangeNode;
const FunctionAssignmentNode = (0, _factoriesAny.createFunctionAssignmentNode)({
  Node,
  typed: _pureFunctionsAny.typed
});
exports.FunctionAssignmentNode = FunctionAssignmentNode;
const chain = (0, _factoriesAny.createChain)({
  Chain,
  typed: _pureFunctionsAny.typed
});
exports.chain = chain;
const AccessorNode = (0, _factoriesAny.createAccessorNode)({
  Node,
  subset: _pureFunctionsAny.subset
});
exports.AccessorNode = AccessorNode;
const AssignmentNode = (0, _factoriesAny.createAssignmentNode)({
  matrix: _pureFunctionsAny.matrix,
  Node,
  subset: _pureFunctionsAny.subset
});
exports.AssignmentNode = AssignmentNode;
const IndexNode = (0, _factoriesAny.createIndexNode)({
  Index: _pureFunctionsAny.Index,
  Node,
  Range: _pureFunctionsAny.Range,
  size: _pureFunctionsAny.size
});
exports.IndexNode = IndexNode;
const SymbolNode = (0, _factoriesAny.createSymbolNode)({
  Unit: _pureFunctionsAny.Unit,
  Node,
  math
});
exports.SymbolNode = SymbolNode;
const FunctionNode = (0, _factoriesAny.createFunctionNode)({
  Node,
  SymbolNode,
  math
});
exports.FunctionNode = FunctionNode;
const parse = (0, _factoriesAny.createParse)({
  AccessorNode,
  ArrayNode,
  AssignmentNode,
  BlockNode,
  ConditionalNode,
  ConstantNode,
  FunctionAssignmentNode,
  FunctionNode,
  IndexNode,
  ObjectNode,
  OperatorNode,
  ParenthesisNode,
  RangeNode,
  RelationalNode,
  SymbolNode,
  config: _configReadonly.config,
  numeric: _pureFunctionsAny.numeric,
  typed: _pureFunctionsAny.typed
});
exports.parse = parse;
const evaluate = (0, _factoriesAny.createEvaluate)({
  parse,
  typed: _pureFunctionsAny.typed
});
exports.evaluate = evaluate;
const Parser = (0, _factoriesAny.createParserClass)({
  parse
});
exports.Parser = Parser;
const Help = (0, _factoriesAny.createHelpClass)({
  parse
});
exports.Help = Help;
const simplify = (0, _factoriesAny.createSimplify)({
  bignumber: _pureFunctionsAny.bignumber,
  fraction: _pureFunctionsAny.fraction,
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add: _pureFunctionsAny.add,
  config: _configReadonly.config,
  divide: _pureFunctionsAny.divide,
  equal: _pureFunctionsAny.equal,
  isZero: _pureFunctionsAny.isZero,
  mathWithTransform,
  multiply: _pureFunctionsAny.multiply,
  parse,
  pow: _pureFunctionsAny.pow,
  subtract: _pureFunctionsAny.subtract,
  typed: _pureFunctionsAny.typed
});
exports.simplify = simplify;
const rationalize = (0, _factoriesAny.createRationalize)({
  bignumber: _pureFunctionsAny.bignumber,
  fraction: _pureFunctionsAny.fraction,
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  add: _pureFunctionsAny.add,
  config: _configReadonly.config,
  divide: _pureFunctionsAny.divide,
  equal: _pureFunctionsAny.equal,
  isZero: _pureFunctionsAny.isZero,
  mathWithTransform,
  multiply: _pureFunctionsAny.multiply,
  parse,
  pow: _pureFunctionsAny.pow,
  simplify,
  subtract: _pureFunctionsAny.subtract,
  typed: _pureFunctionsAny.typed
});
exports.rationalize = rationalize;
const help = (0, _factoriesAny.createHelp)({
  Help,
  mathWithTransform,
  typed: _pureFunctionsAny.typed
});
exports.help = help;
const compile = (0, _factoriesAny.createCompile)({
  parse,
  typed: _pureFunctionsAny.typed
});
exports.compile = compile;
const parser = (0, _factoriesAny.createParser)({
  Parser,
  typed: _pureFunctionsAny.typed
});
exports.parser = parser;
const derivative = (0, _factoriesAny.createDerivative)({
  ConstantNode,
  FunctionNode,
  OperatorNode,
  ParenthesisNode,
  SymbolNode,
  config: _configReadonly.config,
  equal: _pureFunctionsAny.equal,
  isZero: _pureFunctionsAny.isZero,
  numeric: _pureFunctionsAny.numeric,
  parse,
  simplify,
  typed: _pureFunctionsAny.typed
});
exports.derivative = derivative;
Object.assign(math, {
  'typeof': _pureFunctionsAny.typeOf,
  eye: _pureFunctionsAny.eye,
  reviver,
  false: _pureFunctionsAny._false,
  null: _pureFunctionsAny._null,
  true: _pureFunctionsAny._true,
  e: _pureFunctionsAny.e,
  i: _pureFunctionsAny.i,
  LN10: _pureFunctionsAny.LN10,
  LOG10E: _pureFunctionsAny.LOG10E,
  NaN: _pureFunctionsAny._NaN,
  pi: _pureFunctionsAny.pi,
  SQRT1_2: _pureFunctionsAny.SQRT1_2,
  tau: _pureFunctionsAny.tau,
  efimovFactor: _pureFunctionsAny.efimovFactor,
  fineStructure: _pureFunctionsAny.fineStructure,
  sackurTetrode: _pureFunctionsAny.sackurTetrode,
  weakMixingAngle: _pureFunctionsAny.weakMixingAngle,
  'E': _pureFunctionsAny.e,
  LN2: _pureFunctionsAny.LN2,
  phi: _pureFunctionsAny.phi,
  SQRT2: _pureFunctionsAny.SQRT2,
  Infinity: _pureFunctionsAny._Infinity,
  'PI': _pureFunctionsAny.pi,
  typed: _pureFunctionsAny.typed,
  isInteger: _pureFunctionsAny.isInteger,
  isNumeric: _pureFunctionsAny.isNumeric,
  isPositive: _pureFunctionsAny.isPositive,
  isNaN: _pureFunctionsAny.isNaN,
  equalScalar: _pureFunctionsAny.equalScalar,
  number: _pureFunctionsAny.number,
  boolean: _pureFunctionsAny.boolean,
  complex: _pureFunctionsAny.complex,
  splitUnit: _pureFunctionsAny.splitUnit,
  unaryPlus: _pureFunctionsAny.unaryPlus,
  apply: _pureFunctionsAny.apply,
  cube: _pureFunctionsAny.cube,
  expm1: _pureFunctionsAny.expm1,
  log10: _pureFunctionsAny.log10,
  multiplyScalar: _pureFunctionsAny.multiplyScalar,
  sign: _pureFunctionsAny.sign,
  square: _pureFunctionsAny.square,
  bitNot: _pureFunctionsAny.bitNot,
  arg: _pureFunctionsAny.arg,
  im: _pureFunctionsAny.im,
  not: _pureFunctionsAny.not,
  filter: _pureFunctionsAny.filter,
  forEach: _pureFunctionsAny.forEach,
  map: _pureFunctionsAny.map,
  erf: _pureFunctionsAny.erf,
  format: _pureFunctionsAny.format,
  isPrime: _pureFunctionsAny.isPrime,
  acos: _pureFunctionsAny.acos,
  acot: _pureFunctionsAny.acot,
  acsc: _pureFunctionsAny.acsc,
  asec: _pureFunctionsAny.asec,
  asin: _pureFunctionsAny.asin,
  atan: _pureFunctionsAny.atan,
  atanh: _pureFunctionsAny.atanh,
  cosh: _pureFunctionsAny.cosh,
  coth: _pureFunctionsAny.coth,
  csch: _pureFunctionsAny.csch,
  sech: _pureFunctionsAny.sech,
  sinh: _pureFunctionsAny.sinh,
  tanh: _pureFunctionsAny.tanh,
  chain,
  combinations: _pureFunctionsAny.combinations,
  pickRandom: _pureFunctionsAny.pickRandom,
  randomInt: _pureFunctionsAny.randomInt,
  LOG2E: _pureFunctionsAny.LOG2E,
  clone: _pureFunctionsAny.clone,
  hasNumericValue: _pureFunctionsAny.hasNumericValue,
  typeOf: _pureFunctionsAny.typeOf,
  string: _pureFunctionsAny.string,
  fraction: _pureFunctionsAny.fraction,
  unaryMinus: _pureFunctionsAny.unaryMinus,
  addScalar: _pureFunctionsAny.addScalar,
  exp: _pureFunctionsAny.exp,
  log2: _pureFunctionsAny.log2,
  sqrt: _pureFunctionsAny.sqrt,
  conj: _pureFunctionsAny.conj,
  getMatrixDataType: _pureFunctionsAny.getMatrixDataType,
  mode: _pureFunctionsAny.mode,
  print: _pureFunctionsAny.print,
  acosh: _pureFunctionsAny.acosh,
  acsch: _pureFunctionsAny.acsch,
  asinh: _pureFunctionsAny.asinh,
  cos: _pureFunctionsAny.cos,
  csc: _pureFunctionsAny.csc,
  sin: _pureFunctionsAny.sin,
  random: _pureFunctionsAny.random,
  version: _pureFunctionsAny.version,
  isNegative: _pureFunctionsAny.isNegative,
  matrix: _pureFunctionsAny.matrix,
  cbrt: _pureFunctionsAny.cbrt,
  gcd: _pureFunctionsAny.gcd,
  mod: _pureFunctionsAny.mod,
  nthRoot: _pureFunctionsAny.nthRoot,
  xgcd: _pureFunctionsAny.xgcd,
  bitAnd: _pureFunctionsAny.bitAnd,
  bitXor: _pureFunctionsAny.bitXor,
  or: _pureFunctionsAny.or,
  concat: _pureFunctionsAny.concat,
  diag: _pureFunctionsAny.diag,
  identity: _pureFunctionsAny.identity,
  ones: _pureFunctionsAny.ones,
  reshape: _pureFunctionsAny.reshape,
  size: _pureFunctionsAny.size,
  subset: _pureFunctionsAny.subset,
  zeros: _pureFunctionsAny.zeros,
  to: _pureFunctionsAny.to,
  round: _pureFunctionsAny.round,
  leftShift: _pureFunctionsAny.leftShift,
  rightLogShift: _pureFunctionsAny.rightLogShift,
  compare: _pureFunctionsAny.compare,
  compareText: _pureFunctionsAny.compareText,
  smaller: _pureFunctionsAny.smaller,
  larger: _pureFunctionsAny.larger,
  unequal: _pureFunctionsAny.unequal,
  max: _pureFunctionsAny.max,
  sparse: _pureFunctionsAny.sparse,
  acoth: _pureFunctionsAny.acoth,
  atan2: _pureFunctionsAny.atan2,
  sec: _pureFunctionsAny.sec,
  add: _pureFunctionsAny.add,
  trace: _pureFunctionsAny.trace,
  composition: _pureFunctionsAny.composition,
  isZero: _pureFunctionsAny.isZero,
  abs: _pureFunctionsAny.abs,
  floor: _pureFunctionsAny.floor,
  multiply: _pureFunctionsAny.multiply,
  dotMultiply: _pureFunctionsAny.dotMultiply,
  re: _pureFunctionsAny.re,
  flatten: _pureFunctionsAny.flatten,
  resize: _pureFunctionsAny.resize,
  squeeze: _pureFunctionsAny.squeeze,
  prod: _pureFunctionsAny.prod,
  pow: _pureFunctionsAny.pow,
  dotPow: _pureFunctionsAny.dotPow,
  rightArithShift: _pureFunctionsAny.rightArithShift,
  compareNatural: _pureFunctionsAny.compareNatural,
  equalText: _pureFunctionsAny.equalText,
  largerEq: _pureFunctionsAny.largerEq,
  partitionSelect: _pureFunctionsAny.partitionSelect,
  min: _pureFunctionsAny.min,
  asech: _pureFunctionsAny.asech,
  tan: _pureFunctionsAny.tan,
  setSize: _pureFunctionsAny.setSize,
  norm: _pureFunctionsAny.norm,
  quantileSeq: _pureFunctionsAny.quantileSeq,
  gamma: _pureFunctionsAny.gamma,
  bignumber: _pureFunctionsAny.bignumber,
  lcm: _pureFunctionsAny.lcm,
  bitOr: _pureFunctionsAny.bitOr,
  kron: _pureFunctionsAny.kron,
  transpose: _pureFunctionsAny.transpose,
  numeric: _pureFunctionsAny.numeric,
  and: _pureFunctionsAny.and,
  smallerEq: _pureFunctionsAny.smallerEq,
  sort: _pureFunctionsAny.sort,
  cot: _pureFunctionsAny.cot,
  dot: _pureFunctionsAny.dot,
  sum: _pureFunctionsAny.sum,
  factorial: _pureFunctionsAny.factorial,
  permutations: _pureFunctionsAny.permutations,
  ceil: _pureFunctionsAny.ceil,
  subtract: _pureFunctionsAny.subtract,
  cross: _pureFunctionsAny.cross,
  ctranspose: _pureFunctionsAny.ctranspose,
  equal: _pureFunctionsAny.equal,
  setCartesian: _pureFunctionsAny.setCartesian,
  setDistinct: _pureFunctionsAny.setDistinct,
  setIsSubset: _pureFunctionsAny.setIsSubset,
  setPowerset: _pureFunctionsAny.setPowerset,
  index: _pureFunctionsAny.index,
  fix: _pureFunctionsAny.fix,
  range: _pureFunctionsAny.range,
  divideScalar: _pureFunctionsAny.divideScalar,
  nthRoots: _pureFunctionsAny.nthRoots,
  lsolve: _pureFunctionsAny.lsolve,
  deepEqual: _pureFunctionsAny.deepEqual,
  setDifference: _pureFunctionsAny.setDifference,
  setMultiplicity: _pureFunctionsAny.setMultiplicity,
  hypot: _pureFunctionsAny.hypot,
  lup: _pureFunctionsAny.lup,
  slu: _pureFunctionsAny.slu,
  det: _pureFunctionsAny.det,
  distance: _pureFunctionsAny.distance,
  stirlingS2: _pureFunctionsAny.stirlingS2,
  catalan: _pureFunctionsAny.catalan,
  xor: _pureFunctionsAny.xor,
  row: _pureFunctionsAny.row,
  dotDivide: _pureFunctionsAny.dotDivide,
  createUnit: _pureFunctionsAny.createUnit,
  setSymDifference: _pureFunctionsAny.setSymDifference,
  qr: _pureFunctionsAny.qr,
  inv: _pureFunctionsAny.inv,
  sqrtm: _pureFunctionsAny.sqrtm,
  intersect: _pureFunctionsAny.intersect,
  bellNumbers: _pureFunctionsAny.bellNumbers,
  atomicMass: _pureFunctionsAny.atomicMass,
  bohrMagneton: _pureFunctionsAny.bohrMagneton,
  boltzmann: _pureFunctionsAny.boltzmann,
  conductanceQuantum: _pureFunctionsAny.conductanceQuantum,
  deuteronMass: _pureFunctionsAny.deuteronMass,
  electronMass: _pureFunctionsAny.electronMass,
  faraday: _pureFunctionsAny.faraday,
  firstRadiation: _pureFunctionsAny.firstRadiation,
  gravitationConstant: _pureFunctionsAny.gravitationConstant,
  hartreeEnergy: _pureFunctionsAny.hartreeEnergy,
  klitzing: _pureFunctionsAny.klitzing,
  magneticConstant: _pureFunctionsAny.magneticConstant,
  molarMass: _pureFunctionsAny.molarMass,
  molarPlanckConstant: _pureFunctionsAny.molarPlanckConstant,
  neutronMass: _pureFunctionsAny.neutronMass,
  planckCharge: _pureFunctionsAny.planckCharge,
  planckLength: _pureFunctionsAny.planckLength,
  planckTemperature: _pureFunctionsAny.planckTemperature,
  protonMass: _pureFunctionsAny.protonMass,
  reducedPlanckConstant: _pureFunctionsAny.reducedPlanckConstant,
  secondRadiation: _pureFunctionsAny.secondRadiation,
  stefanBoltzmann: _pureFunctionsAny.stefanBoltzmann,
  vacuumImpedance: _pureFunctionsAny.vacuumImpedance,
  column: _pureFunctionsAny.column,
  usolve: _pureFunctionsAny.usolve,
  setIntersect: _pureFunctionsAny.setIntersect,
  lusolve: _pureFunctionsAny.lusolve,
  expm: _pureFunctionsAny.expm,
  avogadro: _pureFunctionsAny.avogadro,
  classicalElectronRadius: _pureFunctionsAny.classicalElectronRadius,
  electricConstant: _pureFunctionsAny.electricConstant,
  fermiCoupling: _pureFunctionsAny.fermiCoupling,
  gravity: _pureFunctionsAny.gravity,
  loschmidt: _pureFunctionsAny.loschmidt,
  molarMassC12: _pureFunctionsAny.molarMassC12,
  nuclearMagneton: _pureFunctionsAny.nuclearMagneton,
  planckMass: _pureFunctionsAny.planckMass,
  quantumOfCirculation: _pureFunctionsAny.quantumOfCirculation,
  speedOfLight: _pureFunctionsAny.speedOfLight,
  wienDisplacement: _pureFunctionsAny.wienDisplacement,
  log: _pureFunctionsAny.log,
  unit: _pureFunctionsAny.unit,
  divide: _pureFunctionsAny.divide,
  median: _pureFunctionsAny.median,
  variance: _pureFunctionsAny.variance,
  std: _pureFunctionsAny.std,
  multinomial: _pureFunctionsAny.multinomial,
  bohrRadius: _pureFunctionsAny.bohrRadius,
  elementaryCharge: _pureFunctionsAny.elementaryCharge,
  inverseConductanceQuantum: _pureFunctionsAny.inverseConductanceQuantum,
  molarVolume: _pureFunctionsAny.molarVolume,
  planckTime: _pureFunctionsAny.planckTime,
  thomsonCrossSection: _pureFunctionsAny.thomsonCrossSection,
  log1p: _pureFunctionsAny.log1p,
  parse,
  evaluate,
  mean: _pureFunctionsAny.mean,
  'var': _pureFunctionsAny.variance,
  simplify,
  rationalize,
  gasConstant: _pureFunctionsAny.gasConstant,
  planckConstant: _pureFunctionsAny.planckConstant,
  setUnion: _pureFunctionsAny.setUnion,
  'eval': evaluate,
  help,
  kldivergence: _pureFunctionsAny.kldivergence,
  coulomb: _pureFunctionsAny.coulomb,
  rydberg: _pureFunctionsAny.rydberg,
  compile,
  mad: _pureFunctionsAny.mad,
  magneticFluxQuantum: _pureFunctionsAny.magneticFluxQuantum,
  parser,
  derivative,
  config: _configReadonly.config
});
Object.assign(mathWithTransform, math, {
  apply: (0, _factoriesAny.createApplyTransform)({
    isInteger: _pureFunctionsAny.isInteger,
    typed: _pureFunctionsAny.typed
  }),
  filter: (0, _factoriesAny.createFilterTransform)({
    typed: _pureFunctionsAny.typed
  }),
  map: (0, _factoriesAny.createMapTransform)({
    typed: _pureFunctionsAny.typed
  }),
  forEach: (0, _factoriesAny.createForEachTransform)({
    typed: _pureFunctionsAny.typed
  }),
  max: (0, _factoriesAny.createMaxTransform)({
    larger: _pureFunctionsAny.larger,
    typed: _pureFunctionsAny.typed
  }),
  min: (0, _factoriesAny.createMinTransform)({
    smaller: _pureFunctionsAny.smaller,
    typed: _pureFunctionsAny.typed
  }),
  subset: (0, _factoriesAny.createSubsetTransform)({
    matrix: _pureFunctionsAny.matrix,
    typed: _pureFunctionsAny.typed
  }),
  concat: (0, _factoriesAny.createConcatTransform)({
    isInteger: _pureFunctionsAny.isInteger,
    matrix: _pureFunctionsAny.matrix,
    typed: _pureFunctionsAny.typed
  }),
  range: (0, _factoriesAny.createRangeTransform)({
    bignumber: _pureFunctionsAny.bignumber,
    matrix: _pureFunctionsAny.matrix,
    config: _configReadonly.config,
    larger: _pureFunctionsAny.larger,
    largerEq: _pureFunctionsAny.largerEq,
    smaller: _pureFunctionsAny.smaller,
    smallerEq: _pureFunctionsAny.smallerEq,
    typed: _pureFunctionsAny.typed
  }),
  sum: (0, _factoriesAny.createSumTransform)({
    bignumber: _pureFunctionsAny.bignumber,
    fraction: _pureFunctionsAny.fraction,
    add: _pureFunctionsAny.add,
    config: _configReadonly.config,
    typed: _pureFunctionsAny.typed
  }),
  index: (0, _factoriesAny.createIndexTransform)({
    Index: _pureFunctionsAny.Index
  }),
  column: (0, _factoriesAny.createColumnTransform)({
    Index: _pureFunctionsAny.Index,
    matrix: _pureFunctionsAny.matrix,
    range: _pureFunctionsAny.range,
    typed: _pureFunctionsAny.typed
  }),
  row: (0, _factoriesAny.createRowTransform)({
    Index: _pureFunctionsAny.Index,
    matrix: _pureFunctionsAny.matrix,
    range: _pureFunctionsAny.range,
    typed: _pureFunctionsAny.typed
  }),
  std: (0, _factoriesAny.createStdTransform)({
    sqrt: _pureFunctionsAny.sqrt,
    typed: _pureFunctionsAny.typed,
    variance: _pureFunctionsAny.variance
  }),
  mean: (0, _factoriesAny.createMeanTransform)({
    add: _pureFunctionsAny.add,
    divide: _pureFunctionsAny.divide,
    typed: _pureFunctionsAny.typed
  }),
  variance: (0, _factoriesAny.createVarianceTransform)({
    add: _pureFunctionsAny.add,
    apply: _pureFunctionsAny.apply,
    divide: _pureFunctionsAny.divide,
    isNaN: _pureFunctionsAny.isNaN,
    multiply: _pureFunctionsAny.multiply,
    subtract: _pureFunctionsAny.subtract,
    typed: _pureFunctionsAny.typed
  })
});
Object.assign(classes, {
  ResultSet: _pureFunctionsAny.ResultSet,
  Complex: _pureFunctionsAny.Complex,
  Range: _pureFunctionsAny.Range,
  Node,
  ArrayNode,
  BlockNode,
  ConstantNode,
  ObjectNode,
  ParenthesisNode,
  RelationalNode,
  Chain,
  BigNumber: _pureFunctionsAny.BigNumber,
  Matrix: _pureFunctionsAny.Matrix,
  ConditionalNode,
  OperatorNode,
  Fraction: _pureFunctionsAny.Fraction,
  RangeNode,
  DenseMatrix: _pureFunctionsAny.DenseMatrix,
  FunctionAssignmentNode,
  SparseMatrix: _pureFunctionsAny.SparseMatrix,
  ImmutableDenseMatrix: _pureFunctionsAny.ImmutableDenseMatrix,
  FibonacciHeap: _pureFunctionsAny.FibonacciHeap,
  AccessorNode,
  Spa: _pureFunctionsAny.Spa,
  AssignmentNode,
  Index: _pureFunctionsAny.Index,
  Unit: _pureFunctionsAny.Unit,
  IndexNode,
  SymbolNode,
  FunctionNode,
  Parser,
  Help
});
Chain.createProxy(math);
},{"./configReadonly":"../node_modules/mathjs/src/entry/configReadonly.js","../factoriesAny":"../node_modules/mathjs/src/factoriesAny.js","./pureFunctionsAny.generated":"../node_modules/mathjs/src/entry/pureFunctionsAny.generated.js","../expression/embeddedDocs/embeddedDocs":"../node_modules/mathjs/src/expression/embeddedDocs/embeddedDocs.js"}],"../node_modules/mathjs/src/entry/typeChecks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "isAccessorNode", {
  enumerable: true,
  get: function () {
    return _is.isAccessorNode;
  }
});
Object.defineProperty(exports, "isArray", {
  enumerable: true,
  get: function () {
    return _is.isArray;
  }
});
Object.defineProperty(exports, "isArrayNode", {
  enumerable: true,
  get: function () {
    return _is.isArrayNode;
  }
});
Object.defineProperty(exports, "isAssignmentNode", {
  enumerable: true,
  get: function () {
    return _is.isAssignmentNode;
  }
});
Object.defineProperty(exports, "isBigNumber", {
  enumerable: true,
  get: function () {
    return _is.isBigNumber;
  }
});
Object.defineProperty(exports, "isBlockNode", {
  enumerable: true,
  get: function () {
    return _is.isBlockNode;
  }
});
Object.defineProperty(exports, "isBoolean", {
  enumerable: true,
  get: function () {
    return _is.isBoolean;
  }
});
Object.defineProperty(exports, "isChain", {
  enumerable: true,
  get: function () {
    return _is.isChain;
  }
});
Object.defineProperty(exports, "isCollection", {
  enumerable: true,
  get: function () {
    return _is.isCollection;
  }
});
Object.defineProperty(exports, "isComplex", {
  enumerable: true,
  get: function () {
    return _is.isComplex;
  }
});
Object.defineProperty(exports, "isConditionalNode", {
  enumerable: true,
  get: function () {
    return _is.isConditionalNode;
  }
});
Object.defineProperty(exports, "isConstantNode", {
  enumerable: true,
  get: function () {
    return _is.isConstantNode;
  }
});
Object.defineProperty(exports, "isDate", {
  enumerable: true,
  get: function () {
    return _is.isDate;
  }
});
Object.defineProperty(exports, "isDenseMatrix", {
  enumerable: true,
  get: function () {
    return _is.isDenseMatrix;
  }
});
Object.defineProperty(exports, "isFraction", {
  enumerable: true,
  get: function () {
    return _is.isFraction;
  }
});
Object.defineProperty(exports, "isFunction", {
  enumerable: true,
  get: function () {
    return _is.isFunction;
  }
});
Object.defineProperty(exports, "isFunctionAssignmentNode", {
  enumerable: true,
  get: function () {
    return _is.isFunctionAssignmentNode;
  }
});
Object.defineProperty(exports, "isFunctionNode", {
  enumerable: true,
  get: function () {
    return _is.isFunctionNode;
  }
});
Object.defineProperty(exports, "isHelp", {
  enumerable: true,
  get: function () {
    return _is.isHelp;
  }
});
Object.defineProperty(exports, "isIndex", {
  enumerable: true,
  get: function () {
    return _is.isIndex;
  }
});
Object.defineProperty(exports, "isIndexNode", {
  enumerable: true,
  get: function () {
    return _is.isIndexNode;
  }
});
Object.defineProperty(exports, "isMatrix", {
  enumerable: true,
  get: function () {
    return _is.isMatrix;
  }
});
Object.defineProperty(exports, "isNode", {
  enumerable: true,
  get: function () {
    return _is.isNode;
  }
});
Object.defineProperty(exports, "isNull", {
  enumerable: true,
  get: function () {
    return _is.isNull;
  }
});
Object.defineProperty(exports, "isNumber", {
  enumerable: true,
  get: function () {
    return _is.isNumber;
  }
});
Object.defineProperty(exports, "isString", {
  enumerable: true,
  get: function () {
    return _is.isString;
  }
});
Object.defineProperty(exports, "isUndefined", {
  enumerable: true,
  get: function () {
    return _is.isUndefined;
  }
});
Object.defineProperty(exports, "isObject", {
  enumerable: true,
  get: function () {
    return _is.isObject;
  }
});
Object.defineProperty(exports, "isObjectNode", {
  enumerable: true,
  get: function () {
    return _is.isObjectNode;
  }
});
Object.defineProperty(exports, "isOperatorNode", {
  enumerable: true,
  get: function () {
    return _is.isOperatorNode;
  }
});
Object.defineProperty(exports, "isParenthesisNode", {
  enumerable: true,
  get: function () {
    return _is.isParenthesisNode;
  }
});
Object.defineProperty(exports, "isRange", {
  enumerable: true,
  get: function () {
    return _is.isRange;
  }
});
Object.defineProperty(exports, "isRangeNode", {
  enumerable: true,
  get: function () {
    return _is.isRangeNode;
  }
});
Object.defineProperty(exports, "isRegExp", {
  enumerable: true,
  get: function () {
    return _is.isRegExp;
  }
});
Object.defineProperty(exports, "isResultSet", {
  enumerable: true,
  get: function () {
    return _is.isResultSet;
  }
});
Object.defineProperty(exports, "isSparseMatrix", {
  enumerable: true,
  get: function () {
    return _is.isSparseMatrix;
  }
});
Object.defineProperty(exports, "isSymbolNode", {
  enumerable: true,
  get: function () {
    return _is.isSymbolNode;
  }
});
Object.defineProperty(exports, "isUnit", {
  enumerable: true,
  get: function () {
    return _is.isUnit;
  }
});

var _is = require("../utils/is");
},{"../utils/is":"../node_modules/mathjs/src/utils/is.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BigNumberDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const BigNumberDependencies = {
  createBigNumberClass: _factoriesAny.createBigNumberClass
};
exports.BigNumberDependencies = BigNumberDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ComplexDependencies = {
  createComplexClass: _factoriesAny.createComplexClass
};
exports.ComplexDependencies = ComplexDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrixClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatrixDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const MatrixDependencies = {
  createMatrixClass: _factoriesAny.createMatrixClass
};
exports.MatrixDependencies = MatrixDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DenseMatrixDependencies = void 0;

var _dependenciesMatrixClass = require("./dependenciesMatrixClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const DenseMatrixDependencies = {
  MatrixDependencies: _dependenciesMatrixClass.MatrixDependencies,
  createDenseMatrixClass: _factoriesAny.createDenseMatrixClass
};
exports.DenseMatrixDependencies = DenseMatrixDependencies;
},{"./dependenciesMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrixClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FractionDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const FractionDependencies = {
  createFractionClass: _factoriesAny.createFractionClass
};
exports.FractionDependencies = FractionDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typedDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesFractionClass = require("./dependenciesFractionClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const typedDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  FractionDependencies: _dependenciesFractionClass.FractionDependencies,
  createTyped: _factoriesAny.createTyped
};
exports.typedDependencies = typedDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesResultSet.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResultSetDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ResultSetDependencies = {
  createResultSet: _factoriesAny.createResultSet
};
exports.ResultSetDependencies = ResultSetDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RangeDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const RangeDependencies = {
  createRangeClass: _factoriesAny.createRangeClass
};
exports.RangeDependencies = RangeDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesClone.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cloneDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createClone: _factoriesAny.createClone
};
exports.cloneDependencies = cloneDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIntegerDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isIntegerDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsInteger: _factoriesAny.createIsInteger
};
exports.isIntegerDependencies = isIntegerDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNegativeDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isNegativeDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsNegative: _factoriesAny.createIsNegative
};
exports.isNegativeDependencies = isNegativeDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumericDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isNumericDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsNumeric: _factoriesAny.createIsNumeric
};
exports.isNumericDependencies = isNumericDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHasNumericValue.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasNumericValueDependencies = void 0;

var _dependenciesIsNumeric = require("./dependenciesIsNumeric.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const hasNumericValueDependencies = {
  isNumericDependencies: _dependenciesIsNumeric.isNumericDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createHasNumericValue: _factoriesAny.createHasNumericValue
};
exports.hasNumericValueDependencies = hasNumericValueDependencies;
},{"./dependenciesIsNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPositive.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPositiveDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isPositiveDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsPositive: _factoriesAny.createIsPositive
};
exports.isPositiveDependencies = isPositiveDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isZeroDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isZeroDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsZero: _factoriesAny.createIsZero
};
exports.isZeroDependencies = isZeroDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNaN.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNaNDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isNaNDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsNaN: _factoriesAny.createIsNaN
};
exports.isNaNDependencies = isNaNDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTypeOf.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeOfDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const typeOfDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createTypeOf: _factoriesAny.createTypeOf
};
exports.typeOfDependencies = typeOfDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeprecatedTypeof.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeofDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const typeofDependencies = {
  createDeprecatedTypeof: _factoriesAny.createDeprecatedTypeof
};
exports.typeofDependencies = typeofDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalScalarDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const equalScalarDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createEqualScalar: _factoriesAny.createEqualScalar
};
exports.equalScalarDependencies = equalScalarDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SparseMatrixDependencies = void 0;

var _dependenciesMatrixClass = require("./dependenciesMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const SparseMatrixDependencies = {
  MatrixDependencies: _dependenciesMatrixClass.MatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSparseMatrixClass: _factoriesAny.createSparseMatrixClass
};
exports.SparseMatrixDependencies = SparseMatrixDependencies;
},{"./dependenciesMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumber.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const numberDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createNumber: _factoriesAny.createNumber
};
exports.numberDependencies = numberDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesString.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const stringDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createString: _factoriesAny.createString
};
exports.stringDependencies = stringDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBoolean.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.booleanDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const booleanDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBoolean: _factoriesAny.createBoolean
};
exports.booleanDependencies = booleanDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bignumberDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bignumberDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBignumber: _factoriesAny.createBignumber
};
exports.bignumberDependencies = bignumberDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplex.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.complexDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const complexDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createComplex: _factoriesAny.createComplex
};
exports.complexDependencies = complexDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fractionDependencies = void 0;

var _dependenciesFractionClass = require("./dependenciesFractionClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const fractionDependencies = {
  FractionDependencies: _dependenciesFractionClass.FractionDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFraction: _factoriesAny.createFraction
};
exports.fractionDependencies = fractionDependencies;
},{"./dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matrixDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrixClass = require("./dependenciesMatrixClass.generated");

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const matrixDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  MatrixDependencies: _dependenciesMatrixClass.MatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMatrix: _factoriesAny.createMatrix
};
exports.matrixDependencies = matrixDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrixClass.generated.js","./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSplitUnit.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitUnitDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const splitUnitDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSplitUnit: _factoriesAny.createSplitUnit
};
exports.splitUnitDependencies = splitUnitDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unaryMinusDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const unaryMinusDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createUnaryMinus: _factoriesAny.createUnaryMinus
};
exports.unaryMinusDependencies = unaryMinusDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryPlus.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unaryPlusDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const unaryPlusDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createUnaryPlus: _factoriesAny.createUnaryPlus
};
exports.unaryPlusDependencies = unaryPlusDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.absDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const absDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAbs: _factoriesAny.createAbs
};
exports.absDependencies = absDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesApply.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyDependencies = void 0;

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const applyDependencies = {
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createApply: _factoriesAny.createApply
};
exports.applyDependencies = applyDependencies;
},{"./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addScalarDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const addScalarDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAddScalar: _factoriesAny.createAddScalar
};
exports.addScalarDependencies = addScalarDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCbrt.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cbrtDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesFractionClass = require("./dependenciesFractionClass.generated");

var _dependenciesIsNegative = require("./dependenciesIsNegative.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cbrtDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  FractionDependencies: _dependenciesFractionClass.FractionDependencies,
  isNegativeDependencies: _dependenciesIsNegative.isNegativeDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  createCbrt: _factoriesAny.createCbrt
};
exports.cbrtDependencies = cbrtDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","./dependenciesIsNegative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zerosDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const zerosDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createZeros: _factoriesAny.createZeros
};
exports.zerosDependencies = zerosDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRound.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.roundDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesZeros = require("./dependenciesZeros.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const roundDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  zerosDependencies: _dependenciesZeros.zerosDependencies,
  createRound: _factoriesAny.createRound
};
exports.roundDependencies = roundDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCeil.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ceilDependencies = void 0;

var _dependenciesRound = require("./dependenciesRound.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ceilDependencies = {
  roundDependencies: _dependenciesRound.roundDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCeil: _factoriesAny.createCeil
};
exports.ceilDependencies = ceilDependencies;
},{"./dependenciesRound.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRound.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCube.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubeDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cubeDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCube: _factoriesAny.createCube
};
exports.cubeDependencies = cubeDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesExp.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const expDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createExp: _factoriesAny.createExp
};
exports.expDependencies = expDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesExpm1.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expm1Dependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const expm1Dependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createExpm1: _factoriesAny.createExpm1
};
exports.expm1Dependencies = expm1Dependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFloor.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floorDependencies = void 0;

var _dependenciesRound = require("./dependenciesRound.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const floorDependencies = {
  roundDependencies: _dependenciesRound.roundDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFloor: _factoriesAny.createFloor
};
exports.floorDependencies = floorDependencies;
},{"./dependenciesRound.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRound.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFix.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesCeil = require("./dependenciesCeil.generated");

var _dependenciesFloor = require("./dependenciesFloor.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const fixDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  ceilDependencies: _dependenciesCeil.ceilDependencies,
  floorDependencies: _dependenciesFloor.floorDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFix: _factoriesAny.createFix
};
exports.fixDependencies = fixDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesCeil.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCeil.generated.js","./dependenciesFloor.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFloor.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGcd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gcdDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const gcdDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createGcd: _factoriesAny.createGcd
};
exports.gcdDependencies = gcdDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLcm.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lcmDependencies = void 0;

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const lcmDependencies = {
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLcm: _factoriesAny.createLcm
};
exports.lcmDependencies = lcmDependencies;
},{"./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog10.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log10Dependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const log10Dependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLog10: _factoriesAny.createLog10
};
exports.log10Dependencies = log10Dependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog2.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log2Dependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const log2Dependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLog2: _factoriesAny.createLog2
};
exports.log2Dependencies = log2Dependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMod.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const modDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMod: _factoriesAny.createMod
};
exports.modDependencies = modDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiplyScalarDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const multiplyScalarDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMultiplyScalar: _factoriesAny.createMultiplyScalar
};
exports.multiplyScalarDependencies = multiplyScalarDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiplyDependencies = void 0;

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const multiplyDependencies = {
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMultiply: _factoriesAny.createMultiply
};
exports.multiplyDependencies = multiplyDependencies;
},{"./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNthRoot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nthRootDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const nthRootDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createNthRoot: _factoriesAny.createNthRoot
};
exports.nthRootDependencies = nthRootDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSign.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesFractionClass = require("./dependenciesFractionClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const signDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  FractionDependencies: _dependenciesFractionClass.FractionDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSign: _factoriesAny.createSign
};
exports.signDependencies = signDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sqrtDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSqrt: _factoriesAny.createSqrt
};
exports.sqrtDependencies = sqrtDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSquare.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squareDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const squareDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSquare: _factoriesAny.createSquare
};
exports.squareDependencies = squareDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subtractDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const subtractDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  createSubtract: _factoriesAny.createSubtract
};
exports.subtractDependencies = subtractDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesXgcd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xgcdDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const xgcdDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createXgcd: _factoriesAny.createXgcd
};
exports.xgcdDependencies = xgcdDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotMultiply.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotMultiplyDependencies = void 0;

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const dotMultiplyDependencies = {
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDotMultiply: _factoriesAny.createDotMultiply
};
exports.dotMultiplyDependencies = dotMultiplyDependencies;
},{"./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitAnd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitAndDependencies = void 0;

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bitAndDependencies = {
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBitAnd: _factoriesAny.createBitAnd
};
exports.bitAndDependencies = bitAndDependencies;
},{"./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitNot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitNotDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bitNotDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBitNot: _factoriesAny.createBitNot
};
exports.bitNotDependencies = bitNotDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitOr.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitOrDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bitOrDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBitOr: _factoriesAny.createBitOr
};
exports.bitOrDependencies = bitOrDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitXor.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitXorDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bitXorDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBitXor: _factoriesAny.createBitXor
};
exports.bitXorDependencies = bitXorDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesArg.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const argDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createArg: _factoriesAny.createArg
};
exports.argDependencies = argDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConj.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conjDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const conjDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createConj: _factoriesAny.createConj
};
exports.conjDependencies = conjDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIm.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.imDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const imDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIm: _factoriesAny.createIm
};
exports.imDependencies = imDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRe.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const reDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRe: _factoriesAny.createRe
};
exports.reDependencies = reDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.notDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const notDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createNot: _factoriesAny.createNot
};
exports.notDependencies = notDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOr.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const orDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createOr: _factoriesAny.createOr
};
exports.orDependencies = orDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesXor.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xorDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const xorDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createXor: _factoriesAny.createXor
};
exports.xorDependencies = xorDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConcat.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatDependencies = void 0;

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const concatDependencies = {
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createConcat: _factoriesAny.createConcat
};
exports.concatDependencies = concatDependencies;
},{"./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.smallerDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const smallerDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSmaller: _factoriesAny.createSmaller
};
exports.smallerDependencies = smallerDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImmutableDenseMatrixDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ImmutableDenseMatrixDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  createImmutableDenseMatrixClass: _factoriesAny.createImmutableDenseMatrixClass
};
exports.ImmutableDenseMatrixDependencies = ImmutableDenseMatrixDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexDependencies = void 0;

var _dependenciesImmutableDenseMatrixClass = require("./dependenciesImmutableDenseMatrixClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const IndexDependencies = {
  ImmutableDenseMatrixDependencies: _dependenciesImmutableDenseMatrixClass.ImmutableDenseMatrixDependencies,
  createIndexClass: _factoriesAny.createIndexClass
};
exports.IndexDependencies = IndexDependencies;
},{"./dependenciesImmutableDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.largerDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const largerDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLarger: _factoriesAny.createLarger
};
exports.largerDependencies = largerDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLargerEq.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.largerEqDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const largerEqDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLargerEq: _factoriesAny.createLargerEq
};
exports.largerEqDependencies = largerEqDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmallerEq.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.smallerEqDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const smallerEqDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSmallerEq: _factoriesAny.createSmallerEq
};
exports.smallerEqDependencies = smallerEqDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRange.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesLargerEq = require("./dependenciesLargerEq.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesSmallerEq = require("./dependenciesSmallerEq.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rangeDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  largerEqDependencies: _dependenciesLargerEq.largerEqDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  smallerEqDependencies: _dependenciesSmallerEq.smallerEqDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRange: _factoriesAny.createRange
};
exports.rangeDependencies = rangeDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesLargerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLargerEq.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesSmallerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmallerEq.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesColumn.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.columnDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesRange = require("./dependenciesRange.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const columnDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  rangeDependencies: _dependenciesRange.rangeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createColumn: _factoriesAny.createColumn
};
exports.columnDependencies = columnDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesRange.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRange.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCross.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.crossDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const crossDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCross: _factoriesAny.createCross
};
exports.crossDependencies = crossDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDiag.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diagDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const diagDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDiag: _factoriesAny.createDiag
};
exports.diagDependencies = diagDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEye.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eyeDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const eyeDependencies = {
  createEye: _factoriesAny.createEye
};
exports.eyeDependencies = eyeDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFilter.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const filterDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFilter: _factoriesAny.createFilter
};
exports.filterDependencies = filterDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFlatten.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const flattenDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFlatten: _factoriesAny.createFlatten
};
exports.flattenDependencies = flattenDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesForEach.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEachDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const forEachDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createForEach: _factoriesAny.createForEach
};
exports.forEachDependencies = forEachDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMatrixDataTypeDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const getMatrixDataTypeDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createGetMatrixDataType: _factoriesAny.createGetMatrixDataType
};
exports.getMatrixDataTypeDependencies = getMatrixDataTypeDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identityDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const identityDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIdentity: _factoriesAny.createIdentity
};
exports.identityDependencies = identityDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesKron.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kronDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const kronDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createKron: _factoriesAny.createKron
};
exports.kronDependencies = kronDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMap.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const mapDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMap: _factoriesAny.createMap
};
exports.mapDependencies = mapDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOnes.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onesDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const onesDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createOnes: _factoriesAny.createOnes
};
exports.onesDependencies = onesDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesReshape.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reshapeDependencies = void 0;

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const reshapeDependencies = {
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createReshape: _factoriesAny.createReshape
};
exports.reshapeDependencies = reshapeDependencies;
},{"./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesResize.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const resizeDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  createResize: _factoriesAny.createResize
};
exports.resizeDependencies = resizeDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRow.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rowDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesRange = require("./dependenciesRange.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rowDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  rangeDependencies: _dependenciesRange.rangeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRow: _factoriesAny.createRow
};
exports.rowDependencies = rowDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesRange.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRange.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sizeDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSize: _factoriesAny.createSize
};
exports.sizeDependencies = sizeDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqueeze.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squeezeDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const squeezeDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSqueeze: _factoriesAny.createSqueeze
};
exports.squeezeDependencies = squeezeDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subsetDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const subsetDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSubset: _factoriesAny.createSubset
};
exports.subsetDependencies = subsetDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTranspose.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transposeDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const transposeDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createTranspose: _factoriesAny.createTranspose
};
exports.transposeDependencies = transposeDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCtranspose.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ctransposeDependencies = void 0;

var _dependenciesConj = require("./dependenciesConj.generated");

var _dependenciesTranspose = require("./dependenciesTranspose.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ctransposeDependencies = {
  conjDependencies: _dependenciesConj.conjDependencies,
  transposeDependencies: _dependenciesTranspose.transposeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCtranspose: _factoriesAny.createCtranspose
};
exports.ctransposeDependencies = ctransposeDependencies;
},{"./dependenciesConj.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConj.generated.js","./dependenciesTranspose.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTranspose.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesErf.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erfDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const erfDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createErf: _factoriesAny.createErf
};
exports.erfDependencies = erfDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modeDependencies = void 0;

var _dependenciesIsNaN = require("./dependenciesIsNaN.generated");

var _dependenciesIsNumeric = require("./dependenciesIsNumeric.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const modeDependencies = {
  isNaNDependencies: _dependenciesIsNaN.isNaNDependencies,
  isNumericDependencies: _dependenciesIsNumeric.isNumericDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMode: _factoriesAny.createMode
};
exports.modeDependencies = modeDependencies;
},{"./dependenciesIsNaN.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNaN.generated.js","./dependenciesIsNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesProd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prodDependencies = void 0;

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const prodDependencies = {
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createProd: _factoriesAny.createProd
};
exports.prodDependencies = prodDependencies;
},{"./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFormat.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const formatDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFormat: _factoriesAny.createFormat
};
exports.formatDependencies = formatDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPrint.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const printDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createPrint: _factoriesAny.createPrint
};
exports.printDependencies = printDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTo.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const toDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createTo: _factoriesAny.createTo
};
exports.toDependencies = toDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPrime.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPrimeDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const isPrimeDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIsPrime: _factoriesAny.createIsPrime
};
exports.isPrimeDependencies = isPrimeDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumeric.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numericDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesFraction = require("./dependenciesFraction.generated");

var _dependenciesNumber = require("./dependenciesNumber.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const numericDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  fractionDependencies: _dependenciesFraction.fractionDependencies,
  numberDependencies: _dependenciesNumber.numberDependencies,
  createNumeric: _factoriesAny.createNumeric
};
exports.numericDependencies = numericDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesNumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumber.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideScalarDependencies = void 0;

var _dependenciesNumeric = require("./dependenciesNumeric.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const divideScalarDependencies = {
  numericDependencies: _dependenciesNumeric.numericDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDivideScalar: _factoriesAny.createDivideScalar
};
exports.divideScalarDependencies = divideScalarDependencies;
},{"./dependenciesNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumeric.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.powDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesFraction = require("./dependenciesFraction.generated");

var _dependenciesIdentity = require("./dependenciesIdentity.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesNumber = require("./dependenciesNumber.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const powDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  fractionDependencies: _dependenciesFraction.fractionDependencies,
  identityDependencies: _dependenciesIdentity.identityDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  numberDependencies: _dependenciesNumber.numberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createPow: _factoriesAny.createPow
};
exports.powDependencies = powDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesIdentity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesNumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumber.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const logDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLog: _factoriesAny.createLog
};
exports.logDependencies = logDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog1p.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log1pDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesLog = require("./dependenciesLog.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const log1pDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  logDependencies: _dependenciesLog.logDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLog1p: _factoriesAny.createLog1p
};
exports.log1pDependencies = log1pDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesLog.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNthRoots.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nthRootsDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const nthRootsDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createNthRoots: _factoriesAny.createNthRoots
};
exports.nthRootsDependencies = nthRootsDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotPow.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotPowDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const dotPowDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDotPow: _factoriesAny.createDotPow
};
exports.dotPowDependencies = dotPowDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotDivide.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotDivideDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const dotDivideDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDotDivide: _factoriesAny.createDotDivide
};
exports.dotDivideDependencies = dotDivideDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLsolve.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lsolveDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const lsolveDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createLsolve: _factoriesAny.createLsolve
};
exports.lsolveDependencies = lsolveDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUsolve.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usolveDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const usolveDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createUsolve: _factoriesAny.createUsolve
};
exports.usolveDependencies = usolveDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLeftShift.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.leftShiftDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesZeros = require("./dependenciesZeros.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const leftShiftDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  zerosDependencies: _dependenciesZeros.zerosDependencies,
  createLeftShift: _factoriesAny.createLeftShift
};
exports.leftShiftDependencies = leftShiftDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRightArithShift.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rightArithShiftDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesZeros = require("./dependenciesZeros.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rightArithShiftDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  zerosDependencies: _dependenciesZeros.zerosDependencies,
  createRightArithShift: _factoriesAny.createRightArithShift
};
exports.rightArithShiftDependencies = rightArithShiftDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRightLogShift.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rightLogShiftDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesZeros = require("./dependenciesZeros.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rightLogShiftDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  zerosDependencies: _dependenciesZeros.zerosDependencies,
  createRightLogShift: _factoriesAny.createRightLogShift
};
exports.rightLogShiftDependencies = rightLogShiftDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAnd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.andDependencies = void 0;

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesNot = require("./dependenciesNot.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesZeros = require("./dependenciesZeros.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const andDependencies = {
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  notDependencies: _dependenciesNot.notDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  zerosDependencies: _dependenciesZeros.zerosDependencies,
  createAnd: _factoriesAny.createAnd
};
exports.andDependencies = andDependencies;
},{"./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesNot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNot.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesFractionClass = require("./dependenciesFractionClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const compareDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  FractionDependencies: _dependenciesFractionClass.FractionDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCompare: _factoriesAny.createCompare
};
exports.compareDependencies = compareDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareNaturalDependencies = void 0;

var _dependenciesCompare = require("./dependenciesCompare.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const compareNaturalDependencies = {
  compareDependencies: _dependenciesCompare.compareDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCompareNatural: _factoriesAny.createCompareNatural
};
exports.compareNaturalDependencies = compareNaturalDependencies;
},{"./dependenciesCompare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareText.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareTextDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const compareTextDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCompareText: _factoriesAny.createCompareText
};
exports.compareTextDependencies = compareTextDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const equalDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createEqual: _factoriesAny.createEqual
};
exports.equalDependencies = equalDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualText.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalTextDependencies = void 0;

var _dependenciesCompareText = require("./dependenciesCompareText.generated");

var _dependenciesIsZero = require("./dependenciesIsZero.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const equalTextDependencies = {
  compareTextDependencies: _dependenciesCompareText.compareTextDependencies,
  isZeroDependencies: _dependenciesIsZero.isZeroDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createEqualText: _factoriesAny.createEqualText
};
exports.equalTextDependencies = equalTextDependencies;
},{"./dependenciesCompareText.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareText.generated.js","./dependenciesIsZero.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeepEqual.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepEqualDependencies = void 0;

var _dependenciesEqual = require("./dependenciesEqual.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const deepEqualDependencies = {
  equalDependencies: _dependenciesEqual.equalDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDeepEqual: _factoriesAny.createDeepEqual
};
exports.deepEqualDependencies = deepEqualDependencies;
},{"./dependenciesEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnequal.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unequalDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const unequalDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createUnequal: _factoriesAny.createUnequal
};
exports.unequalDependencies = unequalDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPartitionSelect.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partitionSelectDependencies = void 0;

var _dependenciesCompare = require("./dependenciesCompare.generated");

var _dependenciesIsNaN = require("./dependenciesIsNaN.generated");

var _dependenciesIsNumeric = require("./dependenciesIsNumeric.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const partitionSelectDependencies = {
  compareDependencies: _dependenciesCompare.compareDependencies,
  isNaNDependencies: _dependenciesIsNaN.isNaNDependencies,
  isNumericDependencies: _dependenciesIsNumeric.isNumericDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createPartitionSelect: _factoriesAny.createPartitionSelect
};
exports.partitionSelectDependencies = partitionSelectDependencies;
},{"./dependenciesCompare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js","./dependenciesIsNaN.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNaN.generated.js","./dependenciesIsNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSort.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortDependencies = void 0;

var _dependenciesCompare = require("./dependenciesCompare.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sortDependencies = {
  compareDependencies: _dependenciesCompare.compareDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSort: _factoriesAny.createSort
};
exports.sortDependencies = sortDependencies;
},{"./dependenciesCompare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMax.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxDependencies = void 0;

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const maxDependencies = {
  largerDependencies: _dependenciesLarger.largerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMax: _factoriesAny.createMax
};
exports.maxDependencies = maxDependencies;
},{"./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMin.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minDependencies = void 0;

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const minDependencies = {
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMin: _factoriesAny.createMin
};
exports.minDependencies = minDependencies;
},{"./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FibonacciHeapDependencies = void 0;

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const FibonacciHeapDependencies = {
  largerDependencies: _dependenciesLarger.largerDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  createFibonacciHeapClass: _factoriesAny.createFibonacciHeapClass
};
exports.FibonacciHeapDependencies = FibonacciHeapDependencies;
},{"./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSpaClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpaDependencies = void 0;

var _dependenciesFibonacciHeapClass = require("./dependenciesFibonacciHeapClass.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const SpaDependencies = {
  FibonacciHeapDependencies: _dependenciesFibonacciHeapClass.FibonacciHeapDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  createSpaClass: _factoriesAny.createSpaClass
};
exports.SpaDependencies = SpaDependencies;
},{"./dependenciesFibonacciHeapClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnitDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesFractionClass = require("./dependenciesFractionClass.generated");

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqual = require("./dependenciesEqual.generated");

var _dependenciesFix = require("./dependenciesFix.generated");

var _dependenciesFormat = require("./dependenciesFormat.generated");

var _dependenciesIsNumeric = require("./dependenciesIsNumeric.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesNumber = require("./dependenciesNumber.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesRound = require("./dependenciesRound.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const UnitDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  FractionDependencies: _dependenciesFractionClass.FractionDependencies,
  absDependencies: _dependenciesAbs.absDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalDependencies: _dependenciesEqual.equalDependencies,
  fixDependencies: _dependenciesFix.fixDependencies,
  formatDependencies: _dependenciesFormat.formatDependencies,
  isNumericDependencies: _dependenciesIsNumeric.isNumericDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  numberDependencies: _dependenciesNumber.numberDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  roundDependencies: _dependenciesRound.roundDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  createUnitClass: _factoriesAny.createUnitClass
};
exports.UnitDependencies = UnitDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js","./dependenciesFix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFix.generated.js","./dependenciesFormat.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFormat.generated.js","./dependenciesIsNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesNumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumber.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesRound.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRound.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitFunction.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unitDependencies = void 0;

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const unitDependencies = {
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createUnitFunction: _factoriesAny.createUnitFunction
};
exports.unitDependencies = unitDependencies;
},{"./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparse.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sparseDependencies = void 0;

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sparseDependencies = {
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSparse: _factoriesAny.createSparse
};
exports.sparseDependencies = sparseDependencies;
},{"./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCreateUnit.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnitDependencies = void 0;

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const createUnitDependencies = {
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCreateUnit: _factoriesAny.createCreateUnit
};
exports.createUnitDependencies = createUnitDependencies;
},{"./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcos.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acosDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const acosDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAcos: _factoriesAny.createAcos
};
exports.acosDependencies = acosDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcosh.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acoshDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const acoshDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAcosh: _factoriesAny.createAcosh
};
exports.acoshDependencies = acoshDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acotDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const acotDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAcot: _factoriesAny.createAcot
};
exports.acotDependencies = acotDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcoth.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acothDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const acothDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAcoth: _factoriesAny.createAcoth
};
exports.acothDependencies = acothDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcsc.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acscDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const acscDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAcsc: _factoriesAny.createAcsc
};
exports.acscDependencies = acscDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcsch.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acschDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const acschDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAcsch: _factoriesAny.createAcsch
};
exports.acschDependencies = acschDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsec.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asecDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const asecDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAsec: _factoriesAny.createAsec
};
exports.asecDependencies = asecDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsech.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asechDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const asechDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAsech: _factoriesAny.createAsech
};
exports.asechDependencies = asechDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsin.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const asinDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAsin: _factoriesAny.createAsin
};
exports.asinDependencies = asinDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsinh.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asinhDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const asinhDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAsinh: _factoriesAny.createAsinh
};
exports.asinhDependencies = asinhDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtan.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const atanDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAtan: _factoriesAny.createAtan
};
exports.atanDependencies = atanDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtan2.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atan2Dependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const atan2Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAtan2: _factoriesAny.createAtan2
};
exports.atan2Dependencies = atan2Dependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtanh.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atanhDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const atanhDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAtanh: _factoriesAny.createAtanh
};
exports.atanhDependencies = atanhDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCos.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cosDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cosDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCos: _factoriesAny.createCos
};
exports.cosDependencies = cosDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCosh.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coshDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const coshDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCosh: _factoriesAny.createCosh
};
exports.coshDependencies = coshDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cotDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cotDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCot: _factoriesAny.createCot
};
exports.cotDependencies = cotDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCoth.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cothDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cothDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCoth: _factoriesAny.createCoth
};
exports.cothDependencies = cothDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCsc.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cscDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cscDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCsc: _factoriesAny.createCsc
};
exports.cscDependencies = cscDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCsch.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cschDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const cschDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCsch: _factoriesAny.createCsch
};
exports.cschDependencies = cschDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSec.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const secDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSec: _factoriesAny.createSec
};
exports.secDependencies = secDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSech.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sechDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sechDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSech: _factoriesAny.createSech
};
exports.sechDependencies = sechDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSin.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sinDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSin: _factoriesAny.createSin
};
exports.sinDependencies = sinDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSinh.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinhDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sinhDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSinh: _factoriesAny.createSinh
};
exports.sinhDependencies = sinhDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTan.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const tanDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createTan: _factoriesAny.createTan
};
exports.tanDependencies = tanDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTanh.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tanhDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const tanhDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createTanh: _factoriesAny.createTanh
};
exports.tanhDependencies = tanhDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetCartesian.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setCartesianDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setCartesianDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetCartesian: _factoriesAny.createSetCartesian
};
exports.setCartesianDependencies = setCartesianDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetDifference.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDifferenceDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setDifferenceDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetDifference: _factoriesAny.createSetDifference
};
exports.setDifferenceDependencies = setDifferenceDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetDistinct.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDistinctDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setDistinctDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetDistinct: _factoriesAny.createSetDistinct
};
exports.setDistinctDependencies = setDistinctDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetIntersect.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setIntersectDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setIntersectDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetIntersect: _factoriesAny.createSetIntersect
};
exports.setIntersectDependencies = setIntersectDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetIsSubset.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setIsSubsetDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setIsSubsetDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetIsSubset: _factoriesAny.createSetIsSubset
};
exports.setIsSubsetDependencies = setIsSubsetDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setMultiplicityDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setMultiplicityDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetMultiplicity: _factoriesAny.createSetMultiplicity
};
exports.setMultiplicityDependencies = setMultiplicityDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetPowerset.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPowersetDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setPowersetDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetPowerset: _factoriesAny.createSetPowerset
};
exports.setPowersetDependencies = setPowersetDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetSize.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSizeDependencies = void 0;

var _dependenciesCompareNatural = require("./dependenciesCompareNatural.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setSizeDependencies = {
  compareNaturalDependencies: _dependenciesCompareNatural.compareNaturalDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetSize: _factoriesAny.createSetSize
};
exports.setSizeDependencies = setSizeDependencies;
},{"./dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetSymDifference.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSymDifferenceDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesConcat = require("./dependenciesConcat.generated");

var _dependenciesSetDifference = require("./dependenciesSetDifference.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setSymDifferenceDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  concatDependencies: _dependenciesConcat.concatDependencies,
  setDifferenceDependencies: _dependenciesSetDifference.setDifferenceDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetSymDifference: _factoriesAny.createSetSymDifference
};
exports.setSymDifferenceDependencies = setSymDifferenceDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesConcat.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConcat.generated.js","./dependenciesSetDifference.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetDifference.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetUnion.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setUnionDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesConcat = require("./dependenciesConcat.generated");

var _dependenciesSetIntersect = require("./dependenciesSetIntersect.generated");

var _dependenciesSetSymDifference = require("./dependenciesSetSymDifference.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const setUnionDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  concatDependencies: _dependenciesConcat.concatDependencies,
  setIntersectDependencies: _dependenciesSetIntersect.setIntersectDependencies,
  setSymDifferenceDependencies: _dependenciesSetSymDifference.setSymDifferenceDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSetUnion: _factoriesAny.createSetUnion
};
exports.setUnionDependencies = setUnionDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesConcat.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConcat.generated.js","./dependenciesSetIntersect.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetIntersect.generated.js","./dependenciesSetSymDifference.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetSymDifference.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const addDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createAdd: _factoriesAny.createAdd
};
exports.addDependencies = addDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHypot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hypotDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesIsPositive = require("./dependenciesIsPositive.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const hypotDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  isPositiveDependencies: _dependenciesIsPositive.isPositiveDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createHypot: _factoriesAny.createHypot
};
exports.hypotDependencies = hypotDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesIsPositive.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPositive.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNorm.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesConj = require("./dependenciesConj.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const normDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  conjDependencies: _dependenciesConj.conjDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createNorm: _factoriesAny.createNorm
};
exports.normDependencies = normDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesConj.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConj.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDot.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dotDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const dotDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDot: _factoriesAny.createDot
};
exports.dotDependencies = dotDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTrace.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traceDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const traceDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createTrace: _factoriesAny.createTrace
};
exports.traceDependencies = traceDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndex.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const indexDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIndex: _factoriesAny.createIndex
};
exports.indexDependencies = indexDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const NodeDependencies = {
  createNode: _factoriesAny.createNode
};
exports.NodeDependencies = NodeDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAccessorNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccessorNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const AccessorNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  createAccessorNode: _factoriesAny.createAccessorNode
};
exports.AccessorNodeDependencies = AccessorNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesArrayNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ArrayNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createArrayNode: _factoriesAny.createArrayNode
};
exports.ArrayNodeDependencies = ArrayNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAssignmentNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AssignmentNodeDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesNode = require("./dependenciesNode.generated");

var _dependenciesSubset = require("./dependenciesSubset.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const AssignmentNodeDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  NodeDependencies: _dependenciesNode.NodeDependencies,
  subsetDependencies: _dependenciesSubset.subsetDependencies,
  createAssignmentNode: _factoriesAny.createAssignmentNode
};
exports.AssignmentNodeDependencies = AssignmentNodeDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBlockNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _dependenciesResultSet = require("./dependenciesResultSet.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const BlockNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  ResultSetDependencies: _dependenciesResultSet.ResultSetDependencies,
  createBlockNode: _factoriesAny.createBlockNode
};
exports.BlockNodeDependencies = BlockNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesResultSet.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesResultSet.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConditionalNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConditionalNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ConditionalNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createConditionalNode: _factoriesAny.createConditionalNode
};
exports.ConditionalNodeDependencies = ConditionalNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConstantNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConstantNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ConstantNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createConstantNode: _factoriesAny.createConstantNode
};
exports.ConstantNodeDependencies = ConstantNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionAssignmentNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const FunctionAssignmentNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFunctionAssignmentNode: _factoriesAny.createFunctionAssignmentNode
};
exports.FunctionAssignmentNodeDependencies = FunctionAssignmentNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexNodeDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesNode = require("./dependenciesNode.generated");

var _dependenciesRangeClass = require("./dependenciesRangeClass.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const IndexNodeDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  NodeDependencies: _dependenciesNode.NodeDependencies,
  RangeDependencies: _dependenciesRangeClass.RangeDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  createIndexNode: _factoriesAny.createIndexNode
};
exports.IndexNodeDependencies = IndexNodeDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesRangeClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeClass.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesObjectNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ObjectNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createObjectNode: _factoriesAny.createObjectNode
};
exports.ObjectNodeDependencies = ObjectNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOperatorNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OperatorNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const OperatorNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createOperatorNode: _factoriesAny.createOperatorNode
};
exports.OperatorNodeDependencies = OperatorNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParenthesisNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParenthesisNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ParenthesisNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createParenthesisNode: _factoriesAny.createParenthesisNode
};
exports.ParenthesisNodeDependencies = ParenthesisNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RangeNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const RangeNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createRangeNode: _factoriesAny.createRangeNode
};
exports.RangeNodeDependencies = RangeNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRelationalNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelationalNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const RelationalNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createRelationalNode: _factoriesAny.createRelationalNode
};
exports.RelationalNodeDependencies = RelationalNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SymbolNodeDependencies = void 0;

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _dependenciesNode = require("./dependenciesNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const SymbolNodeDependencies = {
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  NodeDependencies: _dependenciesNode.NodeDependencies,
  createSymbolNode: _factoriesAny.createSymbolNode
};
exports.SymbolNodeDependencies = SymbolNodeDependencies;
},{"./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionNode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionNodeDependencies = void 0;

var _dependenciesNode = require("./dependenciesNode.generated");

var _dependenciesSymbolNode = require("./dependenciesSymbolNode.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const FunctionNodeDependencies = {
  NodeDependencies: _dependenciesNode.NodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNode.SymbolNodeDependencies,
  createFunctionNode: _factoriesAny.createFunctionNode
};
exports.FunctionNodeDependencies = FunctionNodeDependencies;
},{"./dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesSymbolNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseDependencies = void 0;

var _dependenciesAccessorNode = require("./dependenciesAccessorNode.generated");

var _dependenciesArrayNode = require("./dependenciesArrayNode.generated");

var _dependenciesAssignmentNode = require("./dependenciesAssignmentNode.generated");

var _dependenciesBlockNode = require("./dependenciesBlockNode.generated");

var _dependenciesConditionalNode = require("./dependenciesConditionalNode.generated");

var _dependenciesConstantNode = require("./dependenciesConstantNode.generated");

var _dependenciesFunctionAssignmentNode = require("./dependenciesFunctionAssignmentNode.generated");

var _dependenciesFunctionNode = require("./dependenciesFunctionNode.generated");

var _dependenciesIndexNode = require("./dependenciesIndexNode.generated");

var _dependenciesObjectNode = require("./dependenciesObjectNode.generated");

var _dependenciesOperatorNode = require("./dependenciesOperatorNode.generated");

var _dependenciesParenthesisNode = require("./dependenciesParenthesisNode.generated");

var _dependenciesRangeNode = require("./dependenciesRangeNode.generated");

var _dependenciesRelationalNode = require("./dependenciesRelationalNode.generated");

var _dependenciesSymbolNode = require("./dependenciesSymbolNode.generated");

var _dependenciesNumeric = require("./dependenciesNumeric.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const parseDependencies = {
  AccessorNodeDependencies: _dependenciesAccessorNode.AccessorNodeDependencies,
  ArrayNodeDependencies: _dependenciesArrayNode.ArrayNodeDependencies,
  AssignmentNodeDependencies: _dependenciesAssignmentNode.AssignmentNodeDependencies,
  BlockNodeDependencies: _dependenciesBlockNode.BlockNodeDependencies,
  ConditionalNodeDependencies: _dependenciesConditionalNode.ConditionalNodeDependencies,
  ConstantNodeDependencies: _dependenciesConstantNode.ConstantNodeDependencies,
  FunctionAssignmentNodeDependencies: _dependenciesFunctionAssignmentNode.FunctionAssignmentNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNode.FunctionNodeDependencies,
  IndexNodeDependencies: _dependenciesIndexNode.IndexNodeDependencies,
  ObjectNodeDependencies: _dependenciesObjectNode.ObjectNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNode.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNode.ParenthesisNodeDependencies,
  RangeNodeDependencies: _dependenciesRangeNode.RangeNodeDependencies,
  RelationalNodeDependencies: _dependenciesRelationalNode.RelationalNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNode.SymbolNodeDependencies,
  numericDependencies: _dependenciesNumeric.numericDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createParse: _factoriesAny.createParse
};
exports.parseDependencies = parseDependencies;
},{"./dependenciesAccessorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAccessorNode.generated.js","./dependenciesArrayNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesArrayNode.generated.js","./dependenciesAssignmentNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAssignmentNode.generated.js","./dependenciesBlockNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBlockNode.generated.js","./dependenciesConditionalNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConditionalNode.generated.js","./dependenciesConstantNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConstantNode.generated.js","./dependenciesFunctionAssignmentNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js","./dependenciesFunctionNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionNode.generated.js","./dependenciesIndexNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexNode.generated.js","./dependenciesObjectNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesObjectNode.generated.js","./dependenciesOperatorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOperatorNode.generated.js","./dependenciesParenthesisNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParenthesisNode.generated.js","./dependenciesRangeNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeNode.generated.js","./dependenciesRelationalNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRelationalNode.generated.js","./dependenciesSymbolNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js","./dependenciesNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumeric.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompile.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileDependencies = void 0;

var _dependenciesParse = require("./dependenciesParse.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const compileDependencies = {
  parseDependencies: _dependenciesParse.parseDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCompile: _factoriesAny.createCompile
};
exports.compileDependencies = compileDependencies;
},{"./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEvaluate.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evaluateDependencies = void 0;

var _dependenciesParse = require("./dependenciesParse.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const evaluateDependencies = {
  parseDependencies: _dependenciesParse.parseDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createEvaluate: _factoriesAny.createEvaluate
};
exports.evaluateDependencies = evaluateDependencies;
},{"./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeprecatedEval.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evalDependencies = void 0;

var _dependenciesEvaluate = require("./dependenciesEvaluate.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const evalDependencies = {
  evaluateDependencies: _dependenciesEvaluate.evaluateDependencies,
  createDeprecatedEval: _factoriesAny.createDeprecatedEval
};
exports.evalDependencies = evalDependencies;
},{"./dependenciesEvaluate.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEvaluate.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParserClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParserDependencies = void 0;

var _dependenciesParse = require("./dependenciesParse.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ParserDependencies = {
  parseDependencies: _dependenciesParse.parseDependencies,
  createParserClass: _factoriesAny.createParserClass
};
exports.ParserDependencies = ParserDependencies;
},{"./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParser.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parserDependencies = void 0;

var _dependenciesParserClass = require("./dependenciesParserClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const parserDependencies = {
  ParserDependencies: _dependenciesParserClass.ParserDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createParser: _factoriesAny.createParser
};
exports.parserDependencies = parserDependencies;
},{"./dependenciesParserClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParserClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLup.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lupDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesSpaClass = require("./dependenciesSpaClass.generated");

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const lupDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  SpaDependencies: _dependenciesSpaClass.SpaDependencies,
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  absDependencies: _dependenciesAbs.absDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  createLup: _factoriesAny.createLup
};
exports.lupDependencies = lupDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesSpaClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSpaClass.generated.js","./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesQr.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qrDependencies = void 0;

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesConj = require("./dependenciesConj.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesIdentity = require("./dependenciesIdentity.generated");

var _dependenciesIsZero = require("./dependenciesIsZero.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSign = require("./dependenciesSign.generated");

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _dependenciesUnequal = require("./dependenciesUnequal.generated");

var _dependenciesZeros = require("./dependenciesZeros.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const qrDependencies = {
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  conjDependencies: _dependenciesConj.conjDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  identityDependencies: _dependenciesIdentity.identityDependencies,
  isZeroDependencies: _dependenciesIsZero.isZeroDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  signDependencies: _dependenciesSign.signDependencies,
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  unequalDependencies: _dependenciesUnequal.unequalDependencies,
  zerosDependencies: _dependenciesZeros.zerosDependencies,
  createQr: _factoriesAny.createQr
};
exports.qrDependencies = qrDependencies;
},{"./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesConj.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConj.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesIdentity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js","./dependenciesIsZero.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSign.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSign.generated.js","./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","./dependenciesUnequal.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnequal.generated.js","./dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSlu.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sluDependencies = void 0;

var _dependenciesSparseMatrixClass = require("./dependenciesSparseMatrixClass.generated");

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesLargerEq = require("./dependenciesLargerEq.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTranspose = require("./dependenciesTranspose.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sluDependencies = {
  SparseMatrixDependencies: _dependenciesSparseMatrixClass.SparseMatrixDependencies,
  absDependencies: _dependenciesAbs.absDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  largerEqDependencies: _dependenciesLargerEq.largerEqDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  transposeDependencies: _dependenciesTranspose.transposeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSlu: _factoriesAny.createSlu
};
exports.sluDependencies = sluDependencies;
},{"./dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesLargerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLargerEq.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTranspose.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTranspose.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLusolve.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lusolveDependencies = void 0;

var _dependenciesDenseMatrixClass = require("./dependenciesDenseMatrixClass.generated");

var _dependenciesLsolve = require("./dependenciesLsolve.generated");

var _dependenciesLup = require("./dependenciesLup.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesSlu = require("./dependenciesSlu.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUsolve = require("./dependenciesUsolve.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const lusolveDependencies = {
  DenseMatrixDependencies: _dependenciesDenseMatrixClass.DenseMatrixDependencies,
  lsolveDependencies: _dependenciesLsolve.lsolveDependencies,
  lupDependencies: _dependenciesLup.lupDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  sluDependencies: _dependenciesSlu.sluDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  usolveDependencies: _dependenciesUsolve.usolveDependencies,
  createLusolve: _factoriesAny.createLusolve
};
exports.lusolveDependencies = lusolveDependencies;
},{"./dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesLsolve.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLsolve.generated.js","./dependenciesLup.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLup.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesSlu.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSlu.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUsolve.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUsolve.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHelpClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HelpDependencies = void 0;

var _dependenciesParse = require("./dependenciesParse.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const HelpDependencies = {
  parseDependencies: _dependenciesParse.parseDependencies,
  createHelpClass: _factoriesAny.createHelpClass
};
exports.HelpDependencies = HelpDependencies;
},{"./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesChainClass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChainDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const ChainDependencies = {
  createChainClass: _factoriesAny.createChainClass
};
exports.ChainDependencies = ChainDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHelp.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpDependencies = void 0;

var _dependenciesHelpClass = require("./dependenciesHelpClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const helpDependencies = {
  HelpDependencies: _dependenciesHelpClass.HelpDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createHelp: _factoriesAny.createHelp
};
exports.helpDependencies = helpDependencies;
},{"./dependenciesHelpClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHelpClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesChain.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chainDependencies = void 0;

var _dependenciesChainClass = require("./dependenciesChainClass.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const chainDependencies = {
  ChainDependencies: _dependenciesChainClass.ChainDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createChain: _factoriesAny.createChain
};
exports.chainDependencies = chainDependencies;
},{"./dependenciesChainClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesChainClass.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDet.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detDependencies = void 0;

var _dependenciesLup = require("./dependenciesLup.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const detDependencies = {
  lupDependencies: _dependenciesLup.lupDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  createDet: _factoriesAny.createDet
};
exports.detDependencies = detDependencies;
},{"./dependenciesLup.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLup.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInv.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesDet = require("./dependenciesDet.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesIdentity = require("./dependenciesIdentity.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const invDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  detDependencies: _dependenciesDet.detDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  identityDependencies: _dependenciesIdentity.identityDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  createInv: _factoriesAny.createInv
};
exports.invDependencies = invDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesDet.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDet.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesIdentity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesExpm.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expmDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesIdentity = require("./dependenciesIdentity.generated");

var _dependenciesInv = require("./dependenciesInv.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const expmDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  identityDependencies: _dependenciesIdentity.identityDependencies,
  invDependencies: _dependenciesInv.invDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createExpm: _factoriesAny.createExpm
};
exports.expmDependencies = expmDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesIdentity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js","./dependenciesInv.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInv.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrtm.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtmDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesIdentity = require("./dependenciesIdentity.generated");

var _dependenciesInv = require("./dependenciesInv.generated");

var _dependenciesMax = require("./dependenciesMax.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSize = require("./dependenciesSize.generated");

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sqrtmDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  identityDependencies: _dependenciesIdentity.identityDependencies,
  invDependencies: _dependenciesInv.invDependencies,
  maxDependencies: _dependenciesMax.maxDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  sizeDependencies: _dependenciesSize.sizeDependencies,
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSqrtm: _factoriesAny.createSqrtm
};
exports.sqrtmDependencies = sqrtmDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesIdentity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js","./dependenciesInv.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInv.generated.js","./dependenciesMax.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMax.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.divideDependencies = void 0;

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesInv = require("./dependenciesInv.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const divideDependencies = {
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  invDependencies: _dependenciesInv.invDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDivide: _factoriesAny.createDivide
};
exports.divideDependencies = divideDependencies;
},{"./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesInv.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInv.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDistance.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distanceDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesUnaryMinus = require("./dependenciesUnaryMinus.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const distanceDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  unaryMinusDependencies: _dependenciesUnaryMinus.unaryMinusDependencies,
  createDistance: _factoriesAny.createDistance
};
exports.distanceDependencies = distanceDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIntersect.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intersectDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesEqualScalar = require("./dependenciesEqualScalar.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const intersectDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  equalScalarDependencies: _dependenciesEqualScalar.equalScalarDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createIntersect: _factoriesAny.createIntersect
};
exports.intersectDependencies = intersectDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSum.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sumDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesFraction = require("./dependenciesFraction.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sumDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  fractionDependencies: _dependenciesFraction.fractionDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSum: _factoriesAny.createSum
};
exports.sumDependencies = sumDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMean.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const meanDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMean: _factoriesAny.createMean
};
exports.meanDependencies = meanDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMedian.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.medianDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesCompare = require("./dependenciesCompare.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesPartitionSelect = require("./dependenciesPartitionSelect.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const medianDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  compareDependencies: _dependenciesCompare.compareDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  partitionSelectDependencies: _dependenciesPartitionSelect.partitionSelectDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMedian: _factoriesAny.createMedian
};
exports.medianDependencies = medianDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesCompare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesPartitionSelect.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPartitionSelect.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMad.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.madDependencies = void 0;

var _dependenciesAbs = require("./dependenciesAbs.generated");

var _dependenciesMap = require("./dependenciesMap.generated");

var _dependenciesMedian = require("./dependenciesMedian.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const madDependencies = {
  absDependencies: _dependenciesAbs.absDependencies,
  mapDependencies: _dependenciesMap.mapDependencies,
  medianDependencies: _dependenciesMedian.medianDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMad: _factoriesAny.createMad
};
exports.madDependencies = madDependencies;
},{"./dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesMap.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMap.generated.js","./dependenciesMedian.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMedian.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVariance.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.varianceDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesApply = require("./dependenciesApply.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesIsNaN = require("./dependenciesIsNaN.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const varianceDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  applyDependencies: _dependenciesApply.applyDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  isNaNDependencies: _dependenciesIsNaN.isNaNDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createVariance: _factoriesAny.createVariance
};
exports.varianceDependencies = varianceDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesApply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesApply.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesIsNaN.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNaN.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeprecatedVar.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.varDependencies = void 0;

var _dependenciesVariance = require("./dependenciesVariance.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const varDependencies = {
  varianceDependencies: _dependenciesVariance.varianceDependencies,
  createDeprecatedVar: _factoriesAny.createDeprecatedVar
};
exports.varDependencies = varDependencies;
},{"./dependenciesVariance.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVariance.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesQuantileSeq.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quantileSeqDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesCompare = require("./dependenciesCompare.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesPartitionSelect = require("./dependenciesPartitionSelect.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const quantileSeqDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  compareDependencies: _dependenciesCompare.compareDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  partitionSelectDependencies: _dependenciesPartitionSelect.partitionSelectDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createQuantileSeq: _factoriesAny.createQuantileSeq
};
exports.quantileSeqDependencies = quantileSeqDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesCompare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesPartitionSelect.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPartitionSelect.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStd.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stdDependencies = void 0;

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesVariance = require("./dependenciesVariance.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const stdDependencies = {
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  varianceDependencies: _dependenciesVariance.varianceDependencies,
  createStd: _factoriesAny.createStd
};
exports.stdDependencies = stdDependencies;
},{"./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesVariance.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVariance.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCombinations.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combinationsDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const combinationsDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCombinations: _factoriesAny.createCombinations
};
exports.combinationsDependencies = combinationsDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGamma.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gammaDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const gammaDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createGamma: _factoriesAny.createGamma
};
exports.gammaDependencies = gammaDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFactorial.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.factorialDependencies = void 0;

var _dependenciesGamma = require("./dependenciesGamma.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const factorialDependencies = {
  gammaDependencies: _dependenciesGamma.gammaDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFactorial: _factoriesAny.createFactorial
};
exports.factorialDependencies = factorialDependencies;
},{"./dependenciesGamma.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGamma.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesKldivergence.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.kldivergenceDependencies = void 0;

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesDotDivide = require("./dependenciesDotDivide.generated");

var _dependenciesIsNumeric = require("./dependenciesIsNumeric.generated");

var _dependenciesLog = require("./dependenciesLog.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSum = require("./dependenciesSum.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const kldivergenceDependencies = {
  divideDependencies: _dependenciesDivide.divideDependencies,
  dotDivideDependencies: _dependenciesDotDivide.dotDivideDependencies,
  isNumericDependencies: _dependenciesIsNumeric.isNumericDependencies,
  logDependencies: _dependenciesLog.logDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  sumDependencies: _dependenciesSum.sumDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createKldivergence: _factoriesAny.createKldivergence
};
exports.kldivergenceDependencies = kldivergenceDependencies;
},{"./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesDotDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotDivide.generated.js","./dependenciesIsNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js","./dependenciesLog.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSum.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSum.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultinomial.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multinomialDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesFactorial = require("./dependenciesFactorial.generated");

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesIsPositive = require("./dependenciesIsPositive.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const multinomialDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  factorialDependencies: _dependenciesFactorial.factorialDependencies,
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  isPositiveDependencies: _dependenciesIsPositive.isPositiveDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMultinomial: _factoriesAny.createMultinomial
};
exports.multinomialDependencies = multinomialDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesFactorial.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFactorial.generated.js","./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesIsPositive.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPositive.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPermutations.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.permutationsDependencies = void 0;

var _dependenciesFactorial = require("./dependenciesFactorial.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const permutationsDependencies = {
  factorialDependencies: _dependenciesFactorial.factorialDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createPermutations: _factoriesAny.createPermutations
};
exports.permutationsDependencies = permutationsDependencies;
},{"./dependenciesFactorial.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFactorial.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPickRandom.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickRandomDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const pickRandomDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createPickRandom: _factoriesAny.createPickRandom
};
exports.pickRandomDependencies = pickRandomDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRandom.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const randomDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRandom: _factoriesAny.createRandom
};
exports.randomDependencies = randomDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRandomInt.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomIntDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const randomIntDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRandomInt: _factoriesAny.createRandomInt
};
exports.randomIntDependencies = randomIntDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStirlingS2.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stirlingS2Dependencies = void 0;

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesCombinations = require("./dependenciesCombinations.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesFactorial = require("./dependenciesFactorial.generated");

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesIsNegative = require("./dependenciesIsNegative.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const stirlingS2Dependencies = {
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  combinationsDependencies: _dependenciesCombinations.combinationsDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  factorialDependencies: _dependenciesFactorial.factorialDependencies,
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegative.isNegativeDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createStirlingS2: _factoriesAny.createStirlingS2
};
exports.stirlingS2Dependencies = stirlingS2Dependencies;
},{"./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesCombinations.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCombinations.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesFactorial.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFactorial.generated.js","./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesIsNegative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBellNumbers.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bellNumbersDependencies = void 0;

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesIsNegative = require("./dependenciesIsNegative.generated");

var _dependenciesStirlingS = require("./dependenciesStirlingS2.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bellNumbersDependencies = {
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegative.isNegativeDependencies,
  stirlingS2Dependencies: _dependenciesStirlingS.stirlingS2Dependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createBellNumbers: _factoriesAny.createBellNumbers
};
exports.bellNumbersDependencies = bellNumbersDependencies;
},{"./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesIsNegative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js","./dependenciesStirlingS2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStirlingS2.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCatalan.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catalanDependencies = void 0;

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesCombinations = require("./dependenciesCombinations.generated");

var _dependenciesDivideScalar = require("./dependenciesDivideScalar.generated");

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesIsNegative = require("./dependenciesIsNegative.generated");

var _dependenciesMultiplyScalar = require("./dependenciesMultiplyScalar.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const catalanDependencies = {
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  combinationsDependencies: _dependenciesCombinations.combinationsDependencies,
  divideScalarDependencies: _dependenciesDivideScalar.divideScalarDependencies,
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegative.isNegativeDependencies,
  multiplyScalarDependencies: _dependenciesMultiplyScalar.multiplyScalarDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createCatalan: _factoriesAny.createCatalan
};
exports.catalanDependencies = catalanDependencies;
},{"./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesCombinations.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCombinations.generated.js","./dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesIsNegative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js","./dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComposition.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compositionDependencies = void 0;

var _dependenciesAddScalar = require("./dependenciesAddScalar.generated");

var _dependenciesCombinations = require("./dependenciesCombinations.generated");

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesIsNegative = require("./dependenciesIsNegative.generated");

var _dependenciesIsPositive = require("./dependenciesIsPositive.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const compositionDependencies = {
  addScalarDependencies: _dependenciesAddScalar.addScalarDependencies,
  combinationsDependencies: _dependenciesCombinations.combinationsDependencies,
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  isNegativeDependencies: _dependenciesIsNegative.isNegativeDependencies,
  isPositiveDependencies: _dependenciesIsPositive.isPositiveDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createComposition: _factoriesAny.createComposition
};
exports.compositionDependencies = compositionDependencies;
},{"./dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesCombinations.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCombinations.generated.js","./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesIsNegative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js","./dependenciesIsPositive.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPositive.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSimplify.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simplifyDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesFraction = require("./dependenciesFraction.generated");

var _dependenciesConstantNode = require("./dependenciesConstantNode.generated");

var _dependenciesFunctionNode = require("./dependenciesFunctionNode.generated");

var _dependenciesOperatorNode = require("./dependenciesOperatorNode.generated");

var _dependenciesParenthesisNode = require("./dependenciesParenthesisNode.generated");

var _dependenciesSymbolNode = require("./dependenciesSymbolNode.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesEqual = require("./dependenciesEqual.generated");

var _dependenciesIsZero = require("./dependenciesIsZero.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesParse = require("./dependenciesParse.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const simplifyDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  fractionDependencies: _dependenciesFraction.fractionDependencies,
  ConstantNodeDependencies: _dependenciesConstantNode.ConstantNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNode.FunctionNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNode.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNode.ParenthesisNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNode.SymbolNodeDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  equalDependencies: _dependenciesEqual.equalDependencies,
  isZeroDependencies: _dependenciesIsZero.isZeroDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  parseDependencies: _dependenciesParse.parseDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSimplify: _factoriesAny.createSimplify
};
exports.simplifyDependencies = simplifyDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesConstantNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConstantNode.generated.js","./dependenciesFunctionNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionNode.generated.js","./dependenciesOperatorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOperatorNode.generated.js","./dependenciesParenthesisNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParenthesisNode.generated.js","./dependenciesSymbolNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js","./dependenciesIsZero.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDerivative.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.derivativeDependencies = void 0;

var _dependenciesConstantNode = require("./dependenciesConstantNode.generated");

var _dependenciesFunctionNode = require("./dependenciesFunctionNode.generated");

var _dependenciesOperatorNode = require("./dependenciesOperatorNode.generated");

var _dependenciesParenthesisNode = require("./dependenciesParenthesisNode.generated");

var _dependenciesSymbolNode = require("./dependenciesSymbolNode.generated");

var _dependenciesEqual = require("./dependenciesEqual.generated");

var _dependenciesIsZero = require("./dependenciesIsZero.generated");

var _dependenciesNumeric = require("./dependenciesNumeric.generated");

var _dependenciesParse = require("./dependenciesParse.generated");

var _dependenciesSimplify = require("./dependenciesSimplify.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const derivativeDependencies = {
  ConstantNodeDependencies: _dependenciesConstantNode.ConstantNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNode.FunctionNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNode.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNode.ParenthesisNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNode.SymbolNodeDependencies,
  equalDependencies: _dependenciesEqual.equalDependencies,
  isZeroDependencies: _dependenciesIsZero.isZeroDependencies,
  numericDependencies: _dependenciesNumeric.numericDependencies,
  parseDependencies: _dependenciesParse.parseDependencies,
  simplifyDependencies: _dependenciesSimplify.simplifyDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createDerivative: _factoriesAny.createDerivative
};
exports.derivativeDependencies = derivativeDependencies;
},{"./dependenciesConstantNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConstantNode.generated.js","./dependenciesFunctionNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionNode.generated.js","./dependenciesOperatorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOperatorNode.generated.js","./dependenciesParenthesisNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParenthesisNode.generated.js","./dependenciesSymbolNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js","./dependenciesEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js","./dependenciesIsZero.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js","./dependenciesNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumeric.generated.js","./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","./dependenciesSimplify.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSimplify.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRationalize.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rationalizeDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesFraction = require("./dependenciesFraction.generated");

var _dependenciesConstantNode = require("./dependenciesConstantNode.generated");

var _dependenciesFunctionNode = require("./dependenciesFunctionNode.generated");

var _dependenciesOperatorNode = require("./dependenciesOperatorNode.generated");

var _dependenciesParenthesisNode = require("./dependenciesParenthesisNode.generated");

var _dependenciesSymbolNode = require("./dependenciesSymbolNode.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesEqual = require("./dependenciesEqual.generated");

var _dependenciesIsZero = require("./dependenciesIsZero.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesParse = require("./dependenciesParse.generated");

var _dependenciesPow = require("./dependenciesPow.generated");

var _dependenciesSimplify = require("./dependenciesSimplify.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rationalizeDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  fractionDependencies: _dependenciesFraction.fractionDependencies,
  ConstantNodeDependencies: _dependenciesConstantNode.ConstantNodeDependencies,
  FunctionNodeDependencies: _dependenciesFunctionNode.FunctionNodeDependencies,
  OperatorNodeDependencies: _dependenciesOperatorNode.OperatorNodeDependencies,
  ParenthesisNodeDependencies: _dependenciesParenthesisNode.ParenthesisNodeDependencies,
  SymbolNodeDependencies: _dependenciesSymbolNode.SymbolNodeDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  equalDependencies: _dependenciesEqual.equalDependencies,
  isZeroDependencies: _dependenciesIsZero.isZeroDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  parseDependencies: _dependenciesParse.parseDependencies,
  powDependencies: _dependenciesPow.powDependencies,
  simplifyDependencies: _dependenciesSimplify.simplifyDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRationalize: _factoriesAny.createRationalize
};
exports.rationalizeDependencies = rationalizeDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesConstantNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConstantNode.generated.js","./dependenciesFunctionNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionNode.generated.js","./dependenciesOperatorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOperatorNode.generated.js","./dependenciesParenthesisNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParenthesisNode.generated.js","./dependenciesSymbolNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js","./dependenciesIsZero.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","./dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesSimplify.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSimplify.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesReviver.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reviverDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const reviverDependencies = {
  createReviver: _factoriesAny.createReviver
};
exports.reviverDependencies = reviverDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesE.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const eDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createE: _factoriesAny.createE
};
exports.eDependencies = eDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUppercaseE.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EDependencies = void 0;

var _dependenciesE = require("./dependenciesE.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const EDependencies = {
  eDependencies: _dependenciesE.eDependencies,
  createUppercaseE: _factoriesAny.createUppercaseE
};
exports.EDependencies = EDependencies;
},{"./dependenciesE.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesE.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFalse.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.falseDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const falseDependencies = {
  createFalse: _factoriesAny.createFalse
};
exports.falseDependencies = falseDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesI.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iDependencies = void 0;

var _dependenciesComplexClass = require("./dependenciesComplexClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const iDependencies = {
  ComplexDependencies: _dependenciesComplexClass.ComplexDependencies,
  createI: _factoriesAny.createI
};
exports.iDependencies = iDependencies;
},{"./dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInfinity.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InfinityDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const InfinityDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createInfinity: _factoriesAny.createInfinity
};
exports.InfinityDependencies = InfinityDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLN10.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LN10Dependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const LN10Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createLN10: _factoriesAny.createLN10
};
exports.LN10Dependencies = LN10Dependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLN2.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LN2Dependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const LN2Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createLN2: _factoriesAny.createLN2
};
exports.LN2Dependencies = LN2Dependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLOG10E.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOG10EDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const LOG10EDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createLOG10E: _factoriesAny.createLOG10E
};
exports.LOG10EDependencies = LOG10EDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLOG2E.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOG2EDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const LOG2EDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createLOG2E: _factoriesAny.createLOG2E
};
exports.LOG2EDependencies = LOG2EDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNaN.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NaNDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const NaNDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createNaN: _factoriesAny.createNaN
};
exports.NaNDependencies = NaNDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNull.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const nullDependencies = {
  createNull: _factoriesAny.createNull
};
exports.nullDependencies = nullDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPhi.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phiDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const phiDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createPhi: _factoriesAny.createPhi
};
exports.phiDependencies = phiDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPi.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.piDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const piDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createPi: _factoriesAny.createPi
};
exports.piDependencies = piDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUppercasePi.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PIDependencies = void 0;

var _dependenciesPi = require("./dependenciesPi.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const PIDependencies = {
  piDependencies: _dependenciesPi.piDependencies,
  createUppercasePi: _factoriesAny.createUppercasePi
};
exports.PIDependencies = PIDependencies;
},{"./dependenciesPi.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPi.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSQRT1_2.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SQRT1_2Dependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
// eslint-disable-line camelcase
const SQRT1_2Dependencies = {
  // eslint-disable-line camelcase
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createSQRT1_2: _factoriesAny.createSQRT1_2
};
exports.SQRT1_2Dependencies = SQRT1_2Dependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSQRT2.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SQRT2Dependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const SQRT2Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createSQRT2: _factoriesAny.createSQRT2
};
exports.SQRT2Dependencies = SQRT2Dependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTau.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tauDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const tauDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createTau: _factoriesAny.createTau
};
exports.tauDependencies = tauDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTrue.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trueDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const trueDependencies = {
  createTrue: _factoriesAny.createTrue
};
exports.trueDependencies = trueDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVersion.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.versionDependencies = void 0;

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const versionDependencies = {
  createVersion: _factoriesAny.createVersion
};
exports.versionDependencies = versionDependencies;
},{"../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtomicMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atomicMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const atomicMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createAtomicMass: _factoriesAny.createAtomicMass
};
exports.atomicMassDependencies = atomicMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAvogadro.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.avogadroDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const avogadroDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createAvogadro: _factoriesAny.createAvogadro
};
exports.avogadroDependencies = avogadroDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBohrMagneton.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bohrMagnetonDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bohrMagnetonDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createBohrMagneton: _factoriesAny.createBohrMagneton
};
exports.bohrMagnetonDependencies = bohrMagnetonDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBohrRadius.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bohrRadiusDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const bohrRadiusDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createBohrRadius: _factoriesAny.createBohrRadius
};
exports.bohrRadiusDependencies = bohrRadiusDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBoltzmann.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.boltzmannDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const boltzmannDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createBoltzmann: _factoriesAny.createBoltzmann
};
exports.boltzmannDependencies = boltzmannDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classicalElectronRadiusDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const classicalElectronRadiusDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createClassicalElectronRadius: _factoriesAny.createClassicalElectronRadius
};
exports.classicalElectronRadiusDependencies = classicalElectronRadiusDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conductanceQuantumDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const conductanceQuantumDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createConductanceQuantum: _factoriesAny.createConductanceQuantum
};
exports.conductanceQuantumDependencies = conductanceQuantumDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCoulomb.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coulombDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const coulombDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createCoulomb: _factoriesAny.createCoulomb
};
exports.coulombDependencies = coulombDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeuteronMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deuteronMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const deuteronMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createDeuteronMass: _factoriesAny.createDeuteronMass
};
exports.deuteronMassDependencies = deuteronMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEfimovFactor.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.efimovFactorDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const efimovFactorDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createEfimovFactor: _factoriesAny.createEfimovFactor
};
exports.efimovFactorDependencies = efimovFactorDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesElectricConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.electricConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const electricConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createElectricConstant: _factoriesAny.createElectricConstant
};
exports.electricConstantDependencies = electricConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesElectronMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.electronMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const electronMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createElectronMass: _factoriesAny.createElectronMass
};
exports.electronMassDependencies = electronMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesElementaryCharge.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elementaryChargeDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const elementaryChargeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createElementaryCharge: _factoriesAny.createElementaryCharge
};
exports.elementaryChargeDependencies = elementaryChargeDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFaraday.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.faradayDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const faradayDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createFaraday: _factoriesAny.createFaraday
};
exports.faradayDependencies = faradayDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFermiCoupling.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fermiCouplingDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const fermiCouplingDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createFermiCoupling: _factoriesAny.createFermiCoupling
};
exports.fermiCouplingDependencies = fermiCouplingDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFineStructure.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fineStructureDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const fineStructureDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createFineStructure: _factoriesAny.createFineStructure
};
exports.fineStructureDependencies = fineStructureDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFirstRadiation.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firstRadiationDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const firstRadiationDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createFirstRadiation: _factoriesAny.createFirstRadiation
};
exports.firstRadiationDependencies = firstRadiationDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGasConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gasConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const gasConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createGasConstant: _factoriesAny.createGasConstant
};
exports.gasConstantDependencies = gasConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGravitationConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gravitationConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const gravitationConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createGravitationConstant: _factoriesAny.createGravitationConstant
};
exports.gravitationConstantDependencies = gravitationConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGravity.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gravityDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const gravityDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createGravity: _factoriesAny.createGravity
};
exports.gravityDependencies = gravityDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hartreeEnergyDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const hartreeEnergyDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createHartreeEnergy: _factoriesAny.createHartreeEnergy
};
exports.hartreeEnergyDependencies = hartreeEnergyDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inverseConductanceQuantumDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const inverseConductanceQuantumDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createInverseConductanceQuantum: _factoriesAny.createInverseConductanceQuantum
};
exports.inverseConductanceQuantumDependencies = inverseConductanceQuantumDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesKlitzing.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.klitzingDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const klitzingDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createKlitzing: _factoriesAny.createKlitzing
};
exports.klitzingDependencies = klitzingDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLoschmidt.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loschmidtDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const loschmidtDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createLoschmidt: _factoriesAny.createLoschmidt
};
exports.loschmidtDependencies = loschmidtDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMagneticConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.magneticConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const magneticConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createMagneticConstant: _factoriesAny.createMagneticConstant
};
exports.magneticConstantDependencies = magneticConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.magneticFluxQuantumDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const magneticFluxQuantumDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createMagneticFluxQuantum: _factoriesAny.createMagneticFluxQuantum
};
exports.magneticFluxQuantumDependencies = magneticFluxQuantumDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.molarMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const molarMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createMolarMass: _factoriesAny.createMolarMass
};
exports.molarMassDependencies = molarMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarMassC12.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.molarMassC12Dependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const molarMassC12Dependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createMolarMassC12: _factoriesAny.createMolarMassC12
};
exports.molarMassC12Dependencies = molarMassC12Dependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.molarPlanckConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const molarPlanckConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createMolarPlanckConstant: _factoriesAny.createMolarPlanckConstant
};
exports.molarPlanckConstantDependencies = molarPlanckConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarVolume.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.molarVolumeDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const molarVolumeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createMolarVolume: _factoriesAny.createMolarVolume
};
exports.molarVolumeDependencies = molarVolumeDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNeutronMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neutronMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const neutronMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createNeutronMass: _factoriesAny.createNeutronMass
};
exports.neutronMassDependencies = neutronMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nuclearMagnetonDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const nuclearMagnetonDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createNuclearMagneton: _factoriesAny.createNuclearMagneton
};
exports.nuclearMagnetonDependencies = nuclearMagnetonDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckCharge.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planckChargeDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const planckChargeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createPlanckCharge: _factoriesAny.createPlanckCharge
};
exports.planckChargeDependencies = planckChargeDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planckConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const planckConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createPlanckConstant: _factoriesAny.createPlanckConstant
};
exports.planckConstantDependencies = planckConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckLength.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planckLengthDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const planckLengthDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createPlanckLength: _factoriesAny.createPlanckLength
};
exports.planckLengthDependencies = planckLengthDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planckMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const planckMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createPlanckMass: _factoriesAny.createPlanckMass
};
exports.planckMassDependencies = planckMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planckTemperatureDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const planckTemperatureDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createPlanckTemperature: _factoriesAny.createPlanckTemperature
};
exports.planckTemperatureDependencies = planckTemperatureDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckTime.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.planckTimeDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const planckTimeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createPlanckTime: _factoriesAny.createPlanckTime
};
exports.planckTimeDependencies = planckTimeDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesProtonMass.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.protonMassDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const protonMassDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createProtonMass: _factoriesAny.createProtonMass
};
exports.protonMassDependencies = protonMassDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quantumOfCirculationDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const quantumOfCirculationDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createQuantumOfCirculation: _factoriesAny.createQuantumOfCirculation
};
exports.quantumOfCirculationDependencies = quantumOfCirculationDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducedPlanckConstantDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const reducedPlanckConstantDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createReducedPlanckConstant: _factoriesAny.createReducedPlanckConstant
};
exports.reducedPlanckConstantDependencies = reducedPlanckConstantDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRydberg.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rydbergDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rydbergDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createRydberg: _factoriesAny.createRydberg
};
exports.rydbergDependencies = rydbergDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSackurTetrode.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sackurTetrodeDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sackurTetrodeDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createSackurTetrode: _factoriesAny.createSackurTetrode
};
exports.sackurTetrodeDependencies = sackurTetrodeDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSecondRadiation.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secondRadiationDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const secondRadiationDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createSecondRadiation: _factoriesAny.createSecondRadiation
};
exports.secondRadiationDependencies = secondRadiationDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.speedOfLightDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const speedOfLightDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createSpeedOfLight: _factoriesAny.createSpeedOfLight
};
exports.speedOfLightDependencies = speedOfLightDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stefanBoltzmannDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const stefanBoltzmannDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createStefanBoltzmann: _factoriesAny.createStefanBoltzmann
};
exports.stefanBoltzmannDependencies = stefanBoltzmannDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.thomsonCrossSectionDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const thomsonCrossSectionDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createThomsonCrossSection: _factoriesAny.createThomsonCrossSection
};
exports.thomsonCrossSectionDependencies = thomsonCrossSectionDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vacuumImpedanceDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const vacuumImpedanceDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createVacuumImpedance: _factoriesAny.createVacuumImpedance
};
exports.vacuumImpedanceDependencies = vacuumImpedanceDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weakMixingAngleDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const weakMixingAngleDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  createWeakMixingAngle: _factoriesAny.createWeakMixingAngle
};
exports.weakMixingAngleDependencies = weakMixingAngleDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesWienDisplacement.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wienDisplacementDependencies = void 0;

var _dependenciesBigNumberClass = require("./dependenciesBigNumberClass.generated");

var _dependenciesUnitClass = require("./dependenciesUnitClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const wienDisplacementDependencies = {
  BigNumberDependencies: _dependenciesBigNumberClass.BigNumberDependencies,
  UnitDependencies: _dependenciesUnitClass.UnitDependencies,
  createWienDisplacement: _factoriesAny.createWienDisplacement
};
exports.wienDisplacementDependencies = wienDisplacementDependencies;
},{"./dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesApplyTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyTransformDependencies = void 0;

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const applyTransformDependencies = {
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createApplyTransform: _factoriesAny.createApplyTransform
};
exports.applyTransformDependencies = applyTransformDependencies;
},{"./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesColumnTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.columnTransformDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesRange = require("./dependenciesRange.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const columnTransformDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  rangeDependencies: _dependenciesRange.rangeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createColumnTransform: _factoriesAny.createColumnTransform
};
exports.columnTransformDependencies = columnTransformDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesRange.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRange.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFilterTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterTransformDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const filterTransformDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createFilterTransform: _factoriesAny.createFilterTransform
};
exports.filterTransformDependencies = filterTransformDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesForEachTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forEachTransformDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const forEachTransformDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createForEachTransform: _factoriesAny.createForEachTransform
};
exports.forEachTransformDependencies = forEachTransformDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexTransformDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const indexTransformDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  createIndexTransform: _factoriesAny.createIndexTransform
};
exports.indexTransformDependencies = indexTransformDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMapTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapTransformDependencies = void 0;

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const mapTransformDependencies = {
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMapTransform: _factoriesAny.createMapTransform
};
exports.mapTransformDependencies = mapTransformDependencies;
},{"./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMaxTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maxTransformDependencies = void 0;

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const maxTransformDependencies = {
  largerDependencies: _dependenciesLarger.largerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMaxTransform: _factoriesAny.createMaxTransform
};
exports.maxTransformDependencies = maxTransformDependencies;
},{"./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMeanTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.meanTransformDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const meanTransformDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMeanTransform: _factoriesAny.createMeanTransform
};
exports.meanTransformDependencies = meanTransformDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMinTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minTransformDependencies = void 0;

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const minTransformDependencies = {
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createMinTransform: _factoriesAny.createMinTransform
};
exports.minTransformDependencies = minTransformDependencies;
},{"./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeTransformDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesLarger = require("./dependenciesLarger.generated");

var _dependenciesLargerEq = require("./dependenciesLargerEq.generated");

var _dependenciesSmaller = require("./dependenciesSmaller.generated");

var _dependenciesSmallerEq = require("./dependenciesSmallerEq.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rangeTransformDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  largerDependencies: _dependenciesLarger.largerDependencies,
  largerEqDependencies: _dependenciesLargerEq.largerEqDependencies,
  smallerDependencies: _dependenciesSmaller.smallerDependencies,
  smallerEqDependencies: _dependenciesSmallerEq.smallerEqDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRangeTransform: _factoriesAny.createRangeTransform
};
exports.rangeTransformDependencies = rangeTransformDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesLargerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLargerEq.generated.js","./dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesSmallerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmallerEq.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRowTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rowTransformDependencies = void 0;

var _dependenciesIndexClass = require("./dependenciesIndexClass.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesRange = require("./dependenciesRange.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const rowTransformDependencies = {
  IndexDependencies: _dependenciesIndexClass.IndexDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  rangeDependencies: _dependenciesRange.rangeDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createRowTransform: _factoriesAny.createRowTransform
};
exports.rowTransformDependencies = rowTransformDependencies;
},{"./dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesRange.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRange.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubsetTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subsetTransformDependencies = void 0;

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const subsetTransformDependencies = {
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSubsetTransform: _factoriesAny.createSubsetTransform
};
exports.subsetTransformDependencies = subsetTransformDependencies;
},{"./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConcatTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatTransformDependencies = void 0;

var _dependenciesIsInteger = require("./dependenciesIsInteger.generated");

var _dependenciesMatrix = require("./dependenciesMatrix.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const concatTransformDependencies = {
  isIntegerDependencies: _dependenciesIsInteger.isIntegerDependencies,
  matrixDependencies: _dependenciesMatrix.matrixDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createConcatTransform: _factoriesAny.createConcatTransform
};
exports.concatTransformDependencies = concatTransformDependencies;
},{"./dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStdTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stdTransformDependencies = void 0;

var _dependenciesSqrt = require("./dependenciesSqrt.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _dependenciesVariance = require("./dependenciesVariance.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const stdTransformDependencies = {
  sqrtDependencies: _dependenciesSqrt.sqrtDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  varianceDependencies: _dependenciesVariance.varianceDependencies,
  createStdTransform: _factoriesAny.createStdTransform
};
exports.stdTransformDependencies = stdTransformDependencies;
},{"./dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesVariance.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVariance.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSumTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sumTransformDependencies = void 0;

var _dependenciesBignumber = require("./dependenciesBignumber.generated");

var _dependenciesFraction = require("./dependenciesFraction.generated");

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const sumTransformDependencies = {
  bignumberDependencies: _dependenciesBignumber.bignumberDependencies,
  fractionDependencies: _dependenciesFraction.fractionDependencies,
  addDependencies: _dependenciesAdd.addDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createSumTransform: _factoriesAny.createSumTransform
};
exports.sumTransformDependencies = sumTransformDependencies;
},{"./dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVarianceTransform.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.varianceTransformDependencies = void 0;

var _dependenciesAdd = require("./dependenciesAdd.generated");

var _dependenciesApply = require("./dependenciesApply.generated");

var _dependenciesDivide = require("./dependenciesDivide.generated");

var _dependenciesIsNaN = require("./dependenciesIsNaN.generated");

var _dependenciesMultiply = require("./dependenciesMultiply.generated");

var _dependenciesSubtract = require("./dependenciesSubtract.generated");

var _dependenciesTyped = require("./dependenciesTyped.generated");

var _factoriesAny = require("../../factoriesAny.js");

/**
 * THIS FILE IS AUTO-GENERATED
 * DON'T MAKE CHANGES HERE
 */
const varianceTransformDependencies = {
  addDependencies: _dependenciesAdd.addDependencies,
  applyDependencies: _dependenciesApply.applyDependencies,
  divideDependencies: _dependenciesDivide.divideDependencies,
  isNaNDependencies: _dependenciesIsNaN.isNaNDependencies,
  multiplyDependencies: _dependenciesMultiply.multiplyDependencies,
  subtractDependencies: _dependenciesSubtract.subtractDependencies,
  typedDependencies: _dependenciesTyped.typedDependencies,
  createVarianceTransform: _factoriesAny.createVarianceTransform
};
exports.varianceTransformDependencies = varianceTransformDependencies;
},{"./dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesApply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesApply.generated.js","./dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesIsNaN.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNaN.generated.js","./dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","../../factoriesAny.js":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/allFactoriesAny.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = void 0;

var allFactories = _interopRequireWildcard(require("../factoriesAny"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// creating all factories here in a separate file is needed to get tree-shaking working
const all = allFactories;
exports.all = all;
},{"../factoriesAny":"../node_modules/mathjs/src/factoriesAny.js"}],"../node_modules/mathjs/src/entry/dependenciesAny.generated.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "typedDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTyped.typedDependencies;
  }
});
Object.defineProperty(exports, "ResultSetDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesResultSet.ResultSetDependencies;
  }
});
Object.defineProperty(exports, "BigNumberDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBigNumberClass.BigNumberDependencies;
  }
});
Object.defineProperty(exports, "ComplexDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesComplexClass.ComplexDependencies;
  }
});
Object.defineProperty(exports, "FractionDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFractionClass.FractionDependencies;
  }
});
Object.defineProperty(exports, "RangeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRangeClass.RangeDependencies;
  }
});
Object.defineProperty(exports, "MatrixDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMatrixClass.MatrixDependencies;
  }
});
Object.defineProperty(exports, "DenseMatrixDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDenseMatrixClass.DenseMatrixDependencies;
  }
});
Object.defineProperty(exports, "cloneDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesClone.cloneDependencies;
  }
});
Object.defineProperty(exports, "isIntegerDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsInteger.isIntegerDependencies;
  }
});
Object.defineProperty(exports, "isNegativeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsNegative.isNegativeDependencies;
  }
});
Object.defineProperty(exports, "isNumericDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsNumeric.isNumericDependencies;
  }
});
Object.defineProperty(exports, "hasNumericValueDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesHasNumericValue.hasNumericValueDependencies;
  }
});
Object.defineProperty(exports, "isPositiveDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsPositive.isPositiveDependencies;
  }
});
Object.defineProperty(exports, "isZeroDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsZero.isZeroDependencies;
  }
});
Object.defineProperty(exports, "isNaNDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsNaN.isNaNDependencies;
  }
});
Object.defineProperty(exports, "typeOfDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTypeOf.typeOfDependencies;
  }
});
Object.defineProperty(exports, "typeofDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDeprecatedTypeof.typeofDependencies;
  }
});
Object.defineProperty(exports, "equalScalarDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesEqualScalar.equalScalarDependencies;
  }
});
Object.defineProperty(exports, "SparseMatrixDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSparseMatrixClass.SparseMatrixDependencies;
  }
});
Object.defineProperty(exports, "numberDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNumber.numberDependencies;
  }
});
Object.defineProperty(exports, "stringDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesString.stringDependencies;
  }
});
Object.defineProperty(exports, "booleanDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBoolean.booleanDependencies;
  }
});
Object.defineProperty(exports, "bignumberDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBignumber.bignumberDependencies;
  }
});
Object.defineProperty(exports, "complexDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesComplex.complexDependencies;
  }
});
Object.defineProperty(exports, "fractionDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFraction.fractionDependencies;
  }
});
Object.defineProperty(exports, "matrixDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMatrix.matrixDependencies;
  }
});
Object.defineProperty(exports, "splitUnitDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSplitUnit.splitUnitDependencies;
  }
});
Object.defineProperty(exports, "unaryMinusDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUnaryMinus.unaryMinusDependencies;
  }
});
Object.defineProperty(exports, "unaryPlusDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUnaryPlus.unaryPlusDependencies;
  }
});
Object.defineProperty(exports, "absDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAbs.absDependencies;
  }
});
Object.defineProperty(exports, "applyDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesApply.applyDependencies;
  }
});
Object.defineProperty(exports, "addScalarDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAddScalar.addScalarDependencies;
  }
});
Object.defineProperty(exports, "cbrtDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCbrt.cbrtDependencies;
  }
});
Object.defineProperty(exports, "ceilDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCeil.ceilDependencies;
  }
});
Object.defineProperty(exports, "cubeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCube.cubeDependencies;
  }
});
Object.defineProperty(exports, "expDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesExp.expDependencies;
  }
});
Object.defineProperty(exports, "expm1Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesExpm.expm1Dependencies;
  }
});
Object.defineProperty(exports, "fixDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFix.fixDependencies;
  }
});
Object.defineProperty(exports, "floorDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFloor.floorDependencies;
  }
});
Object.defineProperty(exports, "gcdDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesGcd.gcdDependencies;
  }
});
Object.defineProperty(exports, "lcmDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLcm.lcmDependencies;
  }
});
Object.defineProperty(exports, "log10Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLog.log10Dependencies;
  }
});
Object.defineProperty(exports, "log2Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLog2.log2Dependencies;
  }
});
Object.defineProperty(exports, "modDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMod.modDependencies;
  }
});
Object.defineProperty(exports, "multiplyScalarDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMultiplyScalar.multiplyScalarDependencies;
  }
});
Object.defineProperty(exports, "multiplyDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMultiply.multiplyDependencies;
  }
});
Object.defineProperty(exports, "nthRootDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNthRoot.nthRootDependencies;
  }
});
Object.defineProperty(exports, "signDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSign.signDependencies;
  }
});
Object.defineProperty(exports, "sqrtDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSqrt.sqrtDependencies;
  }
});
Object.defineProperty(exports, "squareDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSquare.squareDependencies;
  }
});
Object.defineProperty(exports, "subtractDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSubtract.subtractDependencies;
  }
});
Object.defineProperty(exports, "xgcdDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesXgcd.xgcdDependencies;
  }
});
Object.defineProperty(exports, "dotMultiplyDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDotMultiply.dotMultiplyDependencies;
  }
});
Object.defineProperty(exports, "bitAndDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBitAnd.bitAndDependencies;
  }
});
Object.defineProperty(exports, "bitNotDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBitNot.bitNotDependencies;
  }
});
Object.defineProperty(exports, "bitOrDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBitOr.bitOrDependencies;
  }
});
Object.defineProperty(exports, "bitXorDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBitXor.bitXorDependencies;
  }
});
Object.defineProperty(exports, "argDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesArg.argDependencies;
  }
});
Object.defineProperty(exports, "conjDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesConj.conjDependencies;
  }
});
Object.defineProperty(exports, "imDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIm.imDependencies;
  }
});
Object.defineProperty(exports, "reDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRe.reDependencies;
  }
});
Object.defineProperty(exports, "notDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNot.notDependencies;
  }
});
Object.defineProperty(exports, "orDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesOr.orDependencies;
  }
});
Object.defineProperty(exports, "xorDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesXor.xorDependencies;
  }
});
Object.defineProperty(exports, "concatDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesConcat.concatDependencies;
  }
});
Object.defineProperty(exports, "columnDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesColumn.columnDependencies;
  }
});
Object.defineProperty(exports, "crossDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCross.crossDependencies;
  }
});
Object.defineProperty(exports, "diagDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDiag.diagDependencies;
  }
});
Object.defineProperty(exports, "eyeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesEye.eyeDependencies;
  }
});
Object.defineProperty(exports, "filterDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFilter.filterDependencies;
  }
});
Object.defineProperty(exports, "flattenDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFlatten.flattenDependencies;
  }
});
Object.defineProperty(exports, "forEachDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesForEach.forEachDependencies;
  }
});
Object.defineProperty(exports, "getMatrixDataTypeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesGetMatrixDataType.getMatrixDataTypeDependencies;
  }
});
Object.defineProperty(exports, "identityDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIdentity.identityDependencies;
  }
});
Object.defineProperty(exports, "kronDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesKron.kronDependencies;
  }
});
Object.defineProperty(exports, "mapDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMap.mapDependencies;
  }
});
Object.defineProperty(exports, "onesDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesOnes.onesDependencies;
  }
});
Object.defineProperty(exports, "rangeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRange.rangeDependencies;
  }
});
Object.defineProperty(exports, "reshapeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesReshape.reshapeDependencies;
  }
});
Object.defineProperty(exports, "resizeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesResize.resizeDependencies;
  }
});
Object.defineProperty(exports, "rowDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRow.rowDependencies;
  }
});
Object.defineProperty(exports, "sizeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSize.sizeDependencies;
  }
});
Object.defineProperty(exports, "squeezeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSqueeze.squeezeDependencies;
  }
});
Object.defineProperty(exports, "subsetDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSubset.subsetDependencies;
  }
});
Object.defineProperty(exports, "transposeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTranspose.transposeDependencies;
  }
});
Object.defineProperty(exports, "ctransposeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCtranspose.ctransposeDependencies;
  }
});
Object.defineProperty(exports, "zerosDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesZeros.zerosDependencies;
  }
});
Object.defineProperty(exports, "erfDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesErf.erfDependencies;
  }
});
Object.defineProperty(exports, "modeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMode.modeDependencies;
  }
});
Object.defineProperty(exports, "prodDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesProd.prodDependencies;
  }
});
Object.defineProperty(exports, "formatDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFormat.formatDependencies;
  }
});
Object.defineProperty(exports, "printDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPrint.printDependencies;
  }
});
Object.defineProperty(exports, "toDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTo.toDependencies;
  }
});
Object.defineProperty(exports, "isPrimeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIsPrime.isPrimeDependencies;
  }
});
Object.defineProperty(exports, "numericDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNumeric.numericDependencies;
  }
});
Object.defineProperty(exports, "divideScalarDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDivideScalar.divideScalarDependencies;
  }
});
Object.defineProperty(exports, "powDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPow.powDependencies;
  }
});
Object.defineProperty(exports, "roundDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRound.roundDependencies;
  }
});
Object.defineProperty(exports, "logDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLog3.logDependencies;
  }
});
Object.defineProperty(exports, "log1pDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLog1p.log1pDependencies;
  }
});
Object.defineProperty(exports, "nthRootsDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNthRoots.nthRootsDependencies;
  }
});
Object.defineProperty(exports, "dotPowDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDotPow.dotPowDependencies;
  }
});
Object.defineProperty(exports, "dotDivideDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDotDivide.dotDivideDependencies;
  }
});
Object.defineProperty(exports, "lsolveDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLsolve.lsolveDependencies;
  }
});
Object.defineProperty(exports, "usolveDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUsolve.usolveDependencies;
  }
});
Object.defineProperty(exports, "leftShiftDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLeftShift.leftShiftDependencies;
  }
});
Object.defineProperty(exports, "rightArithShiftDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRightArithShift.rightArithShiftDependencies;
  }
});
Object.defineProperty(exports, "rightLogShiftDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRightLogShift.rightLogShiftDependencies;
  }
});
Object.defineProperty(exports, "andDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAnd.andDependencies;
  }
});
Object.defineProperty(exports, "compareDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCompare.compareDependencies;
  }
});
Object.defineProperty(exports, "compareNaturalDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCompareNatural.compareNaturalDependencies;
  }
});
Object.defineProperty(exports, "compareTextDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCompareText.compareTextDependencies;
  }
});
Object.defineProperty(exports, "equalDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesEqual.equalDependencies;
  }
});
Object.defineProperty(exports, "equalTextDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesEqualText.equalTextDependencies;
  }
});
Object.defineProperty(exports, "smallerDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSmaller.smallerDependencies;
  }
});
Object.defineProperty(exports, "smallerEqDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSmallerEq.smallerEqDependencies;
  }
});
Object.defineProperty(exports, "largerDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLarger.largerDependencies;
  }
});
Object.defineProperty(exports, "largerEqDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLargerEq.largerEqDependencies;
  }
});
Object.defineProperty(exports, "deepEqualDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDeepEqual.deepEqualDependencies;
  }
});
Object.defineProperty(exports, "unequalDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUnequal.unequalDependencies;
  }
});
Object.defineProperty(exports, "partitionSelectDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPartitionSelect.partitionSelectDependencies;
  }
});
Object.defineProperty(exports, "sortDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSort.sortDependencies;
  }
});
Object.defineProperty(exports, "maxDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMax.maxDependencies;
  }
});
Object.defineProperty(exports, "minDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMin.minDependencies;
  }
});
Object.defineProperty(exports, "ImmutableDenseMatrixDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesImmutableDenseMatrixClass.ImmutableDenseMatrixDependencies;
  }
});
Object.defineProperty(exports, "IndexDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIndexClass.IndexDependencies;
  }
});
Object.defineProperty(exports, "FibonacciHeapDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFibonacciHeapClass.FibonacciHeapDependencies;
  }
});
Object.defineProperty(exports, "SpaDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSpaClass.SpaDependencies;
  }
});
Object.defineProperty(exports, "UnitDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUnitClass.UnitDependencies;
  }
});
Object.defineProperty(exports, "unitDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUnitFunction.unitDependencies;
  }
});
Object.defineProperty(exports, "sparseDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSparse.sparseDependencies;
  }
});
Object.defineProperty(exports, "createUnitDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCreateUnit.createUnitDependencies;
  }
});
Object.defineProperty(exports, "acosDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAcos.acosDependencies;
  }
});
Object.defineProperty(exports, "acoshDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAcosh.acoshDependencies;
  }
});
Object.defineProperty(exports, "acotDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAcot.acotDependencies;
  }
});
Object.defineProperty(exports, "acothDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAcoth.acothDependencies;
  }
});
Object.defineProperty(exports, "acscDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAcsc.acscDependencies;
  }
});
Object.defineProperty(exports, "acschDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAcsch.acschDependencies;
  }
});
Object.defineProperty(exports, "asecDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAsec.asecDependencies;
  }
});
Object.defineProperty(exports, "asechDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAsech.asechDependencies;
  }
});
Object.defineProperty(exports, "asinDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAsin.asinDependencies;
  }
});
Object.defineProperty(exports, "asinhDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAsinh.asinhDependencies;
  }
});
Object.defineProperty(exports, "atanDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAtan.atanDependencies;
  }
});
Object.defineProperty(exports, "atan2Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAtan2.atan2Dependencies;
  }
});
Object.defineProperty(exports, "atanhDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAtanh.atanhDependencies;
  }
});
Object.defineProperty(exports, "cosDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCos.cosDependencies;
  }
});
Object.defineProperty(exports, "coshDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCosh.coshDependencies;
  }
});
Object.defineProperty(exports, "cotDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCot.cotDependencies;
  }
});
Object.defineProperty(exports, "cothDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCoth.cothDependencies;
  }
});
Object.defineProperty(exports, "cscDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCsc.cscDependencies;
  }
});
Object.defineProperty(exports, "cschDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCsch.cschDependencies;
  }
});
Object.defineProperty(exports, "secDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSec.secDependencies;
  }
});
Object.defineProperty(exports, "sechDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSech.sechDependencies;
  }
});
Object.defineProperty(exports, "sinDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSin.sinDependencies;
  }
});
Object.defineProperty(exports, "sinhDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSinh.sinhDependencies;
  }
});
Object.defineProperty(exports, "tanDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTan.tanDependencies;
  }
});
Object.defineProperty(exports, "tanhDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTanh.tanhDependencies;
  }
});
Object.defineProperty(exports, "setCartesianDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetCartesian.setCartesianDependencies;
  }
});
Object.defineProperty(exports, "setDifferenceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetDifference.setDifferenceDependencies;
  }
});
Object.defineProperty(exports, "setDistinctDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetDistinct.setDistinctDependencies;
  }
});
Object.defineProperty(exports, "setIntersectDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetIntersect.setIntersectDependencies;
  }
});
Object.defineProperty(exports, "setIsSubsetDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetIsSubset.setIsSubsetDependencies;
  }
});
Object.defineProperty(exports, "setMultiplicityDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetMultiplicity.setMultiplicityDependencies;
  }
});
Object.defineProperty(exports, "setPowersetDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetPowerset.setPowersetDependencies;
  }
});
Object.defineProperty(exports, "setSizeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetSize.setSizeDependencies;
  }
});
Object.defineProperty(exports, "setSymDifferenceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetSymDifference.setSymDifferenceDependencies;
  }
});
Object.defineProperty(exports, "setUnionDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSetUnion.setUnionDependencies;
  }
});
Object.defineProperty(exports, "addDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAdd.addDependencies;
  }
});
Object.defineProperty(exports, "hypotDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesHypot.hypotDependencies;
  }
});
Object.defineProperty(exports, "normDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNorm.normDependencies;
  }
});
Object.defineProperty(exports, "dotDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDot.dotDependencies;
  }
});
Object.defineProperty(exports, "traceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTrace.traceDependencies;
  }
});
Object.defineProperty(exports, "indexDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIndex.indexDependencies;
  }
});
Object.defineProperty(exports, "NodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNode.NodeDependencies;
  }
});
Object.defineProperty(exports, "AccessorNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAccessorNode.AccessorNodeDependencies;
  }
});
Object.defineProperty(exports, "ArrayNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesArrayNode.ArrayNodeDependencies;
  }
});
Object.defineProperty(exports, "AssignmentNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAssignmentNode.AssignmentNodeDependencies;
  }
});
Object.defineProperty(exports, "BlockNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBlockNode.BlockNodeDependencies;
  }
});
Object.defineProperty(exports, "ConditionalNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesConditionalNode.ConditionalNodeDependencies;
  }
});
Object.defineProperty(exports, "ConstantNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesConstantNode.ConstantNodeDependencies;
  }
});
Object.defineProperty(exports, "FunctionAssignmentNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFunctionAssignmentNode.FunctionAssignmentNodeDependencies;
  }
});
Object.defineProperty(exports, "IndexNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIndexNode.IndexNodeDependencies;
  }
});
Object.defineProperty(exports, "ObjectNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesObjectNode.ObjectNodeDependencies;
  }
});
Object.defineProperty(exports, "OperatorNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesOperatorNode.OperatorNodeDependencies;
  }
});
Object.defineProperty(exports, "ParenthesisNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesParenthesisNode.ParenthesisNodeDependencies;
  }
});
Object.defineProperty(exports, "RangeNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRangeNode.RangeNodeDependencies;
  }
});
Object.defineProperty(exports, "RelationalNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRelationalNode.RelationalNodeDependencies;
  }
});
Object.defineProperty(exports, "SymbolNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSymbolNode.SymbolNodeDependencies;
  }
});
Object.defineProperty(exports, "FunctionNodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFunctionNode.FunctionNodeDependencies;
  }
});
Object.defineProperty(exports, "parseDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesParse.parseDependencies;
  }
});
Object.defineProperty(exports, "compileDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCompile.compileDependencies;
  }
});
Object.defineProperty(exports, "evaluateDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesEvaluate.evaluateDependencies;
  }
});
Object.defineProperty(exports, "evalDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDeprecatedEval.evalDependencies;
  }
});
Object.defineProperty(exports, "ParserDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesParserClass.ParserDependencies;
  }
});
Object.defineProperty(exports, "parserDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesParser.parserDependencies;
  }
});
Object.defineProperty(exports, "lupDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLup.lupDependencies;
  }
});
Object.defineProperty(exports, "qrDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesQr.qrDependencies;
  }
});
Object.defineProperty(exports, "sluDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSlu.sluDependencies;
  }
});
Object.defineProperty(exports, "lusolveDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLusolve.lusolveDependencies;
  }
});
Object.defineProperty(exports, "HelpDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesHelpClass.HelpDependencies;
  }
});
Object.defineProperty(exports, "ChainDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesChainClass.ChainDependencies;
  }
});
Object.defineProperty(exports, "helpDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesHelp.helpDependencies;
  }
});
Object.defineProperty(exports, "chainDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesChain.chainDependencies;
  }
});
Object.defineProperty(exports, "detDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDet.detDependencies;
  }
});
Object.defineProperty(exports, "invDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesInv.invDependencies;
  }
});
Object.defineProperty(exports, "expmDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesExpm2.expmDependencies;
  }
});
Object.defineProperty(exports, "sqrtmDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSqrtm.sqrtmDependencies;
  }
});
Object.defineProperty(exports, "divideDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDivide.divideDependencies;
  }
});
Object.defineProperty(exports, "distanceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDistance.distanceDependencies;
  }
});
Object.defineProperty(exports, "intersectDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIntersect.intersectDependencies;
  }
});
Object.defineProperty(exports, "sumDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSum.sumDependencies;
  }
});
Object.defineProperty(exports, "meanDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMean.meanDependencies;
  }
});
Object.defineProperty(exports, "medianDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMedian.medianDependencies;
  }
});
Object.defineProperty(exports, "madDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMad.madDependencies;
  }
});
Object.defineProperty(exports, "varianceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesVariance.varianceDependencies;
  }
});
Object.defineProperty(exports, "varDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDeprecatedVar.varDependencies;
  }
});
Object.defineProperty(exports, "quantileSeqDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesQuantileSeq.quantileSeqDependencies;
  }
});
Object.defineProperty(exports, "stdDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesStd.stdDependencies;
  }
});
Object.defineProperty(exports, "combinationsDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCombinations.combinationsDependencies;
  }
});
Object.defineProperty(exports, "gammaDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesGamma.gammaDependencies;
  }
});
Object.defineProperty(exports, "factorialDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFactorial.factorialDependencies;
  }
});
Object.defineProperty(exports, "kldivergenceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesKldivergence.kldivergenceDependencies;
  }
});
Object.defineProperty(exports, "multinomialDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMultinomial.multinomialDependencies;
  }
});
Object.defineProperty(exports, "permutationsDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPermutations.permutationsDependencies;
  }
});
Object.defineProperty(exports, "pickRandomDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPickRandom.pickRandomDependencies;
  }
});
Object.defineProperty(exports, "randomDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRandom.randomDependencies;
  }
});
Object.defineProperty(exports, "randomIntDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRandomInt.randomIntDependencies;
  }
});
Object.defineProperty(exports, "stirlingS2Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesStirlingS.stirlingS2Dependencies;
  }
});
Object.defineProperty(exports, "bellNumbersDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBellNumbers.bellNumbersDependencies;
  }
});
Object.defineProperty(exports, "catalanDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCatalan.catalanDependencies;
  }
});
Object.defineProperty(exports, "compositionDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesComposition.compositionDependencies;
  }
});
Object.defineProperty(exports, "simplifyDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSimplify.simplifyDependencies;
  }
});
Object.defineProperty(exports, "derivativeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDerivative.derivativeDependencies;
  }
});
Object.defineProperty(exports, "rationalizeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRationalize.rationalizeDependencies;
  }
});
Object.defineProperty(exports, "reviverDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesReviver.reviverDependencies;
  }
});
Object.defineProperty(exports, "eDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesE.eDependencies;
  }
});
Object.defineProperty(exports, "EDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUppercaseE.EDependencies;
  }
});
Object.defineProperty(exports, "falseDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFalse.falseDependencies;
  }
});
Object.defineProperty(exports, "iDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesI.iDependencies;
  }
});
Object.defineProperty(exports, "InfinityDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesInfinity.InfinityDependencies;
  }
});
Object.defineProperty(exports, "LN10Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLN.LN10Dependencies;
  }
});
Object.defineProperty(exports, "LN2Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLN2.LN2Dependencies;
  }
});
Object.defineProperty(exports, "LOG10EDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLOG10E.LOG10EDependencies;
  }
});
Object.defineProperty(exports, "LOG2EDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLOG2E.LOG2EDependencies;
  }
});
Object.defineProperty(exports, "NaNDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNaN.NaNDependencies;
  }
});
Object.defineProperty(exports, "nullDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNull.nullDependencies;
  }
});
Object.defineProperty(exports, "phiDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPhi.phiDependencies;
  }
});
Object.defineProperty(exports, "piDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPi.piDependencies;
  }
});
Object.defineProperty(exports, "PIDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesUppercasePi.PIDependencies;
  }
});
Object.defineProperty(exports, "SQRT1_2Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSQRT1_.SQRT1_2Dependencies;
  }
});
Object.defineProperty(exports, "SQRT2Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSQRT.SQRT2Dependencies;
  }
});
Object.defineProperty(exports, "tauDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTau.tauDependencies;
  }
});
Object.defineProperty(exports, "trueDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesTrue.trueDependencies;
  }
});
Object.defineProperty(exports, "versionDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesVersion.versionDependencies;
  }
});
Object.defineProperty(exports, "atomicMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAtomicMass.atomicMassDependencies;
  }
});
Object.defineProperty(exports, "avogadroDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesAvogadro.avogadroDependencies;
  }
});
Object.defineProperty(exports, "bohrMagnetonDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBohrMagneton.bohrMagnetonDependencies;
  }
});
Object.defineProperty(exports, "bohrRadiusDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBohrRadius.bohrRadiusDependencies;
  }
});
Object.defineProperty(exports, "boltzmannDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesBoltzmann.boltzmannDependencies;
  }
});
Object.defineProperty(exports, "classicalElectronRadiusDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesClassicalElectronRadius.classicalElectronRadiusDependencies;
  }
});
Object.defineProperty(exports, "conductanceQuantumDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesConductanceQuantum.conductanceQuantumDependencies;
  }
});
Object.defineProperty(exports, "coulombDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesCoulomb.coulombDependencies;
  }
});
Object.defineProperty(exports, "deuteronMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesDeuteronMass.deuteronMassDependencies;
  }
});
Object.defineProperty(exports, "efimovFactorDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesEfimovFactor.efimovFactorDependencies;
  }
});
Object.defineProperty(exports, "electricConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesElectricConstant.electricConstantDependencies;
  }
});
Object.defineProperty(exports, "electronMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesElectronMass.electronMassDependencies;
  }
});
Object.defineProperty(exports, "elementaryChargeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesElementaryCharge.elementaryChargeDependencies;
  }
});
Object.defineProperty(exports, "faradayDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFaraday.faradayDependencies;
  }
});
Object.defineProperty(exports, "fermiCouplingDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFermiCoupling.fermiCouplingDependencies;
  }
});
Object.defineProperty(exports, "fineStructureDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFineStructure.fineStructureDependencies;
  }
});
Object.defineProperty(exports, "firstRadiationDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFirstRadiation.firstRadiationDependencies;
  }
});
Object.defineProperty(exports, "gasConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesGasConstant.gasConstantDependencies;
  }
});
Object.defineProperty(exports, "gravitationConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesGravitationConstant.gravitationConstantDependencies;
  }
});
Object.defineProperty(exports, "gravityDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesGravity.gravityDependencies;
  }
});
Object.defineProperty(exports, "hartreeEnergyDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesHartreeEnergy.hartreeEnergyDependencies;
  }
});
Object.defineProperty(exports, "inverseConductanceQuantumDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesInverseConductanceQuantum.inverseConductanceQuantumDependencies;
  }
});
Object.defineProperty(exports, "klitzingDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesKlitzing.klitzingDependencies;
  }
});
Object.defineProperty(exports, "loschmidtDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesLoschmidt.loschmidtDependencies;
  }
});
Object.defineProperty(exports, "magneticConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMagneticConstant.magneticConstantDependencies;
  }
});
Object.defineProperty(exports, "magneticFluxQuantumDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMagneticFluxQuantum.magneticFluxQuantumDependencies;
  }
});
Object.defineProperty(exports, "molarMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMolarMass.molarMassDependencies;
  }
});
Object.defineProperty(exports, "molarMassC12Dependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMolarMassC.molarMassC12Dependencies;
  }
});
Object.defineProperty(exports, "molarPlanckConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMolarPlanckConstant.molarPlanckConstantDependencies;
  }
});
Object.defineProperty(exports, "molarVolumeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMolarVolume.molarVolumeDependencies;
  }
});
Object.defineProperty(exports, "neutronMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNeutronMass.neutronMassDependencies;
  }
});
Object.defineProperty(exports, "nuclearMagnetonDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesNuclearMagneton.nuclearMagnetonDependencies;
  }
});
Object.defineProperty(exports, "planckChargeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPlanckCharge.planckChargeDependencies;
  }
});
Object.defineProperty(exports, "planckConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPlanckConstant.planckConstantDependencies;
  }
});
Object.defineProperty(exports, "planckLengthDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPlanckLength.planckLengthDependencies;
  }
});
Object.defineProperty(exports, "planckMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPlanckMass.planckMassDependencies;
  }
});
Object.defineProperty(exports, "planckTemperatureDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPlanckTemperature.planckTemperatureDependencies;
  }
});
Object.defineProperty(exports, "planckTimeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesPlanckTime.planckTimeDependencies;
  }
});
Object.defineProperty(exports, "protonMassDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesProtonMass.protonMassDependencies;
  }
});
Object.defineProperty(exports, "quantumOfCirculationDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesQuantumOfCirculation.quantumOfCirculationDependencies;
  }
});
Object.defineProperty(exports, "reducedPlanckConstantDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesReducedPlanckConstant.reducedPlanckConstantDependencies;
  }
});
Object.defineProperty(exports, "rydbergDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRydberg.rydbergDependencies;
  }
});
Object.defineProperty(exports, "sackurTetrodeDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSackurTetrode.sackurTetrodeDependencies;
  }
});
Object.defineProperty(exports, "secondRadiationDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSecondRadiation.secondRadiationDependencies;
  }
});
Object.defineProperty(exports, "speedOfLightDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSpeedOfLight.speedOfLightDependencies;
  }
});
Object.defineProperty(exports, "stefanBoltzmannDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesStefanBoltzmann.stefanBoltzmannDependencies;
  }
});
Object.defineProperty(exports, "thomsonCrossSectionDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesThomsonCrossSection.thomsonCrossSectionDependencies;
  }
});
Object.defineProperty(exports, "vacuumImpedanceDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesVacuumImpedance.vacuumImpedanceDependencies;
  }
});
Object.defineProperty(exports, "weakMixingAngleDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesWeakMixingAngle.weakMixingAngleDependencies;
  }
});
Object.defineProperty(exports, "wienDisplacementDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesWienDisplacement.wienDisplacementDependencies;
  }
});
Object.defineProperty(exports, "applyTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesApplyTransform.applyTransformDependencies;
  }
});
Object.defineProperty(exports, "columnTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesColumnTransform.columnTransformDependencies;
  }
});
Object.defineProperty(exports, "filterTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesFilterTransform.filterTransformDependencies;
  }
});
Object.defineProperty(exports, "forEachTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesForEachTransform.forEachTransformDependencies;
  }
});
Object.defineProperty(exports, "indexTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesIndexTransform.indexTransformDependencies;
  }
});
Object.defineProperty(exports, "mapTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMapTransform.mapTransformDependencies;
  }
});
Object.defineProperty(exports, "maxTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMaxTransform.maxTransformDependencies;
  }
});
Object.defineProperty(exports, "meanTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMeanTransform.meanTransformDependencies;
  }
});
Object.defineProperty(exports, "minTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesMinTransform.minTransformDependencies;
  }
});
Object.defineProperty(exports, "rangeTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRangeTransform.rangeTransformDependencies;
  }
});
Object.defineProperty(exports, "rowTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesRowTransform.rowTransformDependencies;
  }
});
Object.defineProperty(exports, "subsetTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSubsetTransform.subsetTransformDependencies;
  }
});
Object.defineProperty(exports, "concatTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesConcatTransform.concatTransformDependencies;
  }
});
Object.defineProperty(exports, "stdTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesStdTransform.stdTransformDependencies;
  }
});
Object.defineProperty(exports, "sumTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesSumTransform.sumTransformDependencies;
  }
});
Object.defineProperty(exports, "varianceTransformDependencies", {
  enumerable: true,
  get: function () {
    return _dependenciesVarianceTransform.varianceTransformDependencies;
  }
});
Object.defineProperty(exports, "all", {
  enumerable: true,
  get: function () {
    return _allFactoriesAny.all;
  }
});

var _dependenciesTyped = require("./dependenciesAny/dependenciesTyped.generated");

var _dependenciesResultSet = require("./dependenciesAny/dependenciesResultSet.generated");

var _dependenciesBigNumberClass = require("./dependenciesAny/dependenciesBigNumberClass.generated");

var _dependenciesComplexClass = require("./dependenciesAny/dependenciesComplexClass.generated");

var _dependenciesFractionClass = require("./dependenciesAny/dependenciesFractionClass.generated");

var _dependenciesRangeClass = require("./dependenciesAny/dependenciesRangeClass.generated");

var _dependenciesMatrixClass = require("./dependenciesAny/dependenciesMatrixClass.generated");

var _dependenciesDenseMatrixClass = require("./dependenciesAny/dependenciesDenseMatrixClass.generated");

var _dependenciesClone = require("./dependenciesAny/dependenciesClone.generated");

var _dependenciesIsInteger = require("./dependenciesAny/dependenciesIsInteger.generated");

var _dependenciesIsNegative = require("./dependenciesAny/dependenciesIsNegative.generated");

var _dependenciesIsNumeric = require("./dependenciesAny/dependenciesIsNumeric.generated");

var _dependenciesHasNumericValue = require("./dependenciesAny/dependenciesHasNumericValue.generated");

var _dependenciesIsPositive = require("./dependenciesAny/dependenciesIsPositive.generated");

var _dependenciesIsZero = require("./dependenciesAny/dependenciesIsZero.generated");

var _dependenciesIsNaN = require("./dependenciesAny/dependenciesIsNaN.generated");

var _dependenciesTypeOf = require("./dependenciesAny/dependenciesTypeOf.generated");

var _dependenciesDeprecatedTypeof = require("./dependenciesAny/dependenciesDeprecatedTypeof.generated");

var _dependenciesEqualScalar = require("./dependenciesAny/dependenciesEqualScalar.generated");

var _dependenciesSparseMatrixClass = require("./dependenciesAny/dependenciesSparseMatrixClass.generated");

var _dependenciesNumber = require("./dependenciesAny/dependenciesNumber.generated");

var _dependenciesString = require("./dependenciesAny/dependenciesString.generated");

var _dependenciesBoolean = require("./dependenciesAny/dependenciesBoolean.generated");

var _dependenciesBignumber = require("./dependenciesAny/dependenciesBignumber.generated");

var _dependenciesComplex = require("./dependenciesAny/dependenciesComplex.generated");

var _dependenciesFraction = require("./dependenciesAny/dependenciesFraction.generated");

var _dependenciesMatrix = require("./dependenciesAny/dependenciesMatrix.generated");

var _dependenciesSplitUnit = require("./dependenciesAny/dependenciesSplitUnit.generated");

var _dependenciesUnaryMinus = require("./dependenciesAny/dependenciesUnaryMinus.generated");

var _dependenciesUnaryPlus = require("./dependenciesAny/dependenciesUnaryPlus.generated");

var _dependenciesAbs = require("./dependenciesAny/dependenciesAbs.generated");

var _dependenciesApply = require("./dependenciesAny/dependenciesApply.generated");

var _dependenciesAddScalar = require("./dependenciesAny/dependenciesAddScalar.generated");

var _dependenciesCbrt = require("./dependenciesAny/dependenciesCbrt.generated");

var _dependenciesCeil = require("./dependenciesAny/dependenciesCeil.generated");

var _dependenciesCube = require("./dependenciesAny/dependenciesCube.generated");

var _dependenciesExp = require("./dependenciesAny/dependenciesExp.generated");

var _dependenciesExpm = require("./dependenciesAny/dependenciesExpm1.generated");

var _dependenciesFix = require("./dependenciesAny/dependenciesFix.generated");

var _dependenciesFloor = require("./dependenciesAny/dependenciesFloor.generated");

var _dependenciesGcd = require("./dependenciesAny/dependenciesGcd.generated");

var _dependenciesLcm = require("./dependenciesAny/dependenciesLcm.generated");

var _dependenciesLog = require("./dependenciesAny/dependenciesLog10.generated");

var _dependenciesLog2 = require("./dependenciesAny/dependenciesLog2.generated");

var _dependenciesMod = require("./dependenciesAny/dependenciesMod.generated");

var _dependenciesMultiplyScalar = require("./dependenciesAny/dependenciesMultiplyScalar.generated");

var _dependenciesMultiply = require("./dependenciesAny/dependenciesMultiply.generated");

var _dependenciesNthRoot = require("./dependenciesAny/dependenciesNthRoot.generated");

var _dependenciesSign = require("./dependenciesAny/dependenciesSign.generated");

var _dependenciesSqrt = require("./dependenciesAny/dependenciesSqrt.generated");

var _dependenciesSquare = require("./dependenciesAny/dependenciesSquare.generated");

var _dependenciesSubtract = require("./dependenciesAny/dependenciesSubtract.generated");

var _dependenciesXgcd = require("./dependenciesAny/dependenciesXgcd.generated");

var _dependenciesDotMultiply = require("./dependenciesAny/dependenciesDotMultiply.generated");

var _dependenciesBitAnd = require("./dependenciesAny/dependenciesBitAnd.generated");

var _dependenciesBitNot = require("./dependenciesAny/dependenciesBitNot.generated");

var _dependenciesBitOr = require("./dependenciesAny/dependenciesBitOr.generated");

var _dependenciesBitXor = require("./dependenciesAny/dependenciesBitXor.generated");

var _dependenciesArg = require("./dependenciesAny/dependenciesArg.generated");

var _dependenciesConj = require("./dependenciesAny/dependenciesConj.generated");

var _dependenciesIm = require("./dependenciesAny/dependenciesIm.generated");

var _dependenciesRe = require("./dependenciesAny/dependenciesRe.generated");

var _dependenciesNot = require("./dependenciesAny/dependenciesNot.generated");

var _dependenciesOr = require("./dependenciesAny/dependenciesOr.generated");

var _dependenciesXor = require("./dependenciesAny/dependenciesXor.generated");

var _dependenciesConcat = require("./dependenciesAny/dependenciesConcat.generated");

var _dependenciesColumn = require("./dependenciesAny/dependenciesColumn.generated");

var _dependenciesCross = require("./dependenciesAny/dependenciesCross.generated");

var _dependenciesDiag = require("./dependenciesAny/dependenciesDiag.generated");

var _dependenciesEye = require("./dependenciesAny/dependenciesEye.generated");

var _dependenciesFilter = require("./dependenciesAny/dependenciesFilter.generated");

var _dependenciesFlatten = require("./dependenciesAny/dependenciesFlatten.generated");

var _dependenciesForEach = require("./dependenciesAny/dependenciesForEach.generated");

var _dependenciesGetMatrixDataType = require("./dependenciesAny/dependenciesGetMatrixDataType.generated");

var _dependenciesIdentity = require("./dependenciesAny/dependenciesIdentity.generated");

var _dependenciesKron = require("./dependenciesAny/dependenciesKron.generated");

var _dependenciesMap = require("./dependenciesAny/dependenciesMap.generated");

var _dependenciesOnes = require("./dependenciesAny/dependenciesOnes.generated");

var _dependenciesRange = require("./dependenciesAny/dependenciesRange.generated");

var _dependenciesReshape = require("./dependenciesAny/dependenciesReshape.generated");

var _dependenciesResize = require("./dependenciesAny/dependenciesResize.generated");

var _dependenciesRow = require("./dependenciesAny/dependenciesRow.generated");

var _dependenciesSize = require("./dependenciesAny/dependenciesSize.generated");

var _dependenciesSqueeze = require("./dependenciesAny/dependenciesSqueeze.generated");

var _dependenciesSubset = require("./dependenciesAny/dependenciesSubset.generated");

var _dependenciesTranspose = require("./dependenciesAny/dependenciesTranspose.generated");

var _dependenciesCtranspose = require("./dependenciesAny/dependenciesCtranspose.generated");

var _dependenciesZeros = require("./dependenciesAny/dependenciesZeros.generated");

var _dependenciesErf = require("./dependenciesAny/dependenciesErf.generated");

var _dependenciesMode = require("./dependenciesAny/dependenciesMode.generated");

var _dependenciesProd = require("./dependenciesAny/dependenciesProd.generated");

var _dependenciesFormat = require("./dependenciesAny/dependenciesFormat.generated");

var _dependenciesPrint = require("./dependenciesAny/dependenciesPrint.generated");

var _dependenciesTo = require("./dependenciesAny/dependenciesTo.generated");

var _dependenciesIsPrime = require("./dependenciesAny/dependenciesIsPrime.generated");

var _dependenciesNumeric = require("./dependenciesAny/dependenciesNumeric.generated");

var _dependenciesDivideScalar = require("./dependenciesAny/dependenciesDivideScalar.generated");

var _dependenciesPow = require("./dependenciesAny/dependenciesPow.generated");

var _dependenciesRound = require("./dependenciesAny/dependenciesRound.generated");

var _dependenciesLog3 = require("./dependenciesAny/dependenciesLog.generated");

var _dependenciesLog1p = require("./dependenciesAny/dependenciesLog1p.generated");

var _dependenciesNthRoots = require("./dependenciesAny/dependenciesNthRoots.generated");

var _dependenciesDotPow = require("./dependenciesAny/dependenciesDotPow.generated");

var _dependenciesDotDivide = require("./dependenciesAny/dependenciesDotDivide.generated");

var _dependenciesLsolve = require("./dependenciesAny/dependenciesLsolve.generated");

var _dependenciesUsolve = require("./dependenciesAny/dependenciesUsolve.generated");

var _dependenciesLeftShift = require("./dependenciesAny/dependenciesLeftShift.generated");

var _dependenciesRightArithShift = require("./dependenciesAny/dependenciesRightArithShift.generated");

var _dependenciesRightLogShift = require("./dependenciesAny/dependenciesRightLogShift.generated");

var _dependenciesAnd = require("./dependenciesAny/dependenciesAnd.generated");

var _dependenciesCompare = require("./dependenciesAny/dependenciesCompare.generated");

var _dependenciesCompareNatural = require("./dependenciesAny/dependenciesCompareNatural.generated");

var _dependenciesCompareText = require("./dependenciesAny/dependenciesCompareText.generated");

var _dependenciesEqual = require("./dependenciesAny/dependenciesEqual.generated");

var _dependenciesEqualText = require("./dependenciesAny/dependenciesEqualText.generated");

var _dependenciesSmaller = require("./dependenciesAny/dependenciesSmaller.generated");

var _dependenciesSmallerEq = require("./dependenciesAny/dependenciesSmallerEq.generated");

var _dependenciesLarger = require("./dependenciesAny/dependenciesLarger.generated");

var _dependenciesLargerEq = require("./dependenciesAny/dependenciesLargerEq.generated");

var _dependenciesDeepEqual = require("./dependenciesAny/dependenciesDeepEqual.generated");

var _dependenciesUnequal = require("./dependenciesAny/dependenciesUnequal.generated");

var _dependenciesPartitionSelect = require("./dependenciesAny/dependenciesPartitionSelect.generated");

var _dependenciesSort = require("./dependenciesAny/dependenciesSort.generated");

var _dependenciesMax = require("./dependenciesAny/dependenciesMax.generated");

var _dependenciesMin = require("./dependenciesAny/dependenciesMin.generated");

var _dependenciesImmutableDenseMatrixClass = require("./dependenciesAny/dependenciesImmutableDenseMatrixClass.generated");

var _dependenciesIndexClass = require("./dependenciesAny/dependenciesIndexClass.generated");

var _dependenciesFibonacciHeapClass = require("./dependenciesAny/dependenciesFibonacciHeapClass.generated");

var _dependenciesSpaClass = require("./dependenciesAny/dependenciesSpaClass.generated");

var _dependenciesUnitClass = require("./dependenciesAny/dependenciesUnitClass.generated");

var _dependenciesUnitFunction = require("./dependenciesAny/dependenciesUnitFunction.generated");

var _dependenciesSparse = require("./dependenciesAny/dependenciesSparse.generated");

var _dependenciesCreateUnit = require("./dependenciesAny/dependenciesCreateUnit.generated");

var _dependenciesAcos = require("./dependenciesAny/dependenciesAcos.generated");

var _dependenciesAcosh = require("./dependenciesAny/dependenciesAcosh.generated");

var _dependenciesAcot = require("./dependenciesAny/dependenciesAcot.generated");

var _dependenciesAcoth = require("./dependenciesAny/dependenciesAcoth.generated");

var _dependenciesAcsc = require("./dependenciesAny/dependenciesAcsc.generated");

var _dependenciesAcsch = require("./dependenciesAny/dependenciesAcsch.generated");

var _dependenciesAsec = require("./dependenciesAny/dependenciesAsec.generated");

var _dependenciesAsech = require("./dependenciesAny/dependenciesAsech.generated");

var _dependenciesAsin = require("./dependenciesAny/dependenciesAsin.generated");

var _dependenciesAsinh = require("./dependenciesAny/dependenciesAsinh.generated");

var _dependenciesAtan = require("./dependenciesAny/dependenciesAtan.generated");

var _dependenciesAtan2 = require("./dependenciesAny/dependenciesAtan2.generated");

var _dependenciesAtanh = require("./dependenciesAny/dependenciesAtanh.generated");

var _dependenciesCos = require("./dependenciesAny/dependenciesCos.generated");

var _dependenciesCosh = require("./dependenciesAny/dependenciesCosh.generated");

var _dependenciesCot = require("./dependenciesAny/dependenciesCot.generated");

var _dependenciesCoth = require("./dependenciesAny/dependenciesCoth.generated");

var _dependenciesCsc = require("./dependenciesAny/dependenciesCsc.generated");

var _dependenciesCsch = require("./dependenciesAny/dependenciesCsch.generated");

var _dependenciesSec = require("./dependenciesAny/dependenciesSec.generated");

var _dependenciesSech = require("./dependenciesAny/dependenciesSech.generated");

var _dependenciesSin = require("./dependenciesAny/dependenciesSin.generated");

var _dependenciesSinh = require("./dependenciesAny/dependenciesSinh.generated");

var _dependenciesTan = require("./dependenciesAny/dependenciesTan.generated");

var _dependenciesTanh = require("./dependenciesAny/dependenciesTanh.generated");

var _dependenciesSetCartesian = require("./dependenciesAny/dependenciesSetCartesian.generated");

var _dependenciesSetDifference = require("./dependenciesAny/dependenciesSetDifference.generated");

var _dependenciesSetDistinct = require("./dependenciesAny/dependenciesSetDistinct.generated");

var _dependenciesSetIntersect = require("./dependenciesAny/dependenciesSetIntersect.generated");

var _dependenciesSetIsSubset = require("./dependenciesAny/dependenciesSetIsSubset.generated");

var _dependenciesSetMultiplicity = require("./dependenciesAny/dependenciesSetMultiplicity.generated");

var _dependenciesSetPowerset = require("./dependenciesAny/dependenciesSetPowerset.generated");

var _dependenciesSetSize = require("./dependenciesAny/dependenciesSetSize.generated");

var _dependenciesSetSymDifference = require("./dependenciesAny/dependenciesSetSymDifference.generated");

var _dependenciesSetUnion = require("./dependenciesAny/dependenciesSetUnion.generated");

var _dependenciesAdd = require("./dependenciesAny/dependenciesAdd.generated");

var _dependenciesHypot = require("./dependenciesAny/dependenciesHypot.generated");

var _dependenciesNorm = require("./dependenciesAny/dependenciesNorm.generated");

var _dependenciesDot = require("./dependenciesAny/dependenciesDot.generated");

var _dependenciesTrace = require("./dependenciesAny/dependenciesTrace.generated");

var _dependenciesIndex = require("./dependenciesAny/dependenciesIndex.generated");

var _dependenciesNode = require("./dependenciesAny/dependenciesNode.generated");

var _dependenciesAccessorNode = require("./dependenciesAny/dependenciesAccessorNode.generated");

var _dependenciesArrayNode = require("./dependenciesAny/dependenciesArrayNode.generated");

var _dependenciesAssignmentNode = require("./dependenciesAny/dependenciesAssignmentNode.generated");

var _dependenciesBlockNode = require("./dependenciesAny/dependenciesBlockNode.generated");

var _dependenciesConditionalNode = require("./dependenciesAny/dependenciesConditionalNode.generated");

var _dependenciesConstantNode = require("./dependenciesAny/dependenciesConstantNode.generated");

var _dependenciesFunctionAssignmentNode = require("./dependenciesAny/dependenciesFunctionAssignmentNode.generated");

var _dependenciesIndexNode = require("./dependenciesAny/dependenciesIndexNode.generated");

var _dependenciesObjectNode = require("./dependenciesAny/dependenciesObjectNode.generated");

var _dependenciesOperatorNode = require("./dependenciesAny/dependenciesOperatorNode.generated");

var _dependenciesParenthesisNode = require("./dependenciesAny/dependenciesParenthesisNode.generated");

var _dependenciesRangeNode = require("./dependenciesAny/dependenciesRangeNode.generated");

var _dependenciesRelationalNode = require("./dependenciesAny/dependenciesRelationalNode.generated");

var _dependenciesSymbolNode = require("./dependenciesAny/dependenciesSymbolNode.generated");

var _dependenciesFunctionNode = require("./dependenciesAny/dependenciesFunctionNode.generated");

var _dependenciesParse = require("./dependenciesAny/dependenciesParse.generated");

var _dependenciesCompile = require("./dependenciesAny/dependenciesCompile.generated");

var _dependenciesEvaluate = require("./dependenciesAny/dependenciesEvaluate.generated");

var _dependenciesDeprecatedEval = require("./dependenciesAny/dependenciesDeprecatedEval.generated");

var _dependenciesParserClass = require("./dependenciesAny/dependenciesParserClass.generated");

var _dependenciesParser = require("./dependenciesAny/dependenciesParser.generated");

var _dependenciesLup = require("./dependenciesAny/dependenciesLup.generated");

var _dependenciesQr = require("./dependenciesAny/dependenciesQr.generated");

var _dependenciesSlu = require("./dependenciesAny/dependenciesSlu.generated");

var _dependenciesLusolve = require("./dependenciesAny/dependenciesLusolve.generated");

var _dependenciesHelpClass = require("./dependenciesAny/dependenciesHelpClass.generated");

var _dependenciesChainClass = require("./dependenciesAny/dependenciesChainClass.generated");

var _dependenciesHelp = require("./dependenciesAny/dependenciesHelp.generated");

var _dependenciesChain = require("./dependenciesAny/dependenciesChain.generated");

var _dependenciesDet = require("./dependenciesAny/dependenciesDet.generated");

var _dependenciesInv = require("./dependenciesAny/dependenciesInv.generated");

var _dependenciesExpm2 = require("./dependenciesAny/dependenciesExpm.generated");

var _dependenciesSqrtm = require("./dependenciesAny/dependenciesSqrtm.generated");

var _dependenciesDivide = require("./dependenciesAny/dependenciesDivide.generated");

var _dependenciesDistance = require("./dependenciesAny/dependenciesDistance.generated");

var _dependenciesIntersect = require("./dependenciesAny/dependenciesIntersect.generated");

var _dependenciesSum = require("./dependenciesAny/dependenciesSum.generated");

var _dependenciesMean = require("./dependenciesAny/dependenciesMean.generated");

var _dependenciesMedian = require("./dependenciesAny/dependenciesMedian.generated");

var _dependenciesMad = require("./dependenciesAny/dependenciesMad.generated");

var _dependenciesVariance = require("./dependenciesAny/dependenciesVariance.generated");

var _dependenciesDeprecatedVar = require("./dependenciesAny/dependenciesDeprecatedVar.generated");

var _dependenciesQuantileSeq = require("./dependenciesAny/dependenciesQuantileSeq.generated");

var _dependenciesStd = require("./dependenciesAny/dependenciesStd.generated");

var _dependenciesCombinations = require("./dependenciesAny/dependenciesCombinations.generated");

var _dependenciesGamma = require("./dependenciesAny/dependenciesGamma.generated");

var _dependenciesFactorial = require("./dependenciesAny/dependenciesFactorial.generated");

var _dependenciesKldivergence = require("./dependenciesAny/dependenciesKldivergence.generated");

var _dependenciesMultinomial = require("./dependenciesAny/dependenciesMultinomial.generated");

var _dependenciesPermutations = require("./dependenciesAny/dependenciesPermutations.generated");

var _dependenciesPickRandom = require("./dependenciesAny/dependenciesPickRandom.generated");

var _dependenciesRandom = require("./dependenciesAny/dependenciesRandom.generated");

var _dependenciesRandomInt = require("./dependenciesAny/dependenciesRandomInt.generated");

var _dependenciesStirlingS = require("./dependenciesAny/dependenciesStirlingS2.generated");

var _dependenciesBellNumbers = require("./dependenciesAny/dependenciesBellNumbers.generated");

var _dependenciesCatalan = require("./dependenciesAny/dependenciesCatalan.generated");

var _dependenciesComposition = require("./dependenciesAny/dependenciesComposition.generated");

var _dependenciesSimplify = require("./dependenciesAny/dependenciesSimplify.generated");

var _dependenciesDerivative = require("./dependenciesAny/dependenciesDerivative.generated");

var _dependenciesRationalize = require("./dependenciesAny/dependenciesRationalize.generated");

var _dependenciesReviver = require("./dependenciesAny/dependenciesReviver.generated");

var _dependenciesE = require("./dependenciesAny/dependenciesE.generated");

var _dependenciesUppercaseE = require("./dependenciesAny/dependenciesUppercaseE.generated");

var _dependenciesFalse = require("./dependenciesAny/dependenciesFalse.generated");

var _dependenciesI = require("./dependenciesAny/dependenciesI.generated");

var _dependenciesInfinity = require("./dependenciesAny/dependenciesInfinity.generated");

var _dependenciesLN = require("./dependenciesAny/dependenciesLN10.generated");

var _dependenciesLN2 = require("./dependenciesAny/dependenciesLN2.generated");

var _dependenciesLOG10E = require("./dependenciesAny/dependenciesLOG10E.generated");

var _dependenciesLOG2E = require("./dependenciesAny/dependenciesLOG2E.generated");

var _dependenciesNaN = require("./dependenciesAny/dependenciesNaN.generated");

var _dependenciesNull = require("./dependenciesAny/dependenciesNull.generated");

var _dependenciesPhi = require("./dependenciesAny/dependenciesPhi.generated");

var _dependenciesPi = require("./dependenciesAny/dependenciesPi.generated");

var _dependenciesUppercasePi = require("./dependenciesAny/dependenciesUppercasePi.generated");

var _dependenciesSQRT1_ = require("./dependenciesAny/dependenciesSQRT1_2.generated");

var _dependenciesSQRT = require("./dependenciesAny/dependenciesSQRT2.generated");

var _dependenciesTau = require("./dependenciesAny/dependenciesTau.generated");

var _dependenciesTrue = require("./dependenciesAny/dependenciesTrue.generated");

var _dependenciesVersion = require("./dependenciesAny/dependenciesVersion.generated");

var _dependenciesAtomicMass = require("./dependenciesAny/dependenciesAtomicMass.generated");

var _dependenciesAvogadro = require("./dependenciesAny/dependenciesAvogadro.generated");

var _dependenciesBohrMagneton = require("./dependenciesAny/dependenciesBohrMagneton.generated");

var _dependenciesBohrRadius = require("./dependenciesAny/dependenciesBohrRadius.generated");

var _dependenciesBoltzmann = require("./dependenciesAny/dependenciesBoltzmann.generated");

var _dependenciesClassicalElectronRadius = require("./dependenciesAny/dependenciesClassicalElectronRadius.generated");

var _dependenciesConductanceQuantum = require("./dependenciesAny/dependenciesConductanceQuantum.generated");

var _dependenciesCoulomb = require("./dependenciesAny/dependenciesCoulomb.generated");

var _dependenciesDeuteronMass = require("./dependenciesAny/dependenciesDeuteronMass.generated");

var _dependenciesEfimovFactor = require("./dependenciesAny/dependenciesEfimovFactor.generated");

var _dependenciesElectricConstant = require("./dependenciesAny/dependenciesElectricConstant.generated");

var _dependenciesElectronMass = require("./dependenciesAny/dependenciesElectronMass.generated");

var _dependenciesElementaryCharge = require("./dependenciesAny/dependenciesElementaryCharge.generated");

var _dependenciesFaraday = require("./dependenciesAny/dependenciesFaraday.generated");

var _dependenciesFermiCoupling = require("./dependenciesAny/dependenciesFermiCoupling.generated");

var _dependenciesFineStructure = require("./dependenciesAny/dependenciesFineStructure.generated");

var _dependenciesFirstRadiation = require("./dependenciesAny/dependenciesFirstRadiation.generated");

var _dependenciesGasConstant = require("./dependenciesAny/dependenciesGasConstant.generated");

var _dependenciesGravitationConstant = require("./dependenciesAny/dependenciesGravitationConstant.generated");

var _dependenciesGravity = require("./dependenciesAny/dependenciesGravity.generated");

var _dependenciesHartreeEnergy = require("./dependenciesAny/dependenciesHartreeEnergy.generated");

var _dependenciesInverseConductanceQuantum = require("./dependenciesAny/dependenciesInverseConductanceQuantum.generated");

var _dependenciesKlitzing = require("./dependenciesAny/dependenciesKlitzing.generated");

var _dependenciesLoschmidt = require("./dependenciesAny/dependenciesLoschmidt.generated");

var _dependenciesMagneticConstant = require("./dependenciesAny/dependenciesMagneticConstant.generated");

var _dependenciesMagneticFluxQuantum = require("./dependenciesAny/dependenciesMagneticFluxQuantum.generated");

var _dependenciesMolarMass = require("./dependenciesAny/dependenciesMolarMass.generated");

var _dependenciesMolarMassC = require("./dependenciesAny/dependenciesMolarMassC12.generated");

var _dependenciesMolarPlanckConstant = require("./dependenciesAny/dependenciesMolarPlanckConstant.generated");

var _dependenciesMolarVolume = require("./dependenciesAny/dependenciesMolarVolume.generated");

var _dependenciesNeutronMass = require("./dependenciesAny/dependenciesNeutronMass.generated");

var _dependenciesNuclearMagneton = require("./dependenciesAny/dependenciesNuclearMagneton.generated");

var _dependenciesPlanckCharge = require("./dependenciesAny/dependenciesPlanckCharge.generated");

var _dependenciesPlanckConstant = require("./dependenciesAny/dependenciesPlanckConstant.generated");

var _dependenciesPlanckLength = require("./dependenciesAny/dependenciesPlanckLength.generated");

var _dependenciesPlanckMass = require("./dependenciesAny/dependenciesPlanckMass.generated");

var _dependenciesPlanckTemperature = require("./dependenciesAny/dependenciesPlanckTemperature.generated");

var _dependenciesPlanckTime = require("./dependenciesAny/dependenciesPlanckTime.generated");

var _dependenciesProtonMass = require("./dependenciesAny/dependenciesProtonMass.generated");

var _dependenciesQuantumOfCirculation = require("./dependenciesAny/dependenciesQuantumOfCirculation.generated");

var _dependenciesReducedPlanckConstant = require("./dependenciesAny/dependenciesReducedPlanckConstant.generated");

var _dependenciesRydberg = require("./dependenciesAny/dependenciesRydberg.generated");

var _dependenciesSackurTetrode = require("./dependenciesAny/dependenciesSackurTetrode.generated");

var _dependenciesSecondRadiation = require("./dependenciesAny/dependenciesSecondRadiation.generated");

var _dependenciesSpeedOfLight = require("./dependenciesAny/dependenciesSpeedOfLight.generated");

var _dependenciesStefanBoltzmann = require("./dependenciesAny/dependenciesStefanBoltzmann.generated");

var _dependenciesThomsonCrossSection = require("./dependenciesAny/dependenciesThomsonCrossSection.generated");

var _dependenciesVacuumImpedance = require("./dependenciesAny/dependenciesVacuumImpedance.generated");

var _dependenciesWeakMixingAngle = require("./dependenciesAny/dependenciesWeakMixingAngle.generated");

var _dependenciesWienDisplacement = require("./dependenciesAny/dependenciesWienDisplacement.generated");

var _dependenciesApplyTransform = require("./dependenciesAny/dependenciesApplyTransform.generated");

var _dependenciesColumnTransform = require("./dependenciesAny/dependenciesColumnTransform.generated");

var _dependenciesFilterTransform = require("./dependenciesAny/dependenciesFilterTransform.generated");

var _dependenciesForEachTransform = require("./dependenciesAny/dependenciesForEachTransform.generated");

var _dependenciesIndexTransform = require("./dependenciesAny/dependenciesIndexTransform.generated");

var _dependenciesMapTransform = require("./dependenciesAny/dependenciesMapTransform.generated");

var _dependenciesMaxTransform = require("./dependenciesAny/dependenciesMaxTransform.generated");

var _dependenciesMeanTransform = require("./dependenciesAny/dependenciesMeanTransform.generated");

var _dependenciesMinTransform = require("./dependenciesAny/dependenciesMinTransform.generated");

var _dependenciesRangeTransform = require("./dependenciesAny/dependenciesRangeTransform.generated");

var _dependenciesRowTransform = require("./dependenciesAny/dependenciesRowTransform.generated");

var _dependenciesSubsetTransform = require("./dependenciesAny/dependenciesSubsetTransform.generated");

var _dependenciesConcatTransform = require("./dependenciesAny/dependenciesConcatTransform.generated");

var _dependenciesStdTransform = require("./dependenciesAny/dependenciesStdTransform.generated");

var _dependenciesSumTransform = require("./dependenciesAny/dependenciesSumTransform.generated");

var _dependenciesVarianceTransform = require("./dependenciesAny/dependenciesVarianceTransform.generated");

var _allFactoriesAny = require("./allFactoriesAny.js");
},{"./dependenciesAny/dependenciesTyped.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTyped.generated.js","./dependenciesAny/dependenciesResultSet.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesResultSet.generated.js","./dependenciesAny/dependenciesBigNumberClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBigNumberClass.generated.js","./dependenciesAny/dependenciesComplexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplexClass.generated.js","./dependenciesAny/dependenciesFractionClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFractionClass.generated.js","./dependenciesAny/dependenciesRangeClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeClass.generated.js","./dependenciesAny/dependenciesMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrixClass.generated.js","./dependenciesAny/dependenciesDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDenseMatrixClass.generated.js","./dependenciesAny/dependenciesClone.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesClone.generated.js","./dependenciesAny/dependenciesIsInteger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsInteger.generated.js","./dependenciesAny/dependenciesIsNegative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNegative.generated.js","./dependenciesAny/dependenciesIsNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNumeric.generated.js","./dependenciesAny/dependenciesHasNumericValue.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHasNumericValue.generated.js","./dependenciesAny/dependenciesIsPositive.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPositive.generated.js","./dependenciesAny/dependenciesIsZero.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsZero.generated.js","./dependenciesAny/dependenciesIsNaN.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsNaN.generated.js","./dependenciesAny/dependenciesTypeOf.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTypeOf.generated.js","./dependenciesAny/dependenciesDeprecatedTypeof.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeprecatedTypeof.generated.js","./dependenciesAny/dependenciesEqualScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualScalar.generated.js","./dependenciesAny/dependenciesSparseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparseMatrixClass.generated.js","./dependenciesAny/dependenciesNumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumber.generated.js","./dependenciesAny/dependenciesString.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesString.generated.js","./dependenciesAny/dependenciesBoolean.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBoolean.generated.js","./dependenciesAny/dependenciesBignumber.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBignumber.generated.js","./dependenciesAny/dependenciesComplex.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComplex.generated.js","./dependenciesAny/dependenciesFraction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFraction.generated.js","./dependenciesAny/dependenciesMatrix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMatrix.generated.js","./dependenciesAny/dependenciesSplitUnit.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSplitUnit.generated.js","./dependenciesAny/dependenciesUnaryMinus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryMinus.generated.js","./dependenciesAny/dependenciesUnaryPlus.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnaryPlus.generated.js","./dependenciesAny/dependenciesAbs.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAbs.generated.js","./dependenciesAny/dependenciesApply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesApply.generated.js","./dependenciesAny/dependenciesAddScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAddScalar.generated.js","./dependenciesAny/dependenciesCbrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCbrt.generated.js","./dependenciesAny/dependenciesCeil.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCeil.generated.js","./dependenciesAny/dependenciesCube.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCube.generated.js","./dependenciesAny/dependenciesExp.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesExp.generated.js","./dependenciesAny/dependenciesExpm1.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesExpm1.generated.js","./dependenciesAny/dependenciesFix.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFix.generated.js","./dependenciesAny/dependenciesFloor.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFloor.generated.js","./dependenciesAny/dependenciesGcd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGcd.generated.js","./dependenciesAny/dependenciesLcm.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLcm.generated.js","./dependenciesAny/dependenciesLog10.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog10.generated.js","./dependenciesAny/dependenciesLog2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog2.generated.js","./dependenciesAny/dependenciesMod.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMod.generated.js","./dependenciesAny/dependenciesMultiplyScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiplyScalar.generated.js","./dependenciesAny/dependenciesMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultiply.generated.js","./dependenciesAny/dependenciesNthRoot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNthRoot.generated.js","./dependenciesAny/dependenciesSign.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSign.generated.js","./dependenciesAny/dependenciesSqrt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrt.generated.js","./dependenciesAny/dependenciesSquare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSquare.generated.js","./dependenciesAny/dependenciesSubtract.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubtract.generated.js","./dependenciesAny/dependenciesXgcd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesXgcd.generated.js","./dependenciesAny/dependenciesDotMultiply.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotMultiply.generated.js","./dependenciesAny/dependenciesBitAnd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitAnd.generated.js","./dependenciesAny/dependenciesBitNot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitNot.generated.js","./dependenciesAny/dependenciesBitOr.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitOr.generated.js","./dependenciesAny/dependenciesBitXor.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBitXor.generated.js","./dependenciesAny/dependenciesArg.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesArg.generated.js","./dependenciesAny/dependenciesConj.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConj.generated.js","./dependenciesAny/dependenciesIm.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIm.generated.js","./dependenciesAny/dependenciesRe.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRe.generated.js","./dependenciesAny/dependenciesNot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNot.generated.js","./dependenciesAny/dependenciesOr.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOr.generated.js","./dependenciesAny/dependenciesXor.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesXor.generated.js","./dependenciesAny/dependenciesConcat.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConcat.generated.js","./dependenciesAny/dependenciesColumn.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesColumn.generated.js","./dependenciesAny/dependenciesCross.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCross.generated.js","./dependenciesAny/dependenciesDiag.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDiag.generated.js","./dependenciesAny/dependenciesEye.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEye.generated.js","./dependenciesAny/dependenciesFilter.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFilter.generated.js","./dependenciesAny/dependenciesFlatten.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFlatten.generated.js","./dependenciesAny/dependenciesForEach.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesForEach.generated.js","./dependenciesAny/dependenciesGetMatrixDataType.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGetMatrixDataType.generated.js","./dependenciesAny/dependenciesIdentity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIdentity.generated.js","./dependenciesAny/dependenciesKron.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesKron.generated.js","./dependenciesAny/dependenciesMap.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMap.generated.js","./dependenciesAny/dependenciesOnes.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOnes.generated.js","./dependenciesAny/dependenciesRange.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRange.generated.js","./dependenciesAny/dependenciesReshape.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesReshape.generated.js","./dependenciesAny/dependenciesResize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesResize.generated.js","./dependenciesAny/dependenciesRow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRow.generated.js","./dependenciesAny/dependenciesSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSize.generated.js","./dependenciesAny/dependenciesSqueeze.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqueeze.generated.js","./dependenciesAny/dependenciesSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubset.generated.js","./dependenciesAny/dependenciesTranspose.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTranspose.generated.js","./dependenciesAny/dependenciesCtranspose.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCtranspose.generated.js","./dependenciesAny/dependenciesZeros.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesZeros.generated.js","./dependenciesAny/dependenciesErf.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesErf.generated.js","./dependenciesAny/dependenciesMode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMode.generated.js","./dependenciesAny/dependenciesProd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesProd.generated.js","./dependenciesAny/dependenciesFormat.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFormat.generated.js","./dependenciesAny/dependenciesPrint.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPrint.generated.js","./dependenciesAny/dependenciesTo.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTo.generated.js","./dependenciesAny/dependenciesIsPrime.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIsPrime.generated.js","./dependenciesAny/dependenciesNumeric.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNumeric.generated.js","./dependenciesAny/dependenciesDivideScalar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivideScalar.generated.js","./dependenciesAny/dependenciesPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPow.generated.js","./dependenciesAny/dependenciesRound.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRound.generated.js","./dependenciesAny/dependenciesLog.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog.generated.js","./dependenciesAny/dependenciesLog1p.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLog1p.generated.js","./dependenciesAny/dependenciesNthRoots.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNthRoots.generated.js","./dependenciesAny/dependenciesDotPow.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotPow.generated.js","./dependenciesAny/dependenciesDotDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDotDivide.generated.js","./dependenciesAny/dependenciesLsolve.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLsolve.generated.js","./dependenciesAny/dependenciesUsolve.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUsolve.generated.js","./dependenciesAny/dependenciesLeftShift.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLeftShift.generated.js","./dependenciesAny/dependenciesRightArithShift.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRightArithShift.generated.js","./dependenciesAny/dependenciesRightLogShift.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRightLogShift.generated.js","./dependenciesAny/dependenciesAnd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAnd.generated.js","./dependenciesAny/dependenciesCompare.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompare.generated.js","./dependenciesAny/dependenciesCompareNatural.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareNatural.generated.js","./dependenciesAny/dependenciesCompareText.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompareText.generated.js","./dependenciesAny/dependenciesEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqual.generated.js","./dependenciesAny/dependenciesEqualText.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEqualText.generated.js","./dependenciesAny/dependenciesSmaller.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmaller.generated.js","./dependenciesAny/dependenciesSmallerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSmallerEq.generated.js","./dependenciesAny/dependenciesLarger.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLarger.generated.js","./dependenciesAny/dependenciesLargerEq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLargerEq.generated.js","./dependenciesAny/dependenciesDeepEqual.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeepEqual.generated.js","./dependenciesAny/dependenciesUnequal.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnequal.generated.js","./dependenciesAny/dependenciesPartitionSelect.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPartitionSelect.generated.js","./dependenciesAny/dependenciesSort.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSort.generated.js","./dependenciesAny/dependenciesMax.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMax.generated.js","./dependenciesAny/dependenciesMin.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMin.generated.js","./dependenciesAny/dependenciesImmutableDenseMatrixClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesImmutableDenseMatrixClass.generated.js","./dependenciesAny/dependenciesIndexClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexClass.generated.js","./dependenciesAny/dependenciesFibonacciHeapClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFibonacciHeapClass.generated.js","./dependenciesAny/dependenciesSpaClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSpaClass.generated.js","./dependenciesAny/dependenciesUnitClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitClass.generated.js","./dependenciesAny/dependenciesUnitFunction.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUnitFunction.generated.js","./dependenciesAny/dependenciesSparse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSparse.generated.js","./dependenciesAny/dependenciesCreateUnit.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCreateUnit.generated.js","./dependenciesAny/dependenciesAcos.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcos.generated.js","./dependenciesAny/dependenciesAcosh.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcosh.generated.js","./dependenciesAny/dependenciesAcot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcot.generated.js","./dependenciesAny/dependenciesAcoth.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcoth.generated.js","./dependenciesAny/dependenciesAcsc.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcsc.generated.js","./dependenciesAny/dependenciesAcsch.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAcsch.generated.js","./dependenciesAny/dependenciesAsec.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsec.generated.js","./dependenciesAny/dependenciesAsech.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsech.generated.js","./dependenciesAny/dependenciesAsin.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsin.generated.js","./dependenciesAny/dependenciesAsinh.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAsinh.generated.js","./dependenciesAny/dependenciesAtan.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtan.generated.js","./dependenciesAny/dependenciesAtan2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtan2.generated.js","./dependenciesAny/dependenciesAtanh.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtanh.generated.js","./dependenciesAny/dependenciesCos.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCos.generated.js","./dependenciesAny/dependenciesCosh.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCosh.generated.js","./dependenciesAny/dependenciesCot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCot.generated.js","./dependenciesAny/dependenciesCoth.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCoth.generated.js","./dependenciesAny/dependenciesCsc.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCsc.generated.js","./dependenciesAny/dependenciesCsch.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCsch.generated.js","./dependenciesAny/dependenciesSec.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSec.generated.js","./dependenciesAny/dependenciesSech.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSech.generated.js","./dependenciesAny/dependenciesSin.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSin.generated.js","./dependenciesAny/dependenciesSinh.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSinh.generated.js","./dependenciesAny/dependenciesTan.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTan.generated.js","./dependenciesAny/dependenciesTanh.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTanh.generated.js","./dependenciesAny/dependenciesSetCartesian.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetCartesian.generated.js","./dependenciesAny/dependenciesSetDifference.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetDifference.generated.js","./dependenciesAny/dependenciesSetDistinct.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetDistinct.generated.js","./dependenciesAny/dependenciesSetIntersect.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetIntersect.generated.js","./dependenciesAny/dependenciesSetIsSubset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetIsSubset.generated.js","./dependenciesAny/dependenciesSetMultiplicity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetMultiplicity.generated.js","./dependenciesAny/dependenciesSetPowerset.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetPowerset.generated.js","./dependenciesAny/dependenciesSetSize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetSize.generated.js","./dependenciesAny/dependenciesSetSymDifference.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetSymDifference.generated.js","./dependenciesAny/dependenciesSetUnion.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSetUnion.generated.js","./dependenciesAny/dependenciesAdd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAdd.generated.js","./dependenciesAny/dependenciesHypot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHypot.generated.js","./dependenciesAny/dependenciesNorm.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNorm.generated.js","./dependenciesAny/dependenciesDot.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDot.generated.js","./dependenciesAny/dependenciesTrace.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTrace.generated.js","./dependenciesAny/dependenciesIndex.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndex.generated.js","./dependenciesAny/dependenciesNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNode.generated.js","./dependenciesAny/dependenciesAccessorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAccessorNode.generated.js","./dependenciesAny/dependenciesArrayNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesArrayNode.generated.js","./dependenciesAny/dependenciesAssignmentNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAssignmentNode.generated.js","./dependenciesAny/dependenciesBlockNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBlockNode.generated.js","./dependenciesAny/dependenciesConditionalNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConditionalNode.generated.js","./dependenciesAny/dependenciesConstantNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConstantNode.generated.js","./dependenciesAny/dependenciesFunctionAssignmentNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionAssignmentNode.generated.js","./dependenciesAny/dependenciesIndexNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexNode.generated.js","./dependenciesAny/dependenciesObjectNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesObjectNode.generated.js","./dependenciesAny/dependenciesOperatorNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesOperatorNode.generated.js","./dependenciesAny/dependenciesParenthesisNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParenthesisNode.generated.js","./dependenciesAny/dependenciesRangeNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeNode.generated.js","./dependenciesAny/dependenciesRelationalNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRelationalNode.generated.js","./dependenciesAny/dependenciesSymbolNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSymbolNode.generated.js","./dependenciesAny/dependenciesFunctionNode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFunctionNode.generated.js","./dependenciesAny/dependenciesParse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParse.generated.js","./dependenciesAny/dependenciesCompile.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCompile.generated.js","./dependenciesAny/dependenciesEvaluate.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEvaluate.generated.js","./dependenciesAny/dependenciesDeprecatedEval.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeprecatedEval.generated.js","./dependenciesAny/dependenciesParserClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParserClass.generated.js","./dependenciesAny/dependenciesParser.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesParser.generated.js","./dependenciesAny/dependenciesLup.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLup.generated.js","./dependenciesAny/dependenciesQr.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesQr.generated.js","./dependenciesAny/dependenciesSlu.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSlu.generated.js","./dependenciesAny/dependenciesLusolve.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLusolve.generated.js","./dependenciesAny/dependenciesHelpClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHelpClass.generated.js","./dependenciesAny/dependenciesChainClass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesChainClass.generated.js","./dependenciesAny/dependenciesHelp.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHelp.generated.js","./dependenciesAny/dependenciesChain.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesChain.generated.js","./dependenciesAny/dependenciesDet.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDet.generated.js","./dependenciesAny/dependenciesInv.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInv.generated.js","./dependenciesAny/dependenciesExpm.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesExpm.generated.js","./dependenciesAny/dependenciesSqrtm.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSqrtm.generated.js","./dependenciesAny/dependenciesDivide.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDivide.generated.js","./dependenciesAny/dependenciesDistance.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDistance.generated.js","./dependenciesAny/dependenciesIntersect.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIntersect.generated.js","./dependenciesAny/dependenciesSum.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSum.generated.js","./dependenciesAny/dependenciesMean.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMean.generated.js","./dependenciesAny/dependenciesMedian.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMedian.generated.js","./dependenciesAny/dependenciesMad.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMad.generated.js","./dependenciesAny/dependenciesVariance.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVariance.generated.js","./dependenciesAny/dependenciesDeprecatedVar.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeprecatedVar.generated.js","./dependenciesAny/dependenciesQuantileSeq.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesQuantileSeq.generated.js","./dependenciesAny/dependenciesStd.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStd.generated.js","./dependenciesAny/dependenciesCombinations.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCombinations.generated.js","./dependenciesAny/dependenciesGamma.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGamma.generated.js","./dependenciesAny/dependenciesFactorial.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFactorial.generated.js","./dependenciesAny/dependenciesKldivergence.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesKldivergence.generated.js","./dependenciesAny/dependenciesMultinomial.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMultinomial.generated.js","./dependenciesAny/dependenciesPermutations.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPermutations.generated.js","./dependenciesAny/dependenciesPickRandom.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPickRandom.generated.js","./dependenciesAny/dependenciesRandom.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRandom.generated.js","./dependenciesAny/dependenciesRandomInt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRandomInt.generated.js","./dependenciesAny/dependenciesStirlingS2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStirlingS2.generated.js","./dependenciesAny/dependenciesBellNumbers.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBellNumbers.generated.js","./dependenciesAny/dependenciesCatalan.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCatalan.generated.js","./dependenciesAny/dependenciesComposition.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesComposition.generated.js","./dependenciesAny/dependenciesSimplify.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSimplify.generated.js","./dependenciesAny/dependenciesDerivative.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDerivative.generated.js","./dependenciesAny/dependenciesRationalize.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRationalize.generated.js","./dependenciesAny/dependenciesReviver.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesReviver.generated.js","./dependenciesAny/dependenciesE.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesE.generated.js","./dependenciesAny/dependenciesUppercaseE.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUppercaseE.generated.js","./dependenciesAny/dependenciesFalse.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFalse.generated.js","./dependenciesAny/dependenciesI.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesI.generated.js","./dependenciesAny/dependenciesInfinity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInfinity.generated.js","./dependenciesAny/dependenciesLN10.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLN10.generated.js","./dependenciesAny/dependenciesLN2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLN2.generated.js","./dependenciesAny/dependenciesLOG10E.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLOG10E.generated.js","./dependenciesAny/dependenciesLOG2E.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLOG2E.generated.js","./dependenciesAny/dependenciesNaN.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNaN.generated.js","./dependenciesAny/dependenciesNull.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNull.generated.js","./dependenciesAny/dependenciesPhi.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPhi.generated.js","./dependenciesAny/dependenciesPi.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPi.generated.js","./dependenciesAny/dependenciesUppercasePi.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesUppercasePi.generated.js","./dependenciesAny/dependenciesSQRT1_2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSQRT1_2.generated.js","./dependenciesAny/dependenciesSQRT2.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSQRT2.generated.js","./dependenciesAny/dependenciesTau.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTau.generated.js","./dependenciesAny/dependenciesTrue.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesTrue.generated.js","./dependenciesAny/dependenciesVersion.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVersion.generated.js","./dependenciesAny/dependenciesAtomicMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAtomicMass.generated.js","./dependenciesAny/dependenciesAvogadro.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesAvogadro.generated.js","./dependenciesAny/dependenciesBohrMagneton.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBohrMagneton.generated.js","./dependenciesAny/dependenciesBohrRadius.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBohrRadius.generated.js","./dependenciesAny/dependenciesBoltzmann.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesBoltzmann.generated.js","./dependenciesAny/dependenciesClassicalElectronRadius.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesClassicalElectronRadius.generated.js","./dependenciesAny/dependenciesConductanceQuantum.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConductanceQuantum.generated.js","./dependenciesAny/dependenciesCoulomb.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesCoulomb.generated.js","./dependenciesAny/dependenciesDeuteronMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesDeuteronMass.generated.js","./dependenciesAny/dependenciesEfimovFactor.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesEfimovFactor.generated.js","./dependenciesAny/dependenciesElectricConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesElectricConstant.generated.js","./dependenciesAny/dependenciesElectronMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesElectronMass.generated.js","./dependenciesAny/dependenciesElementaryCharge.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesElementaryCharge.generated.js","./dependenciesAny/dependenciesFaraday.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFaraday.generated.js","./dependenciesAny/dependenciesFermiCoupling.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFermiCoupling.generated.js","./dependenciesAny/dependenciesFineStructure.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFineStructure.generated.js","./dependenciesAny/dependenciesFirstRadiation.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFirstRadiation.generated.js","./dependenciesAny/dependenciesGasConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGasConstant.generated.js","./dependenciesAny/dependenciesGravitationConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGravitationConstant.generated.js","./dependenciesAny/dependenciesGravity.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesGravity.generated.js","./dependenciesAny/dependenciesHartreeEnergy.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesHartreeEnergy.generated.js","./dependenciesAny/dependenciesInverseConductanceQuantum.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesInverseConductanceQuantum.generated.js","./dependenciesAny/dependenciesKlitzing.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesKlitzing.generated.js","./dependenciesAny/dependenciesLoschmidt.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesLoschmidt.generated.js","./dependenciesAny/dependenciesMagneticConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMagneticConstant.generated.js","./dependenciesAny/dependenciesMagneticFluxQuantum.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMagneticFluxQuantum.generated.js","./dependenciesAny/dependenciesMolarMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarMass.generated.js","./dependenciesAny/dependenciesMolarMassC12.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarMassC12.generated.js","./dependenciesAny/dependenciesMolarPlanckConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarPlanckConstant.generated.js","./dependenciesAny/dependenciesMolarVolume.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMolarVolume.generated.js","./dependenciesAny/dependenciesNeutronMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNeutronMass.generated.js","./dependenciesAny/dependenciesNuclearMagneton.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesNuclearMagneton.generated.js","./dependenciesAny/dependenciesPlanckCharge.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckCharge.generated.js","./dependenciesAny/dependenciesPlanckConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckConstant.generated.js","./dependenciesAny/dependenciesPlanckLength.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckLength.generated.js","./dependenciesAny/dependenciesPlanckMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckMass.generated.js","./dependenciesAny/dependenciesPlanckTemperature.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckTemperature.generated.js","./dependenciesAny/dependenciesPlanckTime.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesPlanckTime.generated.js","./dependenciesAny/dependenciesProtonMass.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesProtonMass.generated.js","./dependenciesAny/dependenciesQuantumOfCirculation.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesQuantumOfCirculation.generated.js","./dependenciesAny/dependenciesReducedPlanckConstant.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesReducedPlanckConstant.generated.js","./dependenciesAny/dependenciesRydberg.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRydberg.generated.js","./dependenciesAny/dependenciesSackurTetrode.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSackurTetrode.generated.js","./dependenciesAny/dependenciesSecondRadiation.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSecondRadiation.generated.js","./dependenciesAny/dependenciesSpeedOfLight.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSpeedOfLight.generated.js","./dependenciesAny/dependenciesStefanBoltzmann.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStefanBoltzmann.generated.js","./dependenciesAny/dependenciesThomsonCrossSection.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesThomsonCrossSection.generated.js","./dependenciesAny/dependenciesVacuumImpedance.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVacuumImpedance.generated.js","./dependenciesAny/dependenciesWeakMixingAngle.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesWeakMixingAngle.generated.js","./dependenciesAny/dependenciesWienDisplacement.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesWienDisplacement.generated.js","./dependenciesAny/dependenciesApplyTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesApplyTransform.generated.js","./dependenciesAny/dependenciesColumnTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesColumnTransform.generated.js","./dependenciesAny/dependenciesFilterTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesFilterTransform.generated.js","./dependenciesAny/dependenciesForEachTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesForEachTransform.generated.js","./dependenciesAny/dependenciesIndexTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesIndexTransform.generated.js","./dependenciesAny/dependenciesMapTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMapTransform.generated.js","./dependenciesAny/dependenciesMaxTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMaxTransform.generated.js","./dependenciesAny/dependenciesMeanTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMeanTransform.generated.js","./dependenciesAny/dependenciesMinTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesMinTransform.generated.js","./dependenciesAny/dependenciesRangeTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRangeTransform.generated.js","./dependenciesAny/dependenciesRowTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesRowTransform.generated.js","./dependenciesAny/dependenciesSubsetTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSubsetTransform.generated.js","./dependenciesAny/dependenciesConcatTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesConcatTransform.generated.js","./dependenciesAny/dependenciesStdTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesStdTransform.generated.js","./dependenciesAny/dependenciesSumTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesSumTransform.generated.js","./dependenciesAny/dependenciesVarianceTransform.generated":"../node_modules/mathjs/src/entry/dependenciesAny/dependenciesVarianceTransform.generated.js","./allFactoriesAny.js":"../node_modules/mathjs/src/entry/allFactoriesAny.js"}],"../node_modules/mathjs/src/utils/polyfills.js":[function(require,module,exports) {
// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5
// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)
// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
Number.isFinite = Number.isFinite || function (value) {
  return typeof value === 'number' && isFinite(value);
}; // Polyfill for IE 11
// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN


Number.isNaN = Number.isNaN || function (value) {
  return value !== value; // eslint-disable-line no-self-compare
};
},{}],"../node_modules/tiny-emitter/index.js":[function(require,module,exports) {
function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;
module.exports.TinyEmitter = E;

},{}],"../node_modules/mathjs/src/utils/emitter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mixin = mixin;

var _tinyEmitter = _interopRequireDefault(require("tiny-emitter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
 * @param {Object} obj
 * @return {Object} obj
 */
function mixin(obj) {
  // create event emitter
  const emitter = new _tinyEmitter.default(); // bind methods to obj (we don't want to expose the emitter.e Array...)

  obj.on = emitter.on.bind(emitter);
  obj.off = emitter.off.bind(emitter);
  obj.once = emitter.once.bind(emitter);
  obj.emit = emitter.emit.bind(emitter);
  return obj;
}
},{"tiny-emitter":"../node_modules/tiny-emitter/index.js"}],"../node_modules/mathjs/src/core/function/import.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importFactory = importFactory;

var _is = require("../../utils/is");

var _factory = require("../../utils/factory");

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _ArgumentsError = require("../../error/ArgumentsError");

var _log = require("../../utils/log");

function importFactory(typed, load, math, importedFactories) {
  /**
   * Import functions from an object or a module.
   *
   * This function is only available on a mathjs instance created using `create`.
   *
   * Syntax:
   *
   *    math.import(functions)
   *    math.import(functions, options)
   *
   * Where:
   *
   * - `functions: Object`
   *   An object with functions or factories to be imported.
   * - `options: Object` An object with import options. Available options:
   *   - `override: boolean`
   *     If true, existing functions will be overwritten. False by default.
   *   - `silent: boolean`
   *     If true, the function will not throw errors on duplicates or invalid
   *     types. False by default.
   *   - `wrap: boolean`
   *     If true, the functions will be wrapped in a wrapper function
   *     which converts data types like Matrix to primitive data types like Array.
   *     The wrapper is needed when extending math.js with libraries which do not
   *     support these data type. False by default.
   *
   * Examples:
   *
   *    import { create, all } from 'mathjs'
   *    import * as numbers from 'numbers'
   *
   *    // create a mathjs instance
   *    const math = create(all)
   *
   *    // define new functions and variables
   *    math.import({
   *      myvalue: 42,
   *      hello: function (name) {
   *        return 'hello, ' + name + '!'
   *      }
   *    })
   *
   *    // use the imported function and variable
   *    math.myvalue * 2               // 84
   *    math.hello('user')             // 'hello, user!'
   *
   *    // import the npm module 'numbers'
   *    // (must be installed first with `npm install numbers`)
   *    math.import(numbers, {wrap: true})
   *
   *    math.fibonacci(7) // returns 13
   *
   * @param {Object | Array} functions  Object with functions to be imported.
   * @param {Object} [options]          Import options.
   */
  function mathImport(functions, options) {
    const num = arguments.length;

    if (num !== 1 && num !== 2) {
      throw new _ArgumentsError.ArgumentsError('import', num, 1, 2);
    }

    if (!options) {
      options = {};
    }

    function flattenImports(flatValues, value, name) {
      if ((0, _object.isLegacyFactory)(value)) {
        // legacy factories don't always have a name,
        // let's not handle them via the new flatValues
        _importLegacyFactory(value, options);
      } else if (Array.isArray(value)) {
        value.forEach(item => flattenImports(flatValues, item));
      } else if (typeof value === 'object') {
        for (const name in value) {
          if (value.hasOwnProperty(name)) {
            flattenImports(flatValues, value[name], name);
          }
        }
      } else if ((0, _factory.isFactory)(value) || name !== undefined) {
        const flatName = (0, _factory.isFactory)(value) ? isTransformFunctionFactory(value) ? value.fn + '.transform' : // TODO: this is ugly
        value.fn : name; // we allow importing the same function twice if it points to the same implementation

        if ((0, _object.hasOwnProperty)(flatValues, flatName) && flatValues[flatName] !== value && !options.silent) {
          throw new Error('Cannot import "' + flatName + '" twice');
        }

        flatValues[flatName] = value;
      } else {
        if (!options.silent) {
          throw new TypeError('Factory, Object, or Array expected');
        }
      }
    }

    const flatValues = {};
    flattenImports(flatValues, functions);

    for (const name in flatValues) {
      if (flatValues.hasOwnProperty(name)) {
        // console.log('import', name)
        const value = flatValues[name];

        if ((0, _factory.isFactory)(value)) {
          // we ignore name here and enforce the name of the factory
          // maybe at some point we do want to allow overriding it
          // in that case we can implement an option overrideFactoryNames: true
          _importFactory(value, options);
        } else if (isSupportedType(value)) {
          _import(name, value, options);
        } else {
          if (!options.silent) {
            throw new TypeError('Factory, Object, or Array expected');
          }
        }
      }
    }
  }
  /**
   * Add a property to the math namespace
   * @param {string} name
   * @param {*} value
   * @param {Object} options  See import for a description of the options
   * @private
   */


  function _import(name, value, options) {
    // TODO: refactor this function, it's to complicated and contains duplicate code
    if (options.wrap && typeof value === 'function') {
      // create a wrapper around the function
      value = _wrap(value);
    } // turn a plain function with a typed-function signature into a typed-function


    if (hasTypedFunctionSignature(value)) {
      value = typed(name, {
        [value.signature]: value
      });
    }

    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
      if (options.override) {
        // give the typed function the right name
        value = typed(name, value.signatures);
      } else {
        // merge the existing and typed function
        value = typed(math[name], value);
      }

      math[name] = value;
      delete importedFactories[name];

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (math[name] === undefined || options.override) {
      math[name] = value;
      delete importedFactories[name];

      _importTransform(name, value);

      math.emit('import', name, function resolver() {
        return value;
      });
      return;
    }

    if (!options.silent) {
      throw new Error('Cannot import "' + name + '": already exists');
    }
  }

  function _importTransform(name, value) {
    if (value && typeof value.transform === 'function') {
      math.expression.transform[name] = value.transform;

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value.transform;
      }
    } else {
      // remove existing transform
      delete math.expression.transform[name];

      if (allowedInExpressions(name)) {
        math.expression.mathWithTransform[name] = value;
      }
    }
  }

  function _deleteTransform(name) {
    delete math.expression.transform[name];

    if (allowedInExpressions(name)) {
      math.expression.mathWithTransform[name] = math[name];
    } else {
      delete math.expression.mathWithTransform[name];
    }
  }
  /**
   * Create a wrapper a round an function which converts the arguments
   * to their primitive values (like convert a Matrix to Array)
   * @param {Function} fn
   * @return {Function} Returns the wrapped function
   * @private
   */


  function _wrap(fn) {
    const wrapper = function wrapper() {
      const args = [];

      for (let i = 0, len = arguments.length; i < len; i++) {
        const arg = arguments[i];
        args[i] = arg && arg.valueOf();
      }

      return fn.apply(math, args);
    };

    if (fn.transform) {
      wrapper.transform = fn.transform;
    }

    return wrapper;
  }
  /**
   * Import an instance of a factory into math.js
   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
   * @param {Object} options  See import for a description of the options
   * @private
   */
  // TODO: _importLegacyFactory is deprecated since v6.0.0, clean up some day


  function _importLegacyFactory(factory, options) {
    (0, _log.warnOnce)('Factories of type { name, factory } are deprecated since v6. ' + 'Please create your factory functions using the math.factory function.');

    if (typeof factory.name === 'string') {
      const name = factory.name;
      const existingTransform = name in math.expression.transform;
      const namespace = factory.path ? (0, _object.traverse)(math, factory.path) : math;
      const existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

      const resolver = function () {
        let instance = load(factory);

        if (instance && typeof instance.transform === 'function') {
          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
        }

        if (isTypedFunction(existing) && isTypedFunction(instance)) {
          if (options.override) {// replace the existing typed function (nothing to do)
          } else {
            // merge the existing and new typed function
            instance = typed(existing, instance);
          }

          return instance;
        }

        if (existing === undefined || options.override) {
          return instance;
        }

        if (options.silent) {
          return existing;
        } else {
          throw new Error('Cannot import "' + name + '": already exists');
        }
      };

      if (factory.lazy !== false) {
        (0, _object.lazy)(namespace, name, resolver);

        if (existingTransform) {
          _deleteTransform(name);
        } else {
          if (factory.path === 'expression.transform' || legacyFactoryAllowedInExpressions(factory)) {
            (0, _object.lazy)(math.expression.mathWithTransform, name, resolver);
          }
        }
      } else {
        namespace[name] = resolver();

        if (existingTransform) {
          _deleteTransform(name);
        } else {
          if (factory.path === 'expression.transform' || legacyFactoryAllowedInExpressions(factory)) {
            math.expression.mathWithTransform[name] = resolver();
          }
        }
      }

      const key = factory.path ? factory.path + '.' + factory.name : factory.name;
      importedFactories[key] = factory;
      math.emit('import', name, resolver, factory.path);
    } else {
      // unnamed factory.
      // no lazy loading
      load(factory);
    }
  }
  /**
   * Import an instance of a factory into math.js
   * @param {function(scope: object)} factory
   * @param {Object} options  See import for a description of the options
   * @param {string} [name=factory.name] Optional custom name
   * @private
   */


  function _importFactory(factory, options, name = factory.fn) {
    if ((0, _array.contains)(name, '.')) {
      throw new Error('Factory name should not contain a nested path. ' + 'Name: ' + JSON.stringify(name));
    }

    const namespace = isTransformFunctionFactory(factory) ? math.expression.transform : math;
    const existingTransform = name in math.expression.transform;
    const existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

    const resolver = function () {
      // collect all dependencies, handle finding both functions and classes and other special cases
      const dependencies = {};
      factory.dependencies.map(_factory.stripOptionalNotation).forEach(dependency => {
        if ((0, _array.contains)(dependency, '.')) {
          throw new Error('Factory dependency should not contain a nested path. ' + 'Name: ' + JSON.stringify(dependency));
        }

        if (dependency === 'math') {
          dependencies.math = math;
        } else if (dependency === 'mathWithTransform') {
          dependencies.mathWithTransform = math.expression.mathWithTransform;
        } else if (dependency === 'classes') {
          // special case for json reviver
          dependencies.classes = math;
        } else {
          dependencies[dependency] = math[dependency];
        }
      });
      let instance =
      /* #__PURE__ */
      factory(dependencies);

      if (instance && typeof instance.transform === 'function') {
        throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
      }

      if (existing === undefined || options.override) {
        return instance;
      }

      if (isTypedFunction(existing) && isTypedFunction(instance)) {
        // merge the existing and new typed function
        return typed(existing, instance);
      }

      if (options.silent) {
        // keep existing, ignore imported function
        return existing;
      } else {
        throw new Error('Cannot import "' + name + '": already exists');
      }
    }; // TODO: add unit test with non-lazy factory


    if (!factory.meta || factory.meta.lazy !== false) {
      (0, _object.lazy)(namespace, name, resolver); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          (0, _object.lazy)(math.expression.mathWithTransform, name, () => namespace[name]);
        }
      }
    } else {
      namespace[name] = resolver(); // FIXME: remove the `if (existing &&` condition again. Can we make sure subset is loaded before subset.transform? (Name collision, and no dependencies between the two)

      if (existing && existingTransform) {
        _deleteTransform(name);
      } else {
        if (isTransformFunctionFactory(factory) || factoryAllowedInExpressions(factory)) {
          (0, _object.lazy)(math.expression.mathWithTransform, name, () => namespace[name]);
        }
      }
    } // TODO: improve factories, store a list with imports instead which can be re-played


    importedFactories[name] = factory;
    math.emit('import', name, resolver);
  }
  /**
   * Check whether given object is a type which can be imported
   * @param {Function | number | string | boolean | null | Unit | Complex} object
   * @return {boolean}
   * @private
   */


  function isSupportedType(object) {
    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || (0, _is.isUnit)(object) || (0, _is.isComplex)(object) || (0, _is.isBigNumber)(object) || (0, _is.isFraction)(object) || (0, _is.isMatrix)(object) || Array.isArray(object);
  }
  /**
   * Test whether a given thing is a typed-function
   * @param {*} fn
   * @return {boolean} Returns true when `fn` is a typed-function
   */


  function isTypedFunction(fn) {
    return typeof fn === 'function' && typeof fn.signatures === 'object';
  }

  function hasTypedFunctionSignature(fn) {
    return typeof fn === 'function' && typeof fn.signature === 'string';
  }

  function allowedInExpressions(name) {
    return !unsafe.hasOwnProperty(name);
  }

  function legacyFactoryAllowedInExpressions(factory) {
    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);
  }

  function factoryAllowedInExpressions(factory) {
    return factory.fn.indexOf('.') === -1 && // FIXME: make checking on path redundant, check on meta data instead
    !unsafe.hasOwnProperty(factory.fn) && (!factory.meta || !factory.meta.isClass);
  }

  function isTransformFunctionFactory(factory) {
    return factory !== undefined && factory.meta !== undefined && factory.meta.isTransformFunction === true || false;
  } // namespaces and functions not available in the parser for safety reasons


  const unsafe = {
    'expression': true,
    'type': true,
    'docs': true,
    'error': true,
    'json': true,
    'chain': true // chain method not supported. Note that there is a unit chain too.

  };
  return mathImport;
}
},{"../../utils/is":"../node_modules/mathjs/src/utils/is.js","../../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../../utils/object":"../node_modules/mathjs/src/utils/object.js","../../utils/array":"../node_modules/mathjs/src/utils/array.js","../../error/ArgumentsError":"../node_modules/mathjs/src/error/ArgumentsError.js","../../utils/log":"../node_modules/mathjs/src/utils/log.js"}],"../node_modules/mathjs/src/core/create.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;

require("./../utils/polyfills");

var _object = require("./../utils/object");

var emitter = _interopRequireWildcard(require("./../utils/emitter"));

var _import = require("./function/import");

var _config = require("./function/config");

var _factory = require("../utils/factory");

var _is = require("../utils/is");

var _array = require("../utils/array");

var _log = require("../utils/log");

var _ArgumentsError = require("../error/ArgumentsError");

var _DimensionError = require("../error/DimensionError");

var _IndexError = require("../error/IndexError");

var _config2 = require("./config");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Create a mathjs instance from given factory functions and optionally config
 *
 * Usage:
 *
 *     const mathjs1 = create({ createAdd, createMultiply, ...})
 *     const config = { number: 'BigNumber' }
 *     const mathjs2 = create(all, config)
 *
 * @param {Object} [factories] An object with factory functions
 *                             The object can contain nested objects,
 *                             all nested objects will be flattened.
 * @param {Object} [config]    Available options:
 *                            {number} epsilon
 *                              Minimum relative difference between two
 *                              compared values, used by all comparison functions.
 *                            {string} matrix
 *                              A string 'Matrix' (default) or 'Array'.
 *                            {string} number
 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
 *                            {number} precision
 *                              The number of significant digits for BigNumbers.
 *                              Not applicable for Numbers.
 *                            {boolean} predictable
 *                              Predictable output type of functions. When true,
 *                              output type depends only on the input types. When
 *                              false (default), output type can vary depending
 *                              on input values. For example `math.sqrt(-4)`
 *                              returns `complex('2i')` when predictable is false, and
 *                              returns `NaN` when true.
 *                            {string} randomSeed
 *                              Random seed for seeded pseudo random number generator.
 *                              Set to null to randomly seed.
 * @returns {Object} Returns a bare-bone math.js instance containing
 *                   functions:
 *                   - `import` to add new functions
 *                   - `config` to change configuration
 *                   - `on`, `off`, `once`, `emit` for events
 */
function create(factories, config) {
  const configInternal = Object.assign({}, _config2.DEFAULT_CONFIG, config); // simple test for ES5 support

  if (typeof Object.create !== 'function') {
    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
  } // create the mathjs instance


  const math = emitter.mixin({
    // only here for backward compatibility for legacy factory functions
    isNumber: _is.isNumber,
    isComplex: _is.isComplex,
    isBigNumber: _is.isBigNumber,
    isFraction: _is.isFraction,
    isUnit: _is.isUnit,
    isString: _is.isString,
    isArray: _is.isArray,
    isMatrix: _is.isMatrix,
    isCollection: _is.isCollection,
    isDenseMatrix: _is.isDenseMatrix,
    isSparseMatrix: _is.isSparseMatrix,
    isRange: _is.isRange,
    isIndex: _is.isIndex,
    isBoolean: _is.isBoolean,
    isResultSet: _is.isResultSet,
    isHelp: _is.isHelp,
    isFunction: _is.isFunction,
    isDate: _is.isDate,
    isRegExp: _is.isRegExp,
    isObject: _is.isObject,
    isNull: _is.isNull,
    isUndefined: _is.isUndefined,
    isAccessorNode: _is.isAccessorNode,
    isArrayNode: _is.isArrayNode,
    isAssignmentNode: _is.isAssignmentNode,
    isBlockNode: _is.isBlockNode,
    isConditionalNode: _is.isConditionalNode,
    isConstantNode: _is.isConstantNode,
    isFunctionAssignmentNode: _is.isFunctionAssignmentNode,
    isFunctionNode: _is.isFunctionNode,
    isIndexNode: _is.isIndexNode,
    isNode: _is.isNode,
    isObjectNode: _is.isObjectNode,
    isOperatorNode: _is.isOperatorNode,
    isParenthesisNode: _is.isParenthesisNode,
    isRangeNode: _is.isRangeNode,
    isSymbolNode: _is.isSymbolNode,
    isChain: _is.isChain
  }); // load config function and apply provided config

  math.config = (0, _config.configFactory)(configInternal, math.emit);
  math.expression = {
    transform: {},
    mathWithTransform: {
      config: math.config
    } // cached factories and instances used by function load

  };
  const legacyFactories = [];
  const legacyInstances = [];
  /**
   * Load a function or data type from a factory.
   * If the function or data type already exists, the existing instance is
   * returned.
   * @param {Function} factory
   * @returns {*}
   */

  function load(factory) {
    if ((0, _factory.isFactory)(factory)) {
      return factory(math);
    }

    const firstProperty = factory[Object.keys(factory)[0]];

    if ((0, _factory.isFactory)(firstProperty)) {
      return firstProperty(math);
    }

    if (!(0, _object.isLegacyFactory)(factory)) {
      console.warn('Factory object with properties `type`, `name`, and `factory` expected', factory);
      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
    }

    const index = legacyFactories.indexOf(factory);
    let instance;

    if (index === -1) {
      // doesn't yet exist
      if (factory.math === true) {
        // pass with math namespace
        instance = factory.factory(math.type, configInternal, load, math.typed, math);
      } else {
        instance = factory.factory(math.type, configInternal, load, math.typed);
      } // append to the cache


      legacyFactories.push(factory);
      legacyInstances.push(instance);
    } else {
      // already existing function, return the cached instance
      instance = legacyInstances[index];
    }

    return instance;
  }

  const importedFactories = {}; // load the import function

  function lazyTyped(...args) {
    return math.typed.apply(math.typed, args);
  }

  math['import'] = (0, _import.importFactory)(lazyTyped, load, math, importedFactories); // listen for changes in config, import all functions again when changed

  math.on('config', () => {
    (0, _object.values)(importedFactories).forEach(factory => {
      if (factory && factory.meta && factory.meta.recreateOnConfigChange) {
        // FIXME: only re-create when the current instance is the same as was initially created
        // FIXME: delete the functions/constants before importing them again?
        math['import'](factory, {
          override: true
        });
      }
    });
  }); // the create function exposed on the mathjs instance is bound to
  // the factory functions passed before

  math.create = create.bind(null, factories); // export factory function

  math.factory = _factory.factory; // import the factory functions like createAdd as an array instead of object,
  // else they will get a different naming (`createAdd` instead of `add`).

  math['import']((0, _object.values)((0, _object.deepFlatten)(factories))); // TODO: deprecated since v6.0.0. Clean up some day

  const movedNames = ['type.isNumber', 'type.isComplex', 'type.isBigNumber', 'type.isFraction', 'type.isUnit', 'type.isString', 'type.isArray', 'type.isMatrix', 'type.isDenseMatrix', 'type.isSparseMatrix', 'type.isCollection', 'type.isRange', 'type.isIndex', 'type.isBoolean', 'type.isResultSet', 'type.isHelp', 'type.isFunction', 'type.isDate', 'type.isRegExp', 'type.isObject', 'type.isNull', 'type.isUndefined', 'type.isAccessorNode', 'type.isArrayNode', 'type.isAssignmentNode', 'type.isBlockNode', 'type.isConditionalNode', 'type.isConstantNode', 'type.isFunctionAssignmentNode', 'type.isFunctionNode', 'type.isIndexNode', 'type.isNode', 'type.isObjectNode', 'type.isOperatorNode', 'type.isParenthesisNode', 'type.isRangeNode', 'type.isSymbolNode', 'type.isChain', 'type.BigNumber', 'type.Chain', 'type.Complex', 'type.Fraction', 'type.Matrix', 'type.DenseMatrix', 'type.SparseMatrix', 'type.Spa', 'type.FibonacciHeap', 'type.ImmutableDenseMatrix', 'type.Index', 'type.Range', 'type.ResultSet', 'type.Unit', 'type.Help', 'type.Parser', 'expression.parse', 'expression.Parser', 'expression.node.AccessorNode', 'expression.node.ArrayNode', 'expression.node.AssignmentNode', 'expression.node.BlockNode', 'expression.node.ConditionalNode', 'expression.node.ConstantNode', 'expression.node.IndexNode', 'expression.node.FunctionAssignmentNode', 'expression.node.FunctionNode', 'expression.node.Node', 'expression.node.ObjectNode', 'expression.node.OperatorNode', 'expression.node.ParenthesisNode', 'expression.node.RangeNode', 'expression.node.RelationalNode', 'expression.node.SymbolNode', 'json.reviver', 'error.ArgumentsError', 'error.DimensionError', 'error.IndexError'];
  movedNames.forEach(fullName => {
    const parts = fullName.split('.');
    const path = (0, _array.initial)(parts);
    const name = (0, _array.last)(parts);
    const obj = (0, _object.traverse)(math, path);
    (0, _object.lazy)(obj, name, () => {
      (0, _log.warnOnce)(`math.${fullName} is moved to math.${name} in v6.0.0. ` + 'Please use the new location instead.');
      return math[name];
    });
  });
  (0, _object.lazy)(math.expression, 'docs', () => {
    throw new Error('math.expression.docs has been moved. ' + 'Please import via "import { docs } from \'mathjs\'"');
  });
  math.ArgumentsError = _ArgumentsError.ArgumentsError;
  math.DimensionError = _DimensionError.DimensionError;
  math.IndexError = _IndexError.IndexError;
  return math;
}
},{"./../utils/polyfills":"../node_modules/mathjs/src/utils/polyfills.js","./../utils/object":"../node_modules/mathjs/src/utils/object.js","./../utils/emitter":"../node_modules/mathjs/src/utils/emitter.js","./function/import":"../node_modules/mathjs/src/core/function/import.js","./function/config":"../node_modules/mathjs/src/core/function/config.js","../utils/factory":"../node_modules/mathjs/src/utils/factory.js","../utils/is":"../node_modules/mathjs/src/utils/is.js","../utils/array":"../node_modules/mathjs/src/utils/array.js","../utils/log":"../node_modules/mathjs/src/utils/log.js","../error/ArgumentsError":"../node_modules/mathjs/src/error/ArgumentsError.js","../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js","./config":"../node_modules/mathjs/src/core/config.js"}],"../node_modules/mathjs/src/core/function/deprecatedImport.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeprecatedImport = createDeprecatedImport;

function createDeprecatedImport() {
  return function deprecatedImport() {
    throw new Error('The global import function is not available anymore in v6.0.0. \n' + 'Please create a mathjs instance if you want to import functions. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.import(...);\n');
  };
}
},{}],"../node_modules/mathjs/src/entry/deprecatedAny.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.error = exports.json = exports.expression = exports.type = exports.deprecatedTypeof = exports.deprecatedVar = exports.deprecatedImport = exports.deprecatedEval = void 0;

var _eval = require("../expression/function/eval");

var _deprecatedImport = require("../core/function/deprecatedImport");

var _variance = require("../function/statistics/variance");

var _typeOf = require("../function/utils/typeOf");

var _is = require("../utils/is");

var _ArgumentsError = require("../error/ArgumentsError");

var _DimensionError = require("../error/DimensionError");

var _IndexError = require("../error/IndexError");

var _object = require("../utils/object");

var _log = require("../utils/log");

var _pureFunctionsAny = require("./pureFunctionsAny.generated");

var _impureFunctionsAny = require("./impureFunctionsAny.generated");

// TODO: deprecated since version 6.0.0. Date: 2019-04-14
// "deprecatedEval" is also exposed as "eval" in the code compiled to ES5+CommonJs
const deprecatedEval =
/* #__PURE__ */
(0, _eval.createDeprecatedEval)({
  evaluate: _impureFunctionsAny.evaluate
}); // "deprecatedImport" is also exposed as "import" in the code compiled to ES5+CommonJs

exports.deprecatedEval = deprecatedEval;
const deprecatedImport =
/* #__PURE__ */
(0, _deprecatedImport.createDeprecatedImport)({}); // "deprecatedVar" is also exposed as "var" in the code compiled to ES5+CommonJs

exports.deprecatedImport = deprecatedImport;
const deprecatedVar =
/* #__PURE__ */
(0, _variance.createDeprecatedVar)({
  variance: _pureFunctionsAny.variance
}); // "deprecatedTypeof" is also exposed as "typeof" in the code compiled to ES5+CommonJs

exports.deprecatedVar = deprecatedVar;
const deprecatedTypeof =
/* #__PURE__ */
(0, _typeOf.createDeprecatedTypeof)({
  typeOf: _pureFunctionsAny.typeOf
});
exports.deprecatedTypeof = deprecatedTypeof;
const type =
/* #__PURE__ */
createDeprecatedProperties('type', {
  isNumber: _is.isNumber,
  isComplex: _is.isComplex,
  isBigNumber: _is.isBigNumber,
  isFraction: _is.isFraction,
  isUnit: _is.isUnit,
  isString: _is.isString,
  isArray: _is.isArray,
  isMatrix: _is.isMatrix,
  isCollection: _is.isCollection,
  isDenseMatrix: _is.isDenseMatrix,
  isSparseMatrix: _is.isSparseMatrix,
  isRange: _is.isRange,
  isIndex: _is.isIndex,
  isBoolean: _is.isBoolean,
  isResultSet: _is.isResultSet,
  isHelp: _is.isHelp,
  isFunction: _is.isFunction,
  isDate: _is.isDate,
  isRegExp: _is.isRegExp,
  isObject: _is.isObject,
  isNull: _is.isNull,
  isUndefined: _is.isUndefined,
  isAccessorNode: _is.isAccessorNode,
  isArrayNode: _is.isArrayNode,
  isAssignmentNode: _is.isAssignmentNode,
  isBlockNode: _is.isBlockNode,
  isConditionalNode: _is.isConditionalNode,
  isConstantNode: _is.isConstantNode,
  isFunctionAssignmentNode: _is.isFunctionAssignmentNode,
  isFunctionNode: _is.isFunctionNode,
  isIndexNode: _is.isIndexNode,
  isNode: _is.isNode,
  isObjectNode: _is.isObjectNode,
  isOperatorNode: _is.isOperatorNode,
  isParenthesisNode: _is.isParenthesisNode,
  isRangeNode: _is.isRangeNode,
  isSymbolNode: _is.isSymbolNode,
  isChain: _is.isChain,
  BigNumber: _pureFunctionsAny.BigNumber,
  Chain: _impureFunctionsAny.Chain,
  Complex: _pureFunctionsAny.Complex,
  Fraction: _pureFunctionsAny.Fraction,
  Matrix: _pureFunctionsAny.Matrix,
  DenseMatrix: _pureFunctionsAny.DenseMatrix,
  SparseMatrix: _pureFunctionsAny.SparseMatrix,
  Spa: _pureFunctionsAny.Spa,
  FibonacciHeap: _pureFunctionsAny.FibonacciHeap,
  ImmutableDenseMatrix: _pureFunctionsAny.ImmutableDenseMatrix,
  Index: _pureFunctionsAny.Index,
  Range: _pureFunctionsAny.Range,
  ResultSet: _pureFunctionsAny.ResultSet,
  Unit: _pureFunctionsAny.Unit,
  Help: _impureFunctionsAny.Help,
  Parser: _impureFunctionsAny.Parser
});
exports.type = type;
const expression =
/* #__PURE__ */
createDeprecatedProperties('expression', {
  parse: _impureFunctionsAny.parse,
  Parser: _impureFunctionsAny.Parser,
  node: createDeprecatedProperties('expression.node', {
    AccessorNode: _impureFunctionsAny.AccessorNode,
    ArrayNode: _impureFunctionsAny.ArrayNode,
    AssignmentNode: _impureFunctionsAny.AssignmentNode,
    BlockNode: _impureFunctionsAny.BlockNode,
    ConditionalNode: _impureFunctionsAny.ConditionalNode,
    ConstantNode: _impureFunctionsAny.ConstantNode,
    IndexNode: _impureFunctionsAny.IndexNode,
    FunctionAssignmentNode: _impureFunctionsAny.FunctionAssignmentNode,
    FunctionNode: _impureFunctionsAny.FunctionNode,
    Node: _impureFunctionsAny.Node,
    ObjectNode: _impureFunctionsAny.ObjectNode,
    OperatorNode: _impureFunctionsAny.OperatorNode,
    ParenthesisNode: _impureFunctionsAny.ParenthesisNode,
    RangeNode: _impureFunctionsAny.RangeNode,
    RelationalNode: _impureFunctionsAny.RelationalNode,
    SymbolNode: _impureFunctionsAny.SymbolNode
  })
});
exports.expression = expression;
const json =
/* #__PURE__ */
createDeprecatedProperties('json', {
  reviver: _impureFunctionsAny.reviver
});
exports.json = json;
const error =
/* #__PURE__ */
createDeprecatedProperties('error', {
  ArgumentsError: _ArgumentsError.ArgumentsError,
  DimensionError: _DimensionError.DimensionError,
  IndexError: _IndexError.IndexError
});
exports.error = error;

function createDeprecatedProperties(path, props) {
  const obj = {};
  Object.keys(props).forEach(name => {
    (0, _object.lazy)(obj, name, () => {
      (0, _log.warnOnce)(`math.${path}.${name} is moved to math.${name} in v6.0.0. ` + 'Please use the new location instead.');
      return props[name];
    });
  });
  return obj;
}
},{"../expression/function/eval":"../node_modules/mathjs/src/expression/function/eval.js","../core/function/deprecatedImport":"../node_modules/mathjs/src/core/function/deprecatedImport.js","../function/statistics/variance":"../node_modules/mathjs/src/function/statistics/variance.js","../function/utils/typeOf":"../node_modules/mathjs/src/function/utils/typeOf.js","../utils/is":"../node_modules/mathjs/src/utils/is.js","../error/ArgumentsError":"../node_modules/mathjs/src/error/ArgumentsError.js","../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js","../utils/object":"../node_modules/mathjs/src/utils/object.js","../utils/log":"../node_modules/mathjs/src/utils/log.js","./pureFunctionsAny.generated":"../node_modules/mathjs/src/entry/pureFunctionsAny.generated.js","./impureFunctionsAny.generated":"../node_modules/mathjs/src/entry/impureFunctionsAny.generated.js"}],"../node_modules/mathjs/src/entry/mainAny.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  config: true,
  IndexError: true,
  DimensionError: true,
  ArgumentsError: true,
  create: true,
  factory: true
};
Object.defineProperty(exports, "config", {
  enumerable: true,
  get: function () {
    return _configReadonly.config;
  }
});
Object.defineProperty(exports, "IndexError", {
  enumerable: true,
  get: function () {
    return _IndexError.IndexError;
  }
});
Object.defineProperty(exports, "DimensionError", {
  enumerable: true,
  get: function () {
    return _DimensionError.DimensionError;
  }
});
Object.defineProperty(exports, "ArgumentsError", {
  enumerable: true,
  get: function () {
    return _ArgumentsError.ArgumentsError;
  }
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.create;
  }
});
Object.defineProperty(exports, "factory", {
  enumerable: true,
  get: function () {
    return _factory.factory;
  }
});

var _configReadonly = require("./configReadonly");

var _pureFunctionsAny = require("./pureFunctionsAny.generated");

Object.keys(_pureFunctionsAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pureFunctionsAny[key];
    }
  });
});

var _impureFunctionsAny = require("./impureFunctionsAny.generated");

Object.keys(_impureFunctionsAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _impureFunctionsAny[key];
    }
  });
});

var _typeChecks = require("./typeChecks");

Object.keys(_typeChecks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _typeChecks[key];
    }
  });
});

var _IndexError = require("../error/IndexError");

var _DimensionError = require("../error/DimensionError");

var _ArgumentsError = require("../error/ArgumentsError");

var _dependenciesAny = require("./dependenciesAny.generated");

Object.keys(_dependenciesAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dependenciesAny[key];
    }
  });
});

var _factoriesAny = require("../factoriesAny");

Object.keys(_factoriesAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _factoriesAny[key];
    }
  });
});

var _create = require("../core/create");

var _factory = require("../utils/factory");

var _deprecatedAny = require("./deprecatedAny");

Object.keys(_deprecatedAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deprecatedAny[key];
    }
  });
});
},{"./configReadonly":"../node_modules/mathjs/src/entry/configReadonly.js","./pureFunctionsAny.generated":"../node_modules/mathjs/src/entry/pureFunctionsAny.generated.js","./impureFunctionsAny.generated":"../node_modules/mathjs/src/entry/impureFunctionsAny.generated.js","./typeChecks":"../node_modules/mathjs/src/entry/typeChecks.js","../error/IndexError":"../node_modules/mathjs/src/error/IndexError.js","../error/DimensionError":"../node_modules/mathjs/src/error/DimensionError.js","../error/ArgumentsError":"../node_modules/mathjs/src/error/ArgumentsError.js","./dependenciesAny.generated":"../node_modules/mathjs/src/entry/dependenciesAny.generated.js","../factoriesAny":"../node_modules/mathjs/src/factoriesAny.js","../core/create":"../node_modules/mathjs/src/core/create.js","../utils/factory":"../node_modules/mathjs/src/utils/factory.js","./deprecatedAny":"../node_modules/mathjs/src/entry/deprecatedAny.js"}],"../node_modules/mathjs/main/es6/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mainAny = require("../../src/entry/mainAny");

Object.keys(_mainAny).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mainAny[key];
    }
  });
});
},{"../../src/entry/mainAny":"../node_modules/mathjs/src/entry/mainAny.js"}],"math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var mathjs = _interopRequireWildcard(require("mathjs"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const math = mathjs.create(mathjs.all);
math.import({
  vector: function (arr) {
    if (arr.length < 2) throw new Error('vector should have at least two components!');else if (arr.length > 3) throw new Error('vector could not have more than 3 components!');else if (arr.length == 2) arr.push(0); // make the thirs components zero for 2d vectors

    let vec = mathjs.matrix(arr);
    vec.x = arr[0];
    vec.y = arr[1];
    vec.z = arr[2];
    return vec;
  }
});
var _default = math;
exports.default = _default;
},{"mathjs":"../node_modules/mathjs/main/es6/index.js"}],"../node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"index.scss":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _plot = _interopRequireDefault(require("./plot"));

var d3 = _interopRequireWildcard(require("d3"));

var _math = _interopRequireDefault(require("./math"));

require("./index.scss");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var color_pool = d3.scaleOrdinal(d3.schemeCategory10);
var vecs = [],
    colors = [];

for (let i = 0; i < 1; i++) {
  vecs.push(_math.default.vector([-20 * Math.random(), 80 * Math.random()]));
  vecs.push(_math.default.vector([50 * Math.random(), -100 * Math.random()]));
  vecs.push(_math.default.vector([-50 * Math.random(), -80 * Math.random()]));
  colors.push('#000000');
  colors.push(color_pool(10 + i));
  colors.push(color_pool(Math.random() * 100));
}

var data = {
  'vecs1': vecs
};
var vec_config_list = [];
var i = 0;
vecs.forEach(() => {
  let vec_config = {
    'stroke_color': colors[i],
    'stroke_width': 1.6,
    'opacity': 1
  };
  vec_config_list.push(vec_config);
  i += 1;
});
var h_grids_conf = {
  'opacity': .2,
  'stroke_color': '#0000ff'
};
var v_grids_conf = {
  'opacity': .2,
  'stroke_color': '#0000ff'
};
var plt = (0, _plot.default)(); //draw: vecId = null, axisRescale = false, axis = true, grids = true, vec_config_list = null, h_grids_conf = null, v_grids_conf = null) {

plt.set_svg_configs().add_data(data).draw('vecs1', false, true, true).grid_porperties_transition(h_grids_conf, v_grids_conf);
var queue = plt.methodQueue;

(async function () {
  await Promise.all([queue.xAxis(), queue.yAxis()]);
  await Promise.all([queue.xGrids(), queue.yGrids()]); // await queue.xGrids();
  // await queue.yGrids();

  await queue.vecs_creation();
  await Promise.all([queue.vGrids_transition(), queue.hGrids_transition()]);
})(); //setTimeout(()=>{plt.grid_porperties_transition(h_grids_conf, v_grids_conf);}, 1000)
},{"./plot":"plot.js","d3":"../node_modules/d3/build/d3.js","./math":"math.js","./index.scss":"index.scss"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "61983" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/src.e31bb0bc.js.map